{"version":3,"file":"11.iframe.bundle.js","sources":["webpack:///./src/yggio-connected-components/device-view-pane/sub-components/contextual-parameters.tsx"],"sourcesContent":["import React from 'react';\nimport JsonView from 'react-json-view';\nimport _ from 'lodash';\nimport {UseMutationResult} from 'react-query';\n\nimport {useLocalState} from '../../../hooks';\nimport {contextMapState} from '../state';\nimport {Device} from '../../../types';\nimport {isFormValid} from '../../../utils/form-wizard';\n\nimport {FlexColWrapper, FlexWrapper, MarginWrapper} from '../../../global/styled';\nimport {NoDataText} from '../styled';\nimport Button from '../../../components/button';\nimport TextField from '../../../components/text-field';\n\ntype Updates = {updates: Partial<Device>, deviceId: string};\n\ninterface Props {\n  deviceItem: Device;\n  updateDeviceMutation: UseMutationResult<string, unknown, Updates, unknown>;\n  t: (key: string) => string;\n}\n\nconst ContextualParameters = (props: Props) => {\n\n  const contextMapForm = useLocalState(contextMapState);\n\n  const handleUpdateDeviceContextMap = () => {\n    const key = contextMapForm.formInputs.contextMapKey.value as string;\n    const value = contextMapForm.formInputs.contextMapValue.value as string;\n    const updates: Partial<Device> = {\n      contextMap: {\n        ...props.deviceItem?.contextMap,\n        [key]: value,\n      }\n    };\n    props.updateDeviceMutation.mutate({updates, deviceId: props.deviceItem._id});\n    contextMapForm.setInputValue('contextMapKey', '');\n    contextMapForm.setInputValue('contextMapValue', '');\n  };\n\n  return (\n    <FlexColWrapper>\n      <p>Add a contextual parameter:</p>\n      <FlexWrapper style={{alignItems: 'center'}}>\n        <TextField\n          width={'100px'}\n          margin={'0 5px 0 0'}\n          name={'contextMapKey'}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => contextMapForm.setInputValue('contextMapKey', evt.target.value)}\n          placeholder={'Key'}\n          value={contextMapForm.formInputs.contextMapKey.value as string}\n        />\n        <TextField\n          width={'100px'}\n          margin={'0 5px 0 0'}\n          name={'contextMapValue'}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => contextMapForm.setInputValue('contextMapValue', evt.target.value)}\n          placeholder={'Value'}\n          value={contextMapForm.formInputs.contextMapValue.value as string}\n        />\n        <Button\n          disabled={!isFormValid(contextMapForm.formInputs)}\n          onClick={handleUpdateDeviceContextMap}\n          color={'green'}\n          content={'Add'}\n          height={'35px'}\n\n        />\n      </FlexWrapper>\n      <h6 style={{color: 'red', marginBottom: '30px'}}>\n        {\n          contextMapForm.formInputs.contextMapKey.value &&\n          !contextMapForm.formInputs.contextMapKey.validation.isValid && (\n            contextMapForm.formInputs.contextMapKey.validation.message\n          )\n        }\n      </h6>\n      <p>{props.t('titles.contextualParameters')}</p>\n      {\n        _.isEmpty(props.deviceItem.contextMap) && (\n          // @ts-ignore component not yet typed\n          <MarginWrapper margin={'0 0 40px'}>\n            <NoDataText>{props.t('phrases.noContextualParametersAdded')}</NoDataText>\n          </MarginWrapper>\n        )\n      }\n      {\n        props.deviceItem.contextMap && !_.isEmpty(props.deviceItem.contextMap) && (\n          <JsonView\n            src={props.deviceItem.contextMap}\n            onEdit={({updated_src: updatedData}) => {\n              const updates = {\n                contextMap: {\n                  ...props.deviceItem.contextMap,\n                  ...updatedData,\n                }\n              };\n              props.updateDeviceMutation.mutate({updates, deviceId: props.deviceItem._id});\n            }}\n            onDelete={({name}) => {\n              const updates = {\n                contextMap: {\n                  ..._.omit(props.deviceItem.contextMap, name!),\n                }\n              };\n              props.updateDeviceMutation.mutate({updates, deviceId: props.deviceItem._id});\n            }}\n          />\n        )\n      }\n    </FlexColWrapper>\n  );\n};\n\nexport default ContextualParameters;\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}