{"version":3,"file":"main.iframe.bundle.js","sources":["webpack:///./.storybook/preview.tsx","webpack:///./.storybook/preview.tsx-generated-config-entry.js","webpack:///./generated-stories-entry.js","webpack:///\\.)(","webpack:///\\.)(?e2be","webpack:///./src/api/access-rights/hooks.ts","webpack:///./src/api/access-rights/index.ts","webpack:///./src/api/access-rights/requests.ts","webpack:///./src/api/auth/hooks.ts","webpack:///./src/api/auth/index.ts","webpack:///./src/api/auth/requests.ts","webpack:///./src/api/calculations/hooks.ts","webpack:///./src/api/calculations/index.ts","webpack:///./src/api/calculations/requests.ts","webpack:///./src/api/calculations/selectors.ts","webpack:///./src/api/channels/hooks.ts","webpack:///./src/api/channels/index.ts","webpack:///./src/api/channels/requests.ts","webpack:///./src/api/client-apps/hooks.ts","webpack:///./src/api/client-apps/index.ts","webpack:///./src/api/client-apps/requests.ts","webpack:///./src/api/devices/hooks.ts","webpack:///./src/api/devices/index.ts","webpack:///./src/api/devices/requests.ts","webpack:///./src/api/devices/selectors.ts","webpack:///./src/api/index.ts","webpack:///./src/api/jobs/hooks.ts","webpack:///./src/api/jobs/index.ts","webpack:///./src/api/jobs/requests.ts","webpack:///./src/api/jobs/selectors.ts","webpack:///./src/api/locations/hooks.ts","webpack:///./src/api/locations/index.ts","webpack:///./src/api/locations/requests.ts","webpack:///./src/api/organizations/hooks.ts","webpack:///./src/api/organizations/index.ts","webpack:///./src/api/organizations/requests.ts","webpack:///./src/api/request-body-size-limit/hooks.ts","webpack:///./src/api/request-body-size-limit/index.ts","webpack:///./src/api/request-body-size-limit/requests.ts","webpack:///./src/api/request.ts","webpack:///./src/api/rules/hooks.ts","webpack:///./src/api/rules/index.ts","webpack:///./src/api/rules/requests.ts","webpack:///./src/api/rules/selectors.ts","webpack:///./src/api/token.ts","webpack:///./src/api/translators/hooks.ts","webpack:///./src/api/translators/index.ts","webpack:///./src/api/translators/requests.ts","webpack:///./src/api/user/hooks.ts","webpack:///./src/api/user/index.ts","webpack:///./src/api/user/requests.ts","webpack:///./src/api/users/hooks.ts","webpack:///./src/api/users/index.ts","webpack:///./src/api/users/requests.ts","webpack:///./src/api/websocket/constants.ts","webpack:///./src/api/websocket/hooks.ts","webpack:///./src/api/websocket/index.ts","webpack:///./src/assets/images/apps/citygrid/icon.png","webpack:///./src/assets/images/apps/citygrid/index.ts","webpack:///./src/assets/images/apps/citygrid/screenshot1.png","webpack:///./src/assets/images/apps/citygrid/screenshot2.png","webpack:///./src/assets/images/apps/citygrid/screenshot3.png","webpack:///./src/assets/images/apps/client-app.png","webpack:///./src/assets/images/apps/control-panel-v1/icon.png","webpack:///./src/assets/images/apps/control-panel-v1/index.ts","webpack:///./src/assets/images/apps/grafana/icon.png","webpack:///./src/assets/images/apps/grafana/index.ts","webpack:///./src/assets/images/apps/grafana/screenshot1.png","webpack:///./src/assets/images/apps/grafana/screenshot2.png","webpack:///./src/assets/images/apps/grafana/screenshot3.png","webpack:///./src/assets/images/apps/grafana/screenshot4.jpeg","webpack:///./src/assets/images/apps/grafana/screenshot5.jpeg","webpack:///./src/assets/images/apps/index.ts","webpack:///./src/assets/images/apps/leanheat/icon.png","webpack:///./src/assets/images/apps/leanheat/index.ts","webpack:///./src/assets/images/apps/leanheat/screenshot1.png","webpack:///./src/assets/images/apps/leanheat/screenshot2.jpg","webpack:///./src/assets/images/apps/leanheat/screenshot3.jpg","webpack:///./src/assets/images/apps/location-manager/icon.png","webpack:///./src/assets/images/apps/location-manager/index.ts","webpack:///./src/assets/images/apps/node-red/icon.png","webpack:///./src/assets/images/apps/node-red/index.ts","webpack:///./src/assets/images/apps/node-red/screenshot1.png","webpack:///./src/assets/images/apps/node-red/screenshot2.png","webpack:///./src/assets/images/apps/node-red/screenshot3.png","webpack:///./src/assets/images/apps/power-bi/icon.png","webpack:///./src/assets/images/apps/power-bi/index.ts","webpack:///./src/assets/images/apps/power-bi/screenshot1.jpg","webpack:///./src/assets/images/apps/power-bi/screenshot2.jpg","webpack:///./src/assets/images/apps/power-bi/screenshot3.jpg","webpack:///./src/assets/images/apps/power-bi/screenshot4.jpg","webpack:///./src/assets/images/apps/power-bi/screenshot5.jpg","webpack:///./src/assets/images/apps/qrlio/icon.png","webpack:///./src/assets/images/apps/qrlio/index.ts","webpack:///./src/assets/images/apps/qrlio/screenshot1.png","webpack:///./src/assets/images/apps/qrlio/screenshot2.png","webpack:///./src/assets/images/apps/qrlio/screenshot3.png","webpack:///./src/assets/images/apps/qrlio/screenshot4.png","webpack:///./src/assets/images/apps/qrlio/screenshot5.png","webpack:///./src/assets/images/apps/rule-engine/icon.png","webpack:///./src/assets/images/apps/rule-engine/index.ts","webpack:///./src/assets/images/apps/smart-visualizer/icon.png","webpack:///./src/assets/images/apps/smart-visualizer/index.ts","webpack:///./src/assets/images/apps/smart-visualizer/screenshot1.png","webpack:///./src/assets/images/apps/smart-visualizer/screenshot2.png","webpack:///./src/assets/images/apps/smart-visualizer/screenshot3.png","webpack:///./src/assets/images/apps/smart-visualizer/screenshot4.png","webpack:///./src/assets/images/apps/smart-visualizer/screenshot5.png","webpack:///./src/assets/images/apps/strips-config/icon.png","webpack:///./src/assets/images/apps/strips-config/index.ts","webpack:///./src/assets/images/apps/terminio/icon.png","webpack:///./src/assets/images/apps/terminio/index.ts","webpack:///./src/assets/images/apps/terminio/screenshot1.png","webpack:///./src/assets/images/apps/terminio/screenshot2.png","webpack:///./src/assets/images/apps/terminio/screenshot3.png","webpack:///./src/assets/images/apps/terminio/screenshot4.png","webpack:///./src/assets/images/defaults/blueprint.jpg","webpack:///./src/assets/images/defaults/device-icon.png","webpack:///./src/assets/images/defaults/location-icon.png","webpack:///./src/assets/images/picture.svg","webpack:///./src/assets/images/sort-down.svg","webpack:///./src/assets/images/sort-none.svg","webpack:///./src/assets/images/sort-up.svg","webpack:///./src/assets/images/yggio-icon.svg","webpack:///./src/components/breadcrumbs/breadcrumbs.stories.js","webpack:///./src/components/breadcrumbs/index.js","webpack:///./src/components/breadcrumbs/styled.js","webpack:///./src/components/button/button.stories.js","webpack:///./src/components/button/constants.js","webpack:///./src/components/button/index.js","webpack:///./src/components/button/styled.js","webpack:///./src/components/chip/chip.stories.js","webpack:///./src/components/chip/constant.js","webpack:///./src/components/chip/index.js","webpack:///./src/components/chip/styled.js","webpack:///./src/components/collapsible/collapsible.stories.js","webpack:///./src/components/collapsible/constants.js","webpack:///./src/components/collapsible/index.js","webpack:///./src/components/collapsible/styled.js","webpack:///./src/components/container-box/constants.js","webpack:///./src/components/container-box/container-box.stories.js","webpack:///./src/components/container-box/index.js","webpack:///./src/components/container-box/styled.js","webpack:///./src/components/data-viewer/constants.js","webpack:///./src/components/data-viewer/data-viewer.stories.js","webpack:///./src/components/data-viewer/index.js","webpack:///./src/components/data-viewer/styles.js","webpack:///./src/components/date-picker/constants.js","webpack:///./src/components/date-picker/datepicker.stories.js","webpack:///./src/components/date-picker/index.js","webpack:///./src/components/date-picker/styled.js","webpack:///./src/components/image-previewer/image-previewer.stories.js","webpack:///./src/components/image-previewer/index.js","webpack:///./src/components/image-previewer/styled.js","webpack:///./src/components/info-box/constants.js","webpack:///./src/components/info-box/index.js","webpack:///./src/components/info-box/info-box.stories.js","webpack:///./src/components/info-box/styled.js","webpack:///./src/components/input-decorator/constants.js","webpack:///./src/components/input-decorator/index.js","webpack:///./src/components/input-decorator/input-decorator.stories.js","webpack:///./src/components/input-decorator/styled.js","webpack:///./src/components/input/index.js","webpack:///./src/components/input/input.stories.js","webpack:///./src/components/input/styled.js","webpack:///./src/components/interactive-layer/index.js","webpack:///./src/components/interactive-layer/state.js","webpack:///./src/components/interactive-layer/styled.js","webpack:///./src/components/logo-spinner/constants.js","webpack:///./src/components/logo-spinner/index.js","webpack:///./src/components/logo-spinner/spinner.stories.js","webpack:///./src/components/logo-spinner/styled.js","webpack:///./src/components/logo/constants.js","webpack:///./src/components/logo/index.js","webpack:///./src/components/logo/logo.stories.js","webpack:///./src/components/logo/styled.js","webpack:///./src/components/map/index.js","webpack:///./src/components/map/state.js","webpack:///./src/components/map/styled.js","webpack:///./src/components/map/sub-components/index.js","webpack:///./src/components/map/sub-components/map-buttons.js","webpack:///./src/components/map/utils.js","webpack:///./src/components/modal/constants.js","webpack:///./src/components/modal/index.js","webpack:///./src/components/modal/modal.stories.js","webpack:///./src/components/modal/state.js","webpack:///./src/components/number-field/constants.js","webpack:///./src/components/number-field/index.js","webpack:///./src/components/number-field/numberfield.stories.js","webpack:///./src/components/number-field/styled.js","webpack:///./src/components/pagination/constants.js","webpack:///./src/components/pagination/index.js","webpack:///./src/components/pagination/pagination.stories.js","webpack:///./src/components/pagination/styled.js","webpack:///./src/components/progress-bar/constants.js","webpack:///./src/components/progress-bar/index.js","webpack:///./src/components/progress-bar/progress-bar.stories.js","webpack:///./src/components/progress-bar/styled.js","webpack:///./src/components/radio-button/constants.js","webpack:///./src/components/radio-button/index.js","webpack:///./src/components/radio-button/radio-button.stories.js","webpack:///./src/components/radio-button/styled.js","webpack:///./src/components/segmented-control/constants.js","webpack:///./src/components/segmented-control/index.js","webpack:///./src/components/segmented-control/segmented-control.stories.js","webpack:///./src/components/segmented-control/styled.js","webpack:///./src/components/select/index.js","webpack:///./src/components/select/select.stories.js","webpack:///./src/components/select/styles.js","webpack:///./src/components/sidebar-components/constants.js","webpack:///./src/components/sidebar-components/effects.js","webpack:///./src/components/sidebar-components/index.js","webpack:///./src/components/sidebar-components/sidebar-components.stories.js","webpack:///./src/components/sidebar-components/state.js","webpack:///./src/components/sidebar-components/styled.js","webpack:///./src/components/sort-button/index.js","webpack:///./src/components/sort-button/sort-button.stories.js","webpack:///./src/components/sort-button/styled.js","webpack:///./src/components/spinner/constants.js","webpack:///./src/components/spinner/index.js","webpack:///./src/components/spinner/spinner.stories.js","webpack:///./src/components/spinner/styled.js","webpack:///./src/components/step-progress-bar/children/bar.js","webpack:///./src/components/step-progress-bar/children/step-descriptions.js","webpack:///./src/components/step-progress-bar/constants.js","webpack:///./src/components/step-progress-bar/index.js","webpack:///./src/components/step-progress-bar/step-progress-bar.stories.js","webpack:///./src/components/step-progress-bar/styled.js","webpack:///./src/components/tab-bar/components/index.js","webpack:///./src/components/tab-bar/components/tab/index.js","webpack:///./src/components/tab-bar/index.js","webpack:///./src/components/tab-bar/state.js","webpack:///./src/components/tab-bar/styled.js","webpack:///./src/components/tab-bar/tab-bar.stories.js","webpack:///./src/components/table/table.stories.js","webpack:///./src/components/text-area/constants.js","webpack:///./src/components/text-area/index.js","webpack:///./src/components/text-area/styled.js","webpack:///./src/components/text-area/text-area.stories.js","webpack:///./src/components/text-field/constants.js","webpack:///./src/components/text-field/index.js","webpack:///./src/components/text-field/select.stories.js","webpack:///./src/components/text-field/styled.js","webpack:///./src/components/time-interval/constants.js","webpack:///./src/components/time-interval/effects.js","webpack:///./src/components/time-interval/index.js","webpack:///./src/components/time-interval/state.js","webpack:///./src/components/time-interval/styled.js","webpack:///./src/components/time-interval/time-interval.stories.js","webpack:///./src/components/tooltip-anchor/constants.js","webpack:///./src/components/tooltip-anchor/index.js","webpack:///./src/components/tooltip-anchor/styled.js","webpack:///./src/components/tooltip-anchor/tooltop-anchor.stories.js","webpack:///./src/components/translator-selector/effects.js","webpack:///./src/components/translator-selector/index.js","webpack:///./src/components/translator-selector/selectors.js","webpack:///./src/components/translator-selector/state.js","webpack:///./src/components/translator-selector/styled.js","webpack:///./src/components/translator-selector/translator-selector.stories.js","webpack:///./src/components/tree-view/index.js","webpack:///./src/components/tree-view/state.js","webpack:///./src/components/tree-view/styled.js","webpack:///./src/components/tree-view/sub-components.js","webpack:///./src/components/tree-view/tree-view.stories.js","webpack:///./src/components/yggio-links/basic-styled.js","webpack:///./src/components/yggio-links/funky-link.js","webpack:///./src/components/yggio-links/index.js","webpack:///./src/components/yggio-links/yggio-link.stories.js","webpack:///./src/constants/access-constants.js","webpack:///./src/constants/apps.ts","webpack:///./src/constants/colors.js","webpack:///./src/constants/connectivity-states.js","webpack:///./src/constants/device-measurements.js","webpack:///./src/constants/device-types.js","webpack:///./src/constants/env-constants.js","webpack:///./src/constants/errors.js","webpack:///./src/constants/external-app-urls.ts","webpack:///./src/constants/http-methods.ts","webpack:///./src/constants/image-name-spaces.js","webpack:///./src/constants/images.js","webpack:///./src/constants/index.js","webpack:///./src/constants/key-codes.js","webpack:///./src/constants/location.js","webpack:///./src/constants/map.js","webpack:///./src/constants/measurements.js","webpack:///./src/constants/request-methods.js","webpack:///./src/constants/resource-scopes.js","webpack:///./src/constants/resource-types.js","webpack:///./src/constants/routing-constants.js","webpack:///./src/constants/separators.js","webpack:///./src/constants/socket.js","webpack:///./src/constants/state.js","webpack:///./src/constants/status-types.js","webpack:///./src/constants/toast-types.js","webpack:///./src/constants/web-constants.js","webpack:///./src/decorators.tsx","webpack:///./src/global/components.js","webpack:///./src/global/styled.js","webpack:///./src/hocs/index.js","webpack:///./src/hocs/with-context.js","webpack:///./src/hocs/with-effect.js","webpack:///./src/hocs/with-events.js","webpack:///./src/hocs/with-language.js","webpack:///./src/hocs/with-omit-props.js","webpack:///./src/hocs/with-persistent-state.js","webpack:///./src/hocs/with-query-client.tsx","webpack:///./src/hocs/with-reselect.js","webpack:///./src/hocs/with-state.js","webpack:///./src/hooks/index.js","webpack:///./src/hooks/use-interval.js","webpack:///./src/hooks/use-local-state.ts","webpack:///./src/hooks/use-persistent-state.js","webpack:///./src/hooks/use-selector.js","webpack:///./src/hooks/use-trace-update.js","webpack:///./src/index.js","webpack:///./src/utils/create-action-dispatches.js","webpack:///./src/utils/create-id-keyed-object.ts","webpack:///./src/utils/create-reducer.js","webpack:///./src/utils/form-wizard/config-validator.ts","webpack:///./src/utils/form-wizard/external-utils.ts","webpack:///./src/utils/form-wizard/form-wizard.stories.js","webpack:///./src/utils/form-wizard/generate-form.ts","webpack:///./src/utils/form-wizard/index.ts","webpack:///./src/utils/form-wizard/lib/input-validators.ts","webpack:///./src/utils/form-wizard/state/constants.ts","webpack:///./src/utils/form-wizard/state/index.ts","webpack:///./src/utils/form-wizard/state/validation.ts","webpack:///./src/utils/form-wizard/stories/default/component.js","webpack:///./src/utils/form-wizard/stories/default/config.js","webpack:///./src/utils/form-wizard/stories/default/index.js","webpack:///./src/utils/form-wizard/stories/index.js","webpack:///./src/utils/form-wizard/stories/populate/component.js","webpack:///./src/utils/form-wizard/stories/populate/config.js","webpack:///./src/utils/form-wizard/stories/populate/index.js","webpack:///./src/utils/form-wizard/stories/simple/component.js","webpack:///./src/utils/form-wizard/stories/simple/config.js","webpack:///./src/utils/form-wizard/stories/simple/index.js","webpack:///./src/utils/form-wizard/stories/visibility-types/component.js","webpack:///./src/utils/form-wizard/stories/visibility-types/config.js","webpack:///./src/utils/form-wizard/stories/visibility-types/index.js","webpack:///./src/utils/general.js","webpack:///./src/utils/generate-uuid.js","webpack:///./src/utils/get-device-status.js","webpack:///./src/utils/get-request-error-message.ts","webpack:///./src/utils/images.js","webpack:///./src/utils/index.js","webpack:///./src/utils/memoized-inputs-checker.js","webpack:///./src/utils/object-to-query-string.js","webpack:///./src/utils/organization-utils.js","webpack:///./src/utils/parse-csv-file-too-json.ts","webpack:///./src/utils/resolve-device-type.js","webpack:///./src/utils/state-logger.js","webpack:///./src/utils/translation-prop.js","webpack:///./src/utils/validation.js","webpack:///./src/yggio-components/buttons/icons.js","webpack:///./src/yggio-components/buttons/index.js","webpack:///./src/yggio-components/buttons/styled.js","webpack:///./src/yggio-components/contexutal-parameters-editor/contextual-parameters-editor.stories.js","webpack:///./src/yggio-components/contexutal-parameters-editor/events.js","webpack:///./src/yggio-components/contexutal-parameters-editor/index.js","webpack:///./src/yggio-components/contexutal-parameters-editor/state/form.js","webpack:///./src/yggio-components/contexutal-parameters-editor/state/general.js","webpack:///./src/yggio-components/contexutal-parameters-editor/state/index.js","webpack:///./src/yggio-components/contexutal-parameters-editor/styled.js","webpack:///./src/yggio-components/navbar/constants.js","webpack:///./src/yggio-components/navbar/index.js","webpack:///./src/yggio-components/navbar/navbar.stories.js","webpack:///./src/yggio-components/navbar/state.js","webpack:///./src/yggio-components/navbar/styled.js","webpack:///./src/yggio-components/navbar/sub-components/connect-widget.js","webpack:///./src/yggio-components/navbar/sub-components/docs-widget.js","webpack:///./src/yggio-components/navbar/sub-components/horizontal-menu.js","webpack:///./src/yggio-components/navbar/sub-components/language-widget.js","webpack:///./src/yggio-components/navbar/sub-components/logo.js","webpack:///./src/yggio-components/navbar/sub-components/menu-button.js","webpack:///./src/yggio-components/navbar/sub-components/user-widget.js","webpack:///./src/yggio-components/navbar/sub-components/vertical-menu.js","webpack:///./src/yggio-config.ts","webpack:///./src/yggio-connected-components/app-pane/index.tsx","webpack:///./src/yggio-connected-components/app-pane/styled.ts","webpack:///./src/yggio-connected-components/apps-pane/index.tsx","webpack:///./src/yggio-connected-components/apps-pane/selectors.ts","webpack:///./src/yggio-connected-components/apps-pane/state.ts","webpack:///./src/yggio-connected-components/apps-pane/styled.ts","webpack:///./src/yggio-connected-components/apps-pane/sub-components/app-card.tsx","webpack:///./src/yggio-connected-components/charts-pane/constants.ts","webpack:///./src/yggio-connected-components/charts-pane/events.ts","webpack:///./src/yggio-connected-components/charts-pane/index.tsx","webpack:///./src/yggio-connected-components/charts-pane/selectors.ts","webpack:///./src/yggio-connected-components/charts-pane/state.ts","webpack:///./src/yggio-connected-components/charts-pane/styled.ts","webpack:///./src/yggio-connected-components/charts-pane/sub-components/heading-bar.tsx","webpack:///./src/yggio-connected-components/charts-pane/sub-components/sidebar.tsx","webpack:///./src/yggio-connected-components/charts-viewer/constants.ts","webpack:///./src/yggio-connected-components/charts-viewer/index.tsx","webpack:///./src/yggio-connected-components/charts-viewer/selectors.ts","webpack:///./src/yggio-connected-components/charts-viewer/state.ts","webpack:///./src/yggio-connected-components/charts-viewer/styled.ts","webpack:///./src/yggio-connected-components/charts-viewer/sub-components/chart.tsx","webpack:///./src/yggio-connected-components/charts-viewer/sub-components/legend.tsx","webpack:///./src/yggio-connected-components/charts-viewer/sub-components/options.tsx","webpack:///./src/yggio-connected-components/charts-viewer/sub-components/tooltip-content.tsx","webpack:///./src/yggio-connected-components/charts-viewer/utils.ts","webpack:///./src/yggio-connected-components/dashboard-pane/index.tsx","webpack:///./src/yggio-connected-components/dashboard-pane/queries.ts","webpack:///./src/yggio-connected-components/dashboard-pane/styled.ts","webpack:///./src/yggio-connected-components/dashboard-pane/sub-components/count-box.tsx","webpack:///./src/yggio-connected-components/device-list-pane/constants.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/calculation-pane/constants.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/calculation-pane/index.tsx","webpack:///./src/yggio-connected-components/device-list-pane/containers/calculation-pane/selectors.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/calculation-pane/state.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/calculation-pane/styled.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/calculation-pane/utils.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/configuration-pane/constants.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/configuration-pane/index.tsx","webpack:///./src/yggio-connected-components/device-list-pane/containers/configuration-pane/selectors.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/configuration-pane/state.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/configuration-pane/styled.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/configuration-pane/utils.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/deletion-pane/constants.tsx","webpack:///./src/yggio-connected-components/device-list-pane/containers/deletion-pane/index.tsx","webpack:///./src/yggio-connected-components/device-list-pane/containers/deletion-pane/state.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/deletion-pane/styled.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/editing-pane/index.tsx","webpack:///./src/yggio-connected-components/device-list-pane/containers/editing-pane/state.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/editing-pane/styled.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/report-interval-pane/index.tsx","webpack:///./src/yggio-connected-components/device-list-pane/containers/report-interval-pane/state.ts","webpack:///./src/yggio-connected-components/device-list-pane/containers/tools-pane/effects.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/tools-pane/events.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/tools-pane/index.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/tools-pane/selectors.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/tools-pane/state.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/tools-pane/styled.js","webpack:///./src/yggio-connected-components/device-list-pane/containers/tools-pane/utils.js","webpack:///./src/yggio-connected-components/device-list-pane/events.js","webpack:///./src/yggio-connected-components/device-list-pane/index.js","webpack:///./src/yggio-connected-components/device-list-pane/queries.js","webpack:///./src/yggio-connected-components/device-list-pane/selectors.js","webpack:///./src/yggio-connected-components/device-list-pane/state/context-state.js","webpack:///./src/yggio-connected-components/device-list-pane/state/form-state.js","webpack:///./src/yggio-connected-components/device-list-pane/state/general-state.js","webpack:///./src/yggio-connected-components/device-list-pane/state/index.js","webpack:///./src/yggio-connected-components/device-list-pane/state/page-state.js","webpack:///./src/yggio-connected-components/device-list-pane/state/persistent-state.js","webpack:///./src/yggio-connected-components/device-list-pane/styled.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/customize-columns-popup.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/filter-bar.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/heading-bar.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/index.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/selection-bar.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/sidebar.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/table-items.js","webpack:///./src/yggio-connected-components/device-list-pane/sub-components/table.js","webpack:///./src/yggio-connected-components/device-list-pane/utils.js","webpack:///./src/yggio-connected-components/device-view-pane/constants.ts","webpack:///./src/yggio-connected-components/device-view-pane/containers/calculations/index.tsx","webpack:///./src/yggio-connected-components/device-view-pane/containers/index.ts","webpack:///./src/yggio-connected-components/device-view-pane/index.js","webpack:///./src/yggio-connected-components/device-view-pane/selectors.js","webpack:///./src/yggio-connected-components/device-view-pane/state.js","webpack:///./src/yggio-connected-components/device-view-pane/styled.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/access-rights.tsx","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/box2-downlink.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/channels.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/charts.tsx","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/data.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/general-info.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/heading-bar.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/index.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/lora-control.tsx","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/position-selector.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/report-interval.tsx","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/sidebar.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/specifications.js","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/tools.tsx","webpack:///./src/yggio-connected-components/device-view-pane/sub-components/translators.js","webpack:///./src/yggio-connected-components/device-view-pane/utils.js","webpack:///./src/yggio-connected-components/image-uploader/image-uploader.stories.js","webpack:///./src/yggio-connected-components/image-uploader/index.js","webpack:///./src/yggio-connected-components/image-uploader/state.js","webpack:///./src/yggio-connected-components/image-uploader/styled.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/dropzone/dropzone.stories.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/dropzone/index.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/dropzone/state.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/dropzone/styled.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/image-item/image-item.stories.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/image-item/index.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/image-item/state.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/image-item/styled.js","webpack:///./src/yggio-connected-components/image-uploader/sub-components/index.js","webpack:///./src/yggio-connected-components/navbar-pane/index.tsx","webpack:///./src/yggio-connected-components/navbar-pane/styled.ts","webpack:///./src/yggio-connected-components/navbar-pane/utils.ts","webpack:///./src/yggio-connected-components/rec-device-editor/index.tsx","webpack:///./src/yggio-connected-components/rec-device-editor/selectors.ts","webpack:///./src/yggio-connected-components/rec-device-editor/state.ts","webpack:///./src/yggio-connected-components/rec-device-editor/styled.ts","webpack:///./src/yggio-connected-components/rec-device-editor/sub-components/mounted-section.tsx","webpack:///./src/yggio-connected-components/rec-device-editor/sub-components/mounting-section.tsx","webpack:///./src/yggio-connected-components/rec-device-editor/sub-components/provisioning-section.tsx","webpack:///./src/yggio-connected-components/unauthenticated-user-pane/index.tsx","webpack:///./src/yggio-connected-components/unauthenticated-user-pane/styled.ts","webpack:///./src/yggio-connected-components/unauthenticated-user-pane/unauthorized-user-pane.stories.js","webpack:///./src/yggio-context/connectivity-engine.js","webpack:///./src/yggio-context/constants.js","webpack:///./src/yggio-context/index.js","webpack:///./src/yggio-context/network/http-api/access-rights.js","webpack:///./src/yggio-context/network/http-api/apps.js","webpack:///./src/yggio-context/network/http-api/auth.js","webpack:///./src/yggio-context/network/http-api/calculations.js","webpack:///./src/yggio-context/network/http-api/channels.js","webpack:///./src/yggio-context/network/http-api/devices.js","webpack:///./src/yggio-context/network/http-api/images.js","webpack:///./src/yggio-context/network/http-api/index.js","webpack:///./src/yggio-context/network/http-api/jobs.js","webpack:///./src/yggio-context/network/http-api/locations.js","webpack:///./src/yggio-context/network/http-api/organizations.js","webpack:///./src/yggio-context/network/http-api/providers.js","webpack:///./src/yggio-context/network/http-api/request-body-size-limit.js","webpack:///./src/yggio-context/network/http-api/rules.js","webpack:///./src/yggio-context/network/http-api/translators.js","webpack:///./src/yggio-context/network/http-api/users.js","webpack:///./src/yggio-context/network/http-api/version.js","webpack:///./src/yggio-context/network/http-request.js","webpack:///./src/yggio-context/network/socketio.js","webpack:///./src/yggio-context/network/yggio-token.js","webpack:///./src/yggio-context/with-yggio.js","webpack:///./src/yggio-context/yggio-message-toaster/index.js","webpack:///./src/yggio-context/yggio-message-toaster/yggio-message-toaster.stories.js","webpack:///./src/yggio-context/yggio-state/api-state.redux.js","webpack:///./src/yggio-context/yggio-state/app-history.redux.js","webpack:///./src/yggio-context/yggio-state/connectivity.redux.js","webpack:///./src/yggio-context/yggio-state/core-settings.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/access-rights.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/apps.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/auth.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/calculations.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/channels.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/device-commands.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/device-details.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/device-subscriptions.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/device-total-count.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/devices.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/images.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/index.js","webpack:///./src/yggio-context/yggio-state/database.redux/jobs.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/locations.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/organizations.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/providers.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/rules.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/translators.redux.js","webpack:///./src/yggio-context/yggio-state/database.redux/users.redux.js","webpack:///./src/yggio-context/yggio-state/index.js","webpack:///./src/yggio-context/yggio-state/message-stack.redux.js","webpack:///./src/yggio-context/yggio-token-monitor.js","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/constants.ts","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/installation-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/installation-pane/styled.ts","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/result-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/result-pane/selectors.ts","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/result-pane/styled.ts","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/constants.ts","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/selectors.ts","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/styled.ts","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/sub-components/error-info-box.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/sub-components/file-uploader.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/sub-components/instructions.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/upload-file-pane/sub-components/success-info-box.tsx","webpack:///./src/yggio-managers/device-installation-manager/batch-mode-route/utils.ts","webpack:///./src/yggio-managers/device-installation-manager/constants.ts","webpack:///./src/yggio-managers/device-installation-manager/mode-selection-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/mode-selection-pane/styled.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/constants.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/details-pane/events.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/details-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/details-pane/queries.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/details-pane/selectors.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/details-pane/styled.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/device-type-selection-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/events.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/generic-pane/events.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/generic-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/lora-pane/constants.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/lora-pane/events.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/lora-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/lora-pane/queries.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/lora-pane/selectors.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/lora-pane/sub-components.tsx","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/queries.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/result-pane/index.tsx","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/result-pane/styled.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/selectors.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/state/forms/details.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/state/forms/device-type.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/state/forms/generic.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/state/forms/lora.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/state/forms/translator.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/state/index.ts","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/translator-pane/effects.js","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/translator-pane/events.js","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/translator-pane/index.js","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/translator-pane/selectors.js","webpack:///./src/yggio-managers/device-installation-manager/single-mode-route/translator-pane/styled.js","webpack:///./src/yggio-managers/device-installation-manager/state.ts","webpack:///./src/yggio-managers/device-installation-manager/styled.ts","webpack:///./src/yggio-managers/device-installation-manager/sub-components.tsx","webpack:///./src/yggio-managers/device-manager/styled.js","webpack:///./src/yggio-managers/device-manager/sub-components.js","webpack:///./src/yggio-managers/location-manager/layer-creator/events.js","webpack:///./src/yggio-managers/location-manager/layer-creator/index.js","webpack:///./src/yggio-managers/location-manager/layer-creator/state.js","webpack:///./src/yggio-managers/location-manager/layer-creator/styled.js","webpack:///./src/yggio-managers/location-manager/layer-editor/events.js","webpack:///./src/yggio-managers/location-manager/layer-editor/index.js","webpack:///./src/yggio-managers/location-manager/layer-editor/selectors.js","webpack:///./src/yggio-managers/location-manager/layer-editor/state.js","webpack:///./src/yggio-managers/location-manager/layer-editor/styled.js","webpack:///./src/yggio-managers/location-manager/location-creator/events.js","webpack:///./src/yggio-managers/location-manager/location-creator/index.js","webpack:///./src/yggio-managers/location-manager/location-creator/state.js","webpack:///./src/yggio-managers/location-manager/location-creator/styled.js","webpack:///./src/yggio-managers/location-manager/location-editor/events.js","webpack:///./src/yggio-managers/location-manager/location-editor/index.js","webpack:///./src/yggio-managers/location-manager/location-editor/selectors.js","webpack:///./src/yggio-managers/location-manager/location-editor/state.js","webpack:///./src/yggio-managers/location-manager/location-editor/styled.js","webpack:///./src/yggio-managers/location-manager/location/components/control.js","webpack:///./src/yggio-managers/location-manager/location/components/index.js","webpack:///./src/yggio-managers/location-manager/location/components/layer.js","webpack:///./src/yggio-managers/location-manager/location/components/popup.js","webpack:///./src/yggio-managers/location-manager/location/components/removal-zone.js","webpack:///./src/yggio-managers/location-manager/location/components/table.js","webpack:///./src/yggio-managers/location-manager/location/index.tsx","webpack:///./src/yggio-managers/location-manager/location/selectors.js","webpack:///./src/yggio-managers/location-manager/location/state.js","webpack:///./src/yggio-managers/location-manager/location/styled.js","webpack:///./src/yggio-managers/location-manager/location/utils.js","webpack:///./src/yggio-managers/location-manager/locations/index.tsx","webpack:///./src/yggio-managers/location-manager/locations/styled.js","webpack:///./src/yggio-managers/location-manager/locations/sub-components/index.js","webpack:///./src/yggio-managers/location-manager/locations/sub-components/table.js","webpack:///./src/yggio-managers/organization-manager/constants.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/create-unit-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/create-unit-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/edit-unit-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/edit-unit-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-add-member-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-add-member-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-add-member-pane/sub-components.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-devices-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-devices-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-devices-pane/sub-components.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-members-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-members-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-members-pane/sub-components.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-subunits-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-subunits-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-summary-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-summary-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/containers/unit-tab-bar/index.js","webpack:///./src/yggio-managers/organization-manager/organization-unit/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/create-member-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/create-member-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/create-organization-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/create-organization-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/edit-organization-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/edit-organization-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-devices-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-devices-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-devices-pane/sub-components.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-members-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-members-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-members-pane/sub-components.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-sidebar/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-sidebar/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-summary-pane/effects.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-summary-pane/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-summary-pane/styled.js","webpack:///./src/yggio-managers/organization-manager/organization-view/containers/organization-tab-bar/index.js","webpack:///./src/yggio-managers/organization-manager/organization-view/index.js","webpack:///./src/yggio-managers/organization-manager/organizations-list-pane/index.tsx","webpack:///./src/yggio-managers/organization-manager/organizations-list-pane/selectors.ts","webpack:///./src/yggio-managers/organization-manager/organizations-list-pane/styled.ts","webpack:///./storybook-init-framework-entry.js","webpack:///./util.inspect (ignored)"],"sourcesContent":["import React from 'react';\nimport {Toaster} from 'react-hot-toast';\n\nconst parameters = {\n  options: {\n    showPanel: true,\n    panelPosition: 'right',\n  },\n};\n\nconst ToasterDecorator = (storyFn) => (\n  <>\n    <Toaster position={'bottom-left'} />\n    {storyFn()}\n  </>\n);\n\nconst decorators = [ToasterDecorator];\n\nexport {\n  parameters,\n  decorators,\n};\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgs, addArgTypes, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/home/pixal/dev/yggio/.yarn/__virtual__/@storybook-client-api-virtual-ff6a88ce33/0/cache/@storybook-client-api-npm-6.5.9-c3b4358cc1-90c8f84615.zip/node_modules/@storybook/client-api';\nimport * as config from '/home/pixal/dev/yggio/storm/shared-modules/yggio-react-components/.storybook/preview.tsx';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n      {\n        return addArgs(value);\n      }\n\n    case 'argTypes':\n      {\n        return addArgTypes(value);\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case '__namedExportsOrder':\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.js)$/),require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.tsx)$/)], module, false);","var map = {\n\t\"./components/breadcrumbs/breadcrumbs.stories.js\": \"./src/components/breadcrumbs/breadcrumbs.stories.js\",\n\t\"./components/button/button.stories.js\": \"./src/components/button/button.stories.js\",\n\t\"./components/chip/chip.stories.js\": \"./src/components/chip/chip.stories.js\",\n\t\"./components/collapsible/collapsible.stories.js\": \"./src/components/collapsible/collapsible.stories.js\",\n\t\"./components/container-box/container-box.stories.js\": \"./src/components/container-box/container-box.stories.js\",\n\t\"./components/data-viewer/data-viewer.stories.js\": \"./src/components/data-viewer/data-viewer.stories.js\",\n\t\"./components/date-picker/datepicker.stories.js\": \"./src/components/date-picker/datepicker.stories.js\",\n\t\"./components/image-previewer/image-previewer.stories.js\": \"./src/components/image-previewer/image-previewer.stories.js\",\n\t\"./components/info-box/info-box.stories.js\": \"./src/components/info-box/info-box.stories.js\",\n\t\"./components/input-decorator/input-decorator.stories.js\": \"./src/components/input-decorator/input-decorator.stories.js\",\n\t\"./components/input/input.stories.js\": \"./src/components/input/input.stories.js\",\n\t\"./components/logo-spinner/spinner.stories.js\": \"./src/components/logo-spinner/spinner.stories.js\",\n\t\"./components/logo/logo.stories.js\": \"./src/components/logo/logo.stories.js\",\n\t\"./components/modal/modal.stories.js\": \"./src/components/modal/modal.stories.js\",\n\t\"./components/number-field/numberfield.stories.js\": \"./src/components/number-field/numberfield.stories.js\",\n\t\"./components/pagination/pagination.stories.js\": \"./src/components/pagination/pagination.stories.js\",\n\t\"./components/progress-bar/progress-bar.stories.js\": \"./src/components/progress-bar/progress-bar.stories.js\",\n\t\"./components/radio-button/radio-button.stories.js\": \"./src/components/radio-button/radio-button.stories.js\",\n\t\"./components/segmented-control/segmented-control.stories.js\": \"./src/components/segmented-control/segmented-control.stories.js\",\n\t\"./components/select/select.stories.js\": \"./src/components/select/select.stories.js\",\n\t\"./components/sidebar-components/sidebar-components.stories.js\": \"./src/components/sidebar-components/sidebar-components.stories.js\",\n\t\"./components/sort-button/sort-button.stories.js\": \"./src/components/sort-button/sort-button.stories.js\",\n\t\"./components/spinner/spinner.stories.js\": \"./src/components/spinner/spinner.stories.js\",\n\t\"./components/step-progress-bar/step-progress-bar.stories.js\": \"./src/components/step-progress-bar/step-progress-bar.stories.js\",\n\t\"./components/tab-bar/tab-bar.stories.js\": \"./src/components/tab-bar/tab-bar.stories.js\",\n\t\"./components/table/table.stories.js\": \"./src/components/table/table.stories.js\",\n\t\"./components/text-area/text-area.stories.js\": \"./src/components/text-area/text-area.stories.js\",\n\t\"./components/text-field/select.stories.js\": \"./src/components/text-field/select.stories.js\",\n\t\"./components/time-interval/time-interval.stories.js\": \"./src/components/time-interval/time-interval.stories.js\",\n\t\"./components/tooltip-anchor/tooltop-anchor.stories.js\": \"./src/components/tooltip-anchor/tooltop-anchor.stories.js\",\n\t\"./components/translator-selector/translator-selector.stories.js\": \"./src/components/translator-selector/translator-selector.stories.js\",\n\t\"./components/tree-view/tree-view.stories.js\": \"./src/components/tree-view/tree-view.stories.js\",\n\t\"./components/yggio-links/yggio-link.stories.js\": \"./src/components/yggio-links/yggio-link.stories.js\",\n\t\"./utils/form-wizard/form-wizard.stories.js\": \"./src/utils/form-wizard/form-wizard.stories.js\",\n\t\"./yggio-components/contexutal-parameters-editor/contextual-parameters-editor.stories.js\": \"./src/yggio-components/contexutal-parameters-editor/contextual-parameters-editor.stories.js\",\n\t\"./yggio-components/navbar/navbar.stories.js\": \"./src/yggio-components/navbar/navbar.stories.js\",\n\t\"./yggio-connected-components/image-uploader/image-uploader.stories.js\": \"./src/yggio-connected-components/image-uploader/image-uploader.stories.js\",\n\t\"./yggio-connected-components/image-uploader/sub-components/dropzone/dropzone.stories.js\": \"./src/yggio-connected-components/image-uploader/sub-components/dropzone/dropzone.stories.js\",\n\t\"./yggio-connected-components/image-uploader/sub-components/image-item/image-item.stories.js\": \"./src/yggio-connected-components/image-uploader/sub-components/image-item/image-item.stories.js\",\n\t\"./yggio-connected-components/unauthenticated-user-pane/unauthorized-user-pane.stories.js\": \"./src/yggio-connected-components/unauthenticated-user-pane/unauthorized-user-pane.stories.js\",\n\t\"./yggio-context/yggio-message-toaster/yggio-message-toaster.stories.js\": \"./src/yggio-context/yggio-message-toaster/yggio-message-toaster.stories.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src sync recursive ^\\\\.(?:(?:^|\\\\/|(?:(?:(?!(?:^|\\\\/)\\\\.).)*?)\\\\/)(?!\\\\.)(?=.)[^/]*?\\\\.stories\\\\.js)$\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src sync recursive ^\\\\.(?:(?:^|\\\\/|(?:(?:(?!(?:^|\\\\/)\\\\.).)*?)\\\\/)(?!\\\\.)(?=.)[^/]*?\\\\.stories\\\\.tsx)$\";","import {useQuery, useMutation, QueryClient} from 'react-query';\nimport {accessRightsRequests} from '.';\nimport {AccessRightCreationTemplate, AccessRightDeletionTemplate} from './types';\n\ninterface AccessRightsQuery {\n  subjectId: string;\n  select: (data: unknown) => unknown;\n}\n\nconst useAccessRightsSubjectQuery = ({\n  subjectId,\n  select,\n}: AccessRightsQuery) => (\n  useQuery(\n    ['subjectAccessRights'],\n    async () => accessRightsRequests.fetchSubject({subjectId}),\n    {select, enabled: !!subjectId},\n  )\n);\n\nconst useAccessRightsResourceQuery = ({\n  deviceId,\n}: {deviceId: string}) => (\n  useQuery(\n    ['resourceAccessRights'],\n    async () => accessRightsRequests.fetchResource({deviceId}),\n    {\n      enabled: !!deviceId,\n    },\n  )\n);\n\nconst useCreateAccessRight = (queryClient: QueryClient) => useMutation(\n  async (props: AccessRightCreationTemplate) => accessRightsRequests.create(props),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('resourceAccessRights');\n      await queryClient.invalidateQueries('subjectAccessRights');\n    },\n  },\n);\n\nconst useRemoveAccessRight = (queryClient: QueryClient) => useMutation(\n  async (props: AccessRightDeletionTemplate) => accessRightsRequests.remove(props),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('resourceAccessRights');\n      await queryClient.invalidateQueries('subjectAccessRights');\n    },\n  },\n);\n\nexport {\n  useAccessRightsSubjectQuery,\n  useAccessRightsResourceQuery,\n  useCreateAccessRight,\n  useRemoveAccessRight,\n};\n","import * as accessRightsApi from './hooks';\nimport * as accessRightsRequests from './requests';\n\nexport {\n  accessRightsApi,\n  accessRightsRequests,\n};\n","import {request} from '../request';\nimport {\n  RESOURCE_TYPES,\n  HTTP_METHODS,\n} from '../../constants';\nimport {DeviceIdProps} from '../../types';\nimport {AccessRightCreationTemplate, AccessRightDeletionTemplate} from './types';\n\nconst fetchResource = async ({deviceId}: DeviceIdProps) => request({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/${RESOURCE_TYPES.access}`,\n});\n\ninterface SubjectIdProps {\n  subjectId: string;\n}\n\nconst fetchSubject = async ({subjectId}: SubjectIdProps) => request({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${RESOURCE_TYPES.access}/${subjectId}`,\n});\n\nconst create = async ({deviceId, template}: AccessRightCreationTemplate) => request({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/${RESOURCE_TYPES.access}`,\n  data: template,\n});\n\nconst remove = async ({\n  deviceId,\n  scope,\n  userId,\n  subjectType,\n}: AccessRightDeletionTemplate) => request({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/${RESOURCE_TYPES.access}`,\n  params: {scope, userId, subjectType},\n});\n\nexport {\n  fetchResource,\n  fetchSubject,\n  create,\n  remove,\n};\n","import {useQuery} from 'react-query';\nimport {authRequests} from '.';\nimport {AuthCodeProps} from './types';\n\nconst useGetAuthInfo = () => useQuery(\n  ['auth', 'info'],\n  async () => authRequests.getAuthInfo(),\n);\n\ninterface AuthCodeTemplate extends AuthCodeProps {\n  yggioToken?: string;\n}\n\nconst useGetAuthCode = ({\n  code,\n  clientId,\n  redirectionEndpoint,\n  yggioToken,\n}: AuthCodeTemplate) => useQuery(\n  ['auth', 'code'],\n  async () => authRequests.getAuthCode({code, clientId, redirectionEndpoint}),\n  {\n    enabled: !!code && !!clientId && !!redirectionEndpoint && !yggioToken,\n  }\n);\n\nexport {\n  useGetAuthInfo,\n  useGetAuthCode,\n};\n","import * as authApi from './hooks';\nimport * as authRequests from './requests';\n\nexport {\n  authApi,\n  authRequests,\n};\n","import {request} from '../request';\n\nimport {\n  HTTP_METHODS,\n  RESOURCE_TYPES,\n} from '../../constants';\nimport {AuthCodeProps} from './types';\n\ninterface AuthInfo {\n  authorizationEndpoint: string;\n  clientId: string;\n  signoutEndpoint: string;\n  redirectURIs: string[];\n  scope: string;\n}\n\nconst getAuthInfo = async () => request<AuthInfo>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.auth}/info`,\n});\n\ninterface AuthCode {\n  token: string;\n}\n\nconst getAuthCode = async ({\n  code,\n  clientId,\n  redirectionEndpoint,\n}: AuthCodeProps) => request<AuthCode>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.auth}/code`,\n  params: {\n    code,\n    client_id: clientId,\n    redirect_uri: redirectionEndpoint,\n  },\n});\n\nconst getTokenUser = async () => request({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.users}/me`,\n});\n\nexport {\n  getAuthInfo,\n  getAuthCode,\n  getTokenUser,\n};\n","import {useQuery, useMutation, QueryClient} from 'react-query';\nimport {Calculation, CalcType, Interval} from 'src/types';\nimport {calculationsRequests} from '.';\nimport {selectCalculationData} from './selectors';\n\nconst useCalculationsQuery = () => (\n  useQuery(\n    ['calculations'],\n    async () => calculationsRequests.fetch(),\n    {select: selectCalculationData},\n  )\n);\n\ninterface CreateCalculationQuery {\n  data: Omit<Calculation, '_id'>;\n}\n\nconst useCreateCalculation = (queryClient: QueryClient) => useMutation(\n  async ({\n    data\n  }: CreateCalculationQuery) => calculationsRequests.create(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('calculations');\n    }\n  }\n);\n\ninterface PerformCalculationQuery {\n  calculationId: string;\n  calcType: CalcType;\n  interval: Interval\n}\n\nconst usePerformCalculations = (queryClient: QueryClient) => useMutation(\n  async (props: PerformCalculationQuery) => calculationsRequests.perform(\n    props.calculationId,\n    props.calcType,\n    props.interval,\n  ),\n  {\n    onSuccess: async data => {\n      await queryClient.invalidateQueries('device');\n      return data;\n    },\n  }\n);\n\nconst useRemoveCalculation = (queryClient: QueryClient) => useMutation(\n  async (calculationId: string) => calculationsRequests.remove(calculationId),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('calculations');\n    },\n  }\n);\n\nexport {\n  useCalculationsQuery,\n  useCreateCalculation,\n  usePerformCalculations,\n  useRemoveCalculation,\n};\n","import * as calculationsApi from './hooks';\nimport * as calculationsRequests from './requests';\n\nexport {\n  calculationsApi,\n  calculationsRequests,\n};\n","import {request} from '../request';\nimport {\n  HTTP_METHODS,\n  RESOURCE_TYPES,\n} from '../../constants';\nimport {CalcType, Calculation, Calculations, Interval} from '../../types';\n\n// ////\n// basic functionality\n// ////\n\nconst create = async (calculation: Omit<Calculation, '_id'>) => request({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.calculations}`,\n  data: calculation,\n});\n\nconst fetch = async () => request<Calculations>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.calculations\n});\n\nconst get = async (calculationId: string) => request({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.calculations}/${calculationId}`,\n});\n\nconst update = async (updates: Partial<Calculation>) => request({\n  method: HTTP_METHODS.Put,\n  URI: `${RESOURCE_TYPES.calculations}/${updates._id}`,\n  data: updates\n});\n\nconst remove = async (calculationId: string) => request({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.calculations}/${calculationId}`,\n});\n\ninterface PerformCalculationResult {\n  result: number;\n}\n\nconst perform = async (\n  calculationId: string,\n  calcType: CalcType,\n  interval: Interval,\n) => request<PerformCalculationResult>({\n  method: HTTP_METHODS.Put,\n  URI: `${RESOURCE_TYPES.calculations}/${calculationId}/perform`,\n  params: {calcType, interval},\n});\n\n\n// ////\n//  exports\n// ////\n\nexport {\n  fetch,\n  get,\n  update,\n  create,\n  remove,\n  perform,\n};\n","import _ from 'lodash';\nimport {Calculations, IdKeyedCalculations, Calculation} from 'src/types';\n\nconst selectCalculationData = (data: Calculations) => (\n  _.reduce(data, (acc: IdKeyedCalculations, curr: Calculation) => {\n    const i = curr._id;\n    acc[i] = curr;\n    return acc;\n  }, {})\n);\n\nexport {\n  selectCalculationData,\n};\n","import {useQuery, useMutation, QueryClient} from 'react-query';\nimport {Channel} from 'src/types';\nimport {channelsRequests} from '.';\n\nconst useChannelsQuery = (deviceId: string) => useQuery(\n  ['channels'],\n  async () => channelsRequests.get(deviceId),\n);\n\nconst useCreateChannel = (queryClient: QueryClient) => useMutation(\n  async (data: Channel) => channelsRequests.create(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('channels');\n    },\n  },\n);\n\nconst useRemoveChannel = (queryClient: QueryClient) => useMutation(\n  async (channelId: string) => channelsRequests.remove(channelId),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('channels');\n    },\n  },\n);\n\nexport {\n  useChannelsQuery,\n  useCreateChannel,\n  useRemoveChannel,\n};\n","import * as channelsApi from './hooks';\nimport * as channelsRequests from './requests';\n\nexport {\n  channelsApi,\n  channelsRequests,\n};\n","import {request} from '../request';\n\nimport {\n  HTTP_METHODS,\n  RESOURCE_TYPES,\n} from '../../constants';\nimport {Channel} from '../../types';\n\nconst create = async (channel: Channel) => request({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.channels}`,\n  data: channel,\n});\n\nconst get = async (deviceId: string) => request({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.channels}`,\n  params: {\n    iotnode: deviceId,\n    formatReadable: true,\n  }\n});\n\nconst remove = async (channelId: string) => request({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.channels}/${channelId}`,\n});\n\nexport {\n  get,\n  create,\n  remove,\n};\n","import {useQuery} from 'react-query';\n\nimport {clientAppsRequests} from '.';\n\nconst useClientAppsQuery = () => useQuery(\n  ['clientApps'],\n  async () => clientAppsRequests.fetch(),\n  {\n    refetchOnWindowFocus: false,\n  },\n);\n\nexport {\n  useClientAppsQuery,\n};\n","import * as clientAppsApi from './hooks';\nimport * as clientAppsRequests from './requests';\n\nexport {\n  clientAppsApi,\n  clientAppsRequests,\n};\n","import {request} from '../request';\nimport {HTTP_METHODS, RESOURCE_TYPES} from '../../constants';\nimport {ClientApp} from '../../types';\n\nconst fetch = async () => request<ClientApp[]>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.clientApps,\n});\n\nexport {\n  fetch,\n};\n","import _ from 'lodash';\nimport {useQuery, useMutation, QueryClient} from 'react-query';\nimport {toast} from 'react-hot-toast';\n\nimport {devicesRequests} from '.';\nimport {selectDevicesData} from './selectors';\nimport {\n  Device,\n  DeviceCommand,\n  FetchDevicesProps,\n  SelectorType,\n  RealEstateCoreResponse,\n  Devices,\n} from '../../types';\n\n/*\n  Because the usage of WebSockets and real time updates\n  we have decided to just set staleTime to Infinity.\n\n  This leads to react-query fetching data once and never\n  trying to keep it fresh, because that work now falls\n  upon WebSockets.\n*/\nconst defaultOptions = {\n  staleTime: Infinity,\n  refetchOnWindowFocus: false,\n};\n\nconst useNumDevicesQuery = () => (\n  useQuery(\n    ['devices'],\n    async () => devicesRequests.fetchHeaders({limit: 1, offset: 0}),\n    {\n      ...defaultOptions,\n      select: headers => headers['fiware-total-count'],\n    }\n  )\n);\n\ninterface DevicesQuery {\n  params: FetchDevicesProps;\n  select: SelectorType;\n}\n\nconst useDevicesQuery = (props: DevicesQuery) => (\n  useQuery(\n    ['devices', props.params],\n    async () => devicesRequests.fetch(props.params),\n    {\n      ...defaultOptions,\n      keepPreviousData: true,\n      select: data => props.select(data),\n    }\n  )\n);\n\nconst useDevicesPeekQuery = (params: FetchDevicesProps) => (\n  useQuery(\n    ['devices', 'peek', params],\n    async () => devicesRequests.peek(params),\n    {\n      ...defaultOptions,\n    }\n  )\n);\n\nconst useDeviceModelNames = () => (\n  useQuery(\n    ['deviceModelNames'],\n    async () => devicesRequests.getModelNames(),\n    {\n      ...defaultOptions,\n    }\n  )\n);\n\nconst useConnectorsDevicesQuery = () => {\n  const params = {\n    filter: {\n      attributeExists: 'downlinkQueue',\n    },\n  };\n  const devicesQuery = useDevicesQuery({params, select: data => data});\n  const devicesPeekQuery = useDevicesPeekQuery(params);\n  const union = _.unionBy(devicesQuery.data as Devices, devicesPeekQuery.data as Devices, '_id');\n  return union;\n};\n\n\nconst useConnectorDevicesQuery = (connector: string) => {\n  const params = {\n    filter: {\n      matchPattern: {downlinkQueue: connector},\n    },\n  };\n  return useDevicesQuery({params, select: data => data});\n};\n\nconst useDeviceQuery = (props: {deviceId: string}) => (\n  useQuery(\n    ['device', props.deviceId],\n    async () => devicesRequests.fetchOne({deviceId: props.deviceId}),\n    {\n      ...defaultOptions,\n    }\n  )\n);\n\ninterface SeekDevicesQuery {\n  params: {deviceItems: string[]};\n}\n\nconst useSeekDevicesQuery = (props: SeekDevicesQuery) => (\n  useQuery(\n    ['devices', props.params],\n    async () => devicesRequests.seek(props.params),\n    {\n      ...defaultOptions,\n      keepPreviousData: true,\n      select: selectDevicesData,\n      enabled: !!_.size(props.params.deviceItems)\n    }\n  )\n);\n\nconst useStatisticsFieldsQuery = (deviceId: string) => (\n  useQuery(\n    ['devices', 'statisticsFields', deviceId],\n    async () => devicesRequests.getStatisticsFields(deviceId),\n    {\n      ...defaultOptions,\n    }\n  )\n);\n\nconst useCreateDevice = (queryClient: QueryClient) => useMutation(\n  async (data: Partial<Device>) => devicesRequests.create(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('devices');\n    }\n  }\n);\n\ninterface UpdateProps {\n  deviceId: string;\n  updates: Partial<Device>;\n}\n\nconst useUpdateDevice = (queryClient: QueryClient) => useMutation(\n  async ({deviceId, updates}: UpdateProps) => devicesRequests.update({deviceId, updates}),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('devices');\n      await queryClient.invalidateQueries('device');\n    },\n    onError: (err: Error) => {\n      const {message: errorMessage} = err;\n      console.error('Update device error: ', err);\n      toast.error(errorMessage, {id: errorMessage});\n    },\n  }\n);\n\nconst useRemoveDevice = (queryClient: QueryClient) => useMutation(\n  async ({deviceId}: {deviceId: string}) => devicesRequests.remove({deviceId}),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('devices');\n      await queryClient.invalidateQueries('device');\n    }\n  }\n);\n\nconst useCommandDevice = (queryClient: QueryClient) => useMutation(\n  async (data: DeviceCommand) => devicesRequests.sendCommand(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('devices');\n      await queryClient.invalidateQueries('device');\n    },\n  }\n);\n\nconst useBatchCreateDevices = () => useMutation(\n  async (items: Record<string, string>[]) => devicesRequests.batchCreate(items),\n);\n\n// REAL ESTATE CORE HOOKS\n\nconst useRecDataQuery = (connectorId: string, deviceId: string) => useQuery(\n  ['device', deviceId, 'real-estate-core'],\n  async () => {\n    return devicesRequests.getRealEstateCoreData(deviceId);\n  },\n  {\n    ...defaultOptions,\n    enabled: !!connectorId,\n    refetchOnWindowFocus: false,\n    retry: false,\n    meta: {\n      suppressErrorToaster: true,\n    },\n  }\n);\n\nconst useRecRealEstatesQuery = (connectorId: string) => (\n  useQuery(\n    ['rec', 'realEstates'],\n    async () => {\n      const data = {\n        command: 'apiCall',\n        iotnodeId: connectorId,\n        data: {callName: 'getRealEstate'}\n      };\n      return devicesRequests.sendCommand<RealEstateCoreResponse>(data);\n    },\n    {\n      ...defaultOptions,\n      enabled: !!connectorId,\n      refetchOnWindowFocus: false,\n      retry: false,\n    }\n  )\n);\n\nconst useRecBuildingsQuery = (connectorId: string) => (\n  useQuery(\n    ['rec', 'buildings'],\n    async () => {\n      const data = {\n        command: 'apiCall',\n        iotnodeId: connectorId,\n        data: {callName: 'getBuilding'}\n      };\n      return devicesRequests.sendCommand<RealEstateCoreResponse>(data);\n    },\n    {\n      ...defaultOptions,\n      enabled: !!connectorId,\n      refetchOnWindowFocus: false,\n      retry: false,\n    }\n  )\n);\n\nconst useRecStoreysQuery = (connectorId: string) => (\n  useQuery(\n    ['rec', 'storeys'],\n    async () => {\n      const data = {\n        command: 'apiCall',\n        iotnodeId: connectorId,\n        data: {callName: 'getStorey'}\n      };\n      return devicesRequests.sendCommand<RealEstateCoreResponse>(data);\n    },\n    {\n      ...defaultOptions,\n      enabled: !!connectorId,\n      refetchOnWindowFocus: false,\n      retry: false,\n    }\n  )\n);\n\nconst useRecRoomsQuery = (connectorId: string) => (\n  useQuery(\n    ['rec', 'rooms'],\n    async () => {\n      const data = {\n        command: 'apiCall',\n        iotnodeId: connectorId,\n        data: {callName: 'getRoom'}\n      };\n      return devicesRequests.sendCommand<RealEstateCoreResponse>(data);\n    },\n    {\n      ...defaultOptions,\n      enabled: !!connectorId,\n      refetchOnWindowFocus: false,\n      retry: false,\n    }\n  )\n);\n\nconst useProvisionRecDevice = (\n  queryClient: QueryClient,\n  connectorId: string,\n  deviceId: string,\n) => useMutation(\n  async () => {\n    const data = {\n      command: 'createRecDevice',\n      iotnodeId: connectorId,\n      data: {\n        iotnode: deviceId,\n      },\n    };\n    return devicesRequests.sendCommand(data);\n  },\n  {\n    onError: (err: Error) => {\n      const {message: errorMessage} = err;\n      toast.error(errorMessage, {id: errorMessage});\n    },\n    onSuccess: async () => {\n      await queryClient.invalidateQueries(['device', deviceId, 'real-estate-core']);\n    },\n  },\n);\n\ninterface MountRecDeviceParams {\n  realEstateId: string;\n  roomId: string;\n  isCastellumMatilda: boolean;\n}\n\nconst useMountRecDevice = (\n  queryClient: QueryClient,\n  connectorId: string,\n  deviceId: string,\n  recDeviceId?: string,\n) => useMutation(\n  async (params: MountRecDeviceParams) => {\n    const data = {\n      command: 'mountRecDeviceAndCreateChannel',\n      iotnodeId: connectorId,\n      data: {\n        recDeviceId,\n        realEstateId: params.realEstateId,\n        buildingComponentId: params.roomId,\n        isCastellumMatilda: params.isCastellumMatilda,\n      },\n    };\n    return devicesRequests.sendCommand(data);\n  },\n  {\n    onSettled: async () => {\n      await queryClient.invalidateQueries(['device', deviceId, 'real-estate-core']);\n    },\n  }\n);\n\nconst useDismountRecDevice = (\n  queryClient: QueryClient,\n  connectorId: string,\n  deviceId: string,\n) => useMutation(\n  async () => {\n    const data = {\n      command: 'dismountRecDeviceAndDeleteChannel',\n      iotnodeId: connectorId,\n      data: {\n        iotnodeId: deviceId,\n      },\n    };\n    return devicesRequests.sendCommand(data);\n  },\n  {\n    onSettled: async () => {\n      await queryClient.invalidateQueries(['device', deviceId, 'real-estate-core']);\n    },\n  }\n);\n\nexport {\n  useNumDevicesQuery,\n  useDevicesQuery,\n  useConnectorsDevicesQuery,\n  useConnectorDevicesQuery,\n  useDeviceModelNames,\n  useDeviceQuery,\n  useSeekDevicesQuery,\n  useStatisticsFieldsQuery,\n  useCreateDevice,\n  useUpdateDevice,\n  useRemoveDevice,\n  useCommandDevice,\n  useBatchCreateDevices,\n\n  useRecDataQuery,\n  useRecRealEstatesQuery,\n  useRecBuildingsQuery,\n  useRecStoreysQuery,\n  useRecRoomsQuery,\n  useProvisionRecDevice,\n  useMountRecDevice,\n  useDismountRecDevice,\n\n  MountRecDeviceParams,\n};\n","import * as devicesApi from './hooks';\nimport * as devicesRequests from './requests';\n\nexport {\n  devicesApi,\n  devicesRequests,\n};\n","import _ from 'lodash';\nimport {request, requestHeaders} from '../request';\n\nimport {\n  RESOURCE_TYPES,\n  HTTP_METHODS,\n} from '../../constants';\nimport {\n  Device,\n  Devices,\n  DeviceIdProps,\n  DeviceCommand,\n  DeviceCreateData,\n  DeviceModelName,\n  Job,\n} from '../../types';\n\ninterface FetchProps {\n  lastItemOnPage: string;\n  limit: number;\n  offset: number;\n  orderBy: string;\n  filter: object;\n}\n\nconst fetch = async (\n  {\n    lastItemOnPage,\n    limit,\n    offset,\n    orderBy = 'name',\n    filter,\n  }: Partial<FetchProps>\n) => request<Devices>({\n  method: 'get',\n  URI: RESOURCE_TYPES.iotnodes,\n  params: {\n    lastItemOnPage,\n    limit,\n    offset,\n    orderBy,\n    ...filter,\n    options: 'count',\n  },\n});\n\nconst fetchHeaders = async ({offset, limit}: Partial<FetchProps>) => requestHeaders<Devices>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}`,\n  params: {\n    limit,\n    offset,\n    options: 'count',\n  },\n});\n\nconst fetchOne = async ({deviceId}: DeviceIdProps) => request<Device>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}`,\n});\n\nconst peek = async ({filter}: Partial<FetchProps>) => request<Devices>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/peek`,\n  params: {\n    ...filter,\n  },\n});\n\ninterface SeekProps {\n  deviceItems: string[];\n}\n\nconst seek = async ({deviceItems}: SeekProps) => request<Devices>({\n  method: HTTP_METHODS.Put,\n  URI: `${RESOURCE_TYPES.iotnodes}/seek`,\n  data: deviceItems,\n});\n\n\nconst create = async (template: DeviceCreateData) => request<Device>({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.iotnodes}`,\n  data: template,\n});\n\nconst batchCreate = async (template: Record<string, string>[]) => request<Job>({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.iotnodes}/batch`,\n  data: template,\n});\n\ninterface UpdateProps extends DeviceIdProps {\n  updates: Partial<Device>;\n}\n\nconst update = async ({deviceId, updates}: UpdateProps) => request<UpdateProps>({\n  method: HTTP_METHODS.Put,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}`,\n  data: updates,\n});\n\nconst remove = async ({deviceId}: DeviceIdProps) => request<DeviceIdProps>({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}`,\n});\n\nconst removeMany = async (deviceIds: string[]) => {\n  const removeMany = _.map(deviceIds, async id => (\n    request({\n      method: HTTP_METHODS.Delete,\n      URI: `${RESOURCE_TYPES.iotnodes}/${id}`,\n    })\n  ));\n  await Promise.all(removeMany);\n};\n\nconst sendCommand = async <R>(data: DeviceCommand) => request<R>({\n  method: HTTP_METHODS.Put,\n  URI: `${RESOURCE_TYPES.iotnodes}/command`,\n  data,\n});\n\nconst getModelNames = async () => request<DeviceModelName[]>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/models`,\n});\n\ninterface DataPoint {\n  time: string;\n  value: number;\n}\n\ntype Data = DataPoint[];\n\nconst getStatistics = async (\n  deviceId: string,\n  measurement: string,\n  start: number,\n  end: number,\n  distance: number | null,\n) => request<Data>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/stats`,\n  params: {measurement, start, end, distance},\n});\n\nconst getStatisticsFields = async (deviceId: string) => request<string[]>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/stats/fields`,\n});\n\ninterface RealEstateCoreData {\n  _id: string;\n  deviceId: string;\n  iotnode: string;\n  isMountedInBuildingComponent: {'@id': string};\n  observations: object;\n  sensors: object;\n}\n\nconst getRealEstateCoreData = async (deviceId: string) => request<RealEstateCoreData>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/real-estate-core`,\n});\n\nexport {\n  fetch,\n  fetchHeaders,\n  create,\n  batchCreate,\n  peek,\n  seek,\n  fetchOne,\n  update,\n  remove,\n  removeMany,\n  sendCommand,\n  getModelNames,\n  getStatistics,\n  getStatisticsFields,\n  getRealEstateCoreData,\n};\n","import _ from 'lodash';\nimport {Devices, Device, IdKeyedDevices} from 'src/types';\n\nconst selectDevicesData = (data: Devices) => (\n  _.reduce(data, (acc: IdKeyedDevices, curr: Device) => {\n    const i = curr._id;\n    acc[i] = curr;\n    return acc;\n  }, {})\n);\n\nexport {\n  selectDevicesData,\n};\n","import {request} from './request';\n\nimport {userApi, userRequests} from './user';\nimport {devicesApi, devicesRequests} from './devices';\nimport {calculationsApi, calculationsRequests} from './calculations';\nimport {accessRightsApi, accessRightsRequests} from './access-rights';\nimport {locationsRequests, locationsApi} from './locations';\nimport {organizationsRequests, organizationsApi} from './organizations';\nimport {channelsApi, channelsRequests} from './channels';\nimport {usersApi, usersRequests} from './users';\nimport {rulesApi, rulesRequests} from './rules';\nimport {translatorsApi, translatorsRequests} from './translators';\nimport {authApi, authRequests} from './auth';\nimport {clientAppsApi, clientAppsRequests} from './client-apps';\nimport {requestBodySizeLimitRequests, requestBodySizeLimitApi} from './request-body-size-limit';\nimport {jobApi, jobRequests} from './jobs';\n\nimport {getYggioToken, setYggioToken, removeYggioToken, getUserId} from './token';\n\nimport {WebSocket} from './websocket';\n\nexport {\n  request,\n\n  userApi,\n  userRequests,\n\n  devicesApi,\n  devicesRequests,\n\n  calculationsApi,\n  calculationsRequests,\n\n  accessRightsApi,\n  accessRightsRequests,\n\n  locationsApi,\n  locationsRequests,\n\n  organizationsRequests,\n  organizationsApi,\n\n  channelsApi,\n  channelsRequests,\n\n  usersApi,\n  usersRequests,\n\n  rulesApi,\n  rulesRequests,\n\n  translatorsApi,\n  translatorsRequests,\n\n  authApi,\n  authRequests,\n\n  jobApi,\n  jobRequests,\n\n  clientAppsApi,\n  clientAppsRequests,\n\n  getYggioToken,\n  setYggioToken,\n  removeYggioToken,\n  getUserId,\n\n  WebSocket,\n\n  requestBodySizeLimitRequests,\n  requestBodySizeLimitApi,\n\n};\n","import {useQuery, useMutation, QueryClient} from 'react-query';\nimport {toast} from 'react-hot-toast';\n\nimport {getRequestErrorMessage} from '../../utils';\nimport {DeviceCommands, Job} from '../../types';\nimport {jobRequests} from '.';\nimport {selectJob} from './selectors';\n\nconst useJob = (jobId?: string) => useQuery(\n  ['job', jobId],\n  async () => jobRequests.get(jobId!),\n  {\n    enabled: !!jobId,\n    select: selectJob,\n    refetchInterval: 2000,\n  }\n);\n\nconst useDeviceCommandsJob = (queryClient: QueryClient) => useMutation(\n  async (template: DeviceCommands) => jobRequests.createDeviceCommandsJob(template),\n  {\n    onSuccess: async (result: Job) => {\n      await queryClient.invalidateQueries('job');\n      return result;\n    },\n    onError: (err: Error) => {\n      toast.error(getRequestErrorMessage(err));\n    },\n  }\n);\n\nconst useRemoveDevicesJob = (queryClient: QueryClient) => useMutation(\n  async (deviceIds: string[]) => jobRequests.removeDevicesJob(deviceIds),\n  {\n    onSuccess: async (result: Job) => {\n      await queryClient.invalidateQueries('job');\n      return result;\n    },\n    onError: (err: Error) => {\n      toast.error(getRequestErrorMessage(err));\n    },\n  }\n);\n\nexport {\n  useJob,\n  useDeviceCommandsJob,\n  useRemoveDevicesJob,\n};\n","import * as jobApi from './hooks';\nimport * as jobRequests from './requests';\n\nexport {\n  jobApi,\n  jobRequests,\n};\n","import {request} from '../request';\nimport {HTTP_METHODS, RESOURCE_TYPES} from '../../constants';\nimport {DeviceCommands, Job} from '../../types';\n\nconst get = async (jobId: string) => request<Job>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.jobs}/${jobId}`,\n});\n\nconst createDeviceCommandsJob = async (template: DeviceCommands) => request<Job>({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.jobs}/${RESOURCE_TYPES.iotnodes}/${RESOURCE_TYPES.commands}`,\n  data: template,\n});\n\nconst removeDevicesJob = async (deviceIds: string[]) => request<Job>({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.jobs}/${RESOURCE_TYPES.iotnodes}`,\n  data: deviceIds,\n});\n\nexport {\n  get,\n  createDeviceCommandsJob,\n  removeDevicesJob,\n};\n","import {formatDistanceToNow} from 'date-fns';\n\nimport {Job} from 'src/types';\n\ninterface CustomJobTemplate extends Job {\n  numItemsDone: number;\n  progressPercentage: number;\n  isFinished: boolean;\n  expectedTimeLeftText: string | null;\n}\n\nconst selectJob = (job: Job): CustomJobTemplate | undefined => {\n  if (!job) return;\n  const numItemsDone = job.numFailures + job.numSuccesses;\n  const progressPercentage = Math.round((numItemsDone / job.numItems) * 100);\n  const isFinished = numItemsDone === job.numItems;\n  const expectedTimeLeftText = job.expectedTimeLeft\n    ? formatDistanceToNow(Number(new Date()) - job.expectedTimeLeft * 1000)\n    : null;\n  return {\n    ...job,\n    numItemsDone,\n    progressPercentage,\n    isFinished,\n    expectedTimeLeftText,\n  };\n};\n\nexport {\n  selectJob,\n};\n","import {useQuery, useMutation, QueryClient} from 'react-query';\nimport {Location} from 'src/types';\nimport {locationsRequests} from '.';\n\nconst useLocationsQuery = () => (\n  useQuery(\n    ['locations'],\n    async () => locationsRequests.fetch(),\n    {\n      keepPreviousData: true,\n    }\n  )\n);\n\nconst useLocationQuery = (locationId: string) => (\n  useQuery(\n    ['location'],\n    async () => locationsRequests.fetchOne(locationId),\n    {\n      keepPreviousData: true,\n    }\n  )\n);\n\nconst useUpdateLocation = (queryClient: QueryClient) => useMutation(\n  async (data: Partial<Location>) => locationsRequests.update(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('locations');\n    }\n  }\n);\n\nconst useCreateLocation = (queryClient: QueryClient) => useMutation(\n  async (data: Location) => locationsRequests.create(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('locations');\n    }\n  }\n);\n\nconst useRemoveLocation = (queryClient: QueryClient) => useMutation(\n  async (locationId: string) => locationsRequests.remove(locationId),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('locations');\n    }\n  }\n);\n\nexport {\n  useLocationsQuery,\n  useLocationQuery,\n  useUpdateLocation,\n  useCreateLocation,\n  useRemoveLocation,\n};\n","import * as locationsApi from './hooks';\nimport * as locationsRequests from './requests';\n\nexport {\n  locationsApi,\n  locationsRequests,\n};\n","import {request} from '../request';\nimport {HTTP_METHODS, RESOURCE_TYPES} from '../../constants';\nimport {Location, Locations} from '../../types';\n\nconst fetch = async () => request<Locations>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.locations,\n});\n\nconst fetchOne = async (locationId: string) => request<Location>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.locations}/${locationId}`,\n});\n\nconst create = async (location: Location) => request<Location>({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.locations}`,\n  data: location,\n});\n\nconst update = async (location: Partial<Location>) => request<Location>({\n  method: HTTP_METHODS.Put,\n  URI: `${RESOURCE_TYPES.locations}/${location._id}`,\n  data: location,\n});\n\nconst remove = async (locationId: string) => request<Location>({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.locations}/${locationId}`,\n});\n\nexport {\n  fetch,\n  fetchOne,\n  create,\n  update,\n  remove,\n};\n","import {useQuery, useMutation, QueryClient} from 'react-query';\nimport {Organization} from 'src/types';\nimport {organizationsRequests} from '.';\n\nconst useOrganizationsQuery = () => useQuery(\n  ['organizations'],\n  async () => organizationsRequests.fetch(),\n);\n\ninterface IdTemplate {\n  orgId: string;\n  unitId: string;\n}\n\nconst useOrganizationQuery = (orgId: string) => (\n  useQuery(\n    ['organizations'],\n    async () => organizationsRequests.fetchOne(orgId),\n    {\n      keepPreviousData: true,\n    }\n  )\n);\n\nconst useCreateOrganization = (queryClient: QueryClient) => useMutation(\n  async (data: Organization) => organizationsRequests.create(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('organizations');\n    }\n  }\n);\n\ninterface UpdateTemplate {\n  orgId: string;\n  updates: Partial<Organization>;\n}\n\nconst useUpdateOrganization = (queryClient: QueryClient) => useMutation(\n  async ({orgId, updates}: UpdateTemplate) => organizationsRequests.update({orgId, updates}),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('organizations');\n      await queryClient.invalidateQueries(['organizations', 'unit']);\n      await queryClient.invalidateQueries(['organizations', 'members']);\n      await queryClient.invalidateQueries(['organizations', 'managers']);\n    }\n  }\n);\n\nconst useRemoveOrganization = (queryClient: QueryClient) => useMutation(\n  async ({orgId, unitId}: IdTemplate) => organizationsRequests.remove({orgId, unitId}),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('organizations');\n      await queryClient.invalidateQueries(['organizations', 'unit']);\n      await queryClient.invalidateQueries(['organizations', 'members']);\n      await queryClient.invalidateQueries(['organizations', 'managers']);\n    }\n  }\n);\n\ninterface UnitTemplate {\n  orgId: string;\n  parentUnitId: string;\n  template: Partial<Organization>;\n}\n\nconst useCreateOrganizationUnit = (queryClient: QueryClient) => useMutation(\n  async (data: UnitTemplate) => organizationsRequests.createUnit(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries(['organizations', 'unit']);\n    }\n  }\n);\n\nconst useDeleteOrganizationUnit = (queryClient: QueryClient) => useMutation(\n  async (data: IdTemplate) => organizationsRequests.deleteUnit(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries(['organizations', 'unit']);\n    }\n  }\n);\n\nconst useCreateOrganizationMember = (queryClient: QueryClient) => useMutation(\n  async (data: UpdateTemplate) => organizationsRequests.createMember(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries(['organizations', 'members']);\n    }\n  }\n);\n\nconst useOrganizationsMembersQuery = ({orgId}: {orgId: string}) => useQuery(\n  ['organizations', 'members'],\n  async () => organizationsRequests.fetchMembers({orgId}),\n);\n\ninterface MemberIdTemplate extends IdTemplate {\n  memberId: string;\n}\n\nconst useMoveOrganizationMember = (queryClient: QueryClient) => useMutation(\n  async (data: MemberIdTemplate) => organizationsRequests.moveMember(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries(['organizations', 'members']);\n    }\n  }\n);\n\nconst useOrganizationsDeviceQuery = ({orgId}: {orgId: string}) => useQuery(\n  ['organizations', 'devices'],\n  async () => organizationsRequests.fetchDeviceDetails({orgId}),\n);\n\nconst useAssignManagerAccess = (queryClient: QueryClient) => useMutation(\n  async (data: MemberIdTemplate) => organizationsRequests.assignManagerAccess(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries(['organizations', 'managers']);\n    }\n  }\n);\n\nconst useRevokeManagerAccess = (queryClient: QueryClient) => useMutation(\n  async (data: MemberIdTemplate) => organizationsRequests.assignManagerAccess(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries(['organizations', 'managers']);\n    }\n  }\n);\n\nexport {\n  useOrganizationsQuery,\n  useOrganizationQuery,\n  useCreateOrganization,\n  useUpdateOrganization,\n  useRemoveOrganization,\n\n  useCreateOrganizationUnit,\n  useDeleteOrganizationUnit,\n  useCreateOrganizationMember,\n  useOrganizationsMembersQuery,\n  useMoveOrganizationMember,\n  useOrganizationsDeviceQuery,\n  useAssignManagerAccess,\n  useRevokeManagerAccess,\n};\n","import * as organizationsApi from './hooks';\nimport * as organizationsRequests from './requests';\n\nexport {\n  organizationsApi,\n  organizationsRequests,\n};\n","import {request} from '../request';\nimport {HTTP_METHODS, RESOURCE_TYPES} from '../../constants';\nimport {\n  Organization,\n  Organizations,\n} from '../../types';\n\nconst fetch = async () => request<Organizations>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.organizations,\n});\n\nconst fetchOne = async (orgId: string) => request<Organization>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.organizations,\n  params: {orgId},\n});\n\nconst create = async (data: Organization) => request<Organization>({\n  method: HTTP_METHODS.Post,\n  URI: RESOURCE_TYPES.organizations,\n  data,\n});\n\ninterface UpdateTemplate {\n  orgId: string;\n  updates: Partial<Organization>;\n}\n\nconst update = async ({orgId, updates}: UpdateTemplate) => request<Organization>({\n  method: HTTP_METHODS.Put,\n  URI: RESOURCE_TYPES.organizations,\n  params: {orgId},\n  data: updates,\n});\n\n\ninterface RemovalTemplate {\n  orgId: string;\n  unitId: string;\n}\n\nconst remove = async ({orgId, unitId}: RemovalTemplate) => request({\n  method: HTTP_METHODS.Delete,\n  URI: RESOURCE_TYPES.organizations,\n  params: {orgId, unitId},\n});\n\ninterface UnitTemplate {\n  orgId: string;\n  parentUnitId: string;\n  template: Partial<Organization>;\n}\n\nconst createUnit = async ({orgId, parentUnitId, template}: UnitTemplate) => request({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/units/${parentUnitId}`,\n  data: template,\n});\n\nconst deleteUnit = async ({orgId, unitId}: {orgId: string, unitId: string}) => request({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/units/${unitId}`,\n});\n\nconst createMember = async ({orgId, updates}: UpdateTemplate) => request({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members`,\n  data: updates,\n});\n\nconst fetchMembers = async ({orgId}: {orgId: string}) => request({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members`,\n});\n\ninterface IdTemplate {\n  orgId: string;\n  memberId: string;\n  unitId: string;\n}\n\nconst moveMember = async ({orgId, memberId, unitId}: IdTemplate) => request({\n  method: HTTP_METHODS.Put,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}`,\n});\n\nconst fetchDeviceDetails = async ({orgId}: {orgId: string}) => request({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/deviceDetails`,\n});\n\nconst assignManagerAccess = async ({orgId, memberId, unitId}: IdTemplate) => request({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/managers`,\n});\n\nconst revokeManagerAccess = async ({orgId, memberId, unitId}: IdTemplate) => request({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/managers`,\n});\n\ninterface AccessTypeTemplate extends IdTemplate {\n  accessType: string;\n}\n\nconst assignDeviceAccess = async ({\n  orgId,\n  memberId,\n  unitId,\n  accessType,\n}: AccessTypeTemplate) => request({\n  method: HTTP_METHODS.Post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/deviceTokens`,\n  data: {accessType},\n});\n\nconst revokeDeviceAccess = async ({\n  orgId,\n  memberId,\n  unitId,\n  accessType,\n}: AccessTypeTemplate) => request({\n  method: HTTP_METHODS.Delete,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/deviceTokens`,\n  data: {accessType},\n});\n\nexport {\n  fetch,\n  fetchOne,\n  create,\n  update,\n  remove,\n  createUnit,\n  deleteUnit,\n  createMember,\n  fetchMembers,\n  moveMember,\n  fetchDeviceDetails,\n  assignDeviceAccess,\n  revokeDeviceAccess,\n  assignManagerAccess,\n  revokeManagerAccess,\n};\n","import {useQuery} from 'react-query';\nimport {requestBodySizeLimitRequests} from '.';\n\nconst useRequestBodySizeLimitQuery = () => (\n  useQuery(\n    ['request-body-size-limit'],\n    async () => requestBodySizeLimitRequests.get(),\n  )\n);\n\nexport {\n  useRequestBodySizeLimitQuery,\n};\n","import * as requestBodySizeLimitRequests from './requests';\nimport * as requestBodySizeLimitApi from './hooks';\n\nexport {\n  requestBodySizeLimitRequests,\n  requestBodySizeLimitApi,\n};\n","import {request} from '../request';\nimport {HTTP_METHODS, RESOURCE_TYPES} from '../../constants';\n\nconst get = async () => request<number>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.requestBodySizeLimit,\n});\n\nexport {\n  get,\n};\n","import axios, {Method, AxiosRequestConfig, AxiosResponseHeaders, AxiosPromise} from 'axios';\nimport Bottleneck from 'bottleneck';\n\nimport {getConfig} from '../yggio-config';\nimport {getYggioToken, removeYggioToken} from './token';\n\ninterface RequestConfig {\n  method: Method;\n  URI: string;\n  data?: unknown;\n  params?: unknown;\n}\n\ninterface BaseRequestResult<R> {\n  res: R;\n  headers: AxiosResponseHeaders;\n}\n\nconst limiter = new Bottleneck({minTime: 100});\n\nconst DEFAULT_TIMEOUT: number = 15000;\n\nconst baseRequest = async <R>(config: RequestConfig): Promise<BaseRequestResult<R>> => {\n  try {\n    const token = getYggioToken();\n\n    const requestConfig: AxiosRequestConfig = {\n      headers: token ? {Authorization: `Bearer ${token}`} : undefined,\n      timeout: DEFAULT_TIMEOUT,\n      withCredentials: true,\n      responseType: 'text', // Note: 'json' resulted in text responses not working\n      url: `${getConfig().baseRequestUrl}/${config.URI}`,\n      method: config.method,\n      data: config.data,\n      params: config.params,\n    };\n\n    const result = await limiter.schedule(async () => <AxiosPromise<R>>axios(requestConfig));\n    return {\n      res: result.data,\n      headers: result.headers,\n    };\n\n  } catch (err) {\n    if (axios.isAxiosError(err)) {\n      if (err.response?.status === 401) {\n        removeYggioToken();\n      }\n      throw err;\n    }\n    throw new Error('unknown non-axios error');\n  }\n};\n\nconst request = async <R>(config: RequestConfig) => {\n  const result = await baseRequest<R>(config);\n  return result.res;\n};\n\nconst requestHeaders = async <R>(config: RequestConfig) => {\n  const result = await baseRequest<R>(config);\n  return result.headers;\n};\n\nexport {\n  request,\n  requestHeaders,\n};\n","import _ from 'lodash';\nimport {useQuery, useMutation, QueryClient} from 'react-query';\nimport {Rules, RuleCreationTemplate} from 'src/types/rules';\nimport {rulesRequests} from '.';\nimport {selectRulesData} from './selectors';\n\nconst useRulesQuery = () => useQuery(\n  ['rules'],\n  async () => rulesRequests.fetch(),\n  {\n    select: selectRulesData,\n  },\n);\n\nconst useNumRulesQuery = () => useQuery(\n  ['rules', 'size'],\n  async () => rulesRequests.fetch(),\n  {select: (data: Rules) => _.size(data)},\n);\n\nconst useCreateRule = (queryClient: QueryClient) => useMutation(\n  async (data: RuleCreationTemplate) => rulesRequests.create(data),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('rules');\n    }\n  }\n);\n\nconst useRemoveRule = (queryClient: QueryClient) => useMutation(\n  async ({\n    ruleId,\n    actionId,\n  }: {ruleId: string, actionId: string}) => rulesRequests.remove(ruleId, actionId),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('rules');\n    }\n  }\n);\n\nconst useActivateRule = () => useMutation(\n  ['rule', 'activation'],\n  async (ruleId: string) => rulesRequests.activate(ruleId),\n);\n\nexport {\n  useRulesQuery,\n  useNumRulesQuery,\n  useCreateRule,\n  useRemoveRule,\n  useActivateRule,\n};\n","import * as rulesApi from './hooks';\nimport * as rulesRequests from './requests';\n\nexport {\n  rulesApi,\n  rulesRequests,\n};\n","import {toast} from 'react-hot-toast';\nimport {Rules, RuleAction, RuleCreationTemplate} from 'src/types/rules';\nimport {request} from '../request';\nimport {RESOURCE_TYPES, HTTP_METHODS} from '../../constants';\n\nconst create = async (template: RuleCreationTemplate) => {\n  const {rule, action} = template;\n\n  const actionResult = await request<RuleAction>({\n    method: HTTP_METHODS.Post,\n    URI: RESOURCE_TYPES.rulesActions,\n    data: action,\n  });\n\n  const ruleResult = await request({\n    method: HTTP_METHODS.Post,\n    URI: RESOURCE_TYPES.rules,\n    data: {\n      ...rule,\n      events: [{action: actionResult._id}],\n    },\n  });\n  return ruleResult;\n};\n\nconst remove = async (ruleId: string, actionId: string) => {\n  await request({\n    method: HTTP_METHODS.Delete,\n    URI: `${RESOURCE_TYPES.rulesActions}/${actionId}`,\n  });\n  await request({\n    method: HTTP_METHODS.Delete,\n    URI: `${RESOURCE_TYPES.rules}/${ruleId}`,\n  });\n  return ruleId;\n};\n\ninterface ActivationResult {\n  ok: boolean;\n}\n\nconst activate = async (ruleId: string) => {\n  const res = await request<ActivationResult>({\n    method: HTTP_METHODS.Put,\n    URI: `${RESOURCE_TYPES.rules}/activate/${ruleId}`,\n    data: {ok: true},\n  });\n\n  // Kinda dirty hack for special toaster trigger\n  if (res.ok) {\n    const successMessage = 'Action triggered successfully';\n    toast.success(successMessage);\n  }\n};\n\nconst fetch = async () => request<Rules>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.rules,\n});\n\nexport {\n  fetch,\n  create,\n  activate,\n  remove,\n};\n","import _ from 'lodash';\nimport {Rules, Rule, IdKeyedRules} from 'src/types';\n\nconst selectRulesData = (data: Rules) => (\n  _.reduce(data, (acc: IdKeyedRules, curr: Rule) => {\n    const i = curr._id;\n    acc[i] = curr;\n    return acc;\n  }, {})\n);\n\nexport {\n  selectRulesData,\n};\n","import cookie from 'js-cookie';\nimport _ from 'lodash';\nimport decode from 'jwt-decode';\n\nimport {getConfig} from '../yggio-config';\nimport {COOKIE_TOKEN_KEY} from '../constants';\n\nconst getYggioToken = () => {\n  return cookie.get(COOKIE_TOKEN_KEY);\n};\n\nconst setYggioToken = (token: string) => {\n  cookie.set(COOKIE_TOKEN_KEY, token, {domain: getConfig().domain});\n};\n\nconst removeYggioToken = () => {\n  cookie.remove(COOKIE_TOKEN_KEY, {domain: getConfig().domain});\n};\n\ninterface DecodedToken {\n  sub: string; // subject ID\n}\n\nconst getUserId = () => {\n  const token: string | undefined = cookie.get(COOKIE_TOKEN_KEY);\n  if (!token) {\n    return null;\n  }\n  const decodedToken: DecodedToken = decode(token);\n  return _.get(decodedToken, 'sub');\n};\n\nexport {\n  getYggioToken,\n  setYggioToken,\n  removeYggioToken,\n  getUserId,\n};\n","import {useQuery} from 'react-query';\nimport {translatorsRequests} from '.';\n\nconst useTranslatorsQuery = (deviceModelName: string) => useQuery(\n  ['translators'],\n  async () => translatorsRequests.fetch(deviceModelName),\n);\n\nexport {\n  useTranslatorsQuery,\n};\n","import * as translatorsApi from './hooks';\nimport * as translatorsRequests from './requests';\n\nexport {\n  translatorsApi,\n  translatorsRequests\n};\n","import {Translators} from 'src/types';\nimport {request} from '../request';\nimport {HTTP_METHODS, RESOURCE_TYPES} from '../../constants';\n\nconst fetch = async (deviceModelName: string) => request<Translators>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.translators,\n  params: {deviceModelName}\n});\n\nexport {\n  fetch,\n};\n","import {useQuery, useMutation, QueryClient} from 'react-query';\nimport {User} from 'src/types';\nimport {userRequests} from '.';\n\nconst useTokenUser = () => (\n  useQuery(\n    ['user'],\n    async () => userRequests.fetchTokenUser(),\n  )\n);\n\nconst useUpdateUser = (queryClient: QueryClient) => useMutation(\n  async ({updates}: {updates: Partial<User>}) => userRequests.update({updates}),\n  {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('user');\n    }\n  }\n);\n\nexport {\n  useTokenUser,\n  useUpdateUser,\n};\n","import * as userApi from './hooks';\nimport * as userRequests from './requests';\n\nexport {\n  userApi,\n  userRequests,\n};\n","import _ from 'lodash';\nimport {User} from 'src/types';\nimport {request} from '../request';\nimport {HTTP_METHODS, RESOURCE_TYPES} from '../../constants';\n\nconst fetchTokenUser = async () => request<User>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.users}/me`,\n});\n\nconst update = async ({updates}: {updates: Partial<User>}) => request({\n  method: HTTP_METHODS.Put,\n  URI: RESOURCE_TYPES.users,\n  data: _.omit(updates, '_id'),\n});\n\nexport {\n  fetchTokenUser,\n  update,\n};\n","import _ from 'lodash';\nimport {useQuery} from 'react-query';\nimport {usersRequests} from '.';\n\nconst useUsersQuery = () => (\n  useQuery(\n    ['users'],\n    async () => usersRequests.fetch(),\n  )\n);\n\nconst useSeekUsersQuery = (userIds: string[]) => (\n  useQuery(\n    ['users', 'seek', userIds],\n    async () => usersRequests.seek(userIds),\n    {enabled: !_.isEmpty(userIds)},\n  )\n);\n\nconst useGetUser = (params: Partial<{id: string, username: string}>) => useQuery(\n  ['user', params],\n  async () => usersRequests.get(params),\n  {\n    enabled: !!params.id || !!params.username,\n    retry: 1,\n    refetchOnWindowFocus: false,\n    meta: {\n      suppressErrorToaster: true,\n    }\n  },\n);\n\nexport {\n  useUsersQuery,\n  useSeekUsersQuery,\n  useGetUser,\n};\n","import * as usersApi from './hooks';\nimport * as usersRequests from './requests';\n\nexport {\n  usersApi,\n  usersRequests,\n};\n","import {User, Users} from 'src/types';\nimport {request} from '../request';\nimport {\n  HTTP_METHODS,\n  RESOURCE_TYPES,\n} from '../../constants';\n\nconst fetch = async () => request<Users>({\n  method: HTTP_METHODS.Get,\n  URI: RESOURCE_TYPES.users,\n});\n\nconst seek = async (userIds: string[]) => request<Users>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.users}/seek`,\n  params: {userIds},\n});\n\nconst get = async (params: Partial<{id: string, username: string}>) => request<User>({\n  method: HTTP_METHODS.Get,\n  URI: `${RESOURCE_TYPES.users}/search`,\n  params,\n});\n\nconst create = async ({username, email, password}: User) => request({\n  method: HTTP_METHODS.Post,\n  URI: RESOURCE_TYPES.users,\n  data: {username, email, password},\n});\n\nconst update = async (data: Partial<User>) => {\n  return request({\n    method: HTTP_METHODS.Put,\n    URI: RESOURCE_TYPES.users,\n    data,\n  });\n};\n\nexport {\n  fetch,\n  seek,\n  get,\n  create,\n  update,\n};\n","const MQTT_EVENTS = {\n  connect: 'connect',\n  reconnect: 'reconnect',\n  message: 'message',\n  close: 'close',\n  error: 'error',\n};\n\nexport {\n  MQTT_EVENTS,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport {useQueryClient} from 'react-query';\nimport type {YggioChannelPublish, deviceTypes} from 'yggio-types';\nimport {v4 as generateUUID} from 'uuid';\nimport mqtt from 'precompiled-mqtt/dist/mqtt.browser';\n\nimport {getConfig} from '../../yggio-config';\nimport {getYggioToken, getUserId} from '../token';\nimport {MQTT_EVENTS} from './constants';\n\nconst useSockets = () => {\n  const queryClient = useQueryClient();\n  const token = getYggioToken() as string;\n  const userId = getUserId() as string;\n\n  React.useEffect(() => {\n    const topic = `yggio/output/v2/${userId}/iotnode/+`;\n    const config = getConfig();\n\n    const client = mqtt.connect(\n      `mqtts://${config.socketHostname}:${config.socketPort}/ws`,\n      {\n        keepalive: 0,\n        connectTimeout: 30 * 1000,\n        clientId: `yggio-ui.${userId}.${generateUUID()}`,\n        username: userId,\n        password: token,\n      }\n    );\n\n    /*\n      On broker connection, subscribe to all devices for current user\n    */\n    client.on(MQTT_EVENTS.connect, () => {\n      console.info('Connected to Yggio Broker');\n      client.subscribe(topic, (err: Error) => {\n        if (!err) {\n          console.info(`Subscribed to ${topic}`);\n        }\n      });\n    });\n\n    /*\n      Update react-query cache with new data on message received\n    */\n    client.on(MQTT_EVENTS.message, (topic: string, message: number) => {\n      const parsedMessage = JSON.parse(message.toString()) as YggioChannelPublish;\n      if (!_.has(parsedMessage, 'iotnode._id')) {\n        console.error('MQTT error: Missing iotnode id');\n        return;\n      }\n\n      queryClient.setQueriesData(['device', parsedMessage?.iotnode?._id], (oldData: object) => {\n        const newData = {...oldData, ...parsedMessage?.diff};\n        return newData;\n      });\n\n      queryClient.setQueriesData(['devices'], (oldData: object) => {\n        if (_.isArray(oldData) && !_.isEmpty(oldData)) {\n          return _.map(oldData, (data: deviceTypes.Device) => {\n            if (data._id === parsedMessage?.iotnode?._id) {\n              return {...data, ...parsedMessage?.diff};\n            }\n            return data;\n          });\n        }\n        return oldData;\n      });\n    });\n\n    /*\n      These events are purely for information at this moment\n    */\n    client.on(MQTT_EVENTS.reconnect, () => {\n      console.info('Reconnecting to Yggio Broker');\n    });\n\n    client.on(MQTT_EVENTS.close, () => {\n      console.info('Disconnected from Yggio Broker');\n    });\n\n    client.on(MQTT_EVENTS.error, (err: Error) => {\n      console.error('MQTT error: ', err);\n    });\n\n    /*\n      Unsubscribe and close connection on component unmount\n    */\n    return () => {\n      console.info('Disconnecting from Yggio Broker');\n      client.unsubscribe(topic, (err: Error) => {\n        if (!err) {\n          console.info(`Unsubscribed from ${topic}`);\n        }\n      });\n      client.end();\n    };\n  }, [userId, token]);\n};\n\nexport {\n  useSockets,\n};\n","import {useSockets} from './hooks';\n\nconst WebSocket = (props: {children: React.FC}) => {\n  useSockets();\n  return props.children;\n};\n\nexport {\n  WebSocket,\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/citygrid/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.png';\nimport screenshot2 from './screenshot2.png';\nimport screenshot3 from './screenshot3.png';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n  ],\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/citygrid/screenshot1.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/citygrid/screenshot2.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/citygrid/screenshot3.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/client-app.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/control-panel-v1/icon.png\";","import icon from './icon.png';\n\nexport default {\n  icon,\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/grafana/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.png';\nimport screenshot2 from './screenshot2.png';\nimport screenshot3 from './screenshot3.png';\nimport screenshot4 from './screenshot4.jpeg';\nimport screenshot5 from './screenshot5.jpeg';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n    screenshot4,\n    screenshot5,\n  ]\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/grafana/screenshot1.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/grafana/screenshot2.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/grafana/screenshot3.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/grafana/screenshot4.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/grafana/screenshot5.jpeg\";","import nodeRed from './node-red';\nimport grafana from './grafana';\nimport ruleEngine from './rule-engine';\nimport locationManager from './location-manager';\nimport stripsConfig from './strips-config';\nimport controlPanelV1 from './control-panel-v1';\nimport citygrid from './citygrid';\nimport qrlio from './qrlio';\nimport terminio from './terminio';\nimport leanheat from './leanheat';\nimport powerBi from './power-bi';\nimport smartVisualizer from './smart-visualizer';\n\nexport default {\n  nodeRed,\n  grafana,\n  ruleEngine,\n  locationManager,\n  stripsConfig,\n  controlPanelV1,\n  citygrid,\n  qrlio,\n  terminio,\n  leanheat,\n  powerBi,\n  smartVisualizer,\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/leanheat/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.png';\nimport screenshot2 from './screenshot2.jpg';\nimport screenshot3 from './screenshot3.jpg';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n  ]\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/leanheat/screenshot1.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/leanheat/screenshot2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/leanheat/screenshot3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/location-manager/icon.png\";","import icon from './icon.png';\n\nexport default {\n  icon,\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/node-red/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.png';\nimport screenshot2 from './screenshot2.png';\nimport screenshot3 from './screenshot3.png';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n  ]\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/node-red/screenshot1.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/node-red/screenshot2.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/node-red/screenshot3.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/power-bi/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.jpg';\nimport screenshot2 from './screenshot2.jpg';\nimport screenshot3 from './screenshot3.jpg';\nimport screenshot4 from './screenshot4.jpg';\nimport screenshot5 from './screenshot5.jpg';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n    screenshot4,\n    screenshot5,\n  ]\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/power-bi/screenshot1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/power-bi/screenshot2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/power-bi/screenshot3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/power-bi/screenshot4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/power-bi/screenshot5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/qrlio/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.png';\nimport screenshot2 from './screenshot2.png';\nimport screenshot3 from './screenshot3.png';\nimport screenshot4 from './screenshot4.png';\nimport screenshot5 from './screenshot5.png';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n    screenshot4,\n    screenshot5,\n  ]\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/qrlio/screenshot1.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/qrlio/screenshot2.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/qrlio/screenshot3.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/qrlio/screenshot4.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/qrlio/screenshot5.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/rule-engine/icon.png\";","import icon from './icon.png';\n\nexport default {\n  icon,\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/smart-visualizer/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.png';\nimport screenshot2 from './screenshot2.png';\nimport screenshot3 from './screenshot3.png';\nimport screenshot4 from './screenshot4.png';\nimport screenshot5 from './screenshot5.png';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n    screenshot4,\n    screenshot5,\n  ],\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/smart-visualizer/screenshot1.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/smart-visualizer/screenshot2.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/smart-visualizer/screenshot3.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/smart-visualizer/screenshot4.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/smart-visualizer/screenshot5.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/strips-config/icon.png\";","import icon from './icon.png';\n\nexport default {\n  icon,\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/terminio/icon.png\";","import icon from './icon.png';\nimport screenshot1 from './screenshot1.png';\nimport screenshot2 from './screenshot2.png';\nimport screenshot3 from './screenshot3.png';\nimport screenshot4 from './screenshot4.png';\n\nexport default {\n  icon,\n  screenshots: [\n    screenshot1,\n    screenshot2,\n    screenshot3,\n    screenshot4,\n  ]\n};\n","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/terminio/screenshot1.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/terminio/screenshot2.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/terminio/screenshot3.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/apps/terminio/screenshot4.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/defaults/blueprint.jpg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/defaults/device-icon.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/defaults/location-icon.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/picture.svg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/sort-down.svg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/sort-none.svg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/sort-up.svg\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/images/yggio-icon.svg\";","import React from 'react';\n\nimport Breadcrumbs from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Breadcrumbs',\n  component: Breadcrumbs,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    crumbs: {\n      control: false,\n    }\n  }\n};\n\nconst Template = args => <Breadcrumbs {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  crumbs: ['Devices', 'MyDevice', 'Details'],\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport {\n  Container, Dash, Item\n} from './styled';\n\nconst Breadcrumbs = props => {\n  return (\n    <Container\n      fontSize={props.fontSize}\n    >\n      {_.map(props.crumbs, (crumb, index) => (\n        <React.Fragment key={index}>\n          <Item onClick={() => props.onClick(index)}>{crumb}</Item>\n          {index !== props.crumbs.length - 1 && (\n            <Dash> /</Dash>\n          )}\n        </React.Fragment>\n      ))}\n    </Container>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  fontSize: PropTypes.string,\n  crumbs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClick: PropTypes.func,\n};\n\nexport default Breadcrumbs;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  border-radius: 4px;\n  display: flex;\n  padding: 13px 15px;\n  border: 1px solid green;\n  font-size: ${props => props.fontSize || '13px'}\n`;\n\nconst Dash = styled.p`\n  margin: 0 7px;\n  cursor: default;\n  &:hover{\n  text-decoration: none;\n  }\n`;\n\nconst Item = styled.p`\n  margin: 0px;\n  cursor: pointer;\n  &:hover{\n    text-decoration: underline;\n  }\n`;\n\nexport {\n  Container,\n  Dash,\n  Item,\n};\n","import React from 'react';\n\nimport Button from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Button',\n  component: Button,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    label: {\n      description: 'The text in the button'\n    },\n    color: {\n      options: ['grey', 'green', 'yellow', 'red', 'blue', 'darkBlue'],\n      control: {type: 'radio'},\n      description: 'A custom hex code color is also valid',\n      table: {\n        defaultValue: {summary: 'grey'},\n      },\n    },\n    ghosted: {\n      table: {\n        defaultValue: {summary: false},\n      },\n    },\n    size: {\n      options: ['small', 'medium', 'large', 'full', 'fit'],\n      control: {type: 'select'},\n      description: 'Sets both width and height',\n      table: {\n        defaultValue: {summary: 'medium'},\n      },\n    },\n    width: {\n      options: ['small', 'medium', 'large', 'full', 'fit'],\n      control: {type: 'select'},\n      table: {\n        defaultValue: {summary: 'medium'},\n      },\n    },\n    height: {\n      options: ['small', 'medium', 'large', 'full', 'fit'],\n      control: {type: 'select'},\n      table: {\n        defaultValue: {summary: 'medium'},\n      },\n    },\n    icon: {\n      description: 'Show a icon in the button',\n      control: false,\n    },\n    content: {\n      description: 'A renderable react component or a text',\n      control: false,\n    },\n  },\n};\n\nconst Template = args => <Button {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  label: 'Im a button'\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","// button/constants.ts\n\nconst SIZES = {\n  small: 'small',\n  medium: 'medium',\n  large: 'large',\n  full: 'full',\n  fit: 'fit',\n};\nconst DEFAULT_SIZE = SIZES.medium;\n\nconst WIDTHS = {\n  small: '50px',\n  medium: '100px',\n  large: '150px',\n  full: '100%',\n  fit: 'none',\n};\nconst DEFAULT_WIDTH = WIDTHS[DEFAULT_SIZE];\n\nconst HEIGHTS = {\n  small: '25px',\n  medium: '34px',\n  large: '40px',\n  full: '34px',\n  fit: '34px',\n};\nconst DEFAULT_HEIGHT = HEIGHTS[DEFAULT_SIZE];\n\nconst COLOR_VARIETIES = {\n  grey: 'grey',\n  green: 'green',\n  yellow: 'yellow',\n  red: 'red',\n  blue: 'blue',\n  darkBlue: 'darkBlue',\n};\n\nconst BUTTON_TYPES = {\n  regular: 'regular',\n  ghosted: 'ghosted',\n};\n\n// TODO put colors in the shared colors file, when it has been reworked\nconst BUTTON_PRESETS = {\n  [COLOR_VARIETIES.grey]: {\n    [BUTTON_TYPES.regular]: {\n      background: '#ddd',\n      hoverBackground: '#ccc',\n      text: '#333',\n    },\n    [BUTTON_TYPES.ghosted]: {\n      border: '#bbb',\n      hoverBackground: '#F8F8F8',\n      text: '#333',\n    },\n  },\n  [COLOR_VARIETIES.green]: {\n    [BUTTON_TYPES.regular]: {\n      background: '#3C7D44',\n      hoverBackground: '#306A37',\n      text: '#fff',\n    },\n    [BUTTON_TYPES.ghosted]: {\n      border: '#4D9F57',\n      hoverBackground: '#FAFFFA',\n      text: '#31783A',\n    },\n  },\n  [COLOR_VARIETIES.yellow]: {\n    [BUTTON_TYPES.regular]: {\n      background: '#E1C14D',\n      hoverBackground: '#D3AE29',\n      text: '#644E00',\n    },\n    [BUTTON_TYPES.ghosted]: {\n      border: '#CEA40D',\n      hoverBackground: '#FFFCF3',\n      text: '#B88F00',\n    },\n  },\n  [COLOR_VARIETIES.red]: {\n    [BUTTON_TYPES.regular]: {\n      background: '#D25E5E',\n      hoverBackground: '#C04848',\n      text: '#fff',\n    },\n    [BUTTON_TYPES.ghosted]: {\n      border: '#D25E5E',\n      hoverBackground: '#FEF7F7',\n      text: '#BC2C2C',\n    },\n  },\n  [COLOR_VARIETIES.blue]: {\n    [BUTTON_TYPES.regular]: {\n      background: '#428FD9',\n      hoverBackground: '#2E7AC2',\n      text: '#fff',\n    },\n    [BUTTON_TYPES.ghosted]: {\n      border: '#428FD9',\n      hoverBackground: '#F6F8FB',\n      text: '#1668B7',\n    },\n  },\n  [COLOR_VARIETIES.darkBlue]: {\n    [BUTTON_TYPES.regular]: {\n      background: '#203672',\n      hoverBackground: '#0d3251',\n      text: '#fff',\n    },\n    [BUTTON_TYPES.ghosted]: {\n      border: '#203672',\n      hoverBackground: '#0d3251',\n      text: '#1668B7',\n    },\n  },\n};\n\nconst DEFAULT_PRESET = BUTTON_PRESETS[COLOR_VARIETIES.grey];\n\nconst DEFAULT_ICON_SIZE = 20;\n\nconst DISABLED_PRESETS = {\n  [BUTTON_TYPES.regular]: {\n    background: '#eee',\n    text: '#999',\n  },\n  [BUTTON_TYPES.ghosted]: {\n    border: '#ccc',\n    text: '#aaa',\n  }\n};\n\nconst DEFAULT_TOOLTIP_PLACEMENT = 'top';\n\nexport {\n  SIZES,\n  DEFAULT_SIZE,\n  WIDTHS,\n  DEFAULT_WIDTH,\n  HEIGHTS,\n  DEFAULT_HEIGHT,\n  BUTTON_TYPES,\n  BUTTON_PRESETS,\n  DEFAULT_PRESET,\n  DEFAULT_ICON_SIZE,\n  DISABLED_PRESETS,\n  DEFAULT_TOOLTIP_PLACEMENT,\n};\n","import React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner';\n\nimport {\n  StyledButton,\n  resolveTextColor, StyledIcon\n} from './styled';\nimport {DEFAULT_TOOLTIP_PLACEMENT, DEFAULT_ICON_SIZE} from './constants';\n\nconst Button = props => {\n  const randomId = Math.random().toString(36).slice(-5);\n  return (\n    <>\n      <StyledButton\n        data-tip\n        icon={props.icon}\n        data-for={randomId}\n        hasStartedLoading={props.hasStartedLoading}\n        {...props}\n      >\n        {props.icon && (\n          <StyledIcon\n            size={props.iconSize || DEFAULT_ICON_SIZE}\n            icon={props.icon}\n            iconPosition={props.iconPosition}\n          />\n        )}\n        {props.isLoading && <Spinner color={resolveTextColor(props)} />}\n        {!props.isLoading && (props.label || props.content || props.children)}\n      </StyledButton>\n      {!!props.tooltip &&\n        <ReactTooltip\n          id={randomId}\n          place={props.tooltip.placement || DEFAULT_TOOLTIP_PLACEMENT}\n          effect=\"solid\"\n        >\n          {props.tooltip.text}\n        </ReactTooltip>}\n    </>\n  );\n};\n\nButton.propTypes = {\n  label: PropTypes.string,\n  content: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n  color: PropTypes.string,\n  ghosted: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  size: PropTypes.oneOf(['small', 'medium', 'large', 'full', 'fit']),\n  width: PropTypes.string,\n  height: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  tooltip: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    placement: PropTypes.oneOf(['top', 'right', 'bottom', 'left'])\n  }),\n  style: PropTypes.object,\n  icon: PropTypes.object,\n  iconSize: PropTypes.number,\n  iconPosition: PropTypes.string,\n};\n\nexport default Button;\n","// button/styled.js\n\nimport _ from 'lodash';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Icon from 'react-icons-kit';\n\nimport {\n  SIZES,\n  WIDTHS,\n  DEFAULT_WIDTH,\n  HEIGHTS,\n  DEFAULT_HEIGHT,\n  BUTTON_TYPES,\n  BUTTON_PRESETS,\n  DEFAULT_PRESET,\n  DISABLED_PRESETS,\n} from './constants';\n\n// ////\n// style resolvers\n// ////\n\nconst resolveBorderColor = ({disabled, color, style}) => {\n  if (disabled) {\n    return DISABLED_PRESETS.ghosted.border;\n  }\n  // if we can determine a preset, then use it\n  const preset = BUTTON_PRESETS[color];\n  if (preset) {\n    return preset.ghosted.border;\n  }\n  // otherwide default to hard-coded values\n  return color || _.get(style, 'color', DEFAULT_PRESET.ghosted.border);\n};\n\nconst resolveBorder = ({ghosted, disabled, color, style}) => {\n  if (!ghosted) {\n    return 'none';\n  }\n  const borderColor = resolveBorderColor({ghosted, disabled, color, style});\n  return `1px solid ${borderColor}`;\n};\n\nconst resolveBackground = ({ghosted, disabled, color, style}) => {\n  // only NON-ghosted buttons have a background\n  if (ghosted) {\n    return 'none';\n  }\n  if (disabled) {\n    return DISABLED_PRESETS.regular.background;\n  }\n  // if we can determine a preset, then use it\n  const preset = BUTTON_PRESETS[color];\n  if (preset) {\n    return preset.regular.background;\n  }\n  // otherwise default to hard-coded values\n  return color || _.get(style, 'background', DEFAULT_PRESET.regular.background);\n};\n\nconst resolveHoverBackground = ({ghosted, disabled, color, style}) => {\n  const type = ghosted ? BUTTON_TYPES.ghosted : BUTTON_TYPES.regular;\n  if (disabled) {\n    return 'default';\n  }\n  const preset = BUTTON_PRESETS[color];\n  if (preset) {\n    return preset[type].hoverBackground;\n  }\n\n  return color || _.get(style, 'hoverBackground', DEFAULT_PRESET[type].hoverBackground);\n};\n\nconst resolveTextColor = ({ghosted, disabled, color, style}) => {\n  const type = ghosted ? BUTTON_TYPES.ghosted : BUTTON_TYPES.regular;\n  if (disabled) {\n    return DISABLED_PRESETS[type].text;\n  }\n  // if we can determine a preset, then use it\n  const preset = BUTTON_PRESETS[color];\n  if (preset) {\n    return preset[type].text;\n  }\n  // otherwise default to hard-coded values\n  return color || _.get(style, 'color', DEFAULT_PRESET[type].text);\n};\n\nconst resolveHeight = ({size, height, style}) => {\n  const propHeight = HEIGHTS[height || size] || height || size;\n  if (!_.isUndefined(propHeight)) {\n    return propHeight;\n  }\n  return _.get(style, 'height', DEFAULT_HEIGHT);\n};\n\nconst resolveWidth = ({size, width, style}) => {\n  const propWidth = WIDTHS[width || size] || width || size;\n  if (!_.isUndefined(propWidth)) {\n    return propWidth;\n  }\n  return _.get(style, 'width', DEFAULT_WIDTH);\n};\n\n// ////\n// components\n// ////\n\nconst StyledButton = styled.button`\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.3s;\n  border-radius: 3px;\n  outline: none;\n  font-family: inherit;\n\n  border: ${props => resolveBorder(props)};\n  background: ${props => resolveBackground(props)};\n  color: ${props => resolveTextColor(props)};\n  width: ${props => resolveWidth(props)};\n  height: ${props => resolveHeight(props)};\n\n  margin: ${props => _.get(props, 'margin', _.get(props, 'style.margin'), '0')};\n  padding: ${props => _.get(props, 'padding', _.get(props, 'style.padding'), '0 16px')};\n  cursor: ${props => (props.disabled ? 'default' : 'pointer')};\n\n  &:hover {\n    transition: all 0.3s;\n    background: ${props => resolveHoverBackground(props)};\n  }\n  &:focus {\n    box-shadow: 0 0 2px 1px #4287f5;\n  }\n`;\n\nconst StyledIcon = styled(Icon)`\n  order: ${({iconPosition}) => (iconPosition === 'right' ? 1 : 0)};\n  margin: ${({iconPosition}) => (iconPosition === 'right' ? '0 0 0 8px' : '0 8px 0 0')};\n`;\n\nStyledButton.propTypes = {\n  ghosted: PropTypes.bool,\n  disabled: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.oneOf(_.values(SIZES)),\n  width: PropTypes.string,\n  height: PropTypes.string,\n  style: PropTypes.object,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n};\n\nStyledIcon.propTypes = {\n  size: PropTypes.number,\n  icon: PropTypes.object,\n  iconPosition: PropTypes.string,\n};\n\n\nexport {\n  StyledButton,\n  resolveTextColor,\n  StyledIcon,\n};\n","import React from 'react';\n\nimport Chip from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Chip',\n  component: Chip,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    color: {\n      options: ['grey', 'green', 'yellow', 'red', 'blue'],\n      control: {type: 'radio'}\n    },\n    onRemoveClick: {\n      action: {action: 'clicked'},\n    },\n  }\n};\n\nconst Template = args => <Chip {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  text: 'Im a chip',\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","const COLOR_VARIETIES = {\n  grey: 'grey',\n  green: 'green',\n  yellow: 'yellow',\n  red: 'red',\n  blue: 'blue',\n};\n\nconst DEFAULTS = {\n  margin: '0',\n  color: COLOR_VARIETIES.grey,\n};\n\nconst CHIP_TYPES = {\n  regular: 'regular',\n  ghosted: 'ghosted',\n};\n\n// TODO put colors in the shared colors file, when it has been reworked\nconst CHIP_PRESETS = {\n  [COLOR_VARIETIES.grey]: {\n    [CHIP_TYPES.regular]: {\n      background: '#ddd',\n      text: '#222',\n      button: '#666',\n      buttonHover: '#333',\n    },\n    [CHIP_TYPES.ghosted]: {\n      border: '#bbb',\n      text: '#222',\n      button: '#888',\n      buttonHover: '#555',\n    },\n  },\n  [COLOR_VARIETIES.green]: {\n    [CHIP_TYPES.regular]: {\n      background: '#3C7D44',\n      text: '#fff',\n      button: '#27522c',\n      buttonHover: '#132916',\n    },\n    [CHIP_TYPES.ghosted]: {\n      border: '#4D9F57',\n      text: '#31783A',\n      button: '#4D9F57',\n      buttonHover: '#336b3a',\n    },\n  },\n  [COLOR_VARIETIES.yellow]: {\n    [CHIP_TYPES.regular]: {\n      background: '#E1C14D',\n      text: '#644E00',\n      button: '#8f6f00',\n      buttonHover: '#6b5300',\n    },\n    [CHIP_TYPES.ghosted]: {\n      border: '#CEA40D',\n      text: '#B88F00',\n      button: '#CEA40D',\n      buttonHover: '#997a0b',\n    },\n  },\n  [COLOR_VARIETIES.red]: {\n    [CHIP_TYPES.regular]: {\n      background: '#D25E5E',\n      text: '#fff',\n      button: '#8a3d3d',\n      buttonHover: '#522323',\n    },\n    [CHIP_TYPES.ghosted]: {\n      border: '#D25E5E',\n      text: '#BC2C2C',\n      button: '#D25E5E',\n      buttonHover: '#944444',\n    },\n  },\n  [COLOR_VARIETIES.blue]: {\n    [CHIP_TYPES.regular]: {\n      background: '#428FD9',\n      text: '#fff',\n      button: '#2a659c',\n      buttonHover: '#183f63',\n    },\n    [CHIP_TYPES.ghosted]: {\n      border: '#428FD9',\n      text: '#1668B7',\n      button: '#428FD9',\n      buttonHover: '#2c6294',\n    },\n  },\n};\n\nexport {\n  DEFAULTS,\n  CHIP_TYPES,\n  CHIP_PRESETS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Icon} from 'react-icons-kit';\nimport {close as removeIcon} from 'react-icons-kit/ionicons/close';\n\nimport {\n  Container,\n  Text,\n  RemoveButtonOuter,\n  RemoveButtonInner,\n  IconContainer,\n} from './styled';\n\nconst Chip = props => {\n  return (\n    <Container\n      showRemoveButton={props.showRemoveButton}\n      color={props.color}\n      ghosted={props.ghosted}\n      margin={props.margin}\n    >\n      <Text>\n        {props.text}\n      </Text>\n      {props.showRemoveButton &&\n        <RemoveButtonOuter\n          onClick={props.onRemoveClick}\n        >\n          <RemoveButtonInner\n            color={props.color}\n            ghosted={props.ghosted}\n          >\n            <IconContainer>\n              <Icon icon={removeIcon} size={8} />\n            </IconContainer>\n          </RemoveButtonInner>\n        </RemoveButtonOuter>}\n    </Container>\n  );\n};\n\nChip.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  ghosted: PropTypes.bool,\n  showRemoveButton: PropTypes.bool,\n  onRemoveClick: PropTypes.func,\n  margin: PropTypes.string,\n};\n\nexport default Chip;\n","import styled from 'styled-components';\n\nimport {CHIP_PRESETS, DEFAULTS, CHIP_TYPES} from './constant';\n\nconst resolveBorder = ({ghosted, color}) => {\n  if (!ghosted) {\n    return 'none';\n  }\n  const colorPresets = CHIP_PRESETS[color] || CHIP_PRESETS[DEFAULTS.color];\n  return `1px solid ${colorPresets.ghosted.border}`;\n};\n\nconst resolveBackground = ({ghosted, color}) => {\n  if (ghosted) {\n    return 'none';\n  }\n  const colorPresets = CHIP_PRESETS[color] || CHIP_PRESETS[DEFAULTS.color];\n  return colorPresets.regular.background;\n};\n\nconst resolveTextColor = ({ghosted, color}) => {\n  const colorPresets = CHIP_PRESETS[color] || CHIP_PRESETS[DEFAULTS.color];\n  const type = ghosted ? CHIP_TYPES.ghosted : CHIP_TYPES.regular;\n  return colorPresets[type].text;\n};\n\nconst resolveButtonColor = ({ghosted, color}) => {\n  const colorPresets = CHIP_PRESETS[color] || CHIP_PRESETS[DEFAULTS.color];\n  const type = ghosted ? CHIP_TYPES.ghosted : CHIP_TYPES.regular;\n  return colorPresets[type].button;\n};\n\nconst resolveButtonHoverColor = ({ghosted, color}) => {\n  const colorPresets = CHIP_PRESETS[color] || CHIP_PRESETS[DEFAULTS.color];\n  const type = ghosted ? CHIP_TYPES.ghosted : CHIP_TYPES.regular;\n  return colorPresets[type].buttonHover;\n};\n\nconst Container = styled.div`\n  width: fit-content;\n  padding: 0 ${({showRemoveButton}) => (showRemoveButton ? '3px' : '6px')} 0 7px;\n  height: 22px;\n  margin: ${({margin}) => margin || DEFAULTS.margin};\n  box-sizing: border-box;\n  background: ${props => resolveBackground(props)};\n  border: ${props => resolveBorder(props)};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 12px;\n  font-size: 11px;\n  color: ${props => resolveTextColor(props)};\n  flex-shrink: 0;\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  position: relative;\n  top: -1px;\n  white-space: nowrap;\n`;\n\nconst RemoveButtonOuter = styled.div`\n  width: 22px;\n  height: 22px;\n  border-radius: 11px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst RemoveButtonInner = styled.div`\n  width: 14px;\n  height: 14px;\n  border-radius: 7px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${props => resolveButtonColor(props)};\n  color: #fff;\n\n  ${RemoveButtonOuter}:hover & {\n    background: ${props => resolveButtonHoverColor(props)};\n  }\n`;\n\nconst IconContainer = styled.div`\n  position: relative;\n  top: -2px;\n`;\n\nexport {\n  Container,\n  Text,\n  RemoveButtonOuter,\n  RemoveButtonInner,\n  IconContainer,\n};\n","import React from 'react';\n\nimport Collapsible from './index';\nimport {DEFAULT_CLOSED_HEIGHT, DEFAULT_OPENED_HEIGHT} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Collapsible',\n  component: Collapsible,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    label: {control: false},\n    open: {control: false},\n    openedHeight: {\n      description: 'Should be the height of the child element',\n      table: {\n        defaultValue: {\n          summary: DEFAULT_OPENED_HEIGHT,\n        },\n      },\n    },\n    closedHeight: {\n      description: 'Should be the height of the label element',\n      table: {\n        defaultValue: {\n          summary: DEFAULT_CLOSED_HEIGHT,\n        },\n      },\n    },\n    children: {\n      description: 'Note this is not a prop but the elements child instead',\n      control: false,\n    },\n  },\n};\n\nconst Label = () => (\n  <div style={{width: '200px', background: '#999'}}>\n    {'CLICK ME'}\n  </div>\n);\n\nconst Content = () => (\n  <div style={{width: '200px', background: '#ddd'}}>\n    Content\n  </div>\n);\n\nconst Template = args => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Collapsible {...args} open={open} onClick={() => setOpen(!open)}>\n      <Content />\n    </Collapsible>\n  );\n};\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  label: <Label />,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","const DEFAULT_OPENED_HEIGHT = '150px';\nconst DEFAULT_CLOSED_HEIGHT = '44px';\n\nexport {\n  DEFAULT_CLOSED_HEIGHT,\n  DEFAULT_OPENED_HEIGHT,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {CollapsibleElement, Content, Label} from './styled';\n\nconst Collapsible = props => {\n  return (\n    <CollapsibleElement\n      openedHeight={props.openedHeight}\n      closedHeight={props.closedHeight}\n      open={props.open}\n    >\n      <Label\n        onClick={props.onClick}\n        open={props.open}\n      >\n        {props.label}\n      </Label>\n\n      <Content\n        open={props.open}\n      >\n        {props.children}\n      </Content>\n    </CollapsibleElement>\n  );\n};\n\nCollapsible.propTypes = {\n  label: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n  ]).isRequired,\n  open: PropTypes.bool,\n  openedHeight: PropTypes.string,\n  closedHeight: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Collapsible;\n","import styled from 'styled-components';\nimport {COLORS} from '../../constants';\nimport {DEFAULT_CLOSED_HEIGHT, DEFAULT_OPENED_HEIGHT} from './constants';\n\nconst Label = styled.div`\n  width: 100%;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  height: ${({open}) => (open ? '100%' : '0')};\n  opacity: ${({open}) => (open ? '1' : '0')};\n  visibility: ${({open}) => (open ? 'visible' : 'hidden')};\n  transition: all 0.3s;\n`;\n\nconst CollapsibleElement = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: space-between;\n  cursor: pointer;\n  color: ${({color}) => color || COLORS.black};\n  height: ${({closedHeight, openedHeight, open}) => {\n    if (open) {\n      return openedHeight || DEFAULT_OPENED_HEIGHT;\n    }\n\n    return closedHeight || DEFAULT_CLOSED_HEIGHT;\n  }};\n  transition: height 0.3s;\n`;\n\nexport {\n  Label,\n  Content,\n  CollapsibleElement,\n};\n","const DEFAULTS = {\n  maxWidth: '100%',\n  minWidth: '100px',\n  minHeight: '100px',\n  margin: '0',\n  padding: '20px',\n  background: '#fff',\n  position: 'static',\n  display: 'block',\n  flexDirection: 'row',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\n\nimport ContainerBox from './index';\nimport {DEFAULTS} from './constants';\nimport {PaddingDecorator, LightGrayBackgroundDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Container Box',\n  component: ContainerBox,\n  decorators: [\n    PaddingDecorator,\n    LightGrayBackgroundDecorator\n  ],\n  argTypes: {\n    maxWidth: {\n      table: {defaultValue: {summary: DEFAULTS.maxWidth}}\n    },\n    minWidth: {\n      table: {defaultValue: {summary: DEFAULTS.minWidth}}\n    },\n    minHeight: {\n      table: {defaultValue: {summary: DEFAULTS.minHeight}}\n    },\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n    padding: {\n      table: {defaultValue: {summary: DEFAULTS.padding}}\n    },\n    background: {\n      table: {defaultValue: {summary: DEFAULTS.background}}\n    },\n    position: {\n      table: {defaultValue: {summary: DEFAULTS.position}}\n    },\n    display: {\n      table: {defaultValue: {summary: DEFAULTS.display}}\n    },\n    flexDirection: {\n      table: {defaultValue: {summary: DEFAULTS.flexDirection}}\n    },\n    widthReduction: {\n      table: {defaultValue: {summary: DEFAULTS.widthReduction}}\n    },\n    heightReduction: {\n      table: {defaultValue: {summary: DEFAULTS.heightReduction}}\n    },\n  }\n};\n\nconst Template = args => (\n  <ContainerBox {...args}>\n    <p>Content</p>\n  </ContainerBox>\n);\n\nconst Primary = Template.bind({});\nPrimary.args = {\n\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ContainerBoxStyled} from './styled';\n\nconst ContainerBox = props => {\n  return (\n    <ContainerBoxStyled\n      {...props}\n      width={props.width}\n      maxWidth={props.maxWidth}\n      minWidth={props.minWidth}\n      height={props.height}\n      minHeight={props.minHeight}\n      margin={props.margin}\n      padding={props.padding}\n      background={props.background}\n      position={props.position}\n      display={props.display}\n      flexDirection={props.flexDirection}\n      widthReduction={props.widthReduction}\n      heightReduction={props.heightReduction}\n    >\n      {props.children}\n    </ContainerBoxStyled>\n  );\n};\n\nContainerBox.propTypes = {\n  style: PropTypes.object,\n  width: PropTypes.string,\n  maxWidth: PropTypes.string,\n  minWidth: PropTypes.string,\n  height: PropTypes.string,\n  minHeight: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  background: PropTypes.string,\n  position: PropTypes.string,\n  display: PropTypes.string,\n  flexDirection: PropTypes.string,\n  widthReduction: PropTypes.string,\n  heightReduction: PropTypes.string,\n  children: PropTypes.node,\n  includeMarginInHeight: PropTypes.bool,\n  includeMarginInWidth: PropTypes.bool,\n};\n\nexport default ContainerBox;\n","import styled from 'styled-components';\n\nimport {DEFAULTS} from './constants';\n\nconst ContainerBoxStyled = styled.div`\n  box-sizing: border-box;\n  position: ${({position}) => position || DEFAULTS.position};\n  display: ${({display}) => display || DEFAULTS.display};\n  flex-direction: ${({flexDirection}) => flexDirection || DEFAULTS.flexDirection};\n  max-width: ${({maxWidth}) => maxWidth || DEFAULTS.maxWidth};\n  min-width: ${({minWidth}) => minWidth || DEFAULTS.minWidth};\n  min-height: ${({minHeight}) => minHeight || DEFAULTS.minHeight};\n  height: ${({height, heightReduction}) => {\n    if (height && heightReduction) {\n      return `calc(${height} - ${heightReduction})`;\n    }\n    if (height) {\n      return height;\n    }\n\n    return 'auto';\n  }};\n  width: ${({width, widthReduction}) => {\n    if (width && widthReduction) {\n      return `calc(${width} - ${widthReduction})`;\n    }\n    if (width) {\n      return width;\n    }\n\n    return 'auto';\n  }};\n  margin: ${({margin}) => margin || DEFAULTS.margin};\n  padding: ${({padding}) => padding || DEFAULTS.padding};\n  background: ${({background}) => background || DEFAULTS.background};\n  border: 1px solid #e7e7e7;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, .06);\n`;\n\n\nexport {\n  ContainerBoxStyled,\n};\n","const DEFAULTS = {\n  width: '100%',\n  margin: '0',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\n\nimport DataViewer from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Data Viewer',\n  component: DataViewer,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    data: {\n      description: 'The data to display',\n      control: false,\n    },\n    width: {\n      table: {defaultValue: {summary: DEFAULTS.width}}\n    },\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n  }\n};\n\nconst data = {\n  devEui: '70b3d52c00000208',\n  sensorType: undefined,\n  timestamp: '2021-08-11T15:01:26.701124Z',\n  payload: '',\n  spreadingFactor: null,\n  anarray: [\n    5,\n    7,\n  ],\n  anobject: {\n    name: 'michael',\n    age: 29,\n  },\n  aBool: true,\n  rssi: -106,\n  snr: {\n    anobject: {\n      name: 'michael',\n      age: 29,\n      anobject: {\n        name: 'michael',\n        age: 29,\n        anobject: {\n          name: 'michael',\n          age: 29,\n          anobject: {\n            name: 'michael',\n            age: 29,\n          },\n        },\n      },\n    },\n  },\n  gatewayIdentifier: 538,\n  fPort: 1,\n};\n\n\nconst Template = args => <DataViewer {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  data,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nimport styles from './styles';\n\nconst DataViewer = props => {\n\n  const useStyles = makeStyles(styles(props));\n\n  const classes = useStyles();\n\n  let i = 0;\n\n  const printValue = value => {\n    if (_.isNull(value)) {\n      return <p className={classes.valueFalsy}>null</p>;\n    }\n    if (_.isUndefined(value)) {\n      return <p className={classes.valueFalsy}>undefined</p>;\n    }\n    if (_.isString(value) && value.length === 0) {\n      return <p className={classes.valueFalsy}>empty string</p>;\n    }\n    if (_.isString(value)) {\n      return <p className={classes.valueString}>{value}</p>;\n    }\n    if (_.isBoolean(value)) {\n      return <p className={classes.valueBoolean}>{value.toString()}</p>;\n    }\n    if (_.isNumber(value)) {\n      return <p className={classes.valueNumber}>{value.toString()}</p>;\n    }\n    return <p className={classes.valueDefault}>{value}</p>;\n  };\n\n  const Label = ({name, value}) => (\n    <div className={classes.labelRoot}>\n      {!_.isNull(name) && (\n        <p className={classes.labelName}>{name}{!_.isObjectLike(value) && ':'}</p>\n      )}\n      {!_.isObjectLike(value) && (\n        printValue(value)\n      )}\n    </div>\n  );\n\n  const renderTreeItem = (key, value) => {\n    i++;\n    return (\n      <TreeItem key={i.toString()} nodeId={i.toString()} label={<Label name={key} value={value} />}>\n        {\n          _.isObjectLike(value)\n            ? _.map(value, (nextValue, nextKey) => renderTreeItem(nextKey, nextValue))\n            : null\n        }\n      </TreeItem>\n    );\n  };\n\n  return (\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {\n        _.isObjectLike(props.data)\n          ? _.map(props.data, (value, key) => renderTreeItem(key, value))\n          : renderTreeItem(null, props.data)\n      }\n    </TreeView>\n  );\n};\n\nDataViewer.propTypes = {\n  data: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  width: PropTypes.string,\n  margin: PropTypes.string,\n};\n\nexport default DataViewer;\n","import {DEFAULTS} from './constants';\n\nconst styles = props => ({\n  root: {\n    maxWidth: props.width || DEFAULTS.width,\n    margin: props.margin || DEFAULTS.margin,\n    flexGrow: 1,\n  },\n  labelRoot: {\n    display: 'flex',\n    alignItems: 'center',\n    height: '25px',\n    fontSize: '13px',\n  },\n  labelName: {\n    marginRight: '5px',\n  },\n  valueFalsy: {\n    color: '#555',\n    fontStyle: 'italic',\n  },\n  valueString: {\n    color: '#bf2615',\n    fontWeight: 'bold',\n    whiteSpace: 'nowrap',\n  },\n  valueBoolean: {\n    color: '#00805d',\n    fontWeight: 'bold',\n  },\n  valueNumber: {\n    color: '#00608a',\n    fontWeight: 'bold',\n  },\n  valueDefault: {\n    color: 'black',\n    fontWeight: 'bold',\n  },\n});\n\nexport default styles;\n","// constants.ts\n\nconst DEFAULTS = {\n  isDisabled: false,\n  maxWidth: '260px',\n  type: 'text',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\n\nimport DatePicker from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Date Picker',\n  component: DatePicker,\n  decorators: [YggioFontDecorator],\n};\n\nconst Template = args => <DatePicker {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\nimport InputDecorator from '../input-decorator';\nimport {StyledInput} from './styled';\n\nconst DatePicker = props => (\n  <InputDecorator\n    label={props.label}\n    additionalInfo={props.additionalInfo}\n    isRequired={props.isRequired}\n    isOptional={props.isOptional}\n    helperText={props.helperText}\n    validationErrorMessage={props.validationErrorMessage}\n    validationSuccessMessage={props.validationSuccessMessage}\n    width={props.width}\n    margin={props.margin}\n  >\n    <StyledInput\n      style={props.style}\n      value={props.value}\n      name={props.name}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n      maxWidth={props.maxWidth || DEFAULTS.maxWidth}\n      onBlur={props.onBlur}\n      autoFocus={!!props.autoFocus}\n      disabled={props.isDisabled || props.disabled || DEFAULTS.isDisabled}\n      type={props.isOnlyDate ? 'date' : 'datetime-local'}\n      disableBlueFocusOutline={props.disableBlueFocusOutline}\n      isInvalid={!!props.validationErrorMessage}\n    />\n  </InputDecorator>\n);\n\nDatePicker.propTypes = {\n  // Input props\n  value: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isPassword: PropTypes.bool,\n  disableBlueFocusOutline: PropTypes.bool,\n  isOnlyDate: PropTypes.bool,\n  // Input decorator props\n  label: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  isRequired: PropTypes.bool,\n  isOptional: PropTypes.bool,\n  helperText: PropTypes.string,\n  validationErrorMessage: PropTypes.string,\n  validationSuccessMessage: PropTypes.string,\n  width: PropTypes.string,\n  maxWidth: PropTypes.string,\n  margin: PropTypes.string,\n};\n\nexport default DatePicker;\n","// styled\n\nimport styled from 'styled-components';\nimport {commonInputStyles, inputFocusStyle} from '../../global/styled';\n\nconst StyledInput = styled.input`\n  ${commonInputStyles}\n  ${inputFocusStyle}\n  height: 35px;\n  max-width: ${props => props.maxWidth}\n`;\n\nexport {\n  StyledInput,\n};\n","import React from 'react';\n\nimport ImagePreviewer from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\n// TODO This needs work\n\nconst main = {\n  title: 'Components/Image Previewer',\n  component: ImagePreviewer,\n  decorators: [YggioFontDecorator],\n};\n\nconst Template = args => <ImagePreviewer {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import React, {useEffect} from 'react';\nimport {eq} from 'lodash/fp';\nimport {\n  CSSTransition,\n} from 'react-transition-group';\nimport {\n  ImagePreviewContainer,\n  ImagePreview,\n  ImagePreviewCloser, ImagePreviewMetaData,\n} from './styled';\n\n/**\n *\n * @param file\n * @param src\n * @param alt\n * @param show\n * @param toggle\n * @returns {*}\n * @constructor\n */\nconst ImagePreviewer = (\n  {\n    file,\n    src,\n    alt,\n    show,\n    toggle,\n  }\n) => {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  });\n\n  /**\n   * Close image previewer with ESC key\n   * @param keyCode\n   */\n  const handleKeyPress = ({keyCode}) => {\n    if (show && eq(keyCode, 27)) {\n      toggle();\n    }\n  };\n\n  /**\n   * Render image previewer\n   * @param state\n   * @returns {*}\n   */\n  const renderPreviewer = state => {\n    // Convert to KiloByte\n    const base = 1024 ** 1;\n    const fileSize = file && file.size\n      ? (file.size / base).toFixed(2)\n      : 0;\n\n    return (\n      <ImagePreviewContainer\n        onClick={() => toggle()}\n        state={state}\n      >\n        <ImagePreviewCloser\n          onClick={evt => {\n            evt.stopPropagation();\n            toggle();\n          }}\n        >\n          ✕\n        </ImagePreviewCloser>\n        <ImagePreviewMetaData>\n          <span>{file && file.name}</span>\n          <span>{fileSize}KB</span>\n        </ImagePreviewMetaData>\n        <ImagePreview\n          onClick={evt => evt.stopPropagation()}\n          src={src}\n          alt={alt}\n        />\n      </ImagePreviewContainer>\n    );\n  };\n\n  return (\n    <CSSTransition\n      in={show}\n      timeout={200}\n      unmountOnExit\n      mountOnEnter\n    >\n      {renderPreviewer}\n    </CSSTransition>\n  );\n};\n\nexport default ImagePreviewer;\n","import styled from 'styled-components';\nimport {eq} from 'lodash/fp';\nimport {COLORS} from '../../constants';\nimport {FlexMaxWidthWrapper} from '../../global/styled';\n\nconst ImagePreviewContainer = styled.div`\n  transition: 0.5s;\n  z-index: 99999;\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: ${COLORS.greyTransparent};\n  opacity: ${({state}) => (eq(state, 'entered') ? 1 : 0)};\n`;\n\nconst ImagePreview = styled.img`\n  z-index: 999999;\n  max-width: 90%;\n  max-height: 90%;\n  background: ${COLORS.grey};\n  border: 2px solid ${COLORS.grey};\n  border-radius: 5px;\n`;\n\nconst ImagePreviewCloser = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${COLORS.greyLight};\n  z-index: 100;\n  font-size: 1.7em;\n  font-weight: 600;\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  top: 10px;\n  right: 20px;\n  transition: all 0.3s;\n\n  &:hover {\n    transition: all 0.3s;\n    color: ${COLORS.white};\n  }\n`;\n\nconst ImagePreviewMetaData = styled(FlexMaxWidthWrapper)`\n  position: absolute;\n  justify-content: space-around;\n  top: 0;\n  height: 50px;\n`;\n\nexport {\n  ImagePreviewContainer,\n  ImagePreview,\n  ImagePreviewCloser,\n  ImagePreviewMetaData,\n};\n","import {ic_info as infoIcon} from 'react-icons-kit/md/ic_info';\nimport {checkmark as successIcon} from 'react-icons-kit/ionicons/checkmark';\nimport {ic_warning as warningIcon} from 'react-icons-kit/md/ic_warning';\nimport {ic_error as errorIcon} from 'react-icons-kit/md/ic_error';\n\nconst TYPES = {\n  info: 'info',\n  neutral: 'neutral',\n  success: 'success',\n  warning: 'warning',\n  error: 'error',\n};\n\nconst TYPE_STYLES = {\n  [TYPES.info]: {\n    icon: infoIcon,\n    iconColor: '#549DE2',\n    background: '#EBF5FF',\n    border: '#84BEF5',\n  },\n  [TYPES.neutral]: {\n    icon: infoIcon,\n    iconColor: '#888',\n    background: '#F4F4F4',\n    border: '#CCC',\n  },\n  [TYPES.success]: {\n    icon: successIcon,\n    iconColor: '#3D9F4A',\n    background: '#E9F4EB',\n    border: '#70B579',\n  },\n  [TYPES.warning]: {\n    icon: warningIcon,\n    iconColor: '#D1A400',\n    background: '#FFF9E1',\n    border: '#D1A400',\n  },\n  [TYPES.error]: {\n    icon: errorIcon,\n    iconColor: '#CB5D5D',\n    background: '#FFEEEE',\n    border: '#FF8F8F',\n  },\n};\n\nconst DEFAULTS = {\n  type: TYPES.info,\n  margin: '0',\n};\n\nexport {\n  TYPES,\n  TYPE_STYLES,\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Icon} from 'react-icons-kit';\n\nimport {\n  DEFAULTS,\n  TYPE_STYLES,\n} from './constants';\nimport {\n  Box,\n  TopSection,\n  IconWrapper,\n  Heading,\n  Content,\n} from './styled';\n\nconst InfoBox = props => {\n  const typeStyle = TYPE_STYLES[props.type] || TYPE_STYLES[DEFAULTS.type];\n  return (\n    <Box\n      typeStyle={typeStyle}\n      margin={props.margin}\n      style={{width: props.width, height: props.height}}\n    >\n      <TopSection>\n        {!props.hideIcon &&\n          <IconWrapper color={typeStyle.iconColor}>\n            <Icon icon={typeStyle.icon} size={17} />\n          </IconWrapper>}\n        <Heading>{props.heading}</Heading>\n      </TopSection>\n      {props.content &&\n        <Content>{props.content}</Content>}\n    </Box>\n  );\n};\n\nInfoBox.propTypes = {\n  heading: PropTypes.string.isRequired,\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  type: PropTypes.oneOf(['info', 'neutral', 'success', 'warning', 'error']),\n  margin: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.string,\n};\n\nexport default InfoBox;\n","import React from 'react';\n\nimport InfoBox from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Info Box',\n  component: InfoBox,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    content: {\n      description: 'Either a string or a react component',\n      control: {type: 'text'},\n    },\n    type: {\n      table: {defaultValue: {summary: DEFAULTS.type}}\n    },\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n  }\n};\n\nconst Template = args => <InfoBox {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  heading: 'Im an info box'\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nimport {DEFAULTS} from './constants';\n\nconst Box = styled.div`\n  box-sizing: border-box;\n  border-radius: 4px;\n  padding: 13px 15px;\n  background: ${props => props.typeStyle.background};\n  border: 1px solid ${props => props.typeStyle.border};\n  color: #333;\n  margin: ${props => props.margin || DEFAULTS.margin};\n`;\n\nconst TopSection = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst IconWrapper = styled.div`\n  color: ${props => props.color};\n  margin-right: 6px;\n  position: relative;\n`;\n\nconst Heading = styled.p`\n  margin: 0;\n  font-size: 13px;\n  font-weight: 500;\n`;\n\nconst Content = styled.div`\n  margin: 7px 0 0 0;\n`;\n\nexport {\n  Box,\n  TopSection,\n  IconWrapper,\n  Heading,\n  Content,\n};\n","const DEFAULTS = {\n  margin: '0',\n  width: '100%',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from 'react-icons-kit';\nimport {ic_close as errorIcon} from 'react-icons-kit/md/ic_close';\nimport {ic_check as successIcon} from 'react-icons-kit/md/ic_check';\n\nimport TooltipAnchor from '../tooltip-anchor';\nimport {\n  Wrapper,\n  TopContainer,\n  Label,\n  EnforcementNote,\n  BottomContainer,\n  IconWrapper,\n} from './styled';\n\nconst InputDecorator = props => {\n\n  const required = props.isRequired && '*required';\n  const optional = props.isOptional && '(optional)';\n  const enforcementText = required || optional;\n\n  const bottomText = props.validationErrorMessage ||\n    props.validationSuccessMessage ||\n    props.helperText;\n\n  const shouldShowBottomPart = !!props.validationErrorMessage ||\n    !!props.validationSuccessMessage ||\n    props.fullHeight;\n\n  const errorTextColor = props.validationErrorMessage && '#fa3939';\n  const successTextColor = props.validationSuccessMessage && 'green';\n  const bottomTextColor = errorTextColor || successTextColor || '#777';\n\n  return (\n    <Wrapper\n      margin={props.margin}\n      width={props.width}\n    >\n      {!!props.label &&\n        <TopContainer>\n          {!!props.label && (\n            <Label>\n              {props.label}\n            </Label>\n          )}\n          {!!props.additionalInfo && (\n            <TooltipAnchor\n              text={props.additionalInfo}\n              id={props.label}\n              tooltipPlacement=\"right\"\n              margin=\"0 0 0 6px\"\n            />\n          )}\n          {!!enforcementText && (\n            <EnforcementNote>\n              {enforcementText}\n            </EnforcementNote>\n          )}\n        </TopContainer>}\n      {props.children}\n      {shouldShowBottomPart && (\n        <BottomContainer color={bottomTextColor}>\n          {!!props.validationErrorMessage &&\n            <IconWrapper>\n              <Icon icon={errorIcon} size={15} />\n            </IconWrapper>}\n          {!!props.validationSuccessMessage &&\n            <IconWrapper>\n              <Icon icon={successIcon} size={15} />\n            </IconWrapper>}\n          {bottomText && (\n            <p>{bottomText}</p>\n          )}\n        </BottomContainer>\n      )}\n\n    </Wrapper>\n  );\n};\n\nInputDecorator.propTypes = {\n  label: PropTypes.string,\n  isOptional: PropTypes.bool,\n  isRequired: PropTypes.bool,\n  width: PropTypes.string,\n  fullHeight: PropTypes.bool,\n  margin: PropTypes.string,\n  helperText: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  validationErrorMessage: PropTypes.string,\n  validationSuccessMessage: PropTypes.string,\n};\n\nexport default InputDecorator;\n","import React from 'react';\n\nimport InputDecorator from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Input Decorator',\n  component: InputDecorator,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n    width: {\n      table: {defaultValue: {summary: DEFAULTS.width}}\n    },\n    isRequired: {\n      table: {defaultValue: {summary: false}}\n    },\n    isOptional: {\n      table: {defaultValue: {summary: false}}\n    },\n    fullHeight: {\n      description: 'Display the bottom part even it is empty',\n      table: {defaultValue: {summary: false}}\n    },\n  },\n};\n\nconst Template = args => <InputDecorator {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  label: 'Im a input decorator'\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nimport {DEFAULTS} from './constants';\nimport {COLORS} from '../../constants';\n\nconst Wrapper = styled.div`\n  margin: ${({margin}) => margin || DEFAULTS.margin};\n  display: flex;\n  flex-direction: column;\n  width: ${({width}) => width || DEFAULTS.width};\n`;\n\nconst TopContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0 0 6px 0px;\n`;\n\nconst Label = styled.p`\n  color: ${COLORS.greyDark};\n  margin: 0;\n  padding: 0;\n  font-size: 13px;\n  font-weight: 500;\n`;\n\nconst EnforcementNote = styled.p`\n  color: #666;\n  margin: 0 0 0 6px;\n  padding: 0;\n  font-size: 12px;\n  color: #777;\n`;\n\nconst BottomContainer = styled.div`\n  height: 13px;\n  display: flex;\n  align-items: center;\n  padding: 5px 0 0 5px;\n  font-size: 12px;\n  color: ${({color}) => color};\n  p {\n    margin: 0;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  margin: 0 4px 0 0;\n`;\n\nexport {\n  Wrapper,\n  TopContainer,\n  Label,\n  EnforcementNote,\n  BottomContainer,\n  IconWrapper,\n};\n","import React from 'react';\nimport {map, eq, find} from 'lodash/fp';\nimport PropTypes from 'prop-types';\nimport {\n  Wrapper,\n  BaseInput,\n  BaseSelect,\n  BaseTextArea,\n  Label,\n} from './styled';\n\n// NOTE: This component is depricated. Use textfield, select, textarea etc instead\n\nconst Input = (\n  {\n    type = 'text',\n    label,\n    placeholder,\n    color,\n    background,\n    width,\n    height,\n    margin,\n    name,\n    onChange,\n    value,\n    defaultValue,\n    options,\n    valid,\n  }\n) => {\n  const inputTypes = [\n    'text',\n    'number',\n    'date',\n    'email',\n    'password',\n    'radio',\n    'file',\n  ];\n  return (\n    <Wrapper margin={margin} width={width}>\n      {label && <Label>{label}</Label>}\n      {\n        eq(type, 'select') &&\n          <BaseSelect\n            color={color}\n            background={background}\n            height={height}\n            type=\"select\"\n            defaultValue={defaultValue}\n            onChange={onChange}\n          >\n            {map(({value, label}) => (\n              <option key={value} value={value}>{label}</option>\n            ), options)}\n          </BaseSelect>\n      }\n\n      {find(eq(type), inputTypes) && (\n        <BaseInput\n          valid={valid}\n          color={color}\n          background={background}\n          height={height}\n          name={name}\n          type={type}\n          value={value}\n          placeholder={placeholder}\n          onChange={onChange}\n        />\n      )}\n\n      {\n        eq(type, 'textarea') &&\n          <BaseTextArea\n            color={color}\n            background={background}\n          // height={height}\n            name={name}\n            type={type}\n            value={value}\n            placeholder={placeholder}\n            onChange={onChange}\n          />\n      }\n    </Wrapper>\n  );\n};\n\nInput.propTypes = {\n  color: PropTypes.string,\n  background: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.string,\n  margin: PropTypes.string,\n  type: PropTypes.string,\n  label: PropTypes.string,\n  placeholder: PropTypes.string,\n};\n\nexport default Input;\n","import React from 'react';\n\nimport Input from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\n// NOTE: This component is depricated. Use textfield, select, textarea etc instead\n\nconst main = {\n  title: 'Components/Input',\n  component: Input,\n  decorators: [YggioFontDecorator],\n};\n\nconst Template = args => <Input {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\nimport {COLORS} from '../../constants';\n\nconst Wrapper = styled.div`\n  margin: ${({margin}) => margin || '0'};\n  display: flex;\n  flex-direction: column;\n  width: ${({width}) => width || '100%'};\n`;\n\nconst BaseInput = styled.input`\n  width: 100%;\n  height: ${({height}) => height || '34px'};\n  box-sizing: border-box;\n  color: ${({color}) => color || COLORS.greyDark};\n  background: ${({background}) => background || COLORS.trueWhite};\n  border: ${({border, valid}) => {\n    const color = valid\n      ? COLORS.greenLight\n      : COLORS.greyAlt;\n    return border || `1px solid ${color}`;\n  }};\n  border-left: ${({valid}) => {\n    const color = valid\n      ? COLORS.greenLight\n      : COLORS.greyAlt;\n    return `5px solid ${color}`;\n  }};\n  border-radius: ${({borderRadius}) => borderRadius || '3px'};\n  padding-left: 10px;\n  font-size: 13px;\n  transition: border-color .2s;\n  &:hover {\n    transition: border-color .2s;\n  }\n  &:focus {\n    outline: none;\n    transition: border-color .2s;\n  }\n`;\n\nconst BaseSelect = styled.select`\n  width: 100%;\n  height: ${({height}) => height || '34px'};\n  box-sizing: border-box;\n  color: ${({color}) => color || COLORS.greyDark};\n  background: ${({background}) => background || COLORS.trueWhite};\n  border: ${({border}) => border || `1px solid ${COLORS.greyAlt}`};\n  border-radius: ${({borderRadius}) => borderRadius || '3px'};\n  padding-left: 7px;\n  font-size: 13px;\n  transition: border-color .2s;\n  &:hover {\n    border-color: ${COLORS.grey};\n    transition: border-color .2s;\n    cursor: pointer;\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst BaseTextArea = styled.textarea`\n  resize: none;\n  box-sizing: border-box;\n  width: 100%;\n  height: ${({height}) => height || '200px'};\n  color: ${({color}) => color || COLORS.greyDark};\n  padding: 7px 0 0 10px;\n  font-size: 13px;\n  background: ${({background}) => background || COLORS.trueWhite};\n  border: ${({border}) => border || `1px solid ${COLORS.greyAlt}`};\n  border-radius: ${({borderRadius}) => borderRadius || '3px'};\n  transition: border-color .2s;\n  &:hover {\n    border-color: ${COLORS.grey};\n    transition: border-color .2s;\n  }\n  &:focus {\n    outline: none;\n    border-color: ${COLORS.greyMedium};\n    transition: border-color .2s;\n  }\n`;\n\nconst Label = styled.p`\n  color: ${COLORS.greyDark};\n  margin: 0 0 5px 5px;\n  padding: 0;\n  font-size: 13px;\n`;\n\nexport {\n  BaseInput,\n  BaseSelect,\n  BaseTextArea,\n  Label,\n  Wrapper,\n};\n","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport {withState} from '../../hocs';\nimport {InteractiveLayerContainer} from './styled';\nimport state from './state';\n\nconst InteractiveLayer = props => {\n  useEffect(() => {\n    if (props.position && props.prevPosition) {\n      const x = props.position.left - props.prevPosition.left;\n      const y = props.position.top - props.prevPosition.top;\n      if (x || y) {\n        props.onPan({x, y, ...props.position});\n      }\n    }\n  }, [props.position]);\n\n  const deriveEventPosition = evt => {\n    const clientPosition = {\n      left: _.get(evt, 'targetTouches[0].pageX', evt.clientX),\n      top: _.get(evt, 'targetTouches[0].pageY', evt.clientY),\n    };\n\n    if (!props.boundingRect) {\n      return clientPosition;\n    }\n\n    const translatedPosition = {\n      left: clientPosition.left - props.boundingRect.left,\n      top: clientPosition.top - props.boundingRect.top,\n    };\n\n    return {\n      left: translatedPosition.left - 0.5 * props.boundingRect.width,\n      top: translatedPosition.top - 0.5 * props.boundingRect.height,\n    };\n  };\n\n  const handleMouseMove = evt => {\n    if (props.position) {\n      const derivedPosition = deriveEventPosition(evt);\n      props.setPrevPosition(props.position);\n      props.setPosition(derivedPosition);\n    }\n  };\n\n  const handleMouseUp = () => {\n    props.setPrevPosition(props.position);\n    props.setPosition(null);\n    props.onMouseUp();\n  };\n\n  const handleMouseDown = () => {\n    props.setPosition({});\n  };\n\n  const handleWheel = evt => {\n    const derivedPosition = deriveEventPosition(evt);\n    const zoom = evt.deltaY;\n    props.onZoom({...derivedPosition, zoom});\n  };\n\n  return (\n    <InteractiveLayerContainer\n      onTouchStart={handleMouseDown}\n      onMouseDown={handleMouseDown}\n      onTouchMove={handleMouseMove}\n      onMouseMove={handleMouseMove}\n      onTouchEnd={handleMouseUp}\n      onMouseUp={handleMouseUp}\n      onWheel={handleWheel}\n      position={props.position}\n    >\n      {props.children}\n    </InteractiveLayerContainer>\n  );\n};\n\nInteractiveLayer.propsTypes = {\n  style: PropTypes.object, // propagate optional styling\n  boundingRect: PropTypes.shape({\n    left: PropTypes.number.isRequired,\n    top: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  }),\n  onMouseUp: PropTypes.func.isRequired,\n  onPan: PropTypes.func.isRequired,\n  onZoom: PropTypes.func.isRequired,\n};\n\nexport default compose(\n  withState(state),\n)(InteractiveLayer);\n","import {set} from 'lodash/fp';\nimport createReducer from '../../utils/create-reducer';\n\nconst POSITION_SET = 'POSITION_SET';\nconst PREV_POSITION_SET = 'PREV_POSITION_SET';\n\nconst actions = {\n  setPosition: position => ({\n    type: POSITION_SET,\n    position,\n  }),\n  setPrevPosition: prevPosition => ({\n    type: PREV_POSITION_SET,\n    prevPosition,\n  }),\n};\n\nconst defaultState = {\n  position: null,\n  prevPosition: null,\n};\n\nconst handlers = {\n  [POSITION_SET]: (state, {position}) => set('position', position, state),\n  [PREV_POSITION_SET]: (state, {prevPosition}) => set('prevPosition', prevPosition, state),\n};\n\nconst reducer = createReducer(defaultState, handlers);\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled from 'styled-components';\n\nconst InteractiveLayerContainer = styled.div`\nwidth: 100%;\nheight: 100%;\nposition: relative;\nuser-select: none;\ncursor: ${({position}) => (position ? 'grabbing' : 'default')};\n`;\n\nexport {\n  InteractiveLayerContainer,\n};\n","import {COLORS} from '../../constants';\nimport YGGIO_LOGO from '../../assets/images/yggio-icon.svg';\n\nconst DEFAULTS = {\n  color: COLORS.greenMatt,\n  size: 100,\n  borderSize: 5,\n  speed: 1,\n  logoSrc: YGGIO_LOGO,\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\nimport LogoIcon from '../logo';\nimport {\n  GridWrapper,\n  StackSpinner,\n  StackLogoIcon,\n  Spinner\n} from './styled';\n\nconst LogoSpinner = (\n  {\n    color = DEFAULTS.color,\n    size = DEFAULTS.size,\n    borderSize = DEFAULTS.borderSize,\n    speed = DEFAULTS.speed,\n    logoSrc = DEFAULTS.logoSrc,\n  }\n) => (\n  <GridWrapper\n    size={size}\n    borderSize={borderSize}\n  >\n    <StackSpinner>\n      <Spinner\n        speed={speed}\n        color={color}\n        size={size + (borderSize * 2)}\n        borderSize={borderSize}\n      >\n        <div /><div /><div /><div />\n      </Spinner>\n    </StackSpinner>\n    <StackLogoIcon\n      margin={borderSize}\n    >\n      <LogoIcon\n        src={logoSrc}\n        backgroundColor={color}\n        width={`${size}px`}\n        height={`${size}px`}\n      />\n    </StackLogoIcon>\n  </GridWrapper>\n\n);\n\nLogoSpinner.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  speed: PropTypes.number,\n};\n\nexport default LogoSpinner;\n","import React from 'react';\n\nimport LogoSpinner from './index';\nimport {DEFAULTS} from './constants';\n\nconst main = {\n  title: 'Components/Logo Spinner',\n  component: LogoSpinner,\n  argTypes: {\n    color: {\n      table: {defaultValue: {summary: DEFAULTS.color}}\n    },\n    size: {\n      table: {defaultValue: {summary: DEFAULTS.size}}\n    },\n    speed: {\n      table: {defaultValue: {summary: DEFAULTS.speed}}\n    },\n  }\n};\n\nconst Template = args => <LogoSpinner {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nconst GridWrapper = styled.div`\n  display: grid;\n  width: ${({size, borderSize}) => size + borderSize * 2}px;\n  height: ${({size, borderSize}) => size + borderSize * 2}px;\n`;\nconst StackSpinner = styled.div`\n  grid-column: 1;\n  grid-row: 1;\n  z-index: 1;\n`;\nconst StackLogoIcon = styled.div`\n  grid-column: 1;\n  grid-row: 1;\n  z-index: 2;\n  margin: ${({margin}) => margin}px;\n`;\nconst Spinner = styled.div`\n  display: inline-block;\n  position: relative;\n  width: ${({size}) => size}px;\n  height: ${({size}) => size}px;\n\n  div {\n    box-sizing: border-box;\n    display: block;\n    position: absolute;\n    width: ${({size}) => size}px;\n    height: ${({size}) => size}px;\n    border: ${({borderSize}) => borderSize}px solid ${({color}) => color};\n    border-radius: 50%;\n    animation: lds-ring ${({speed}) => speed * 1.2}s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    border-color: ${({color}) => color} transparent transparent transparent;\n  }\n  div:nth-child(1) {\n    animation-delay: -${({speed}) => speed * 0.45}s;\n  }\n  div:nth-child(2) {\n    animation-delay: -${({speed}) => speed * 0.3}s;\n  }\n  div:nth-child(3) {\n    animation-delay: -${({speed}) => speed * 0.15}s;\n  }\n  @keyframes lds-ring {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n`;\nexport {\n  GridWrapper,\n  StackSpinner,\n  StackLogoIcon,\n  Spinner,\n};\n","import {COLORS} from '../../constants';\n\nconst DEFAULTS = {\n  height: '50px',\n  width: '50px',\n  margin: '0',\n  color: COLORS.white,\n  backgroundColor: COLORS.transparent,\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {LogoImg} from './styled';\n\nconst Logo = (\n  {\n    src,\n    alt,\n    height,\n    width,\n    color,\n    backgroundColor,\n    margin,\n  }\n) => (\n  <LogoImg\n    src={src}\n    alt={alt}\n    height={height}\n    width={width}\n    color={color}\n    backgroundColor={backgroundColor}\n    margin={margin}\n  />\n);\n\nLogo.propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  color: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  margin: PropTypes.string,\n};\n\nexport default Logo;\n","import React from 'react';\n\nimport Logo from './index';\nimport {DEFAULTS} from './constants';\nimport {img} from './story-data.json';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Logo',\n  component: Logo,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    src: {\n      control: false,\n    },\n    width: {\n      table: {defaultValue: {summary: DEFAULTS.width}}\n    },\n    height: {\n      table: {defaultValue: {summary: DEFAULTS.height}}\n    },\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n    color: {\n      table: {defaultValue: {summary: DEFAULTS.color}}\n    },\n    backgroundColor: {\n      table: {defaultValue: {summary: DEFAULTS.backgroundColor}}\n    },\n  }\n};\n\nconst Template = args => <Logo {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  src: img,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nimport {DEFAULTS} from './constants';\n\nconst LogoImg = styled.img`\n  height: ${({height = DEFAULTS.height}) => height};\n  width: ${({width = DEFAULTS.width}) => width};\n  margin: ${({margin = DEFAULTS.margin}) => margin};\n  color: ${({color = DEFAULTS.color}) => color};\n  background-color: ${({backgroundColor = DEFAULTS.backgroundColor}) => backgroundColor};\n  border-radius: 100%;\n`;\n\nexport {\n  LogoImg,\n};\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport PropTypes from 'prop-types';\nimport dynamic from 'next/dynamic';\n\nimport {\n  LEAFLET_ATTRIBUTION,\n  LEAFLET_URL,\n} from '../../constants';\n\nimport {\n  Markers,\n  MapButtons,\n} from './sub-components';\n\nimport state from './state';\nimport {withState} from '../../hocs';\nimport {\n  MapWrapper,\n  LeafletMap,\n  StyledMessageBox,\n} from './styled';\nimport {sanitizeItems, getBounds} from './utils';\n\nconst TileLayer = dynamic(\n  () => import('react-leaflet').then(mod => mod.TileLayer),\n  {ssr: false},\n);\nconst LayerGroup = dynamic(\n  () => import('react-leaflet').then(mod => mod.LayerGroup),\n  {ssr: false},\n);\n\nconst MarkersLayer = props => (\n  <LayerGroup>\n    <Markers\n      viewOnly={props.viewOnly}\n      router={props.router}\n      movingMode={props.movingMode}\n      URI={props.mapLayer.URI}\n      items={props.mapLayer.items}\n      saveMarker={props.mapLayer.saveMarker}\n      markerShape={props.mapLayer.markerShape}\n      setViewport={props.setViewport}\n    />\n  </LayerGroup>\n);\n\nMarkersLayer.propTypes = {\n  router: PropTypes.object.isRequired,\n  history: PropTypes.object,\n  location: PropTypes.object,\n  movingMode: PropTypes.bool,\n  mapLayer: PropTypes.object,\n};\n\nconst BasicMap = props => {\n  const deviceItems = _.get(props, 'mapLayers.devices.items') || [];\n  const locationItems = _.get(props, 'mapLayers.locations.items') || [];\n  const allItems = _.concat(deviceItems, locationItems);\n  const items = sanitizeItems(allItems);\n  const bounds = getBounds(items);\n\n  return (\n    <MapWrapper\n      height={props.height}\n      width={props.width}\n    >\n      {props.movingMode && (\n        <StyledMessageBox>\n          <b>Moving mode activated</b>\n        </StyledMessageBox>\n      )}\n      <MapButtons\n        showGetLocation={props.showGetLocation}\n        viewOnly={props.viewOnly}\n        viewport={props.viewport}\n        setViewport={props.setViewport}\n        setMovingMode={props.setMovingMode}\n        movingMode={props.movingMode}\n      />\n      <LeafletMap\n        movingMode={props.movingMode}\n        zoomControl={false}\n        useFlyTo={false}\n        center={props.viewport.center}\n        zoom={props.viewport.zoom}\n        minZoom={2}\n        maxZoom={18}\n        bounds={!_.isEmpty(bounds) ? bounds : null}\n        maxBounds={[\n          [-90, -180],\n          [90, 180]\n        ]}\n        dragging\n        onViewportChanged={viewport => {\n          props.setViewport(viewport);\n        }}\n        onClick={evt => {\n          if (props.onClick) props.onClick(evt);\n        }}\n      >\n        <TileLayer\n          attribution={LEAFLET_ATTRIBUTION}\n          url={LEAFLET_URL}\n        />\n        {_.map(props.mapLayers, mapLayer => (\n          <MarkersLayer\n            viewOnly={props.viewOnly}\n            router={props.router}\n            key={mapLayer._id}\n            mapLayer={mapLayer}\n            movingMode={props.movingMode}\n            setViewport={props.setViewport}\n          />\n        ))}\n      </LeafletMap>\n    </MapWrapper>\n  );\n};\n\nBasicMap.propTypes = {\n  // from top\n  height: PropTypes.string,\n  width: PropTypes.string,\n  mapLayers: PropTypes.object,\n  // from state\n  movingMode: PropTypes.bool,\n  setMovingMode: PropTypes.func,\n  viewport: PropTypes.object,\n  setViewport: PropTypes.func,\n};\n\n//\n// data-processing & state stuff\n//\n\nconst Map = compose(\n  withState(state),\n)(BasicMap);\n\nMap.propTypes = {\n  // from top\n  viewOnly: PropTypes.boolean,\n  router: PropTypes.object.isRequired,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  mapLayers: PropTypes.object,\n  onClick: PropTypes.func\n};\n\n//\n// exports\n//\n\nexport default Map;\n","import {MAP} from '../../constants';\n\nconst MAP_MOVING_MODE_SET = 'MAP_MOVING_MODE_SET';\nconst MAP_VIEWPORT_SET = 'MAP_VIEWPORT_SET';\n\nconst actions = {\n  setMovingMode: movingMode => ({\n    type: MAP_MOVING_MODE_SET,\n    payload: {movingMode},\n  }),\n  setViewport: viewport => ({\n    type: MAP_VIEWPORT_SET,\n    payload: {viewport},\n  }),\n};\n\nconst defaultState = {\n  movingMode: false,\n  viewport: {center: MAP.defaultCenter, zoom: MAP.defaultZoom},\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case MAP_MOVING_MODE_SET: {\n      const {movingMode} = payload;\n      return {\n        ...state,\n        movingMode,\n      };\n    }\n\n    case MAP_VIEWPORT_SET: {\n      const {viewport} = payload;\n      return {\n        ...state,\n        viewport,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","// Modules\nimport styled from 'styled-components';\nimport {eq} from 'lodash/fp';\nimport dynamic from 'next/dynamic';\n\n// Local components\nimport {COLORS} from '../../constants';\n\nconst Map = dynamic(\n  () => import('react-leaflet').then(mod => mod.Map),\n  {ssr: false},\n);\n\nconst Tooltip = dynamic(\n  () => import('react-leaflet').then(mod => mod.Tooltip),\n  {ssr: false},\n);\n\nconst MapWrapper = styled.div`\n  position: relative;\n  height: ${({height}) => height || '100vh'};\n  width: ${({width}) => width || '100%'};\n`;\n\nconst LeafletMap = styled(Map)`\n  filter: ${props => (props.placementMode ? 'grayscale(50%)' : 'none')};\n\n  & {\n    height: 100%;\n    width: 100%;\n  }\n\n\n  & .leaflet-popup-content {\n    margin: 0;\n    padding: 0;\n    width: 199px;\n  }\n  & .leaflet-popup-content-wrapper {\n    margin: 0;\n    padding: 0;\n  }\n\n  & .leaflet-marker-icon {\n    div {\n      filter: brightness(100%);\n      transition: all 0.2s;\n    }\n    div:hover {\n      filter: brightness(120%);\n      transition: all 0.2s;\n    }\n  }\n\n  & .leaflet-div-icon {\n    background: none;\n    border: none;\n  }\n`;\n\nconst BaseTooltip = styled(Tooltip)`\n\n  &::before {\n    border: none;\n  }\n`;\n\nconst MapButtonsLayer = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  z-index: 1000;\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  width: 40px;\n  min-height: 200px;\n`;\n\nconst MapItem = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.4em;\n  flex-direction: column;\n  height:150px;\n  width: 200px;\n  margin: 0;\n  padding: 0;\n`;\n\nconst MapItemHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 10px;\n  background: ${COLORS.white};\n  height: 20%;\n  width: 100%;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n  border-bottom: 1px solid ${COLORS.greyLight};\n`;\n\nconst MapItemFooter = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  background: ${COLORS.white};\n  height: 80%;\n  width: 100%;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n`;\n\n\nconst MovingModeLayer = styled.div`\n  z-index: 1000;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  color: ${COLORS.greyDark};\n  background: rgba(20, 20, 20, 0.2);\n  padding-top: 50px;\n  width: 100%;\n  font-size: 2em;\n  font-weight: 800;\n`;\n\nconst MarkerClusterIcon = styled.div`\n  opacity: 0.9;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${({color}) => color};\n  border: 2px solid ${COLORS.white};\n  border-radius: ${({shape}) => shape === 'round' ? '50px' : '1px'};\n  width: 30px;\n  height: 30px;\n  padding: 4px;\n  transition: all 0.2s;\n  background-size: 80%;\n\n  &:hover {\n    background: rgba(0, 0, 0, 0.1);\n    transition: all 0.2s;\n  }\n`;\n\nconst MarkerIcon = styled.div`\n  background: ${({color}) => color};\n  border-radius: ${({markerShape}) => {\n    if (eq(markerShape, 'square')) {\n      return '3px';\n    }\n\n    if (eq(markerShape, 'round')) {\n      return '50px';\n    }\n\n    return '5px';\n  }};\n  width: 100%;\n  height: 100%;\n  padding: 4px;\n  border: 2px solid ${COLORS.greyDark};\n  transition: background 0.2s;\n  background-size: 80%;\n\n  img {\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst StyledMessageBox = styled.div`\n  z-index: 1000;\n  position: absolute;\n  top: 40px;\n  margin: auto;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 50px;\n  width: 300px;\n  background: ${COLORS.white};\n  border-radius: 3px;\n  border: 2px solid ${COLORS.greenRacing};\n  -webkit-box-shadow: 0px 0px 10px 1px rgba(0,0,0,0.75);\n  -moz-box-shadow: 0px 0px 10px 1px rgba(0,0,0,0.75);\n  box-shadow: 0px 0px 10px 1px rgba(0,0,0,0.75);\n`;\n\nexport {\n  MapWrapper,\n  LeafletMap,\n  BaseTooltip,\n  MapButtonsLayer,\n  MapItem,\n  MapItemHeader,\n  MapItemFooter,\n  MovingModeLayer,\n  MarkerClusterIcon,\n  MarkerIcon,\n  StyledMessageBox,\n};\n","import dynamic from 'next/dynamic';\nimport MapButtons from './map-buttons';\n\nconst Markers = dynamic(() => import('./markers'), {ssr: false});\n\nexport {\n  Markers,\n  MapButtons,\n};\n","import React from 'react';\nimport {Icon} from 'react-icons-kit';\nimport {\n  arrows,\n  plus,\n  minus,\n  locationArrow\n} from 'react-icons-kit/fa';\nimport toast from 'react-hot-toast';\nimport {MapButtonsLayer} from '../styled';\nimport Button from '../../button';\nimport {GEO_ERROR_CODES} from '../../../constants';\n\n\nconst MapButtons = props => {\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(\n      pos => {\n        props.setViewport({\n          center: [pos.coords.latitude, pos.coords.longitude],\n          zoom: props.viewport.zoom < 12 ? 12 : props.viewport.zoom\n        });\n      },\n      err => {\n        const duration = 10000;\n        switch (err.code) {\n          case GEO_ERROR_CODES.permissionDenied:\n            toast.error('Browser failed permission to get location', {duration});\n            break;\n          case GEO_ERROR_CODES.positionUnavailabe:\n            toast.error('Failed to get location', {duration});\n            break;\n          case GEO_ERROR_CODES.timeOut:\n            toast.error('Took to long to recieve location', {duration});\n            break;\n\n          default:\n            break;\n        }\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 0\n      }\n    );\n  };\n\n  return (\n    <MapButtonsLayer>\n      {!props.viewOnly && (\n        <Button\n          margin={'3px'}\n          content={<Icon size={20} icon={arrows} />}\n          color={'green'}\n          height={'30px'}\n          width={'30px'}\n          borderRadius={'5px'}\n          onClick={() => props.setMovingMode(!props.movingMode)}\n        />\n      )}\n      {\n        props.showGetLocation &&\n          <Button\n            margin={'3px'}\n            content={<Icon size={20} icon={locationArrow} />}\n            color={'green'}\n            height={'30px'}\n            width={'30px'}\n            borderRadius={'5px'}\n            onClick={getLocation}\n          />\n      }\n      <Button\n        margin={'3px'}\n        content={<Icon size={20} icon={plus} />}\n        color={'green'}\n        height={'30px'}\n        width={'30px'}\n        borderRadius={'5px'}\n        onClick={() => {\n          if (props.viewport.zoom <= 25) {\n            props.setViewport({...props.viewport, zoom: props.viewport.zoom + 1});\n          }\n        }}\n      />\n      <Button\n        margin={'3px'}\n        content={<Icon size={20} icon={minus} />}\n        color={'green'}\n        height={'30px'}\n        width={'30px'}\n        borderRadius={'5px'}\n        onClick={() => {\n          if (props.viewport.zoom >= 3) {\n            props.setViewport({...props.viewport, zoom: props.viewport.zoom - 1});\n          }\n        }}\n      />\n    </MapButtonsLayer>\n  );\n};\n\nexport default MapButtons;\n","import _ from 'lodash';\nimport {\n  MAP,\n} from '../../constants';\n\nconst getBounds = items => {\n  const bounds = _.map(items, item => {\n    if (item.latlng) {\n      return item.latlng;\n    }\n    if (item.lat && item.lng) {\n      return [item.lat, item.lng];\n    }\n  });\n  if (!_.size(bounds)) {\n    return _.uniq([MAP.defaultCenter]);\n  }\n  return _.uniq(_.compact(bounds));\n};\n\nconst sanitizeItems = items => {\n  const sanitizedItems = _.filter(items, item => {\n    if (item.latlng && _.isArray(item.latlng) && _.size(item.latlng) === 2) {\n      const [lat, lng] = item.latlng;\n      if (_.isFinite(lat) && _.isFinite(lng)) {\n        return item;\n      }\n    }\n    if (_.isFinite(item.lat) && _.isFinite(item.lng)) {\n      return item;\n    }\n  });\n  return sanitizedItems;\n};\n\nexport {\n  getBounds,\n  sanitizeItems,\n};\n","const DEFAULTS = {\n  width: '300px',\n  padding: 0,\n  shouldCloseOnOverlayClick: true,\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport ReactModal from 'react-modal';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\nimport modalState from './state';\n\nconst Modal = props => (\n  <ReactModal\n    isOpen={props.isOpen}\n    shouldCloseOnOverlayClick={\n      props.shouldCloseOnOverlayClick || DEFAULTS.shouldCloseOnOverlayClick\n    }\n    onRequestClose={props.close}\n    onAfterOpen={() => {\n      document.body.style.overflow = 'hidden';\n    }}\n    onAfterClose={() => document.body.style.removeProperty('overflow')}\n    ariaHideApp={false}\n    style={{\n      overlay: {\n        zIndex: 20000,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      },\n      content: {\n        border: 'none',\n        width: props.width || DEFAULTS.width,\n        top: '40%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        transform: 'translate(-50%, -50%)',\n        padding: props.padding || DEFAULTS.padding,\n      },\n    }}\n  >\n    {props.children}\n  </ReactModal>\n);\n\nModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func,\n  shouldCloseOnOverlayClick: PropTypes.bool,\n  width: PropTypes.string,\n  padding: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport {\n  Modal,\n  modalState,\n};\n","import React from 'react';\n\nimport {Modal} from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Modal',\n  component: Modal,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    width: {\n      table: {defaultValue: {summary: DEFAULTS.width}}\n    },\n    padding: {\n      table: {defaultValue: {summary: DEFAULTS.padding}}\n    },\n    shouldCloseOnOverlayClick: {\n      table: {defaultValue: {summary: DEFAULTS.shouldCloseOnOverlayClick}}\n    },\n    children: {\n      control: false,\n    },\n  }\n};\n\nconst Template = args => (\n  <Modal {...args}>\n    <p>Content</p>\n  </Modal>\n);\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  isOpen: true,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","const ACTION_TYPES = {\n  open: 'open',\n  close: 'close',\n};\n\nconst defaultState = {\n  isOpen: false,\n};\n\nconst actions = {\n  open: () => ({\n    type: ACTION_TYPES.open,\n  }),\n  close: () => ({\n    type: ACTION_TYPES.close,\n  }),\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type} = action;\n  switch (type) {\n\n    case ACTION_TYPES.open: {\n      return {\n        isOpen: true,\n      };\n    }\n    case ACTION_TYPES.close: {\n      return {\n        isOpen: false,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  reducer,\n  actions,\n};\n","// constants.ts\n\nconst DEFAULTS = {\n  isDisabled: false,\n  fullHeight: false,\n};\n\nexport {\n  DEFAULTS,\n};\n","// number-field/index.ts\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\nimport InputDecorator from '../input-decorator';\nimport {StyledInput} from './styled';\n\nconst NumberField = props => (\n  <InputDecorator\n    label={props.label}\n    additionalInfo={props.additionalInfo}\n    isRequired={props.isRequired}\n    isOptional={props.isOptional}\n    helperText={props.helperText}\n    validationErrorMessage={props.validationErrorMessage}\n    validationSuccessMessage={props.validationSuccessMessage}\n    width={props.width}\n    margin={props.margin}\n    fullHeight={props.fullHeight || DEFAULTS.fullHeight}\n  >\n    <StyledInput\n      type={'number'}\n      min={props.min}\n      max={props.max}\n      value={props.value}\n      name={props.name}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n      onBlur={props.onBlur}\n      autoFocus={!!props.autoFocus}\n      disabled={props.isDisabled || props.disabled || DEFAULTS.isDisabled}\n      disableBlueFocusOutline={props.disableBlueFocusOutline}\n      isInvalid={!!props.validationErrorMessage}\n    />\n  </InputDecorator>\n);\n\nNumberField.propTypes = {\n  // Input props\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  name: PropTypes.string,\n  min: PropTypes.string,\n  max: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  disableBlueFocusOutline: PropTypes.bool,\n  // Input decorator props\n  label: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  isRequired: PropTypes.bool,\n  isOptional: PropTypes.bool,\n  helperText: PropTypes.string,\n  validationErrorMessage: PropTypes.string,\n  validationSuccessMessage: PropTypes.string,\n  width: PropTypes.string,\n  margin: PropTypes.string,\n  fullHeight: PropTypes.bool,\n};\n\nexport default NumberField;\n","import React from 'react';\n\nimport NumberField from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Number Field',\n  component: NumberField,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    isDisabled: {\n      table: {defaultValue: {summary: DEFAULTS.isDisabled}}\n    },\n    fullHeight: {\n      table: {defaultValue: {summary: DEFAULTS.fullHeight}}\n    },\n  }\n};\n\nconst Template = args => <NumberField {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","// styled\n\nimport styled from 'styled-components';\nimport {commonInputStyles, inputFocusStyle} from '../../global/styled';\n\nconst StyledInput = styled.input`\n  ${commonInputStyles}\n  ${inputFocusStyle}\n  height: 35px;\n`;\n\nexport {\n  StyledInput,\n};\n","const NEXT_ICON = '>';\nconst PREV_ICON = '<';\nconst JUMP_ICON = '...';\n\nexport {\n  NEXT_ICON,\n  PREV_ICON,\n  JUMP_ICON,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {StyledPagination} from './styled';\nimport {JUMP_ICON} from './constants';\n\nconst Pagination = props => {\n  return (\n    <StyledPagination\n      locale={{\n        items_per_page: props.t('pagination.items_per_page'),\n        jump_to: props.t('pagination.jump_to'),\n        jump_to_confirm: props.t('pagination.jump_to_confirm'),\n        page: props.t('pagination.page'),\n        prev_page: props.t('pagination.prev_page'),\n        next_page: props.t('pagination.next_page'),\n        prev_5: props.t('pagination.prev_5'),\n        next_5: props.t('pagination.next_5'),\n        prev_3: props.t('pagination.prev_3'),\n        next_3: props.t('pagination.next_3'),\n      }}\n      pageSize={props.pageSize}\n      current={props.page}\n      total={props.totalItemsCount}\n      onChange={props.onChange}\n      showLessItems\n      jumpPrevIcon={JUMP_ICON}\n      jumpNextIcon={JUMP_ICON}\n    />\n  );\n};\n\nPagination.propTypes = {\n  totalItemsCount: PropTypes.number.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  t: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\n\nimport Pagination from './index';\nimport {YggioFontDecorator} from '../../decorators';\nimport t from '../../utils/translation-prop';\n\nconst main = {\n  title: 'Components/Pagination',\n  component: Pagination,\n  decorators: [YggioFontDecorator],\n};\n\nconst Template = args => {\n  return <Pagination {...args} />;\n};\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  totalItemsCount: 120,\n  pageSize: 20,\n  page: 1,\n  onChange: () => null,\n  t,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import ReactPagination from 'rc-pagination';\nimport styled from 'styled-components';\nimport {COLORS} from '../../constants';\n\nconst StyledPagination = styled(ReactPagination)`\n  display: flex;\n  list-style-type: none;\n\n  margin: 0;\n  padding: 0;\n\n  ul,\n  ol {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  &::after {\n    display: block;\n    clear: both;\n    height: 0;\n    overflow: hidden;\n    visibility: hidden;\n    content: ' ';\n  }\n\n  .rc-pagination-total-text {\n    display: inline-block;\n    height: 28px;\n    margin-right: 8px;\n    vertical-align: middle;\n  }\n\n  .rc-pagination-item {\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-width: 26px;\n    height: 26px;\n    margin-right: 2px;\n    text-align: center;\n    vertical-align: middle;\n    list-style: none;\n    background-color: ${COLORS.trueWhite};\n    border: 1px solid #d9d9d9;\n    border-radius: 2px;\n    outline: 0;\n    cursor: pointer;\n    user-select: none;\n\n    a {\n      display: block;\n      padding: 0 6px;\n      color: rgba(0, 0, 0, 0.85);\n      transition: none;\n\n      &:hover {\n        text-decoration: none;\n      }\n    }\n\n    &:focus,\n    &:hover {\n      border-color: #1890ff;\n      transition: all 0.3s;\n\n      a {\n        color: #1890ff;\n      }\n    }\n  }\n\n  .rc-pagination-item-active {\n    font-weight: 500;\n    background: ${COLORS.trueWhite};\n    border-color: #1890ff;\n\n    a {\n      color: #1890ff;\n    }\n\n    &:focus,\n    &:hover {\n      border-color: #40a9ff;\n    }\n\n    &:focus a,\n    &:hover a {\n      color: #40a9ff;\n    }\n  }\n\n  .rc-pagination-jump-prev,\n  .rc-pagination-jump-next {\n    outline: 0;\n\n    button {\n      background: transparent;\n      border: none;\n      cursor: pointer;\n      color: #666;\n    }\n\n    button:after {\n      display: block;\n      content: '•••';\n    }\n  }\n\n  .rc-pagination-prev,\n  .rc-pagination-jump-prev,\n  .rc-pagination-jump-next {\n    margin-right: 2px;\n    outline: 0;\n  }\n\n  .rc-pagination-prev,\n  .rc-pagination-next,\n  .rc-pagination-jump-prev,\n  .rc-pagination-jump-next {\n    display: inline-block;\n    min-width: 26px;\n    height: 26px;\n    border: 1px solid #d9d9d9;\n    color: rgba(0, 0, 0, 0.85);\n    text-align: center;\n    vertical-align: middle;\n    list-style: none;\n    border-radius: 2px;\n    cursor: pointer;\n    &:hover {\n      border-color: #40a9ff;\n    }\n  }\n\n  .rc-pagination-prev,\n  .rc-pagination-next {\n    outline: 0;\n\n    button {\n      color: rgba(0, 0, 0, 0.85);\n      cursor: pointer;\n      user-select: none;\n      border: 0;\n    }\n\n    &:hover button {\n      border-color: #40a9ff;\n    }\n\n    .rc-pagination-item-link {\n      display: block;\n      width: 100%;\n      height: 100%;\n      font-size: 12px;\n      text-align: center;\n      background-color: ${COLORS.trueWhite};\n      border-radius: 2px;\n      outline: none;\n    }\n\n\n\n    &:focus .rc-pagination-item-link,\n    &:hover .rc-pagination-item-link {\n      color: #40a9ff;\n      border-color: #40a9ff;\n    }\n  }\n\n  .rc-pagination-prev button:after {\n    content: '‹';\n    display: block;\n  }\n\n  .rc-pagination-next button:after {\n    content: '›';\n    display: block;\n  }\n\n  .rc-pagination-disabled {\n    &,\n    &:hover,\n    &:focus {\n      cursor: not-allowed;\n\n      .rc-pagination-item-link {\n        color: fade(#000, 25%);\n        border-color: #d9d9d9;\n        cursor: not-allowed;\n      }\n    }\n  }\n\n  .rc-pagination-slash {\n    margin: 0 10px 0 5px;\n  }\n\n  .rc-pagination-options {\n    display: none;\n  }\n\n  .rc-pagination-simple .rc-pagination-prev,\n  .rc-pagination-simple .rc-pagination-next {\n    height: 24px;\n    vertical-align: top;\n\n    .rc-pagination-item-link {\n      height: 24px;\n      background-color: transparent;\n      border: 0;\n\n      &::after {\n        height: 24px;\n      }\n    }\n  }\n\n  .rc-pagination-simple .rc-pagination-simple-pager {\n    display: inline-block;\n    height: 24px;\n    margin-right: 8px;\n\n    input {\n      box-sizing: border-box;\n      height: 100%;\n      margin-right: 8px;\n      padding: 0 6px;\n      text-align: center;\n      background-color: ${COLORS.trueWhite};\n      border: 1px solid #d9d9d9;\n      border-radius: 2px;\n      outline: none;\n      transition: border-color 0.3s;\n\n      &:hover {\n        border-color: #1890ff;\n      }\n    }\n  }\n\n  // ============================ Disabled ============================\n  &.rc-pagination-disabled {\n    cursor: not-allowed;\n\n    .rc-pagination-item {\n      background: hsv(0, 0, 96%);\n      border-color: #d9d9d9;\n      cursor: not-allowed;\n\n      a {\n        color: fade(#000, 25%);\n        background: transparent;\n        border: none;\n        cursor: not-allowed;\n      }\n\n      .rc-pagination-active {\n        background: darken(hsv(0, 0, 96%), 10%);\n        border-color: transparent;\n\n        a {\n          color: ${COLORS.trueWhite};\n        }\n      }\n    }\n\n    .rc-pagination-item-link {\n      color: fade(#000, 25%);\n      background: hsv(0, 0, 96%);\n      border-color: #d9d9d9;\n      cursor: not-allowed;\n    }\n\n    .rc-pagination-item-link-icon {\n      opacity: 0;\n    }\n\n    .rc-pagination-item-ellipsis {\n      opacity: 1;\n    }\n  }\n}\n`;\n\nexport {\n  StyledPagination,\n};\n","const DEFAULTS = {\n  barColor: '#ddd',\n  fillColor: '#3C7D44',\n  width: '100%',\n  height: 16,\n  margin: '0',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Bar,\n  Filling,\n} from './styled';\n\nconst ProgressBar = props => (\n  <Bar\n    barColor={props.barColor}\n    width={props.width}\n    height={props.height}\n    margin={props.margin}\n  >\n    <Filling\n      progress={props.progress}\n      fillColor={props.fillColor}\n      height={props.height}\n    />\n  </Bar>\n);\n\nProgressBar.propTypes = {\n  progress: PropTypes.number,\n  barColor: PropTypes.string,\n  fillColor: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.number,\n  margin: PropTypes.string,\n};\n\nexport default ProgressBar;\n","import React from 'react';\n\nimport ProgressBar from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Progress Bar',\n  component: ProgressBar,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    barColor: {\n      table: {defaultValue: {summary: DEFAULTS.barColor}}\n    },\n    fillColor: {\n      table: {defaultValue: {summary: DEFAULTS.fillColor}}\n    },\n    width: {\n      table: {defaultValue: {summary: DEFAULTS.width}}\n    },\n    height: {\n      table: {defaultValue: {summary: DEFAULTS.height}}\n    },\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n  }\n};\n\nconst Template = args => <ProgressBar {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  progress: 60,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nimport {DEFAULTS} from './constants';\n\nconst Bar = styled.div`\n  width: ${({width}) => width || DEFAULTS.width};\n  height: ${({height}) => height || DEFAULTS.height}px;\n  border-radius: ${({height}) => (height || DEFAULTS.height) / 2}px;\n  background: ${({barColor}) => barColor || DEFAULTS.barColor};\n  margin: ${({margin}) => margin || DEFAULTS.margin};\n`;\n\nconst Filling = styled.div`\n  width: 100%;\n  height: ${({height}) => height || DEFAULTS.height}px;\n  border-radius: ${({height}) => (height || DEFAULTS.height) / 2}px;\n  background: ${({fillColor}) => fillColor || DEFAULTS.fillColor};\n  clip-path: ${({progress}) => `inset(0 ${100 - progress}% 0 0)`};\n`;\n\nexport {\n  Bar,\n  Filling,\n};\n","const DEFAULTS = {\n  containerButtonSize: 20,\n  containerButtonMargin: '0px',\n  containerButtonPadding: '0px',\n  loadingColor: 'transparent',\n  selectedColor: 'green',\n  unselectedColor: '#888',\n  disabledOpacity: 0.6,\n  enabledOpacity: 1,\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ContainerButton,\n  CircleMask,\n  InnerCircle,\n} from './styled';\n\nconst RadioButton = props => (\n  <ContainerButton\n    title={props.title}\n    size={props.size}\n    padding={props.padding}\n    margin={props.margin}\n    onClick={props.onClick}\n    disabled={props.disabled || props.isLoading}\n  >\n\n    <CircleMask\n      isTop\n      size={props.size}\n    >\n      <InnerCircle\n        size={props.size}\n        isSelected={props.isSelected}\n        isLoading={false}\n      />\n    </CircleMask>\n\n    <CircleMask\n      isTop={false}\n      size={props.size}\n    >\n      <InnerCircle\n        size={props.size}\n        isSelected={props.isSelected}\n        isLoading={props.isLoading}\n      />\n    </CircleMask>\n\n  </ContainerButton>\n);\n\nRadioButton.propTypes = {\n  size: PropTypes.number,\n  padding: PropTypes.string,\n  margin: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  isSelected: PropTypes.bool,\n};\n\nexport default RadioButton;\n","import React from 'react';\n\nimport RadioButton from './index';\nimport {DEFAULTS} from './constants';\n\nconst main = {\n  title: 'Components/Radio Button',\n  component: RadioButton,\n  argTypes: {\n    isSelected: {\n      table: {defaultValue: {summary: false}}\n    },\n    isLoading: {\n      table: {defaultValue: {summary: false}}\n    },\n    size: {\n      table: {defaultValue: {summary: DEFAULTS.containerButtonSize}}\n    },\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.containerButtonMargin}}\n    },\n    padding: {\n      table: {defaultValue: {summary: DEFAULTS.padding}}\n    },\n    containerButtonPadding: {\n      table: {defaultValue: {summary: DEFAULTS.containerButtonPadding}}\n    },\n    disabled: {\n      table: {defaultValue: {summary: false}}\n    },\n  }\n};\n\nconst Template = args => <RadioButton {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\n\nconst ContainerButton = styled.button`\n  width: ${({size}) => `${size || DEFAULTS.containerButtonSize}px`};\n  height: ${({size}) => `${size || DEFAULTS.containerButtonSize}px`};\n  margin: ${({margin}) => margin || DEFAULTS.containerButtonMargin};\n  padding: ${({padding}) => padding || DEFAULTS.containerButtonPadding};\n  opacity: ${({disabled}) => (disabled ? DEFAULTS.disabledOpacity : DEFAULTS.enabledOpacity)};\n  background: transparent;\n  border: none;\n`;\n\nContainerButton.propTypes = {\n  size: PropTypes.number,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n};\n\nconst CircleMask = styled.div`\n  width: ${({size}) => `${size || DEFAULTS.containerButtonSize}px`};\n  height: ${({size}) => {\n    const width = Math.floor((size || DEFAULTS.containerButtonSize) / 2);\n    return `${width}px`;\n  }};\n  background: transparent;\n  overflow: hidden;\n  transform: ${({isTop}) => `scaleY(${isTop ? 1 : -1})`}\n`;\n\nCircleMask.propTypes = {\n  size: PropTypes.number,\n  isTop: PropTypes.bool,\n};\n\n\n// top: ${({isTop}) => (isTop ? '0px' : undefined)};\n// bottom: 0px,\n\nconst InnerCircle = styled.div`\n  width: ${({size}) => `${size || DEFAULTS.containerButtonSize}px`};\n  height: ${({size}) => `${size || DEFAULTS.containerButtonSize}px`};\n  border-radius: ${({size}) => {\n    const width = Math.floor((size || DEFAULTS.containerButtonSize) / 2);\n    return `${width}px`;\n  }};\n  background: ${({isSelected, isLoading}) => {\n    if (isLoading) {\n      return DEFAULTS.loadingColor;\n    }\n    if (isSelected) {\n      return DEFAULTS.selectedColor;\n    }\n    return DEFAULTS.unselectedColor;\n  }};\n`;\n\nInnerCircle.propTypes = {\n  size: PropTypes.number,\n  isSelected: PropTypes.bool,\n  isLoading: PropTypes.bool,\n};\n\nexport {\n  ContainerButton,\n  CircleMask,\n  InnerCircle,\n};\n","const DEFAULTS = {\n  segmentWidth: 80,\n  height: '24px',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport InputDecorator from '../input-decorator';\nimport {\n  Wrapper,\n  Segment,\n} from './styled';\nimport {DEFAULTS} from './constants';\n\nconst SegmentedControl = props => {\n  const width = (props.segmentWidth || DEFAULTS.segmentWidth) * props.options.length;\n  return (\n    <InputDecorator\n      label={props.label}\n      additionalInfo={props.additionalInfo}\n      isRequired={props.isRequired}\n      isOptional={props.isOptional}\n      helperText={props.helperText}\n      margin={props.margin}\n      fullHeight={props.fullHeight}\n    >\n      <Wrapper width={width}>\n        {_.map(props.options, option => (\n          <Segment\n            key={option.value}\n            height={props.height}\n            isActive={option.value === props.value}\n            onClick={() => {\n              if (option.value !== props.value) {\n                props.onChange(option.value);\n              }\n            }}\n          >\n            {option.label}\n          </Segment>\n        ))}\n      </Wrapper>\n    </InputDecorator>\n  );\n};\n\nSegmentedControl.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n    })\n  ).isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n  onChange: PropTypes.func,\n  segmentWidth: PropTypes.number,\n  height: PropTypes.string,\n  margin: PropTypes.string,\n  // Input decorator props\n  label: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  isRequired: PropTypes.bool,\n  isOptional: PropTypes.bool,\n  helperText: PropTypes.string,\n  fullHeight: PropTypes.bool,\n};\n\nexport default SegmentedControl;\n","import React from 'react';\n\nimport SegmentedControl from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Segmented Control',\n  component: SegmentedControl,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    segmentWidth: {\n      table: {defaultValue: {summary: DEFAULTS.segmentWidth}}\n    },\n    height: {\n      table: {defaultValue: {summary: DEFAULTS.height}}\n    },\n  }\n};\n\nconst Template = args => <SegmentedControl {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  options: [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Orange',\n      value: 'orange',\n    },\n  ],\n  value: 'apple',\n  onChange: () => null,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled, {css} from 'styled-components';\n\nimport {DEFAULTS} from './constants';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: ${({width}) => width}px;\n`;\n\nconst Segment = styled.div`\n  display: flex;\n  font-size: 13px;\n  flex-grow: 1;\n  flex-basis: 0;\n  justify-content: center;\n  align-items: center;\n  height: ${({height}) => height || DEFAULTS.height};\n  border: 1px solid #666;\n  border-right-width: 0;\n  color: ${({isActive}) => (isActive ? 'white' : '#444')};\n  background: ${({isActive}) => (isActive ? '#666' : 'none')};\n\n  ${({isActive}) => !isActive && css`\n    &:hover {\n      background: #eee;\n    }\n    cursor: pointer;\n  `};\n  &:first-child {\n    border-radius: 5px 0 0 5px;\n\n  }\n  &:last-child {\n    border-radius: 0 5px 5px 0;\n    border-right-width: 1px;\n  }\n`;\n\nexport {\n  Wrapper,\n  Segment,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactSelect from 'react-select';\nimport _ from 'lodash';\n\nimport InputDecorator from '../input-decorator';\nimport {customStyles} from './styles';\n\nconst Select = props => {\n\n  let value;\n  if (props.value === null) {\n    value = null;\n  } else if (!_.isNil(props.value)) {\n    value = _.find(props.options, {value: props.value});\n  }\n\n  const onChange = val => {\n    const evt = {\n      target: {\n        value: props.isMulti ? _.map(val, 'value') : _.get(val, 'value'),\n        name: props.name,\n      },\n    };\n    props.onChange(evt);\n  };\n\n  return (\n    <InputDecorator\n      label={props.label}\n      additionalInfo={props.additionalInfo}\n      isRequired={props.isRequired}\n      isOptional={props.isOptional}\n      helperText={props.helperText}\n      validationErrorMessage={props.validationErrorMessage}\n      validationSuccessMessage={props.validationSuccessMessage}\n      width={props.width}\n      margin={props.margin}\n      fullHeight={props.fullHeight}\n    >\n      <ReactSelect\n        options={props.options}\n        name={props.name}\n        onChange={onChange}\n        styles={customStyles}\n        isDisabled={props.isDisabled || props.disabled}\n        isSearchable={!!props.isSearchable}\n        isClearable={props.isClearable}\n        isLoading={props.isLoading}\n        isMulti={props.isMulti}\n        value={value}\n        placeholder={props.placeholder}\n        onBlur={() => {\n          if (!props.onBlur) return;\n          const evt = {\n            target: {\n              value: props.value,\n              name: props.name,\n            },\n          };\n          props.onBlur(evt);\n        }}\n        menuPlacement={props.menuPlacement || 'auto'}\n      />\n    </InputDecorator>\n  );\n};\n\nSelect.propTypes = {\n  // Input props\n  options: PropTypes.array.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  style: PropTypes.object,\n  isDisabled: PropTypes.bool,\n  isSearchable: PropTypes.bool,\n  isClearable: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  isMulti: PropTypes.bool,\n  menuPlacement: PropTypes.oneOf(['auto', 'bottom', 'top']),\n  // Input decorator props\n  label: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  isRequired: PropTypes.bool,\n  isOptional: PropTypes.bool,\n  helperText: PropTypes.string,\n  validationErrorMessage: PropTypes.string,\n  validationSuccessMessage: PropTypes.string,\n  width: PropTypes.string,\n  margin: PropTypes.string,\n  fullHeight: PropTypes.bool,\n  onBlur: PropTypes.func,\n};\n\nexport default Select;\n","import React from 'react';\n\nimport Select from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Select',\n  component: Select,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    value: {\n      control: false,\n    }\n  }\n};\n\nconst options = [\n  {value: 'chocolate', label: 'Chocolate'},\n  {value: 'strawberry', label: 'Strawberry'},\n  {value: 'vanilla', label: 'Vanilla'},\n];\n\nconst Template = args => {\n  const [value, setValue] = React.useState(null);\n  return (\n    <Select\n      {...args}\n      value={value}\n      onChange={evt => {\n        setValue(evt.target.value);\n      }}\n    />\n  );\n};\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  name: 'testcomponent',\n  options,\n  value: options[1],\n\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","const customStyles = {\n  container: provided => ({\n    ...provided,\n    fontFamily: 'Lato,Arial,sans-serif',\n    fontSize: '13px',\n  }),\n  control: (base, state) => ({\n    ...base,\n    boxShadow: state.isFocused ? '0 0 2px 1px #4287f5' : 'none',\n    border: state.isFocused ? '1px solid #ccc' : 'solid 1px #ccc',\n    cursor: 'pointer',\n  }),\n  input: provided => ({\n    ...provided,\n    height: '29px',\n  }),\n  valueContainer: (provided, state) => ({\n    ...provided,\n    paddingLeft: state.isFocused ? '10px' : '10px',\n  }),\n  option: provided => ({\n    ...provided,\n  }),\n};\n\nexport {\n  customStyles,\n};\n","const SIDEBAR_WIDTH = 290;\nconst SMALL_SCREEN_WIDTH = 700;\n\nexport {\n  SIDEBAR_WIDTH,\n  SMALL_SCREEN_WIDTH,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {SIDEBAR_WIDTH} from './constants';\n\n// This one forces the sidebar to open if it\n// has been previously closed and the user then widen the window\nconst withOpenSidebarOnResize = Component => props => {\n  React.useEffect(() => {\n    const debouncedHandleResize = _.debounce(() => {\n      const width = props.siblingWidth + SIDEBAR_WIDTH;\n      if (!props.isSidebarOpen && window.innerWidth > width) {\n        props.openSidebar();\n      }\n    }, 200);\n    window.addEventListener('resize', debouncedHandleResize);\n    return () => {\n      window.removeEventListener('resize', debouncedHandleResize);\n    };\n  });\n  return <Component {...props} />;\n};\n\nexport {\n  withOpenSidebarOnResize,\n};\n","import React from 'react';\nimport {compose} from 'lodash/fp';\nimport PropTypes from 'prop-types';\nimport {Icon} from 'react-icons-kit';\nimport {angleDoubleLeft as closeIcon} from 'react-icons-kit/fa/angleDoubleLeft';\n\nimport {withOpenSidebarOnResize} from './effects';\nimport sidebarState from './state';\n\nimport {\n  StyledSidebarSibling,\n  SidebarContainer,\n  ContentSection,\n  CloseButton,\n} from './styled';\n\n/// / SidebarParent\n\nconst SidebarParent = props => (\n  <div>\n    {props.children}\n  </div>\n);\n\nSidebarParent.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element,\n  ]),\n};\n\n/// / SidebarSibling\n\nconst SidebarSibling = props => (\n  <StyledSidebarSibling isSidebarOpen={props.isSidebarOpen}>\n    {props.children}\n  </StyledSidebarSibling>\n);\n\nSidebarSibling.propTypes = {\n  isSidebarOpen: PropTypes.bool.isRequired,\n  children: PropTypes.node,\n};\n\n/// / Sidebar\n\nconst RawSidebar = props => (\n  <SidebarContainer\n    isSidebarOpen={props.isSidebarOpen}\n    isUsingNavbar={props.isUsingNavbar}\n  >\n    <ContentSection\n      isSidebarOpen={props.isSidebarOpen}\n      siblingWidth={props.siblingWidth}\n    >\n      {props.children}\n    </ContentSection>\n    <CloseButton\n      onClick={props.closeSidebar}\n      isSidebarOpen={props.isSidebarOpen}\n      siblingWidth={props.siblingWidth}\n    >\n      <Icon icon={closeIcon} size={18} />\n      <p>Close sidebar</p>\n    </CloseButton>\n  </SidebarContainer>\n);\n\nRawSidebar.propTypes = {\n  isSidebarOpen: PropTypes.bool.isRequired,\n  closeSidebar: PropTypes.func.isRequired,\n  siblingWidth: PropTypes.number.isRequired,\n  isUsingNavbar: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nconst Sidebar = compose(\n  withOpenSidebarOnResize,\n)(RawSidebar);\n\nSidebar.propTypes = {\n  isSidebarOpen: PropTypes.bool.isRequired,\n  closeSidebar: PropTypes.func.isRequired,\n  siblingWidth: PropTypes.number.isRequired,\n  isUsingNavbar: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nexport {\n  SidebarParent,\n  Sidebar,\n  SidebarSibling,\n  sidebarState,\n};\n","const main = {\n  title: 'Components/Sidebar Components',\n};\n\nconst Template = () => <p>This component needs a story</p>;\n\nconst Primary = Template.bind({});\n\nexport default main;\nexport {\n  Primary,\n};\n","const ACTION_TYPES = {\n  openSidebar: 'openSidebar',\n  closeSidebar: 'closeSidebar',\n};\n\nconst defaultState = {\n  isSidebarOpen: true,\n};\n\n\nconst actions = {\n  openSidebar: () => ({\n    type: ACTION_TYPES.openSidebar,\n  }),\n  closeSidebar: () => ({\n    type: ACTION_TYPES.closeSidebar,\n  }),\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type} = action;\n  switch (type) {\n\n    case ACTION_TYPES.openSidebar: {\n      return {\n        ...state,\n        isSidebarOpen: true,\n      };\n    }\n    case ACTION_TYPES.closeSidebar: {\n      return {\n        ...state,\n        isSidebarOpen: false,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled, {css} from 'styled-components';\n\nimport {SIDEBAR_WIDTH, SMALL_SCREEN_WIDTH} from './constants';\n\nconst StyledSidebarSibling = styled.div`\n  margin-left: ${({isSidebarOpen}) => (isSidebarOpen ? SIDEBAR_WIDTH : 0)}px;\n  transition: margin-left 0.3s;\n\n  @media (max-width: ${SMALL_SCREEN_WIDTH}px) {\n    ${({isSidebarOpen}) => isSidebarOpen && css`\n      display: none;\n    `};\n  };\n`;\n\nconst SidebarContainer = styled.div`\n  position: fixed;\n  z-index: 5;\n  width: ${SIDEBAR_WIDTH}px;\n  height: ${({isUsingNavbar}) => (isUsingNavbar ? 'calc(100% - 45px)' : '100%')};\n  left: ${({isSidebarOpen}) => (isSidebarOpen ? 0 : -SIDEBAR_WIDTH)}px;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  background: #fff;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, .06);\n  flex-shrink: 0;\n  transition: left 0.3s, width 0.3s;\n  overflow-x: hidden;\n  ${({isSidebarOpen}) => isSidebarOpen && css`\n    border-right: 1px solid #e7e7e7;\n  `};\n\n  @media (max-width: ${SMALL_SCREEN_WIDTH}px) {\n    ${({isSidebarOpen}) => isSidebarOpen && css`\n      width: 100%;\n    `};\n  };\n`;\n\nconst ContentSection = styled.div`\n  width: 100%;\n  height: calc(100% - 44px);\n  box-sizing: border-box;\n  overflow-y: auto;\n  padding: 20px 20px 0 20px;\n\n  @media (min-width: ${props => props.siblingWidth + SIDEBAR_WIDTH}px) {\n    height: 100%;\n  }\n`;\n\nconst CloseButton = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: 44px;\n  border-top: 1px solid #ccc;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  font-size: 13px;\n  display: flex;\n\n  &:hover {\n    background: #f2f2f2;\n  }\n  p {\n    margin-left: 3px;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n\n  @media (min-width: ${props => props.siblingWidth + SIDEBAR_WIDTH}px) {\n    display: none;\n  }\n`;\n\nexport {\n  StyledSidebarSibling,\n  SidebarContainer,\n  ContentSection,\n  CloseButton,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Container, Icon} from './styled';\nimport sortNoneImage from '../../assets/images/sort-none.svg';\nimport sortAscImage from '../../assets/images/sort-up.svg';\nimport sortDescImage from '../../assets/images/sort-down.svg';\n\nconst getImage = props => {\n  if (props.order === 'asc') {\n    return sortAscImage;\n  } if (props.order === 'desc') {\n    return sortDescImage;\n  }\n  return sortNoneImage;\n\n};\n\nconst SortButton = props => (\n  <Container\n    onClick={props.onClick}\n    margin={props.margin}\n  >\n    <Icon src={getImage(props)} />\n  </Container>\n);\n\nSortButton.propTypes = {\n  order: PropTypes.oneOf(['asc', 'desc']),\n  onClick: PropTypes.func,\n  margin: PropTypes.string,\n};\n\nexport default SortButton;\n","import React from 'react';\n\nimport SortButton from './index';\n\nconst main = {\n  title: 'Components/Sort Button',\n  component: SortButton,\n};\n\nconst Template = args => <SortButton {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 20px;\n  height: 20px;\n  margin: ${({margin}) => margin || '0'};\n  display: flexbox;\n  justify-content: center;\n  align-items: center;\n  border-radius: 10px;\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    background: #f5f5f5;\n  }\n`;\n\nconst Icon = styled.img`\n  display: block;\n  height: 12px;\n\n`;\n\nexport {\n  Container,\n  Icon,\n};\n","import {COLORS} from '../../constants';\n\nconst DEFAULTS = {\n  speed: 4,\n  size: 24,\n  color: COLORS.black,\n  margin: '0',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {spinner4 as spinnerIcon} from 'react-icons-kit/icomoon/spinner4';\n\nimport {SpinnerIcon} from './styled';\nimport {DEFAULTS} from './constants';\n\nconst Spinner = (\n  {\n    color,\n    size,\n    icon,\n    speed,\n    margin,\n  }\n) => (\n  <SpinnerIcon\n    speed={speed || DEFAULTS.speed}\n    size={size || DEFAULTS.size}\n    icon={icon || spinnerIcon}\n    color={color || DEFAULTS.color}\n    margin={margin || DEFAULTS.margin}\n  />\n);\n\nSpinner.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  icon: PropTypes.object,\n  speed: PropTypes.number,\n  margin: PropTypes.string,\n};\n\nexport default Spinner;\n","import React from 'react';\n\nimport Spinner from './index';\nimport {DEFAULTS} from './constants';\n\nconst main = {\n  title: 'Components/Spinner',\n  component: Spinner,\n  argTypes: {\n    speed: {\n      table: {defaultValue: {summary: DEFAULTS.speed}}\n    },\n    size: {\n      table: {defaultValue: {summary: DEFAULTS.size}}\n    },\n    color: {\n      table: {defaultValue: {summary: DEFAULTS.color}}\n    },\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n    icon: {\n      table: {defaultValue: {summary: 'react-icons-kit/icomoon/spinner4'}},\n      control: false,\n    },\n  }\n};\n\nconst Template = args => <Spinner {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\nimport {Icon} from 'react-icons-kit';\n\nconst SpinnerIcon = styled(Icon)`\n  color: ${({color}) => color};\n  margin: ${({margin}) => margin};\n  animation: spin ${({speed}) => speed}s linear infinite;\n  @keyframes spin { 100% { -webkit-transform: rotate(360deg); transform:rotate(360deg); } }\n`;\n\nexport {\n  SpinnerIcon,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport {check as checkIcon} from 'react-icons-kit/entypo/check';\n\nimport {\n  BarContainer,\n  BarStyled,\n  BarFilling,\n  IntermediateStepMark,\n  FirstStepMark,\n  LastStepMark,\n} from '../styled';\n\nconst Bar = (\n  {\n    intermediateSteps,\n    stepDistance,\n    currentStep,\n    finished,\n  }\n) => {\n\n  const barFillingWidth = (100 / (intermediateSteps.length + 1)) * (currentStep - 1);\n\n  const stepMark = i => (\n    <IntermediateStepMark\n      position={stepDistance * (i + 1)}\n      reached={i <= currentStep - 2}\n      key={i}\n    >\n      {i <= currentStep - 3 && <Icon icon={checkIcon} size={14} />}\n    </IntermediateStepMark>\n  );\n\n  const renderIntermediateStepMarks = _.times(intermediateSteps.length, stepMark);\n\n  return (\n    <BarContainer>\n      <BarStyled>\n        <BarFilling width={barFillingWidth} />\n      </BarStyled>\n      <FirstStepMark>\n        {currentStep > 1 && <Icon icon={checkIcon} size={14} />}\n      </FirstStepMark>\n      {renderIntermediateStepMarks}\n      <LastStepMark reached={currentStep === intermediateSteps.length + 2}>\n        {finished && <Icon icon={checkIcon} size={14} />}\n      </LastStepMark>\n    </BarContainer>\n  );\n};\n\nexport default Bar;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {\n  IntermediateStepDescriptionStyled,\n  DescriptionsContainer,\n  FirstStepDescription,\n  LastStepDescription,\n} from '../styled';\n\nconst StepDescriptions = (\n  {\n    steps,\n    intermediateSteps,\n    stepDistance,\n    currentStep,\n    finished,\n  }\n) => {\n\n  const intermediateStepDescription = (description, i) => (\n    <IntermediateStepDescriptionStyled\n      position={stepDistance * (i + 1)}\n      key={i}\n      current={currentStep === i + 2}\n    >\n      {description}\n    </IntermediateStepDescriptionStyled>\n  );\n\n  const IntermediateStepDescriptions = _.map(intermediateSteps, intermediateStepDescription);\n\n  return (\n    <DescriptionsContainer>\n      <FirstStepDescription\n        current={currentStep === 1}\n      >\n        {steps[0]}\n      </FirstStepDescription>\n      {IntermediateStepDescriptions}\n      <LastStepDescription\n        current={currentStep === steps.length && !finished}\n      >\n        {steps[steps.length - 1]}\n      </LastStepDescription>\n    </DescriptionsContainer>\n  );\n\n};\n\nexport default StepDescriptions;\n","const DEFAULTS = {\n  margin: '0',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport ContainerBox from '../container-box';\nimport {DEFAULTS} from './constants';\nimport Bar from './children/bar';\nimport StepDescriptions from './children/step-descriptions';\nimport {\n  TitleContainer,\n  Title,\n} from './styled';\n\nconst StepProgressBar = props => {\n\n  const intermediateSteps = _.slice(props.steps, 1, props.steps.length - 1);\n  const stepDistance = _.floor(100 / (intermediateSteps.length + 1));\n\n  return (\n    <ContainerBox\n      margin={props.margin || DEFAULTS.margin}\n      padding=\"25px 20px 12px 20px\"\n      width={props.width}\n    >\n\n      <TitleContainer>\n        <Title>{props.title}</Title>\n      </TitleContainer>\n\n      <Bar\n        intermediateSteps={intermediateSteps}\n        stepDistance={stepDistance}\n        currentStep={props.currentStep}\n        finished={props.finished}\n      />\n\n      <StepDescriptions\n        steps={props.steps}\n        intermediateSteps={intermediateSteps}\n        stepDistance={stepDistance}\n        currentStep={props.currentStep}\n        finished={props.finished}\n      />\n    </ContainerBox>\n  );\n\n};\n\nStepProgressBar.propTypes = {\n  title: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  steps: PropTypes.array.isRequired,\n  margin: PropTypes.string,\n  width: PropTypes.string,\n  currentStep: PropTypes.number.isRequired,\n  finished: PropTypes.bool,\n};\n\nexport default StepProgressBar;\n","import React from 'react';\n\nimport StepProgressBar from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioDefaultDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Step Progress Bar',\n  component: StepProgressBar,\n  decorators: [YggioDefaultDecorator],\n  argTypes: {\n    margin: {\n      table: {defaultValue: {summary: DEFAULTS.margin}}\n    },\n    finished: {\n      table: {defaultValue: {summary: false}},\n    },\n  }\n};\n\nconst Template = args => <StepProgressBar {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  steps: [\n    'Step 1',\n    'Step 2',\n    'Step 3',\n  ],\n  currentStep: 1,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nimport {COLORS} from '../../constants';\n\nconst STEP_MARK_SIZE = 25;\nconst DESCRIPTION_SIZE = 100;\n\nconst TitleContainer = styled.div`\n  width: 100%;\n  height: 40px;\n  text-align: center;\n`;\n\nconst Title = styled.p`\n  font-weight: 500;\n  font-size: 15px;\n  color: #333;\n`;\n\nconst BarContainer = styled.div`\n  width: calc(100% - 80px);\n  margin: 0 40px;\n  height: 36px;\n  position: relative;\n`;\n\nconst BarStyled = styled.div`\n  width: calc(100% - ${STEP_MARK_SIZE}px);\n  height: 6px;\n  background: #ccc;\n  position: absolute;\n  top: 10px;\n  left: 13px;\n`;\n\nconst BarFilling = styled.div`\n  width: ${({width}) => `${width}%`};\n  height: 6px;\n  background: ${COLORS.greenAlt};\n`;\n\nconst StepMark = styled.div`\n  width: ${STEP_MARK_SIZE}px;\n  height: ${STEP_MARK_SIZE}px;\n  border-radius: 50%;\n  position: absolute;\n  background: #ccc;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  padding: 0 0 2px 0;\n  box-sizing: border-box;\n`;\n\nconst FirstStepMark = styled(StepMark)`\n  left: 0;\n  background: ${COLORS.greenAlt};\n`;\n\nconst IntermediateStepMark = styled(StepMark)`\n  left: ${({position}) => `calc(${position}% - ${STEP_MARK_SIZE / 2}px)`};\n  ${({reached}) => reached && `background: ${COLORS.greenAlt}`};\n`;\n\nconst LastStepMark = styled(StepMark)`\n  left: calc(100% - ${STEP_MARK_SIZE}px);\n  ${({reached}) => reached && `background: ${COLORS.greenAlt}`};\n`;\n\nconst DescriptionsContainer = styled.div`\n  width: calc(100% - 80px);\n  height: 40px;\n  margin: 0 40px;\n  position: relative;\n`;\n\nconst StepDescription = styled.p`\n  width: 100px;\n  margin: 0;\n  text-align: center;\n  font-size: 11px;\n  position: absolute;\n  text-transform: uppercase;\n`;\n\nconst FirstStepDescription = styled(StepDescription)`\n  left: ${-DESCRIPTION_SIZE / 2 + STEP_MARK_SIZE / 2}px;\n  ${({current}) => current && `font-weight: 500`};\n`;\n\nconst IntermediateStepDescriptionStyled = styled(StepDescription)`\n  left: ${({position}) => `calc(${position}% - ${DESCRIPTION_SIZE / 2}px)`};\n  ${({current}) => current && `font-weight: 500`};\n`;\n\nconst LastStepDescription = styled(StepDescription)`\n  left: calc(100% - ${DESCRIPTION_SIZE / 2 + STEP_MARK_SIZE / 2}px);\n  ${({current}) => current && `font-weight: 500`};\n`;\n\nexport {\n  TitleContainer,\n  Title,\n  BarContainer,\n  BarStyled,\n  BarFilling,\n  FirstStepMark,\n  IntermediateStepMark,\n  LastStepMark,\n  DescriptionsContainer,\n  FirstStepDescription,\n  IntermediateStepDescriptionStyled,\n  LastStepDescription,\n};\n","import Tab from './tab';\n\nexport {\n  Tab,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  TabLabel,\n  MetaBlob,\n  TabWrapper,\n} from '../../styled';\n\n\nconst Tab = props => {\n  return (\n    <TabWrapper\n      vertical={props.vertical}\n      onClick={() => props.onTabClick(props.tabId)}\n      isActive={props.isActive}\n    >\n      <TabLabel fontSize={props.fontSize}>\n        {props.label}\n      </TabLabel>\n\n      {props.meta && (\n        <MetaBlob>\n          {props.meta}\n        </MetaBlob>\n      )}\n    </TabWrapper>\n  );\n};\n\nTab.propTypes = {\n  onTabClick: PropTypes.func,\n  isActive: PropTypes.bool,\n  tabId: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  meta: PropTypes.string,\n};\n\nexport default Tab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {map} from 'lodash';\n\nimport {\n  Tab,\n} from './components';\n\nimport {\n  TabsContainer,\n} from './styled';\n\n\nconst isActiveTab = (activeTab, tabId, index) => {\n  if (tabId === activeTab) {\n    return true;\n  }\n  if (!activeTab && index === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst TabBar = props => (\n  <TabsContainer {...props}>\n\n    {map(props.tabItems, (tabItem, index) => (\n      <Tab\n        fontSize={props.fontSize}\n        vertical={props.vertical}\n        key={tabItem.tabId}\n        isActive={isActiveTab(props.activeTab, tabItem.tabId, index)}\n        onTabClick={props.setActiveTab}\n        {...tabItem}\n      />\n    ))}\n\n  </TabsContainer>\n);\n\nTabBar.propTypes = {\n  tabItems: PropTypes.arrayOf(PropTypes.shape({\n    tabId: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    meta: PropTypes.string,\n  })).isRequired,\n  setActiveTab: PropTypes.func.isRequired,\n  activeTab: PropTypes.string,\n};\n\nexport default TabBar;\n","// NOTE: This state is only intended to be used by story.\n\nconst ACTION_TYPES = {\n  SET_ACTIVE_TAB: 'SET_ACTIVE_TAB',\n};\n\nconst actions = {\n  setActiveTab: activeTab => ({\n    type: ACTION_TYPES.SET_ACTIVE_TAB,\n    payload: {activeTab},\n  }),\n};\n\n\nconst defaultState = {\n  activeTab: null,\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.SET_ACTIVE_TAB: {\n      return {\n        ...state,\n        activeTab: payload.activeTab,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled from 'styled-components';\nimport {COLORS} from '../../constants';\n\nconst TabsContainer = styled.ol`\n  display: flex;\n  overflow-x: auto;\n  padding: 0;\n  border-bottom: ${({vertical}) => !vertical && `1px solid ${COLORS.greyLight}`};\n\n  width: ${({vertical}) => vertical && '100%'};\n  flex-direction: ${({vertical}) => vertical && 'column'};\n\n  &::before, &::after {\n    content: '';\n    margin: auto;\n  }\n`;\n\nconst TabWrapper = styled.li`\n  display: flex;\n  align-items: center;\n  margin: 0 0.1em 0;\n  padding: 0.5em 0.9em 0.5em;\n  cursor: pointer;\n  font-weight: ${({isActive}) => isActive && 'bold'};\n  opacity: ${({isActive}) => (isActive ? '1' : '0.7')};\n  border-bottom: 2px solid ${({isActive, vertical}) => {\n    if (vertical) {\n      return isActive ? COLORS.greenAlt : COLORS.greyLight;\n    }\n\n    return isActive ? COLORS.greenAlt : 'transparent';\n  }};\n  transition: all 0.3s;\n\n  &:hover {\n    transition: all 0.3s;\n    opacity: 1;\n    border-bottom: 2px solid ${({isActive}) => (isActive ? COLORS.greenDark : COLORS.greyAlt)}\n  }\n`;\n\nconst TabLabel = styled.div`\n  text-transform: capitalize;\n  font-size: ${({fontSize}) => fontSize || '0.85em'};\n  white-space: nowrap;\n`;\n\nconst MetaBlob = styled.div`\n  margin-top: 0.3em;\n  margin-left: 0.5em;\n  padding-left: 0.5em;\n  padding-right: 0.5em;\n  border-radius: 1em;\n  font-size: 0.7em;\n  white-space: nowrap;\n  background: ${COLORS.greyAlt};\n`;\n\nexport {\n  TabsContainer,\n  TabWrapper,\n  TabLabel,\n  MetaBlob,\n};\n","import React from 'react';\nimport {compose} from 'lodash/fp';\n\nimport TabBar from './index';\nimport state from './state';\nimport data from './data.json';\nimport {withState} from '../../hocs';\nimport {YggioDefaultDecorator} from '../../decorators';\n\nconst StatefulTabBar = compose(withState(state))(TabBar);\n\nconst main = {\n  title: 'Components/Tab Bar',\n  component: StatefulTabBar,\n  decorators: [YggioDefaultDecorator],\n};\n\nconst Template = args => <StatefulTabBar {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  tabItems: data.normal,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","const main = {\n  title: 'Components/Table',\n};\n\nconst Template = () => <p>This component needs a story</p>;\n\nconst Primary = Template.bind({});\n\nexport default main;\nexport {\n  Primary,\n};\n","const DEFAULTS = {\n  isDisabled: false,\n  resize: 'none',\n  height: '80px',\n  fullHeight: false,\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\nimport InputDecorator from '../input-decorator';\nimport {StyledInput} from './styled';\n\nconst TextArea = props => (\n  <InputDecorator\n    label={props.label}\n    additionalInfo={props.additionalInfo}\n    isRequired={props.isRequired}\n    isOptional={props.isOptional}\n    helperText={props.helperText}\n    validationErrorMessage={props.validationErrorMessage}\n    validationSuccessMessage={props.validationSuccessMessage}\n    width={props.width}\n    margin={props.margin}\n    fullHeight={props.fullHeight || DEFAULTS.fullHeight}\n  >\n    <StyledInput\n      value={props.value}\n      name={props.name}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n      onBlur={props.onBlur}\n      autoFocus={!!props.autoFocus}\n      resize={props.resize}\n      height={props.height}\n      disabled={props.isDisabled || DEFAULTS.isDisabled}\n      disableBlueFocusOutline={props.disableBlueFocusOutline}\n      isInvalid={!!props.validationErrorMessage}\n    />\n  </InputDecorator>\n);\n\nTextArea.propTypes = {\n  // Input props\n  value: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  resize: PropTypes.string,\n  height: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  disableBlueFocusOutline: PropTypes.bool,\n  // Input decorator props\n  label: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  isRequired: PropTypes.bool,\n  isOptional: PropTypes.bool,\n  helperText: PropTypes.string,\n  validationErrorMessage: PropTypes.string,\n  validationSuccessMessage: PropTypes.string,\n  width: PropTypes.string,\n  margin: PropTypes.string,\n  fullHeight: PropTypes.bool,\n};\n\nexport default TextArea;\n","import styled from 'styled-components';\n\nimport {commonInputStyles, inputFocusStyle} from '../../global/styled';\nimport {DEFAULTS} from './constants';\n\nconst StyledInput = styled.textarea`\n  ${commonInputStyles}\n  ${inputFocusStyle}\n  height: ${({height}) => height || DEFAULTS.height};\n  padding-top: 10px;\n  resize: ${({resize}) => resize || DEFAULTS.resize};\n`;\n\nexport {\n  StyledInput,\n};\n","import React from 'react';\n\nimport TextArea from './index';\nimport {DEFAULTS} from './constants';\n\nconst main = {\n  title: 'Components/Text Area',\n  component: TextArea,\n  argTypes: {\n    height: {\n      table: {defaultValue: {summary: DEFAULTS.height}}\n    },\n    resize: {\n      table: {defaultValue: {summary: DEFAULTS.resize}}\n    },\n  }\n};\n\nconst Template = args => <TextArea {...args} onChange={() => null} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","// constants.ts\n\nconst DEFAULTS = {\n  isDisabled: false,\n  type: 'text',\n  fullHeight: false,\n  height: '35px',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\nimport InputDecorator from '../input-decorator';\nimport {StyledInput} from './styled';\n\nconst TextField = props => (\n  <InputDecorator\n    label={props.label}\n    additionalInfo={props.additionalInfo}\n    isRequired={props.isRequired}\n    isOptional={props.isOptional}\n    helperText={props.helperText}\n    validationErrorMessage={props.validationErrorMessage}\n    validationSuccessMessage={props.validationSuccessMessage}\n    width={props.width}\n    margin={props.margin}\n    fullHeight={props.fullHeight || DEFAULTS.fullHeight}\n  >\n    <StyledInput\n      maxLength={props.maxLength}\n      height={props.height}\n      value={props.value}\n      name={props.name}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n      onBlur={props.onBlur}\n      autoFocus={!!props.autoFocus}\n      disabled={props.isDisabled || props.disabled || DEFAULTS.isDisabled}\n      type={props.isPassword ? 'password' : DEFAULTS.type}\n      disableBlueFocusOutline={props.disableBlueFocusOutline}\n      isInvalid={!!props.validationErrorMessage}\n    />\n  </InputDecorator>\n);\n\nTextField.propTypes = {\n  // Input props\n  maxLength: PropTypes.number,\n  height: PropTypes.string,\n  value: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isPassword: PropTypes.bool,\n  disableBlueFocusOutline: PropTypes.bool,\n  // Input decorator props\n  label: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  isRequired: PropTypes.bool,\n  isOptional: PropTypes.bool,\n  helperText: PropTypes.string,\n  validationErrorMessage: PropTypes.string,\n  validationSuccessMessage: PropTypes.string,\n  width: PropTypes.string,\n  margin: PropTypes.string,\n  fullHeight: PropTypes.bool,\n};\n\nexport default TextField;\n","import React from 'react';\n\nimport TextField from './index';\n\nconst main = {\n  title: 'Components/Text Field',\n  component: TextField,\n};\n\nconst Template = args => <TextField {...args} onChange={() => null} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {};\n\nexport default main;\nexport {\n  Primary,\n};\n","import styled from 'styled-components';\n\nimport {commonInputStyles, inputFocusStyle} from '../../global/styled';\nimport {DEFAULTS} from './constants';\n\nconst StyledInput = styled.input`\n  ${commonInputStyles}\n  ${inputFocusStyle}\n  height: ${({height}) => height || DEFAULTS.height};\n`;\n\nexport {\n  StyledInput,\n};\n","// constants.js\n\nconst DEFAULTS = {\n  isDisabled: false,\n  fullHeight: false,\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\n\nconst withAddDefaultTimeInterval = Component => props => {\n  React.useEffect(() => {\n    if (props.defaultValue) {\n      const newHour = props.defaultValue / 3600000;\n\n      /* eslint-disable radix */\n      const hours = parseInt(newHour);\n      const moduloMinute = props.defaultValue % 3600000;\n      const newMinute = moduloMinute / 60000;\n      const minutes = parseInt(newMinute);\n      const moduloSecond = moduloMinute % 60000;\n      const newSecond = moduloSecond / 1000;\n      const seconds = parseInt(newSecond);\n      /* eslint-enable radix */\n\n      props.setInputValue('hours', hours);\n      props.setInputValue('minutes', minutes);\n      props.setInputValue('seconds', seconds);\n    } else {\n      console.info('something went wrong');\n    }\n  }, []);\n  return <Component {...props} />;\n};\n\n\nexport {\n  withAddDefaultTimeInterval,\n};\n","// time-interval/index.js\nimport {compose} from 'lodash/fp';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {DEFAULTS} from './constants';\nimport InputDecorator from '../input-decorator';\nimport NumberField from '../number-field';\nimport {isFormValid} from '../../utils/form-wizard';\nimport Button from '../button';\nimport {\n  TitleContainer,\n  TableTitle,\n  ColonContainer,\n  TimeIntervalContainer,\n} from './styled';\n\nimport {withState} from '../../hocs';\nimport {formState} from './state';\nimport {\n  withAddDefaultTimeInterval\n} from './effects';\n\nconst BasicTimeInterval = props => {\n  return (\n    <InputDecorator\n      label={props.label}\n      additionalInfo={props.additionalInfo}\n      isRequired={props.isRequired}\n      isOptional={props.isOptional}\n      helperText={props.helperText}\n      validationErrorMessage={props.validationErrorMessage}\n      validationSuccessMessage={props.validationSuccessMessage}\n      width={props.width}\n      margin={props.margin}\n      fullHeight={props.fullHeight || DEFAULTS.fullHeight}\n    >\n      <TitleContainer>\n        <TableTitle>Hours</TableTitle>\n        <TableTitle>Minutes</TableTitle>\n        <TableTitle>Seconds</TableTitle>\n      </TitleContainer>\n      <TimeIntervalContainer style={{display: 'flex'}}>\n        <NumberField\n          style={{display: 'inline-block'}}\n          width={'100px'}\n          name={'hours'}\n          isRequired\n          min={'0'}\n          max={'595'}\n          value={props.formInputs.hours.value}\n          onChange={evt => props.setInputValue('hours', evt.target.value)}\n        />\n        <ColonContainer>:</ColonContainer>\n        <NumberField\n          style={{display: 'inline-block'}}\n          width={'100px'}\n          name={'minutes'}\n          isRequired\n          min={'0'}\n          max={'59'}\n          value={props.formInputs.minutes.value}\n          onChange={evt => props.setInputValue('minutes', evt.target.value)}\n        />\n        <ColonContainer>:</ColonContainer>\n        <NumberField\n          style={{display: 'inline-block'}}\n          width={'100px'}\n          name={'seconds'}\n          isRequired\n          min={'0'}\n          max={'59'}\n          value={props.formInputs.seconds.value}\n          onChange={evt => props.setInputValue('seconds', evt.target.value)}\n        />\n      </TimeIntervalContainer>\n      <Button\n        color={'green'}\n        content={'Set'}\n        margin={'20px 0 0 0'}\n        disabled={!isFormValid(props.formInputs)}\n        onClick={() => {\n          const seconds = props.formInputs.seconds.value;\n          const minutes = props.formInputs.minutes.value;\n          const hours = props.formInputs.hours.value;\n          const expectedReportInterval = (seconds * 1000) + (minutes * 60000) + (hours * 3600000);\n          props.onChange(expectedReportInterval);\n        }}\n      />\n    </InputDecorator>\n  );\n};\n\nBasicTimeInterval.propTypes = {\n  // Input props\n  value: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  disableBlueFocusOutline: PropTypes.bool,\n  // Input decorator props\n  label: PropTypes.string,\n  additionalInfo: PropTypes.string,\n  isRequired: PropTypes.bool,\n  isOptional: PropTypes.bool,\n  helperText: PropTypes.string,\n  validationErrorMessage: PropTypes.string,\n  validationSuccessMessage: PropTypes.string,\n  width: PropTypes.string,\n  margin: PropTypes.string,\n  fullHeight: PropTypes.bool,\n};\n\nconst RawTimeInterval = compose(\n  withState(formState),\n  withAddDefaultTimeInterval,\n)(BasicTimeInterval);\n\nRawTimeInterval.propTypes = {\n\n};\n\nexport default RawTimeInterval;\n","import {generateForm, VALIDATION_VISIBILITY_TYPES, inputValidators} from '../../utils/form-wizard';\n\nconst formConfig = {\n  hours: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n      validators: [\n        inputValidators.inputRequired(''),\n        {\n          validate: value => {\n            if (Number.isNaN(value)) {\n              console.info('it is false 1');\n              return false;\n            }\n            if (value < 0 || value > 59) {\n              console.info('it is false 2');\n              return false;\n            }\n            console.info('it is true');\n            return true;\n          },\n          message: 'Please enter a valid contextMap key',\n        },\n      ]\n    }\n  },\n  minutes: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n      validators: [\n        inputValidators.inputRequired(''),\n        {\n          validate: value => {\n            if (Number.isNaN(value)) {\n              console.info('it is false 1');\n              return false;\n            }\n            if (value < 0 || value > 59) {\n              console.info('it is false 2');\n              return false;\n            }\n            console.info('it is true');\n            return true;\n          },\n          message: 'Please enter a valid contextMap key',\n        },\n      ]\n    }\n  },\n  seconds: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n      validators: [\n        inputValidators.inputRequired(''),\n        {\n          validate: value => {\n            if (Number.isNaN(value)) {\n              console.info('it is false 1');\n              return false;\n            }\n            if (value < 0 || value > 59) {\n              console.info('it is false 2');\n              return false;\n            }\n            console.info('it is true');\n            return true;\n          },\n          message: 'Please enter a valid contextMap key',\n        },\n      ]\n    }\n  },\n};\n\nconst formState = generateForm(formConfig);\n\nexport {\n  formState,\n};\n","// styled\nimport styled from 'styled-components';\n\nconst TitleContainer = styled.div`\n  font-family: Lato, Arial, sans-serif;\n  display: grid;\n  grid-template-columns: 126px 126px 126px;\n  font-size: 13px;\n  margin-left: 5px;\n`;\n\nconst TableTitle = styled.div`\n  margin: 0 0 5px 0;\n`;\n\nconst ColonContainer = styled.div`\n  display: inline-block;\n  margin: 0 10px 0 10px;\n  font-size: 25px;\n`;\n\nconst TimeIntervalContainer = styled.div`\n  display: flex;\n`;\n\nexport {\n  TitleContainer,\n  TableTitle,\n  ColonContainer,\n  TimeIntervalContainer,\n};\n","import React from 'react';\n\nimport TimeInterval from './index';\nimport {DEFAULTS} from './constants';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst main = {\n  title: 'Components/Time interval',\n  component: TimeInterval,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n    isDisabled: {\n      table: {defaultValue: {summary: DEFAULTS.isDisabled}}\n    },\n    fullHeight: {\n      table: {defaultValue: {summary: DEFAULTS.fullHeight}}\n    },\n  }\n};\n\nconst Template = args => <TimeInterval {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  defaultValue: 10000200,\n  onChange: evt => {\n    console.info(evt);\n  }\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","const DEFAULTS = {\n  margin: '0',\n  tooltipPlacement: 'top',\n};\n\nexport {\n  DEFAULTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTooltip from 'react-tooltip';\nimport {Icon} from 'react-icons-kit';\nimport {info as infoIcon} from 'react-icons-kit/entypo/info';\n\nimport {DEFAULTS} from './constants';\nimport {Circle} from './styled';\n\nconst TooltipAnchor = props => (\n  <>\n    <Circle\n      data-tip\n      data-for={props.id}\n      margin={props.margin}\n    >\n      <Icon icon={infoIcon} size={9} />\n    </Circle>\n    <ReactTooltip\n      id={props.id}\n      place={props.tooltipPlacement || DEFAULTS.tooltipPlacement}\n      effect=\"solid\"\n    >\n      {props.text}\n    </ReactTooltip>\n  </>\n);\n\nTooltipAnchor.propTypes = {\n  text: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  tooltipPlacement: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n  margin: PropTypes.string,\n};\n\nexport default TooltipAnchor;\n","import styled from 'styled-components';\nimport {DEFAULTS} from './constants';\n\nconst Circle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 13px;\n  height: 13px;\n  margin: ${props => props.margin || DEFAULTS.margin};\n  border-radius: 50%;\n  font-size: 9px;\n  background: #999;\n  color: white;\n`;\n\nexport {\n  Circle,\n};\n","import React from 'react';\n\nimport TooltipAnchor from './index';\n\nconst main = {\n  title: 'Components/Tooltip Anchor',\n  component: TooltipAnchor,\n  argTypes: {\n    id: {\n      description: 'A page unique id to differentiate if there are multiple TooltipAnchor instances on the same page'\n    }\n  }\n};\n\nconst Template = args => <TooltipAnchor {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  id: 'myUniqueId',\n  text: 'Here is some information for you'\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import React from 'react';\n\nconst withAddedTranslatorChanged = Component => props => {\n  React.useEffect(() => {\n    props.onChange(props.addedTranslators);\n  }, [props.addedTranslators]);\n  return <Component {...props} />;\n};\n\nconst withAddDefaultTranslator = Component => props => {\n  React.useEffect(() => {\n\n    if (props.shouldAddDefaultTranslator) {\n      props.addTranslator(props.transformedAvailableTranslators[0]);\n    } else if (props.initialTranslators && props.initialTranslators.length > 0) {\n      props.addInitialTranslators(props.initialTranslators);\n    }\n  }, []);\n  return <Component {...props} />;\n};\n\nconst withAvailableTranslatorChanged = Component => props => {\n  React.useEffect(() => {\n    if (props.shouldAddAvailableAsDefault) {\n      props.resetAddedTranslators();\n    }\n  }, [props.availableTranslators]);\n  return <Component {...props} />;\n};\n\nexport {\n  withAddedTranslatorChanged,\n  withAddDefaultTranslator,\n  withAvailableTranslatorChanged,\n};\n","import {compose} from 'lodash/fp';\nimport React from 'react';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport {cross} from 'react-icons-kit/metrize/cross';\nimport {androidArrowDropup} from 'react-icons-kit/ionicons/androidArrowDropup';\nimport {androidArrowDropdown} from 'react-icons-kit/ionicons/androidArrowDropdown';\nimport PropTypes from 'prop-types';\n\nimport selectors from './selectors';\nimport {withState, withReselect} from '../../hocs';\nimport state from './state';\nimport {\n  Container,\n  Item,\n  ButtonItem,\n  ArrowContainer,\n  RemoveButton,\n  DeviceTypeContainer,\n  IconContainer,\n  ArrowItem,\n} from './styled';\nimport Select from '../select';\nimport {\n  withAddDefaultTranslator,\n  withAddedTranslatorChanged,\n  withAvailableTranslatorChanged,\n} from './effects';\n\nconst BottomSelectStyles = {\n  container: provided => ({\n    ...provided,\n    fontFamily: 'Lato,Arial,sans-serif',\n    fontSize: '13px',\n    padding: 0,\n  }),\n  control: base => ({\n    ...base,\n    cursor: 'pointer',\n    fontSize: '13px',\n    marginTop: '5%',\n  }),\n  input: (provided, state) => ({\n    ...provided,\n    fontSize: '13px',\n    border: state.isFocused ? 'none' : 'none',\n  }),\n  valueContainer: (provided, state) => ({\n    ...provided,\n    fontSize: '13px',\n    border: state.isFocused ? 'none' : 'none',\n  }),\n};\n\nconst SelectStyles = {\n  control: base => ({\n    ...base,\n    border: 0,\n    fontSize: '13px',\n    marginTop: '2px',\n    boxShadow: 'none',\n    cursor: 'pointer',\n    fontFamily: 'Lato,Arial,sans-serif',\n  }),\n  input: (provided, state) => ({\n    ...provided,\n    fontSize: '13px',\n    border: state.isFocused ? 'none' : 'none',\n  }),\n  valueContainer: (provided, state) => ({\n    ...provided,\n    fontSize: '13px',\n    border: state.isFocused ? 'none' : 'none',\n  }),\n  option: provided => ({\n    ...provided,\n    fontSize: '13px',\n  }),\n};\n\n\nconst BasicTranslatorSelector = props => {\n  return (\n    <>\n      {_.map(props.addedTranslators, (translator, index) => (\n        <Container key={index}>\n          <ArrowItem>\n            <ArrowContainer>\n              <IconContainer>\n                <Icon\n                  icon={androidArrowDropup}\n                  size={20}\n                  onClick={() => props.moveTranslatorUp(index)}\n                />\n              </IconContainer>\n              <IconContainer>\n                <Icon\n                  icon={androidArrowDropdown}\n                  size={20}\n                  onClick={() => props.moveTranslatorDown(index)}\n                />\n              </IconContainer>\n            </ArrowContainer>\n          </ArrowItem>\n          <Item>\n            <DeviceTypeContainer>{translator.name}</DeviceTypeContainer>\n          </Item>\n          <Item>\n            <DeviceTypeContainer>{translator.username}</DeviceTypeContainer>\n          </Item>\n          <Item>\n            <Select\n              styles={SelectStyles}\n              onChange={evt => {\n                props.setVersion(evt.target.value, index);\n              }}\n              defaultValue={{\n                label: props.addedTranslators[index].selectedVersion,\n                value: props.addedTranslators[index].selectedVersion\n              } ||\n              {\n                label: props.addedTranslators[index].versions[0],\n                value: props.addedTranslators[index].versions[0],\n              }}\n              options={_.map(props.addedTranslators[index].versions, (version, index) => ({\n                label: version,\n                value: version,\n                key: index,\n              }))}\n            />\n          </Item>\n          <Item>\n            <Select\n              styles={SelectStyles}\n              defaultValue={{label: 'Major updates', value: 'major'}}\n              onChange={evt => props.setUpdateOption(evt.target.value, index)}\n              options={[\n                {\n                  value: 'major',\n                  label: 'Major updates',\n                },\n                {\n                  value: 'minor',\n                  label: 'Minor updates',\n                },\n                {\n                  value: 'patch',\n                  label: 'Patch updates',\n                },\n                {\n                  value: 'none',\n                  label: 'No updates',\n                }\n              ]}\n            />\n          </Item>\n          <ButtonItem>\n            <RemoveButton>\n              <Icon\n                icon={cross}\n                size={18}\n                onClick={() => props.removeTranslator(translator)}\n              />\n            </RemoveButton>\n          </ButtonItem>\n        </Container>\n      ))}\n      <Select\n        onChange={evt => {\n          const transformedTranslator = _.find(\n            props.transformedAvailableTranslators,\n            {identifier: evt.target.value}\n          );\n          props.addTranslator(transformedTranslator);\n        }}\n        options={props.availableTranslatorsOptions}\n        placeholder={'Add translator...'}\n        value={'Select...'}\n        styles={BottomSelectStyles}\n      />\n    </>\n  );\n};\n\nBasicTranslatorSelector.propTypes = {\n  // from selectors\n  transformedAvailableTranslators: PropTypes.array,\n  availableTranslatorsOptions: PropTypes.array,\n  // from state\n  addedTranslators: PropTypes.array,\n  addTranslator: PropTypes.func,\n  removeTranslator: PropTypes.func,\n  moveTranslatorUp: PropTypes.func,\n  moveTranslatorDown: PropTypes.func,\n  setUpdateOption: PropTypes.func,\n  setVersion: PropTypes.func,\n  // from top\n  translator: PropTypes.object,\n  initialTranslators: PropTypes.array,\n  index: PropTypes.number,\n};\n\nconst RawTranslatorSelector = compose(\n  withState(state),\n  withReselect(selectors),\n  withAddedTranslatorChanged,\n  withAddDefaultTranslator,\n  withAvailableTranslatorChanged,\n)(BasicTranslatorSelector);\n\nRawTranslatorSelector.propTypes = {\n  availableTranslators: PropTypes.array,\n  initialTranslators: PropTypes.array,\n};\n\nexport default RawTranslatorSelector;\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\n\nconst transformedAvailableTranslatorsSelector = createSelector(\n  props => props.availableTranslators,\n  availableTranslators => {\n    const uniq = _.uniqBy(availableTranslators, translator => {\n      return translator.name + translator.username;\n    });\n\n    const result = _.map(uniq, translator => {\n      return {\n        name: translator.name,\n        username: translator.username,\n        identifier: translator.name + translator.username,\n        versions: [],\n      };\n    });\n\n    _.forEach(availableTranslators, translator => {\n      const index = _.findIndex(result, {name: translator.name, username: translator.username});\n      result[index].versions.push(translator.version);\n    });\n    return result;\n  }\n);\n\nconst availableTranslatorsOptionsSelector = createSelector(\n  props => props.addedTranslators,\n  transformedAvailableTranslatorsSelector,\n  (addedTranslators, transformedAvailableTranslators) => {\n\n    const filteredAvailableTranslators = _.filter(transformedAvailableTranslators, item => {\n      const isAlreadyAdded = !!_.find(addedTranslators, {name: item.name, username: item.username});\n      return !isAlreadyAdded;\n    });\n\n    return _.map(filteredAvailableTranslators, (translator, index) => ({\n      label: `${translator.name}- ${translator.username}`,\n      value: translator.identifier,\n      key: index,\n    }));\n  }\n);\n\nexport default {\n  availableTranslatorsOptions: availableTranslatorsOptionsSelector,\n  transformedAvailableTranslators: transformedAvailableTranslatorsSelector,\n};\n","import _ from 'lodash';\n\nconst ACTION_TYPES = {\n  addInitialTranslators: 'addInitialTranslators',\n  addTranslator: 'addTranslator',\n  removeTranslator: 'removeTranslator',\n  moveTranslatorUp: 'moveTranslatorUp',\n  moveTranslatorDown: 'moveTranslatorDown',\n  setUpdateOption: 'setUpdateOption',\n  setVersion: 'setVersion',\n  resetAddedTranslators: 'resetAddedTranslators',\n};\n\nconst defaultState = {\n  addedTranslators: [],\n};\n\nconst actions = {\n\n  addInitialTranslators: initialTranslators => ({\n    type: ACTION_TYPES.addInitialTranslators,\n    payload: {initialTranslators},\n  }),\n\n  addTranslator: transformedTranslator => ({\n    type: ACTION_TYPES.addTranslator,\n    payload: {transformedTranslator},\n  }),\n\n  removeTranslator: translator => ({\n    type: ACTION_TYPES.removeTranslator,\n    payload: {translator},\n  }),\n\n  moveTranslatorUp: translator => ({\n    type: ACTION_TYPES.moveTranslatorUp,\n    payload: {translator},\n  }),\n\n  moveTranslatorDown: translator => ({\n    type: ACTION_TYPES.moveTranslatorDown,\n    payload: {translator},\n  }),\n\n  setVersion: (version, index) => ({\n    type: ACTION_TYPES.setVersion,\n    payload: {version, index},\n  }),\n\n  setUpdateOption: (updateOption, index) => ({\n    type: ACTION_TYPES.setUpdateOption,\n    payload: {updateOption, index},\n  }),\n\n  resetAddedTranslators: () => ({\n    type: ACTION_TYPES.resetAddedTranslators,\n  }),\n};\n\nconst reducer = (state = defaultState, action) => {\n  if (!action) {\n    return state;\n  }\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.addInitialTranslators: {\n\n      const {initialTranslators} = payload;\n      return {\n        addedTranslators: initialTranslators,\n      };\n    }\n\n    case ACTION_TYPES.addTranslator: {\n\n      const versionArray = payload.transformedTranslator.versions;\n      const length = versionArray.length - 1;\n      const selectedVersion = versionArray[length];\n      return {\n        addedTranslators: state.addedTranslators.concat([{\n          name: payload.transformedTranslator.name,\n          username: payload.transformedTranslator.username,\n          selectedVersion,\n          versions: versionArray,\n          updateOption: 'minor',\n        }]),\n      };\n    }\n\n    case ACTION_TYPES.removeTranslator: {\n      return {\n        addedTranslators: _.without(state.addedTranslators, payload.translator)\n      };\n    }\n\n    case ACTION_TYPES.moveTranslatorUp: {\n      const newArray = _.cloneDeep(state.addedTranslators);\n      const newIndex = payload.translator - 1;\n      const element = state.addedTranslators[payload.translator];\n      newArray.splice(payload.translator, 1);\n      newArray.splice(newIndex, 0, element);\n      return {\n        addedTranslators: newArray\n      };\n    }\n\n    case ACTION_TYPES.moveTranslatorDown: {\n      const newArray = _.cloneDeep(state.addedTranslators);\n      const newIndex = payload.translator + 1;\n      const element = state.addedTranslators[payload.translator];\n      newArray.splice(payload.translator, 1);\n      newArray.splice(newIndex, 0, element);\n      return {\n        addedTranslators: newArray\n      };\n    }\n\n    case ACTION_TYPES.setUpdateOption: {\n      const newArray = _.cloneDeep(state.addedTranslators);\n      newArray[payload.index].updateOption = payload.updateOption;\n      return {\n        addedTranslators: newArray\n      };\n    }\n\n    case ACTION_TYPES.setVersion: {\n      const newArray = _.cloneDeep(state.addedTranslators);\n      newArray[payload.index].selectedVersion = payload.version;\n      return {\n        addedTranslators: newArray\n      };\n    }\n\n    case ACTION_TYPES.resetAddedTranslators: {\n      return defaultState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 5% 25% 25% 20% 20% 5%;\n  margin-bottom: -1px;\n`;\n\nconst DeviceTypeContainer = styled.div`\n  text-transform: capitalize;\n  margin: 13px 0px 0px 10px;\n  font-size: 13px;\n`;\nconst Item = styled.div`\n  margin: 0px;\n  border: solid 1px #D0D0D0;\n  border-right: none;\n`;\n\nconst ButtonItem = styled.div`\n  border: solid 1px #D0D0D0;\n`;\n\nconst ArrowContainer = styled.div`\n  margin: 2px 0px 0px 0px;\n  text-align: center;\n`;\n\nconst RemoveButton = styled.div`\n  margin-top: 12px;\n  text-align: center;\n  color: #ff0000;\n  &:hover {\n    color: #990000;\n    cursor: pointer;\n  }\n`;\n\nconst IconContainer = styled.div`\n  color: #696969;\n  &:hover:hover {\n  color: black;\n  cursor: pointer;\n}\n`;\n\nconst ArrowItem = styled.div`\n  margin: 0px;\n  border: solid 1px #D0D0D0;\n  border-right: none;\n`;\n\nexport {\n  Container,\n  Item,\n  ArrowContainer,\n  RemoveButton,\n  DeviceTypeContainer,\n  IconContainer,\n  ButtonItem,\n  ArrowItem,\n};\n","import React from 'react';\n\nimport TranslatorSelector from './index';\n\nconst initialTranslators = [\n  {\n    name: 'translator-123',\n    username: 'marcus',\n    selectedVersion: '1.0.0',\n    versions: ['1.2.1', '1.2.0', '1.0.1', '1.0.0'],\n    updateOption: 'minor',\n  },\n  {\n    name: 'h21-asd-122',\n    username: 'micke',\n    selectedVersion: '1.0.0',\n    versions: ['1.2.1', '1.2.0', '1.0.1', '1.0.0'],\n    updateOption: 'minor',\n  },\n  {\n    name: 'translator-farenheit',\n    username: 'marcus',\n    selectedVersion: '1.0.0',\n    versions: ['1.2.1', '1.2.0', '1.0.1', '1.0.0'],\n    updateOption: 'minor',\n  },\n  {\n    name: 'translator-celcius',\n    username: 'marcus',\n    selectedVersion: '1.0.0',\n    versions: ['1.2.1', '1.2.0', '1.0.1', '1.0.0'],\n    updateOption: 'minor',\n  },\n];\n\nconst main = {\n  title: 'Components/Translator Selector',\n  component: TranslatorSelector,\n  argTypes: {\n    id: {\n      description: 'A page that showcase the translator selector'\n    }\n  }\n};\n\nconst Template = args => <TranslatorSelector {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  onChange: addedTranslators => console.info('addedTranslators: ', addedTranslators),\n  shouldAddDefaultTranslator: false,\n  initialTranslators,\n  availableTranslators: [\n    {\n      name: 'mickes-strips',\n      username: 'michael',\n      version: '1.0.0',\n    },\n    {\n      name: 'mickes-strips',\n      username: 'micke',\n      version: '4.0.0',\n    },\n    {\n      name: 'mickes-strips',\n      username: 'micke',\n      version: '5.0.0',\n    },\n    {\n      name: 'mickes-strips',\n      username: 'micke',\n      version: '5.1.0',\n    },\n    {\n      name: 'mickes-strips',\n      username: 'micke',\n      version: '5.1.1',\n    },\n  ]\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {Collapse} from 'react-collapse';\nimport {withState} from '../../hocs';\nimport state from './state';\n\nimport {\n  TreeItemContainer,\n  TreeItemsContainer,\n  TreeViewContainer,\n} from './styled';\n\nimport {\n  TreeItemHeader,\n} from './sub-components';\n\n\nconst TreeItem = props => {\n  const isSelected = props.node._id === props.selectedNodeId;\n  const isToggled = !!props.toggleState[props.node._id];\n\n  const onSelected = () => {\n    props.onNodeSelected(props.node._id);\n  };\n  const onToggled = nodeId => {\n    props.setToggleState(nodeId, !isToggled);\n  };\n\n  return (\n    <TreeItemContainer>\n      <TreeItemHeader\n        node={props.node}\n        isSelected={isSelected}\n        isToggled={isToggled}\n        onSelected={onSelected}\n        onToggled={onToggled}\n      />\n      {!!_.get(props.node, 'children.length') && (\n        <Collapse isOpened={props.toggleState[props.node._id]}>\n          <TreeItemsContainer>\n            {_.map(props.node.children, node => (\n              <TreeItem\n                key={node._id}\n                node={node}\n                selectedNodeId={props.selectedNodeId}\n                onNodeSelected={props.onNodeSelected}\n                toggleState={props.toggleState}\n                setToggleState={props.setToggleState}\n              />\n            ))}\n          </TreeItemsContainer>\n        </Collapse>\n      )}\n    </TreeItemContainer>\n  );\n};\nTreeItem.propTypes = {\n  // from top\n  node: PropTypes.object, // with \"toggled\" data\n  selectedNodeId: PropTypes.string,\n  onNodeSelected: PropTypes.func,\n  // from state\n  toggleState: PropTypes.object,\n  setToggleState: PropTypes.func.isRequired,\n};\n\n\nconst BasicTreeView = props => (\n  <TreeViewContainer>\n    <TreeItem\n      node={props.treeData}\n      selectedNodeId={props.selectedNodeId}\n      onNodeSelected={props.onNodeSelected}\n      toggleState={props.toggleState}\n      setToggleState={props.setToggleState}\n    />\n  </TreeViewContainer>\n);\n\nBasicTreeView.propTypes = {\n  // from top\n  treeData: PropTypes.object, // with \"toggled\" data\n  selectedNodeId: PropTypes.string,\n  onNodeSelected: PropTypes.func,\n  // from state\n  toggleState: PropTypes.object,\n  setToggleState: PropTypes.func.isRequired,\n};\n\nconst TreeView = compose(\n  withState(state),\n)(BasicTreeView);\n\n\nTreeView.propTypes = {\n  // from top\n  treeData: PropTypes.object,\n  selectedNodeId: PropTypes.string,\n  onNodeSelected: PropTypes.func,\n};\n\nexport default TreeView;\nexport {\n  BasicTreeView,\n  state,\n};\n","import {PropTypes, checkProps} from 'vanilla-prop-types';\n\nconst ACTION_TYPES = {\n  setToggleState: 'setToggleState',\n};\n\nconst actions = {\n  setToggleState: (nodeId, toggled) => ({\n    type: ACTION_TYPES.setToggleState,\n    payload: {\n      nodeId,\n      toggled,\n    },\n  }),\n};\n\nconst defaultState = {\n  toggleState: {},\n};\n\nconst propTypes = {\n  toggleState: PropTypes.object.isRequired,\n};\n\nconst reducer = (state = defaultState, action) => {\n  if (!action) {\n    return state;\n  }\n  const {type, payload} = action;\n\n  switch (type) {\n    case ACTION_TYPES.setToggleState: {\n      const {nodeId, toggled} = payload;\n      return {\n        ...state,\n        toggleState: {\n          ...state.toggleState,\n          [nodeId]: toggled,\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nconst validateState = checkProps(propTypes, {isExact: true});\n\nexport default {\n  actions,\n  reducer,\n  validateState,\n};\n","import styled from 'styled-components';\nimport {COLORS} from '../../constants';\n\n\nconst HeaderBase = styled.div`\n  display: inline-block;\n  vertical-align: top;\n  color: ${COLORS.black};\n`;\n\nconst HeaderTitleName = styled.span`\n  font-weight: ${({isSelected}) => (isSelected && 'bold')};\n  line-height: 28px;\n  vertical-align: middle;\n  cursor: pointer;\n  font-size: 14px;\n`;\n\nconst HeaderTitleMeta = styled.span`\n  font-weight: bold;\n  color: ${COLORS.greyDark};\n  padding-left: 15px;\n  line-height: 24px;\n  vertical-align: middle;\n`;\n\nconst HeaderToggleBase = styled.button`\n  margin-left: 5px;\n  height: 24px;\n  width: 24px;\n`;\n\nconst TreeItemContainer = styled.div`\n  width: 100%;\n`;\n\nconst TreeItemsContainer = styled.div`\n  margin: 0 0 0 15px;\n  padding: 5px 3px 3px 5px;\n  width: 100%;\n  font-weight: 300;\n  border-left: 1px solid #ccc;\n`;\n\n\nconst TreeViewContainer = styled.div`\n  margin: 3px 0 0 3px;\n  padding: 5px 3px 3px 5px;\n  width: 100%;\n  font-weight: 300;\n  border-radius: 5px;\n`;\n\nexport {\n  TreeItemContainer,\n  TreeItemsContainer,\n  TreeViewContainer,\n\n  HeaderBase,\n  HeaderTitleName,\n  HeaderTitleMeta,\n  HeaderToggleBase,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Icon} from 'react-icons-kit';\nimport {angleRight as untoggledIcon} from 'react-icons-kit/fa/angleRight';\nimport {angleDown as toggledIcon} from 'react-icons-kit/fa/angleDown';\n\nimport {\n  HeaderBase, HeaderTitleName,\n  HeaderToggleBase,\n} from './styled';\n\n\nconst HeaderToggleButton = props => {\n  const onClick = evt => {\n    evt.stopPropagation();\n    props.onToggled(props.nodeId);\n  };\n  return (\n    <HeaderToggleBase\n      onClick={onClick}\n    >\n      <Icon\n        icon={props.isToggled ? toggledIcon : untoggledIcon}\n      />\n    </HeaderToggleBase>\n  );\n};\n\nHeaderToggleButton.propTypes = {\n  nodeId: PropTypes.string,\n  isToggled: PropTypes.bool,\n  onToggled: PropTypes.func,\n};\n\n\nconst TreeItemHeader = props => {\n  const onClick = () => {\n    props.onSelected(props.nodeId);\n  };\n  return (\n    <HeaderBase\n      onClick={onClick}\n    >\n      <HeaderTitleName isSelected={props.isSelected}>\n        {_.get(props.node, 'name')}\n      </HeaderTitleName>\n      {!!_.get(props.node, 'children.length') && (\n        <HeaderToggleButton\n          isToggled={props.isToggled}\n          nodeId={_.get(props.node, '_id')}\n          onToggled={props.onToggled}\n        />\n      )}\n    </HeaderBase>\n  );\n};\n\nTreeItemHeader.propTypes = {\n  node: PropTypes.object,\n  isSelected: PropTypes.bool,\n  onSelected: PropTypes.func,\n  isToggled: PropTypes.bool,\n  onToggled: PropTypes.func,\n};\n\nexport {\n  TreeItemHeader,\n};\n","import React from 'react';\n\nimport TreeView from './index';\nimport storiesData from './stories-data.json';\n\nconst main = {\n  title: 'Components/Tree View',\n  component: TreeView,\n};\n\nconst Template = args => <TreeView {...args} />;\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  treeData: storiesData.root,\n  onNodeSelected: () => null,\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","// funky-link/styled.js\n\n// NOTE: this is not a dumping ground. Only stuff that is needed for\n// FunkyLink is used here. These should not be used elsewhere\n\nimport styled from 'styled-components';\nimport {Link, NavLink} from 'react-router-dom';\n\nimport {\n  COLORS,\n} from '../../constants';\nimport Button from '../button';\n\n// ////\n// buttons\n// ////\n\nconst BasicButton = styled(Button)`\n`;\n\nconst BasicNavButton = styled(Button)`\n`;\n\n// ////\n// links\n// ////\n\nconst generateBasicLink = LinkType => styled(LinkType)`\n  color: ${({color}) => color || COLORS.white};\n  pointer-events: ${({disabled}) => (disabled ? 'none' : 'auto')};\n  text-decoration: none;\n  transition: background 0.2s, color 0.2s;\n\n  &:hover {\n    transition: background 0.2s, color 0.2s;\n    background: rgba(255, 255, 255, 0.15);\n  }\n`;\n\nconst BasicLink = generateBasicLink(Link);\nconst BasicNavLink = generateBasicLink(NavLink);\n\n// ////\n// exports\n// ////\n\nexport {\n  BasicButton,\n  BasicNavButton,\n  BasicLink,\n  BasicNavLink,\n};\n","// funky-link.js\n\nimport _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {Link as OrigLink, NavLink as OrigNavLink} from 'react-router-dom';\nimport {withReselect} from '../../hocs';\n\n\nimport {\n  BasicLink,\n  BasicNavLink,\n  BasicButton,\n  BasicNavButton,\n} from './basic-styled';\n\n\n// /////////////\n//\n// //// the primordial propType, e.g. <Link link={props.link} />\n//\n// /////////////\n\nconst funkyLinkType = PropTypes.oneOfType([\n  PropTypes.func,\n  PropTypes.shape({\n    name: PropTypes.string,\n    label: PropTypes.string,\n    url: PropTypes.string,\n    to: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n]);\n\n// /////////////\n//\n// //// Select between a button and link\n//\n// /////////////\n\nconst generateBasicFunkyLinkClass = (LinkClass, ButtonClass) => {\n\n  const BasicFunkyLinkClass = props => {\n    const linkProps = _.omit(props, ['isFunky', 'onClick', 'label']);\n    const buttonProps = _.omit(props, ['isFunky', 'to', 'label']);\n    if (!props.isFunky) {\n      return (\n        <LinkClass {...linkProps}>\n          {props.label}\n        </LinkClass>\n      );\n    }\n    return (\n      <ButtonClass {...buttonProps} content={props.label} />\n    );\n  };\n\n  BasicFunkyLinkClass.propTypes = {\n    name: PropTypes.string,\n    label: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n    isFunky: PropTypes.bool.isRequired,\n    to: PropTypes.string,\n    onClick: (props, propName, componentName) => {\n      const isValid = !!props.to || _.isFunction(props.onClick);\n      return isValid ? null : new Error('Invalid link: props.to or props.onClick must be included');\n    },\n  };\n\n  return BasicFunkyLinkClass;\n};\n\n// /////////////\n//\n// //// Reselect input props for consistency & flexibility\n//\n// /////////////\n\nconst generateFunkyLinkClass = (LinkClass, ButtonClass) => {\n\n  // ////\n  // generate the basic link type\n  // ////\n\n  const BasicFunkyLinkClass = generateBasicFunkyLinkClass(LinkClass, ButtonClass);\n\n  // ////\n  // create the reselectors\n  // ////\n\n  const toSelector = createSelector(\n    props => props.to,\n    props => _.get(props, 'link.to'),\n    (to, linkTo) => to || linkTo || undefined,\n  );\n\n  const urlSelector = createSelector(\n    props => props.url,\n    props => _.get(props, 'link.url'),\n    toSelector,\n    (url, linkUrl, to) => url || linkUrl || to || undefined,\n  );\n\n  const nameSelector = createSelector(\n    props => props.name,\n    props => _.get(props, 'link.name'),\n    urlSelector,\n    (name, linkName, url) => name || linkName || url,\n  );\n\n  const labelSelector = createSelector(\n    props => props.label,\n    props => _.get(props, 'link.label'),\n    nameSelector,\n    (label, linkLabel, name) => label || linkLabel || name,\n  );\n\n  const onClickSelector = createSelector(\n    props => props.link,\n    props => props.onClick,\n    props => _.get(props, 'link.onClick'),\n    (link, onClick, linkOnClick) => {\n      if (_.isFunction(link)) {\n        return link;\n      }\n      return onClick || linkOnClick || undefined;\n    },\n  );\n\n  const isFunkySelector = createSelector(\n    urlSelector,\n    url => !url,\n  );\n\n  const reselectors = {\n    name: nameSelector,\n    label: labelSelector,\n    isFunky: isFunkySelector,\n    to: urlSelector,\n    onClick: onClickSelector,\n  };\n\n  // ////\n  // Create the final composite component\n  // ////\n\n  const FunkyLinkClass = compose(\n    withReselect(reselectors),\n  )(BasicFunkyLinkClass);\n\n  FunkyLinkClass.propTypes = {\n    link: funkyLinkType,\n    name: PropTypes.string,\n    label: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n    url: PropTypes.string,\n    to: PropTypes.string,\n    onClick: PropTypes.func,\n  };\n\n  // ////\n  // and done\n  // ////\n\n  return FunkyLinkClass;\n};\n\n// /////////////\n//\n// //// generate the actual link classes\n//\n// /////////////\n\nconst Link = generateFunkyLinkClass(BasicLink, BasicButton);\nconst NavLink = generateFunkyLinkClass(BasicNavLink, BasicNavButton);\n\n// /////////////\n//\n// //// exports\n//\n// /////////////\n\nexport {\n  Link,\n  NavLink,\n  funkyLinkType,\n};\n","import {\n  Link,\n  NavLink,\n  funkyLinkType,\n} from './funky-link';\n\nexport default Link;\nexport {\n  Link,\n  NavLink,\n  funkyLinkType,\n};\n","import React from 'react';\nimport ReactRouter from 'storybook-react-router';\n\nimport {Link as LinkComponent} from './index';\n\n// NOTE: Proptypes doesent seem to work so there are no autogenerated controls\n\nconst main = {\n  title: 'Components/Yggio Links',\n  component: LinkComponent,\n  decorators: [ReactRouter()],\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n\nconst Template = args => <LinkComponent {...args} />;\n\nconst Link = Template.bind({});\nLink.args = {\n  url: '/destination',\n  name: 'My link'\n};\n\nconst Button = Template.bind({});\nButton.args = {\n  onClick: () => null,\n  name: 'A link button'\n};\n\nexport default main;\nexport {\n  Link,\n  Button,\n};\n","// access-constants.js\n\nconst GLOBAL_ACCESS_USER_GROUP_REF = 'GLOBAL_ACCESS_USER_GROUP_REF';\nconst GLOBAL_ACCESS_RESOURCE_GROUP_REF = 'GLOBAL_ACCESS_RESOURCE_GROUP_REF';\nconst PUBLIC_ACCESS_RESOURCE_GROUP_REF = 'PUBLIC_ACCESS_RESOURCE_GROUP_REF';\n\nconst ACCESS_USER_GROUP_TYPES = {\n  // structural (automatically administrated through AccessEngine.api)\n  global: 'global', // administrated automatically - every user is included\n  singleton: 'singleton', // every user maps onto a singleton group\n  // yggio originated\n  group: 'group', // yggio user-group associated\n  orgUnit: 'orgUnit', // yggio organization.unit associated\n};\n\nconst ACCESS_RESOURCE_GROUP_TYPES = {\n  // structural (automatically administrated through AccessEngine.api)\n  global: 'global', // the global group - every resource is included\n  public: 'public', // the public group - only member management should be user-controllable\n  singleton: 'singleton', // every resource maps onto a singleton group\n  owner: 'owner', // every resource is inherently owned by some user (every user has one of these groups)\n  // yggio oriniated\n  group: 'group', // yggio user-group associated\n  orgUnit: 'orgUnit', // yggio organization.unit associated\n};\n\nconst ACCESS_RESOURCE_TYPES = {\n  // structural\n  userGroup: 'userGroup', // yggio wrapper\n  resourceGroup: 'resourceGroup', // yggio wrapper\n  // the rest\n  calculation: 'calculation',\n  oauthClient: 'oauthClient',\n  basicCredentialsSet: 'basicCredentialsSet',\n  device: 'device',\n};\n\nconst ACCESS_SCOPES = {\n  admin: 'admin',\n  peek: 'peek',\n  read: 'read',\n  write: 'write',\n};\n\n\nconst ACCESS_ORG_UNIT_SCOPES = {\n  peek: 'peek',\n  read: 'read',\n  write: 'write',\n  emplacement: 'emplacement',\n};\n\n// organization is only allowed to handle a strict subset of resourceType for now\n// it might be nice to be able to retain some constraints on resourceType visibility\nconst ACCESS_ORG_UNIT_RESOURCE_TYPES = [\n  ACCESS_RESOURCE_TYPES.device,\n];\n\n\nexport {\n  GLOBAL_ACCESS_USER_GROUP_REF,\n  GLOBAL_ACCESS_RESOURCE_GROUP_REF,\n  PUBLIC_ACCESS_RESOURCE_GROUP_REF,\n  ACCESS_USER_GROUP_TYPES,\n  ACCESS_RESOURCE_GROUP_TYPES,\n  ACCESS_SCOPES,\n  ACCESS_RESOURCE_TYPES,\n  ACCESS_ORG_UNIT_SCOPES, // needs changes\n  ACCESS_ORG_UNIT_RESOURCE_TYPES,\n};\n","import images from '../assets/images/apps';\nimport {App} from '../types';\nimport getExternalUrls from './external-app-urls';\n\nconst APP_TAGS = {\n  visualization: 'Visualization',\n  automation: 'Automation',\n  hardware: 'Hardware',\n  analytics: 'Analytics',\n  qr: 'QR',\n  assetTracking: 'Asset tracking',\n  streetLighting: 'Street lighting',\n  ai: 'AI',\n  energy: 'Energy',\n  reports: 'Reports',\n  rules: 'Rules',\n  '3d': '3D',\n  digitalTwin: 'Digital twin',\n};\n\n// Apps to add:\n// Siemens Desigo CC, Dele Health, Seneco City Grid, InfraControl,\n// Applio Sense, Homey, Zipato, Yabado, Intuitive, Abiro, CTS iCPE Zwave, Fast API\n\nconst getStaticApps = (): App[] => [\n  {\n    id: '2acfb196-f3c6-4a83-8015-7fb31ebdb301',\n    name: 'Grafana',\n    tagline: 'Web application for analytics and interactive visualization',\n    images: images.grafana,\n    tags: [APP_TAGS.visualization, APP_TAGS.analytics],\n    demoUrl: 'https://play.grafana.org/',\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff302',\n    name: 'Node Red',\n    tagline: 'Flow-based development tool for visual programming',\n    tags: [APP_TAGS.automation, APP_TAGS.rules],\n    images: images.nodeRed,\n    url: 'https://public.yggio.net/docs/mqtt/',\n    description: 'Node-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways. It provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette that can be deployed to its runtime in a single-click. With the Node-RED dashboard module it is also feasible to build beautiful dashboards and even HMI – Human machine interfaces. To use Node-RED with Yggio just install Node-RED on a suitable computer and then use the standard network modules “MQTT IN” and “MQTT OUT” and connect to Yggio’s MQTT broker as a data provider respectively data consumer. Then it is just to start creating flows and dashboards with live Yggio data sets.',\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff303',\n    name: 'Citygrid',\n    tagline: 'Motion based street lighting control',\n    tags: [APP_TAGS.streetLighting],\n    images: images.citygrid,\n    url: 'https://citygrid.dk',\n    support: 'info@seneco.dk',\n    description: 'Citygrid street lighting control enables a safe and pleasant travelling experience for road users while saving energy. At the heart of the concept is motion detection, making the street luminaires truly intelligent by dimming up the light ahead when detecting a pedestrian, cyclist or car. The light intensity can thus be kept low while roads are empty, while maintaining a proper and safe light level for road users when needed. Data from the luminaires can be viewed in the online dashboard and the luminaires can be reconfigured in the dashboards Light Management System.',\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff304',\n    name: 'Qrlio',\n    tagline: 'Smart solutions for tracking via QR codes or NFC',\n    tags: [APP_TAGS.qr, APP_TAGS.assetTracking],\n    url: 'https://qrlio.com',\n    images: images.qrlio,\n    support: 'info@qrlio.com',\n    description: 'Qrlio.com allows you to track your assets with QR codes or NFC tags. We deliver either digitally for your own production, or as physical labels or NFC tags. Contact us for a price idea. The system also allows direct access into Yggio to read out, for example, sensor values or log events in real time. You configure yourself in a simple way how the application is integrated with your other services for the best possible user experience - both for your employees and for the general public.',\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff305',\n    name: 'Terminio',\n    tagline: 'Flexible visualization of real-time data from Yggio and other services',\n    tags: [APP_TAGS.visualization],\n    url: 'https://terminio.se',\n    images: images.terminio,\n    support: 'info@rutio.se',\n    description: 'IoT data becomes more fun when visualized in real time at the right place. Everything from the sign that shows what is being measured to the concrete solution to limit the number of people in a room. Terminio.se is a service that conveys IoT data quickly and efficiently on your screen - either as a web component for integration into your existing screen solution or via our specially adapted and preconfigured hardware with HDMI connector and WiFi or LAN cable. Rutio also provides services for creating layouts and verifying your particular display solution.',\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff306',\n    name: 'Danfoss Leanheat® Building',\n    tagline: 'AI-optimized heating control and maintenance',\n    tags: [APP_TAGS.ai, APP_TAGS.energy],\n    url: 'http://leanheat.danfoss.com',\n    images: images.leanheat,\n    support: 'Maria Gihlström, Sales Manager PBO, maria.gihlstrom@danfoss.com, +46104400257 | Henrik Johansson, Sales Manager DHU, henrik.johansson@danfoss.com, +46104400255',\n    description: 'Leanheat® Building is a software solution to optimize the heating system of centrally heated multi-family buildings. Fully automated and self-learning, The system provides real-time optimization, not only for individual buildings, but for entire clusters of apartment buildings. Leanheat® Building collects data from sources inside and outside the building and enables monitoring, data analysis and remote-controlled adjustment of parameters. Danfoss Leanheat® offers a portfolio of revolutionary end-to-end software systems and services for the control and optimization of district energy systems - from plants and distribution to buildings and homes.',\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff307',\n    name: 'Power BI',\n    tagline: 'Use Yggio data sets with Power BI for advanced analysis and reports',\n    tags: [APP_TAGS.reports, APP_TAGS.analytics, APP_TAGS.visualization],\n    url: 'https://public.yggio.net/docs/power-bi/',\n    images: images.powerBi,\n    description: 'The Sensative Yggio connector for Microsoft Power BI Desktop enables the user in a fast and easy way to get data directly from an Yggio account into Power BI desktop for advanced analysis. Doing analyze of the data and creating reports like the example screen shots and many other types will be done in just a few minutes after some training.',\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff308',\n    name: 'Smart Visualizer',\n    tagline: '3D digital twin platform',\n    tags: [APP_TAGS['3d'], APP_TAGS.digitalTwin],\n    url: 'https://smartvisualizer.com/',\n    support: 'info@smartvisualizer.com',\n    images: images.smartVisualizer,\n    description: 'Smart Visualizer provides a perfect Digital Twin platform for your smart city project – offering a complete platform for visualization, and a wide selection of tools and features related to the different phases of a project. These include: planning, analyzing, dynamic real-time analysis, collaboration, crowdsourcing, informing, sharing, and finally publishing your data and projects. Smart Visualizer integrates seamlessly with Yggio to provide live IoT data in 3D models.',\n  },\n];\n\nconst getYggioApps = (): App[] => [\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff991',\n    name: 'Rule Engine',\n    tagline: 'Create rules to automate your Yggio',\n    tags: [APP_TAGS.automation],\n    images: images.ruleEngine,\n    url: getExternalUrls().ruleEngine,\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff992',\n    name: 'Location Manager',\n    tagline: 'Place your Yggio devices on a map',\n    tags: [APP_TAGS.visualization],\n    images: images.locationManager,\n    url: getExternalUrls().locationManager,\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff993',\n    name: 'Strips LoRa Configuration',\n    tagline: 'Downlink data generator for Strips LoRa',\n    tags: [APP_TAGS.hardware],\n    images: images.stripsConfig,\n    url: getExternalUrls().stripsConfig,\n  },\n  {\n    id: '57cf4076-51b1-46c0-96f9-fe60401ff994',\n    name: 'Control Panel V1',\n    tagline: 'Legacy control panel for Yggio',\n    tags: [APP_TAGS.visualization],\n    images: images.controlPanelV1,\n    url: getExternalUrls().controlPanelV1,\n  },\n];\n\nexport {\n  APP_TAGS,\n  getStaticApps,\n  getYggioApps,\n};\n","const BASE_COLORS = {\n  greenRacing: '#004225',\n  greenAlt: '#3C7D44',\n  greenLightAlt: '#53d989',\n  greenLight: '#55c977',\n  greenMedium: '#49AE68',\n  greenDark: '#004C19',\n  greenMatt: '#81A897',\n\n  red: '#ff3c3c',\n  redAlt: '#ff282d',\n  redDark: '#BC5252',\n\n  yellow: '#CEBE2E',\n\n  black: '#111',\n\n  greyDark: '#333',\n  greyDarkAlt: '#555',\n  greyMedium: '#888',\n  grey: '#ccc',\n  greyAlt: '#ddd',\n  greyLight: '#eee',\n  greyLightAlt: '#f5f5f5',\n  greyTransparent: 'rgba(50, 50, 50, 0.4)',\n\n  white: '#fbfbfb',\n  trueWhite: '#fff',\n\n  blueLight: '#3eb6e6',\n\n  transparent: 'transparent',\n};\n\n// Component specific colors\nconst COMPONENT_COLORS = {\n  marker: '#5ac42b',\n};\nconst COLORS = {...BASE_COLORS, ...COMPONENT_COLORS};\n\nexport default COLORS;\n","// used by yggio-context connectivity state management\n\nconst CONNECTIVITY_STATES = {\n  offline: 'offline',\n  online: 'online',\n  connected: 'connected',\n};\n\nexport default CONNECTIVITY_STATES;\n","import {thermometerHalf as thermometer} from 'react-icons-kit/fa/thermometerHalf';\nimport {signal} from 'react-icons-kit/fa/signal';\nimport {arrowUp} from 'react-icons-kit/fa/arrowUp';\nimport {info} from 'react-icons-kit/fa/info';\nimport {batteryThreeQuarters as battery} from 'react-icons-kit/fa/batteryThreeQuarters';\nimport {tint as raindrop} from 'react-icons-kit/fa/tint';\nimport {adjust} from 'react-icons-kit/fa/adjust';\n\nconst MEASUREMENT_TYPES = {\n  temperature: 'temperature',\n  humidity: 'humidity',\n  battery: 'battery',\n  snr: 'snr',\n  rssi: 'rssi',\n  moisture: 'moisture',\n  luminance: 'luminance',\n  gwMetaDataRssi: 'gwMetaData_rssi',\n  gwMetaDataLoRaSNR: 'gwMetaData_loRaSNR',\n  gwMetaDataPort: 'gwMetaData_port',\n  gwMetaDataFrameCount: 'gwMetaData_frameCount',\n};\n\nconst DEVICE_MEASUREMENTS = {\n  [MEASUREMENT_TYPES.temperature]: {\n    type: MEASUREMENT_TYPES.temperature,\n    name: 'Temperature',\n    unit: '°C',\n    icon: thermometer,\n  },\n  [MEASUREMENT_TYPES.humidity]: {\n    type: MEASUREMENT_TYPES.humidity,\n    name: 'Humidity',\n    unit: '%',\n    icon: raindrop,\n  },\n  [MEASUREMENT_TYPES.battery]: {\n    type: MEASUREMENT_TYPES.battery,\n    name: 'Battery',\n    icon: battery,\n  },\n  [MEASUREMENT_TYPES.snr]: {\n    type: MEASUREMENT_TYPES.snr,\n    name: 'SNR',\n    unit: 'dB',\n    icon: signal,\n  },\n  [MEASUREMENT_TYPES.rssi]: {\n    type: MEASUREMENT_TYPES.rssi,\n    name: 'RSSI',\n    icon: signal,\n  },\n  [MEASUREMENT_TYPES.gwMetaDataRssi]: {\n    type: MEASUREMENT_TYPES.gwMetaDataRssi,\n    name: 'Gateway RSSI',\n    icon: signal,\n    reversed: true,\n  },\n  [MEASUREMENT_TYPES.gwMetaDataLoRaSNR]: {\n    type: MEASUREMENT_TYPES.gwMetaDataLoRaSNR,\n    name: 'Gateway loRaSNR',\n    icon: signal,\n  },\n  [MEASUREMENT_TYPES.gwMetaDataPort]: {\n    type: MEASUREMENT_TYPES.gwMetaDataPort,\n    name: 'Port',\n    icon: info,\n  },\n  [MEASUREMENT_TYPES.gwMetaDataFrameCount]: {\n    type: MEASUREMENT_TYPES.gwMetaDataFrameCount,\n    name: 'Frame count',\n    icon: arrowUp,\n  },\n  [MEASUREMENT_TYPES.moisture]: {\n    type: MEASUREMENT_TYPES.moisture,\n    name: 'Moisture',\n    unit: '%',\n    icon: raindrop,\n  },\n  [MEASUREMENT_TYPES.luminance]: {\n    type: MEASUREMENT_TYPES.luminance,\n    name: 'Luminance',\n    unit: 'lux',\n    icon: adjust,\n  },\n};\n\nexport default DEVICE_MEASUREMENTS;\n","const DEVICE_TYPES = {\n  lora: 'LoRa',\n  box2: 'Box2',\n  calculated: 'Calculated',\n  zWave: 'Z-Wave',\n  generic: 'Generic',\n  connector: 'Connector',\n  chirpStack: 'ChirpStack',\n};\n\nexport default DEVICE_TYPES;\n","// env-constants.ts\n\nconst ENV_TYPES = {\n  development: 'development',\n  production: 'production',\n};\n\nconst ENV_KEYS = {\n  // urls\n  REACT_APP_AUTH_MANAGER_URL: 'REACT_APP_AUTH_MANAGER_URL',\n  REACT_APP_DEVICE_MANAGER_URL: 'REACT_APP_DEVICE_MANAGER_URL',\n  REACT_APP_DEVICE_INSTALLATION_MANAGER_URL: 'REACT_APP_DEVICE_INSTALLATION_MANAGER_URL',\n  REACT_APP_LOCATION_MANAGER_URL: 'REACT_APP_LOCATION_MANAGER_URL',\n  REACT_APP_ORGANIZATION_MANAGER_URL: 'REACT_APP_ORGANIZATION_MANAGER_URL',\n  // ports\n  REACT_APP_AUTH_MANAGER_PORT: 'REACT_APP_AUTH_MANAGER_PORT',\n  REACT_APP_DEVICE_MANAGER_PORT: 'REACT_APP_DEVICE_MANAGER_PORT',\n  REACT_APP_DEVICE_INSTALLATION_MANAGER_PORT: 'REACT_APP_DEVICE_INSTALLATION_MANAGER_PORT',\n  REACT_APP_LOCATION_MANAGER_PORT: 'REACT_APP_LOCATION_MANAGER_PORT',\n  REACT_APP_ORGANIZATION_MANAGER_PORT: 'REACT_APP_ORGANIZATION_MANAGER_PORT',\n};\n\nexport {\n  ENV_TYPES,\n  ENV_KEYS,\n};\n","const ERRORS = {\n  network: 'Oops, an error occurred. Please refresh or try again later.',\n};\n\nexport default ERRORS;\n","import {getConfig} from '../yggio-config';\n\ninterface ExternalUrls {\n  docs: string;\n  swagger: string;\n  locationManager: string;\n  ruleEngine: string;\n  controlPanelV1: string;\n  stripsConfig: string;\n  webshop: string;\n}\n\nconst getExternalUrls = (): ExternalUrls => {\n  return {\n    docs: `https://${getConfig().domain}/docs`,\n    swagger: `https://${getConfig().domain}/swagger`,\n    locationManager: `https://${getConfig().domain}/location-manager`,\n    ruleEngine: `https://${getConfig().domain}/rule-manager`,\n    controlPanelV1: `https://${getConfig().domain}/control-panel`,\n    stripsConfig: `https://strips-lora-config-app.service.sensative.net/profiles`,\n    webshop: 'https://shop.sensative.com/',\n  };\n};\n\nexport default getExternalUrls;\n","enum Methods {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Delete = 'DELETE',\n  Patch = 'PATCH',\n}\n\nexport default Methods;\n","// image-name-spaces\n\nconst IMAGE_NAME_SPACES = {\n  blueprints: 'blueprints',\n  location_icons: 'location_icons',\n  device_icons: 'device_icons',\n};\n\nexport default IMAGE_NAME_SPACES;\n","import defaultLocationIcon from '../assets/images/defaults/location-icon.png';\nimport defaultBlueprintImage from '../assets/images/defaults/blueprint.jpg';\nimport defaultDeviceIcon from '../assets/images/defaults/device-icon.png';\n\nconst allowedTypes = ['image/jpeg', 'image/gif', 'image/png'];\nconst maxSize = 1024 * 1024 * 2;\n\nconst IMAGES = {\n  defaultBlueprintImage,\n  defaultDeviceIcon,\n  defaultLocationIcon,\n  allowedTypes,\n  maxSize,\n};\n\nexport default IMAGES;\n","import _ from 'lodash';\n\nimport COLORS from './colors';\nimport CONNECTIVITY_STATES from './connectivity-states';\nimport TOAST_TYPES from './toast-types';\nimport STATE from './state';\nimport RESOURCE_SCOPES from './resource-scopes';\nimport RESOURCE_TYPES from './resource-types';\nimport KEY_CODES from './key-codes';\nimport REQUEST_METHODS from './request-methods';\nimport ERRORS from './errors';\nimport SEPARATORS from './separators';\nimport {\n  MAP,\n  GEO_ERROR_CODES\n} from './map';\nimport MEASUREMENTS from './measurements';\nimport LOCATION from './location';\nimport IMAGE_NAME_SPACES from './image-name-spaces';\nimport IMAGES from './images';\nimport DEVICE_MEASUREMENTS from './device-measurements';\nimport SOCKET from './socket';\nimport STATUS_TYPES from './status-types';\nimport DEVICE_TYPES from './device-types';\nimport HTTP_METHODS from './http-methods';\nimport getExternalUrls from './external-app-urls';\n\nimport {\n  ENV_TYPES,\n  ENV_KEYS,\n} from './env-constants';\n\nimport {\n  LEAFLET_URL,\n  LEAFLET_ATTRIBUTION,\n  COOKIE_TOKEN_KEY,\n  COOKIE_OAUTH_STATE_KEY,\n} from './web-constants';\n\nimport {\n  YGGIO_APPS,\n  YGGIO_APP_KEY,\n  LOCAL_APP_DOMAIN,\n  DEFAULT_APP_URLS,\n  LOCAL_APP_PORTS,\n  ROUTE_TRIMMED_CHARS,\n  INTER_HISTORY_TYPES,\n} from './routing-constants';\n\nimport {\n  GLOBAL_ACCESS_USER_GROUP_REF,\n  GLOBAL_ACCESS_RESOURCE_GROUP_REF,\n  PUBLIC_ACCESS_RESOURCE_GROUP_REF,\n  ACCESS_USER_GROUP_TYPES,\n  ACCESS_RESOURCE_GROUP_TYPES,\n  ACCESS_SCOPES,\n  ACCESS_RESOURCE_TYPES,\n  ACCESS_ORG_UNIT_SCOPES, // needs changes\n  ACCESS_ORG_UNIT_RESOURCE_TYPES,\n} from './access-constants';\n\nconst RULES_ACTIONS = {\n  turnOn: 'On',\n  turnOff: 'Off',\n};\n\nconst RELEVANT_VALUES = {\n  lora: {\n    devEui: {\n      name: 'devEui',\n      getValue: device => _.get(device, 'value.devEui') || _.get(device, 'devEui'),\n    },\n    rssi: {\n      name: 'rssi',\n      getValue: device => _.get(device, 'value.rssi'),\n    },\n    frameCount: {\n      name: 'frameCount',\n      getValue: device => _.get(device, 'value.frameCount'),\n    },\n    fPort: {\n      name: 'fPort',\n      getValue: device => _.get(device, 'value.fPort'),\n    },\n    dataRate: {\n      name: 'dataRate',\n      getValue: device => _.get(device, 'value.dataRate'),\n    },\n    spreadingFactor: {\n      name: 'spreadingFactor',\n      getValue: device => _.get(device, 'value.spreadingFactor'),\n    },\n  },\n};\n\nconst CALCULATIONS_TYPES = {\n  sumLastValues: 'sumLastValues',\n  averageLastValues: 'averageLastValues',\n  maxLastValues: 'maxLastValues',\n  minLastValues: 'minLastValues',\n  averageEachNode: 'averageEachNode',\n  sumEachNode: 'sumEachNode',\n  totalMonthlySum: 'totalMonthlySum',\n  aggregatedValueOverTime: 'aggregatedValueOverTime',\n  averageAggregatedValueOverTime: 'averageAggregatedValueOverTime',\n  monthlySumPerEachNode: 'monthlySumPerEachNode',\n  monthlyDiffFromTotalEachNode: 'monthlyDiffFromTotalEachNode',\n  monthlyDiffFromTotal: 'monthlyDiffFromTotal',\n};\n\nconst CALCULATION_NAMES = {\n  a: 'Sum of last values',\n  b: 'Average of last values',\n  c: 'Maximum of last values',\n  d: 'Minimum of last values',\n  e: 'Average of each node',\n  f: 'Sum of each node',\n  g: 'Aggregated value over time',\n  h: 'Average of sum',\n  i: 'Monthly sum per each node',\n  j: 'Total monthly sum',\n  k: 'Monthly difference from total on each node',\n  l: 'Monthly difference from total grouped',\n};\n\nexport {\n  RELEVANT_VALUES,\n  CALCULATIONS_TYPES,\n  CALCULATION_NAMES,\n  COLORS,\n  CONNECTIVITY_STATES,\n  TOAST_TYPES,\n  STATE,\n  RESOURCE_SCOPES,\n  RESOURCE_TYPES,\n  KEY_CODES,\n  REQUEST_METHODS,\n  ERRORS,\n  SEPARATORS,\n  MAP,\n  GEO_ERROR_CODES,\n  MEASUREMENTS,\n  LOCATION,\n  IMAGE_NAME_SPACES,\n  IMAGES,\n  DEVICE_MEASUREMENTS,\n  SOCKET,\n  STATUS_TYPES,\n  HTTP_METHODS,\n  // env-constants\n  ENV_TYPES,\n  ENV_KEYS,\n  // web-constants\n  LEAFLET_ATTRIBUTION,\n  LEAFLET_URL,\n  COOKIE_TOKEN_KEY,\n  COOKIE_OAUTH_STATE_KEY,\n  // routing constants\n  YGGIO_APPS,\n  YGGIO_APP_KEY,\n  LOCAL_APP_DOMAIN,\n  DEFAULT_APP_URLS,\n  LOCAL_APP_PORTS,\n  ROUTE_TRIMMED_CHARS,\n  INTER_HISTORY_TYPES,\n  DEVICE_TYPES,\n  RULES_ACTIONS,\n  // access constants\n  GLOBAL_ACCESS_USER_GROUP_REF,\n  GLOBAL_ACCESS_RESOURCE_GROUP_REF,\n  PUBLIC_ACCESS_RESOURCE_GROUP_REF,\n  ACCESS_USER_GROUP_TYPES,\n  ACCESS_RESOURCE_GROUP_TYPES,\n  ACCESS_SCOPES,\n  ACCESS_RESOURCE_TYPES,\n  ACCESS_ORG_UNIT_SCOPES, // needs changes\n  ACCESS_ORG_UNIT_RESOURCE_TYPES,\n\n  getExternalUrls,\n};\n","const KEY_CODES = {\n  escape: 27,\n};\n\nexport default KEY_CODES;\n","const locationSimpleEditProps = ['name', 'description', 'lat', 'lng', 'icon'];\nconst layerSimpleEditProps = ['name', 'image'];\nconst deviceItemSimpleEditProps = ['left', 'top', 'name', 'locationItemControl', 'valueDisplay'];\n\nexport default {\n  locationSimpleEditProps,\n  layerSimpleEditProps,\n  deviceItemSimpleEditProps,\n};\n","const MAP = {\n  defaultCenter: [55.7, 13.2], // sweden\n  defaultZoom: 4,\n};\n\nconst GEO_ERROR_CODES = {\n  permissionDenied: 1,\n  positionUnavailabe: 2,\n  timeOut: 3\n};\n\nexport {\n  MAP,\n  GEO_ERROR_CODES\n};\n","const MEASUREMENTS = {\n  navDefaultHeight: '45px',\n};\n\nexport default MEASUREMENTS;\n","const REQUEST_METHODS = {\n  get: 'get',\n  post: 'post',\n  put: 'put',\n  delete: 'delete',\n};\n\nexport default REQUEST_METHODS;\n","const RESOURCE_SCOPES = {\n  peek: 'peek',\n  read: 'read',\n  write: 'write',\n  admin: 'admin',\n};\n\nexport default RESOURCE_SCOPES;\n","const RESOURCE_TYPES = {\n  // auth\n  auth: 'auth',\n  coreApps: 'coreapps',\n  clientApps: 'client-apps',\n  authUrl: 'auth/info', // SHOULD GO\n  authDetails: 'auth/code', // SHOULD GO\n  logoutURL: 'auth/logout', // SHOULD GO\n  // devices\n  devicesClaim: 'devices/claim', // SHOULD GO\n  devicesCommand: 'devices/command', // SHOULD GO\n  // and the ones that are under control\n  users: 'users',\n  iotnodes: 'iotnodes',\n  devices: 'devices',\n  locations: 'locations',\n  organizations: 'organizations',\n  version: 'version',\n  requestBodySizeLimit: 'request-body-size-limit',\n  access: 'access',\n  translators: 'translators',\n  images: 'locations/images', // this one should probably have own route in rest-api\n  jobs: 'jobs',\n  calculations: 'calculations',\n  channels: 'channels',\n  channel: 'channel',\n  rulesActions: 'rules/actions',\n  rulesConditions: 'rules/conditions',\n  rules: 'rules/rules',\n  commands: 'commands',\n};\n\nexport default RESOURCE_TYPES;\n","// routing-constants.ts\n\nconst YGGIO_APPS = {\n  deviceManager: 'deviceManager',\n  deviceInstallationManager: 'deviceInstallationManager',\n  locationManager: 'locationManager',\n  organizationManager: 'organizationManager',\n  imageManager: 'imageManager',\n};\n\nconst LOCAL_APP_DOMAIN = 'dev.local.yggio';\n\nconst DEFAULT_APP_URLS = {\n  [YGGIO_APPS.deviceManager]: 'device-manager',\n  [YGGIO_APPS.deviceInstallationManager]: 'device-installation-manager',\n  [YGGIO_APPS.locationManager]: 'location-manager-2',\n  [YGGIO_APPS.organizationManager]: 'organization-manager',\n  [YGGIO_APPS.imageManager]: 'image-manager',\n};\n\nconst LOCAL_APP_PORTS = {\n  [YGGIO_APPS.deviceManager]: '8036',\n  [YGGIO_APPS.deviceInstallationManager]: '8037',\n  [YGGIO_APPS.locationManager]: '8035',\n  [YGGIO_APPS.organizationManager]: '8034',\n  [YGGIO_APPS.imageManager]: '8037',\n};\n\nconst YGGIO_APP_KEY = 'yggioApp';\n\nconst ROUTE_TRIMMED_CHARS = ['/', ' '].join(''); // to get route parts cleanly\n\nconst INTER_HISTORY_TYPES = {\n  sameTab: 'sameTab',\n  newTab: 'newTab',\n};\n\nexport {\n  YGGIO_APPS,\n  YGGIO_APP_KEY,\n  LOCAL_APP_DOMAIN,\n  DEFAULT_APP_URLS,\n  LOCAL_APP_PORTS,\n  ROUTE_TRIMMED_CHARS,\n  INTER_HISTORY_TYPES,\n};\n","const SEPARATORS = {\n  commaSpace: ', ',\n  dash: '-',\n  underscore: '_',\n  space: ' ',\n  pipe: '|',\n};\n\nexport default SEPARATORS;\n","export default {\n  subscribe: 'subscribe',\n  unsubscribe: 'unsubscribe',\n  subscribed: 'subscribed',\n  subscribing: 'subscribing',\n  unauthorized: 'unauthorized',\n  message: 'message',\n};\n","const STATE = {\n  isLoading: 'isLoading',\n  error: 'error',\n  items: 'items',\n  socket: 'socket',\n  showsMenu: 'showsMenu',\n  devices: 'devices',\n  showsUserMenu: 'showsUserMenu',\n  user: 'user',\n  itemsPerPage: 'itemsPerPage',\n  currentPage: 'currentPage',\n  movingMode: 'movingMode',\n  movingMarker: 'movingMarker',\n  viewport: 'viewport',\n  device: 'device',\n  location: 'location',\n  locations: 'locations',\n  tab: 'tab',\n};\n\nexport default STATE;\n","const STATUS_TYPES = {\n  info: {name: 'info', severity: 0},\n  ok: {name: 'ok', severity: 1},\n  warning: {name: 'warning', severity: 2},\n  error: {name: 'error', severity: 3},\n};\n\nexport default STATUS_TYPES;\n","// the allowed types of toast\n\nconst TOAST_TYPES = {\n  default: 'default',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  success: 'success',\n};\n\nexport default TOAST_TYPES;\n","const LEAFLET_ATTRIBUTION = `\n&copy;\n<a href=\"http://osm.org/copyright\">\n  OpenStreetMap\n</a>\ncontributors\n`;\n\nconst LEAFLET_URL = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\nconst COOKIE_TOKEN_KEY = 'token';\nconst COOKIE_OAUTH_STATE_KEY = 'OAuthState';\n\nexport {\n  LEAFLET_URL,\n  LEAFLET_ATTRIBUTION,\n  COOKIE_TOKEN_KEY,\n  COOKIE_OAUTH_STATE_KEY,\n};\n","import styled from 'styled-components';\nimport React, {FunctionComponent} from 'react';\nimport {Story} from '@storybook/react';\nimport {QueryClient, QueryClientProvider} from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst ReactQueryDecorator = (StoryComponent: Story) => (\n  <QueryClientProvider client={queryClient}>\n    <StoryComponent />\n  </QueryClientProvider>\n);\n\nconst YggioDefaultDecoratorStyled = styled.div`\n  background: #F7F9FA;\n  padding: 20px;\n  @import url('https://fonts.googleapis.com/css?family=Lato&display=swap');\n  font-family: Lato, Arial, sans-serif;\n  font-size: 13px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nconst YggioFontDecoratorStyled = styled.div`\n  @import url('https://fonts.googleapis.com/css?family=Lato&display=swap');\n  font-family: Lato, Arial, sans-serif;\n  font-size: 13px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nconst LightGrayBackgroundDecoratorStyled = styled.div`\n  background: #F7F9FA;\n`;\n\nconst PaddingDecoratorStyled = styled.div`\n  padding: 30px;\n`;\n\nconst wrapStory = (Decorator: FunctionComponent) => (StoryComponent: Story) => (\n  <Decorator>\n    <StoryComponent />\n  </Decorator>\n);\n\nconst YggioDefaultDecorator = wrapStory(YggioDefaultDecoratorStyled);\nconst YggioFontDecorator = wrapStory(YggioFontDecoratorStyled);\nconst LightGrayBackgroundDecorator = wrapStory(LightGrayBackgroundDecoratorStyled);\nconst PaddingDecorator = wrapStory(PaddingDecoratorStyled);\n\nexport {\n  ReactQueryDecorator,\n  YggioDefaultDecorator,\n  YggioFontDecorator,\n  LightGrayBackgroundDecorator,\n  PaddingDecorator,\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst PageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst PageContainer = styled.div`\n  margin: 10px 10px 0 10px;\n  width: ${({maxWidth}) => maxWidth || '800px'};\n`;\n\nconst CenteredPage = props => (\n  <PageWrapper>\n    <PageContainer maxWidth={props.maxWidth}>\n      {props.children}\n    </PageContainer>\n  </PageWrapper>\n);\n\nconst HeadingContainer = styled.div`\n  margin:${({margin}) => margin || '0'};\n`;\n\nconst HeadingTitle = styled.p`\n  font-size: 16px;\n  font-weight: bold;\n  margin: 0;\n  color: #222;\n`;\n\nconst SubHeading = styled.p`\n  font-size: 13px;\n  margin: 3px 0 0 0;\n  color: #444;\n`;\n\nconst Heading = props => (\n  <HeadingContainer margin={props.margin}>\n    <HeadingTitle>{props.heading}</HeadingTitle>\n    {props.subHeading && (\n      <SubHeading>{props.subHeading}</SubHeading>\n    )}\n  </HeadingContainer>\n);\n\nexport {\n  CenteredPage,\n  Heading,\n};\n","import styled, {css} from 'styled-components';\nimport {MEASUREMENTS, COLORS} from '../constants';\n\nconst MarginWrapper = styled.div`\n  margin: ${({margin}) => margin || '5px'};\n`;\n\nconst CommonWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  width: 100%;\n`;\n\nconst FlexWrapper = styled.div`\n  display: flex;\n  justify-content: ${({justifyContent}) => justifyContent};\n  align-items: ${({alignItems}) => alignItems};\n  width: ${({maxWidth}) => maxWidth && '100%'};\n  margin: ${({margin}) => margin};\n`;\n\nconst FlexColWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: ${({justifyContent}) => justifyContent};\n  align-items: ${({alignItems}) => alignItems};\n  margin: ${({margin}) => margin};\n`;\n\nconst FlexColSpaceBetweenWrapper = styled(FlexColWrapper)`\n  justify-content: space-between;\n  height: 100%;\n`;\n\nconst FlexSpaceBetweenWrapper = styled(FlexWrapper)`\n  justify-content: space-between;\n`;\n\nconst FlexMaxWidthWrapper = styled(FlexWrapper)`\n  width: 100%;\n  padding: ${({padding}) => padding};\n`;\n\nconst FlexMaxWidthCenterWrapper = styled(FlexMaxWidthWrapper)`\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FlexMaxWidthSpaceAroundWrapper = styled(FlexMaxWidthWrapper)`\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst FlexMaxWidthSpaceBetweenWrapper = styled(FlexMaxWidthWrapper)`\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst FlexColMaxWidthWrapper = styled(FlexColWrapper)`\n  width: 100%;\n  margin: ${({margin}) => margin};\n`;\n\nconst FlexColCenterMaxWidthWrapper = styled(FlexColMaxWidthWrapper)`\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ComponentWrapper = styled.div`\n  height: calc(100vh - ${MEASUREMENTS.navDefaultHeight});\n`;\n\nconst AppWrapper = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  background: #eee;\n`;\n\nconst CenterContentContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n`;\n\nconst commonInputStyles = css`\n  border: solid 1px ${props => (props.isInvalid ? '#ff8787' : COLORS.grey)};\n  border-radius: 4px;\n  padding-left: 10px;\n  font-size: 13px;\n  margin: 0;\n  outline: none;\n  color: ${COLORS.greyDark};\n  &:disabled {\n    background: #f2f2f2;\n    border-color: #e6e6e6;\n  }\n`;\n\nconst resolveInputFocusBoxShadow = ({isInvalid, disableBlueFocusOutline}) => {\n  if (isInvalid) {\n    return '0 0 2px 1px #ff8787';\n  }\n  if (!disableBlueFocusOutline) {\n    return '0 0 2px 1px #4287f5';\n  }\n  return 'none';\n};\n\nconst resolveInputFocusBorderColor = ({isInvalid, disableBlueFocusOutline}) => {\n  if (!disableBlueFocusOutline || isInvalid) {\n    return 'transparent';\n  }\n  return COLORS.greyMedium;\n};\n\nconst inputFocusStyle = css`\n  &:focus {\n    box-shadow: ${props => resolveInputFocusBoxShadow(props)};\n    border-color: ${props => resolveInputFocusBorderColor(props)}\n  }\n`;\n\nconst HorizontalLine = styled.div`\n  width: ${({width}) => width || '100%'};\n  height: ${({height}) => height || '1px'};\n  margin: ${({margin}) => margin || '5px 0 5px'};\n  background: ${({background}) => background || COLORS.grey};\n`;\n\n// Heading bar\n\nconst HeadingBarContainer = styled.div`\n  width: 100%;\n  display: flex;\n  padding: 5px 0;\n  flex-wrap: wrap;\n`;\n\nconst HeadingBarLeftSection = styled.div`\n  width: 40px;\n  height: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-right: 1px solid #ccc;\n  margin: 5px 13px 5px 0;\n  flex-shrink: 0;\n\n  @media (min-width: ${({siblingWidth}) => siblingWidth + 260}px) {\n    display: none;\n  }\n`;\n\nconst HeadingBarMiddleSection = styled.div`\n  width: 100px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n  margin: 5px 0;\n`;\n\nconst HeadingBarRightSection = styled.div`\n  height: 30px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  flex-shrink: 0;\n  margin: 5px 0;\n`;\n\nconst ToggleSidebarButton = styled.div`\n  width: 28px;\n  height: 28px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border-radius: 3px;\n  &:hover {\n    background: #ddd;\n  }\n`;\n\nconst TextParagraph = styled.p`\n  font-size: ${({fontSize}) => fontSize};\n`;\n\nexport {\n  CommonWrapper,\n  MarginWrapper,\n  FlexWrapper,\n  FlexColWrapper,\n  FlexColSpaceBetweenWrapper,\n  FlexMaxWidthWrapper,\n  FlexMaxWidthCenterWrapper,\n  FlexMaxWidthSpaceAroundWrapper,\n  FlexMaxWidthSpaceBetweenWrapper,\n  FlexColMaxWidthWrapper,\n  FlexColCenterMaxWidthWrapper,\n  ComponentWrapper,\n  AppWrapper,\n  CenterContentContainer,\n  commonInputStyles,\n  inputFocusStyle,\n  FlexSpaceBetweenWrapper,\n  HorizontalLine,\n\n  HeadingBarContainer,\n  HeadingBarLeftSection,\n  HeadingBarMiddleSection,\n  HeadingBarRightSection,\n  ToggleSidebarButton,\n  TextParagraph,\n};\n","import withState from './with-state';\nimport withPersistentState from './with-persistent-state';\nimport withReselect from './with-reselect';\nimport withEffect from './with-effect';\nimport withEvents from './with-events';\nimport withContext from './with-context';\nimport withLanguage from './with-language';\nimport withOmitProps from './with-omit-props';\nimport withQueryClientProvider from './with-query-client';\n\nexport {\n  withState,\n  withPersistentState,\n  withReselect,\n  withEffect,\n  withEvents,\n  withContext,\n  withLanguage,\n  withOmitProps,\n  withQueryClientProvider,\n};\n","import React, {useContext} from 'react';\nimport {createActionDispatches} from '../utils';\n\nconst withContext = ({context, actions}) => Component => props => {\n  const {state, dispatch} = useContext(context);\n  const actionDispatches = createActionDispatches(actions, dispatch);\n  return <Component\n    {...state}\n    {...actionDispatches}\n    {...props}\n         />;\n};\n\nexport default withContext;\n","import React, {useEffect} from 'react';\nimport _ from 'lodash';\n\nconst withEffect = (effect, {init, consume} = {}) => Component => {\n  // NOTE: this is a React-function\n  const EffectComponent = props => {\n    useEffect(() => {\n      effect(props);\n    }, init);\n    const survivingProps = _.omit(props, _.concat([], consume));\n    return (<Component {...survivingProps} />);\n  };\n\n  return EffectComponent;\n};\n\n\nexport default withEffect;\n","import _ from 'lodash';\nimport React from 'react';\n\n// need to reduce (evt props) => {...} to (evt) => {...} with\n// memoized function instance but replaceable props\n\nconst memoizeEventHandler = handler => {\n  if (_.isFunction(handler)) {\n\n    // the function that React will see every render\n    let memoizedHandler = null;\n    // returns the handlerGenerator\n    return props => {\n      // what gets returned from here IS the prop function\n      if (!memoizedHandler) {\n        // we need some handle to store & update hte current props in between renders\n        let memoizedProps = null;\n        // create the function\n        memoizedHandler = evt => {\n          // evaluates using the latest & updated values\n          return handler(memoizedProps)(evt);\n        };\n        // the mechanism to update the memoizedProps\n        memoizedHandler.update = freshProps => {\n          memoizedProps = freshProps;\n        };\n      }\n      // mutates underneath the hood\n      memoizedHandler.update(props);\n      // and done\n      return memoizedHandler;\n    };\n  }\n};\n\nconst withEvents = handlers => Component => {\n  const handlerGenerators = _.mapValues(handlers, memoizeEventHandler);\n  const InnerComponent = props => {\n    // the generator returns the same memoized function every time\n    const handlerProps = _.mapValues(handlerGenerators, gen => gen(props));\n    return (\n      <Component {...props} {...handlerProps} />\n    );\n  };\n  return InnerComponent;\n};\n\nexport default withEvents;\n","import React from 'react';\nimport _ from 'lodash';\nimport i18n from 'i18next';\nimport {initReactI18next, useTranslation} from 'react-i18next';\nimport enTranslation from '../../locales/en/translation.json';\nimport deTranslation from '../../locales/de/translation.json';\n\n// init i18n\ni18n\n  .use(initReactI18next)\n  .init({\n    fallbackLng: 'en',\n    debug: false,\n    resources: {\n      en: {translation: enTranslation},\n      de: {translation: deTranslation},\n    }\n  });\n\n\nconst withLanguage = ({\n  withTranslation,\n  withChangeLanguage,\n  withCurrentLanguage,\n} = {\n  withTranslation: true,\n  withChangeLanguage: false,\n  withCurrentLanguage: false,\n}) => Component => props => {\n  const newProps = {...props};\n\n  React.useEffect(() => {\n    if (_.get(props, 'auth.user.language')) {\n      i18n.changeLanguage(_.get(props, 'auth.user.language'));\n    }\n  }, [props.auth]);\n\n  if (withTranslation) {\n    newProps.t = useTranslation('translation').t;\n  }\n  if (withChangeLanguage) {\n    newProps.changeLanguage = lng => {\n      i18n.changeLanguage(lng);\n    };\n  }\n  if (withCurrentLanguage) {\n    newProps.currentLanguage = i18n.language;\n  }\n\n  return <Component\n    {...newProps}\n         />;\n};\n\n\nexport default withLanguage;\n","import React from 'react';\nimport _ from 'lodash';\n\nconst withOmitProps = propKeys => Component => props => {\n  const survivingProps = _.omit(props, _.concat([], propKeys));\n  return (<Component {...survivingProps} />);\n};\n\nexport default withOmitProps;\n","import _ from 'lodash';\nimport React from 'react';\n\nimport {createActionDispatches, createStateLogger} from '../utils';\nimport {ENV_TYPES} from '../constants';\nimport {getConfig} from '../yggio-config';\n\nconst DEV_WARNING_MESSAGE = `Developer Warning: Local storage being cleared can be caused by either\nthe data being old, in which case things are fine, or it can be caused by faulty\nvaildation, in which case the vailidation should be fixed`;\n\nconst NAME_PREFIX = 'yggio-';\n\nconst withPersistentState = ({reducer, actions, validateState}, name, wrappedName) => Component => {\n\n  if (!reducer) throw Error('DevErr: A persistent state must have a reducer');\n  if (!actions) throw Error('DevErr: A persistent state must have a actions');\n  if (!validateState) throw Error('DevErr: A persistent state must have a validateState function');\n  if (!name) throw Error('DevErr: A persistent state must have a name');\n\n  const fullName = NAME_PREFIX.concat(name);\n\n  const validatePersistentState = persistentState => {\n    if (!persistentState) {\n      return true;\n    }\n    const validationError = validateState(persistentState);\n    if (validationError) {\n      console.info(`Will clear local storage: ${fullName} because of validation error`);\n      console.info('validationError: ', validationError);\n      if (_.eq(getConfig().nodeEnv, ENV_TYPES.development)) {\n        console.warn(DEV_WARNING_MESSAGE);\n      }\n    }\n    return !validationError;\n  };\n\n  const reducerWithLogger = createStateLogger(reducer);\n\n  const WrappedComponent = props => {\n\n    const item = localStorage.getItem(fullName);\n    const persistentState = JSON.parse(item);\n\n    const persistentStateIsValid = validatePersistentState(persistentState);\n\n    const [state, dispatch] = React.useReducer(\n      reducerWithLogger,\n      reducer(undefined, {}),\n      initial => {\n        if (!persistentState || !persistentStateIsValid) {\n          return initial;\n        }\n        return persistentState;\n      }\n    );\n\n    React.useEffect(() => {\n      if (!persistentStateIsValid) {\n        localStorage.removeItem(fullName);\n      } else {\n        localStorage.setItem(fullName, JSON.stringify(state));\n      }\n    }, [state, fullName]);\n\n    // distribute dispatch\n    const actionDispatches = createActionDispatches(actions, dispatch);\n\n    // potentially wrap state and actionDispatches\n    const newProps = wrapOrNot(props, state, actionDispatches, wrappedName);\n\n    return (\n      <Component\n        {...newProps}\n      />\n    );\n  };\n\n  return WrappedComponent;\n};\n\nconst wrapOrNot = (props, state, actionDispatches, wrappedName) => {\n  const obj = {\n    ...state,\n    ...actionDispatches,\n  };\n  if (wrappedName) {\n    return _.setWith(_.clone(props), wrappedName, obj, _.clone);\n  }\n  return {\n    ...props,\n    ...obj,\n  };\n};\n\nexport default withPersistentState;\n","import React from 'react';\nimport {AxiosError} from 'axios';\nimport {QueryClient, QueryCache, QueryClientProvider} from 'react-query';\nimport {ReactQueryDevtools} from 'react-query/devtools';\nimport toast from 'react-hot-toast';\n\nconst queryClient = new QueryClient({\n  queryCache: new QueryCache({\n    // Shows a toaster upon errors\n    onError: (error, query) => {\n      // @ts-ignore not sure why react-query complains about this\n      const numObservers = (query.observers as object[]).length;\n      if (!query.meta?.suppressErrorToaster && numObservers) {\n        toast.error(`${(error as AxiosError)?.response?.status} - ${(error as AxiosError)?.response?.data}`);\n      }\n    }\n  })\n});\n\nconst withQueryClientProvider = <T extends object>(Component: React.FC<T>) => (props: T) => (\n  <QueryClientProvider client={queryClient}>\n    <ReactQueryDevtools initialIsOpen={false} position='bottom-right' />\n    <Component {...props} />\n    {/* NOTE: When we have removed yggio-message-token toaster should be put here */}\n  </QueryClientProvider>\n);\n\nexport default withQueryClientProvider;\n","import React from 'react';\nimport _ from 'lodash';\n\nconst withReselect = (reselectors, {consume} = {}) => Component => {\n  const WrappedComponent = props => {\n    const survivingProps = _.omit(props, _.concat([], consume));\n    const reselectedProps = _.mapValues(reselectors, reselect => {\n      return reselect(props);\n    });\n    return (<Component\n      {...survivingProps}\n      {...reselectedProps}\n            />);\n  };\n\n  return WrappedComponent;\n};\n\nexport default withReselect;\n","import _ from 'lodash';\nimport React, {useReducer} from 'react';\nimport {createActionDispatches, createStateLogger} from '../utils';\n\n/**\n * Requires a state object containing reducer, defaultState and actions to function.\n * Will use logger if in development mode.\n *\n * @param reducer - state reducer\n * @param defaultState - object containing initial state\n * @param actions - object of state actions\n * @returns {function(*): function(*): *}\n */\nconst wrapOrNot = (props, state, actionDispatches, wrappedName) => {\n  const obj = {\n    ...state,\n    ...actionDispatches,\n  };\n  if (wrappedName) {\n    return _.setWith(_.clone(props), wrappedName, obj, _.clone);\n  }\n  return {\n    ...props,\n    ...obj,\n  };\n};\n\nconst withState = ({reducer, actions}, wrappedName) => Component => {\n  // set up\n  const defaultState = reducer(undefined, {});\n  const reducerWithLogger = createStateLogger(reducer);\n\n  const WrappedComponent = props => {\n    // NATIVE React.useReducer\n    const [state, dispatch] = useReducer(reducerWithLogger, defaultState);\n    // distribute dispatch\n    const actionDispatches = createActionDispatches(actions, dispatch);\n    // potentially wrap state and actionDispatches\n    const newProps = wrapOrNot(props, state, actionDispatches, wrappedName);\n\n    return (\n      <Component\n        {...newProps}\n      />\n    );\n  };\n\n  return WrappedComponent;\n};\n\nexport default withState;\n","import useInterval from './use-interval';\nimport useSelector from './use-selector';\nimport useTraceUpdate from './use-trace-update';\nimport usePersistentState from './use-persistent-state';\nimport useLocalState from './use-local-state';\n\nexport {\n  useInterval,\n  useSelector,\n  useTraceUpdate,\n  usePersistentState,\n  useLocalState,\n};\n","import {useEffect, useRef} from 'react';\n\nconst useInterval = (callback, delay) => {\n\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    };\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n\n};\n\nexport default useInterval;\n","import React from 'react';\nimport {Action} from 'src/types';\nimport {createStateLogger, createActionDispatches} from '../utils';\n\ninterface UseLocalStateProps<T, S> {\n  actions: S;\n  reducer(state: T | undefined, action: Action<T> | object): T;\n}\n\nconst useLocalState = <T, S>({\n  reducer,\n  actions,\n}: UseLocalStateProps<T, S>): T & S => {\n  const defaultState = reducer(undefined, {});\n  const loggedReducer = createStateLogger(reducer) as React.Reducer<unknown, T>;\n\n  const [state, dispatch] = React.useReducer(loggedReducer, defaultState);\n  const actionDispatches = createActionDispatches(actions, dispatch) as S;\n\n  return {\n    ...state as T,\n    ...actionDispatches,\n  };\n};\n\nexport default useLocalState;\n","import _ from 'lodash';\nimport React from 'react';\n\nimport {createActionDispatches, createStateLogger} from '../utils';\nimport {ENV_TYPES} from '../constants';\nimport CONFIG from '../yggio-config';\n\nconst DEV_WARNING_MESSAGE = `Developer Warning: Local storage being cleared can be caused by either\nthe data being old, in which case things are fine, or it can be caused by faulty\nvaildation, in which case the vailidation should be fixed`;\n\nconst NAME_PREFIX = 'yggio-';\n\nconst validatePersistentState = ({persistentState, state, fullName}) => {\n  if (!persistentState) {\n    return true;\n  }\n  const persistentStateKeys = _.keys(persistentState);\n  const stateKeys = _.keys(state);\n  const isValid = _.isEqual(persistentStateKeys, stateKeys);\n  if (!isValid) {\n    console.info(`Will clear local storage: ${fullName} because of validation error`);\n    if (_.eq(_.get(CONFIG, 'nodeEnv'), ENV_TYPES.development)) {\n      console.warn(DEV_WARNING_MESSAGE);\n    }\n  }\n\n  return isValid;\n};\n\nconst usePersistentState = ({reducer, actions}, name) => {\n  if (!reducer) throw Error('DevErr: A persistent state must have a reducer');\n  if (!actions) throw Error('DevErr: A persistent state must have a actions');\n  if (!name) throw Error('DevErr: A persistent state must have a name');\n\n  const fullName = NAME_PREFIX.concat(name);\n\n  const reducerWithLogger = createStateLogger(reducer);\n\n  const item = localStorage.getItem(fullName);\n  const persistentState = JSON.parse(item);\n\n  const [state, dispatch] = React.useReducer(\n    reducerWithLogger,\n    reducer(undefined, {}),\n    initial => {\n      if (!persistentState) {\n        return initial;\n      }\n      return persistentState;\n    }\n  );\n\n  const persistentStateIsValid = validatePersistentState({persistentState, state, fullName});\n\n  React.useEffect(() => {\n    if (!persistentStateIsValid) {\n      localStorage.removeItem(fullName);\n    } else {\n      localStorage.setItem(fullName, JSON.stringify(state));\n    }\n  }, [state, fullName]);\n\n  // distribute dispatch\n  const actionDispatches = createActionDispatches(actions, dispatch);\n\n  return {\n    ...actionDispatches,\n    ...state,\n  };\n\n};\n\nexport default usePersistentState;\n","import {useMemo} from 'react';\n\n/**\n * The useSelector hook can be used to handle expensive functions and computations.\n * It does a \"deep equality check\" by JSON stringifying the state objects and\n * comparing for memoization.\n * @param state {Object} state object to be used in the selector\n * @param selector {Function} the selector function\n * @returns {*} the selected state memoized\n */\nconst useSelector = (state, selector) => (\n  useMemo(() => selector(state), [state, selector])\n);\n\nexport default useSelector;\n","import React from 'react';\nimport _ from 'lodash';\n\n// for debugging purpose\nconst useTraceUpdate = props => {\n  const prev = React.useRef(props);\n  React.useEffect(() => {\n    const changedProps = _.reduce(props, (acc, val, key) => {\n      if (prev.current[key] !== val) {\n        acc[key] = [prev.current[key], val];\n      }\n      return acc;\n    }, {});\n    const changedKeys = _.keys(changedProps);\n    if (_.size(changedKeys)) {\n      console.info('%cChanged props:', `color: #00FFFF;`, changedProps);\n    }\n    prev.current = props;\n  });\n};\n\nexport default useTraceUpdate;\n","// // Shared\nimport NavbarPane from './yggio-connected-components/navbar-pane';\nimport UnauthorizedUserPane from './yggio-connected-components/unauthenticated-user-pane';\nimport YggioTokenMonitor from './yggio-context/yggio-token-monitor';\nimport withYggio from './yggio-context/with-yggio';\nimport {WebSocket} from './api';\nimport {YggioMessageToaster} from './yggio-context';\nimport LogoSpinner from './components/logo-spinner';\n\n// Dashboard\nimport Dashboard from './yggio-connected-components/dashboard-pane';\n\n// Apps\nimport Apps from './yggio-connected-components/apps-pane';\nimport App from './yggio-connected-components/app-pane';\n\n// // Devices\nimport DeviceList from './yggio-connected-components/device-list-pane';\nimport DeviceView from './yggio-connected-components/device-view-pane';\nimport ModeSelection from './yggio-managers/device-installation-manager/mode-selection-pane';\nimport SingleInstallation from './yggio-managers/device-installation-manager/single-mode-route';\nimport BatchInstallation from './yggio-managers/device-installation-manager/batch-mode-route';\n\n// Locations\nimport Locations from './yggio-managers/location-manager/locations';\nimport LocationCreator from './yggio-managers/location-manager/location-creator';\nimport LocationView from './yggio-managers/location-manager/location';\nimport LocationEditor from './yggio-managers/location-manager/location-editor';\nimport LayerCreator from './yggio-managers/location-manager/layer-creator';\nimport LayerEditor from './yggio-managers/location-manager/layer-editor';\n\n// Organizations\nimport OrganizationsList from './yggio-managers/organization-manager/organizations-list-pane';\nimport CreateOrganization from './yggio-managers/organization-manager/organization-view/containers/create-organization-pane';\nimport EditOrganization from './yggio-managers/organization-manager/organization-view/containers/edit-organization-pane';\nimport CreateOrganizationMember from './yggio-managers/organization-manager/organization-view/containers/create-member-pane';\nimport OrganizationView from './yggio-managers/organization-manager/organization-view';\nimport OrganizationUnit from './yggio-managers/organization-manager/organization-unit';\n\n// Charts\nimport ChartsPane from './yggio-connected-components/charts-pane';\n\n// Config\nimport {setConfig} from './yggio-config';\n\n// API\nimport {withQueryClientProvider} from './hocs';\n\nexport {\n  // Config\n  setConfig,\n\n  // Dashboard\n  Dashboard,\n\n  // Apps\n  Apps,\n  App,\n\n  // // Devices\n  DeviceList,\n  DeviceView,\n  ModeSelection,\n  SingleInstallation,\n  BatchInstallation,\n\n  // Locations\n  Locations,\n  LocationCreator,\n  LocationView,\n  LocationEditor,\n  LayerCreator,\n  LayerEditor,\n\n  // Organizations\n  OrganizationsList,\n  CreateOrganization,\n  EditOrganization,\n  CreateOrganizationMember,\n  OrganizationView,\n  OrganizationUnit,\n\n  // Charts\n  ChartsPane,\n\n  //\n  // // Shared,\n  NavbarPane,\n  UnauthorizedUserPane,\n  YggioTokenMonitor,\n  YggioMessageToaster,\n  withYggio,\n  WebSocket,\n  LogoSpinner,\n\n  // API\n  withQueryClientProvider,\n};\n","const _ = require('lodash');\n\n/**\n* Creates thunk-like action action-creators giving the user the means to create\n* BOTH sync and/or async actions (this function does not discriminate). This will\n* dispatch the action and return the result if any.\n* @param actions\n* @param dispatch\n* @returns {*}\n */\n\nconst createActionDispatches = (actions, dispatch) => {\n  const dispatcher = action => (...args) => {\n    const triggeredAction = action(...args);\n    if (_.isFunction(triggeredAction)) {\n      return triggeredAction(dispatch);\n    }\n    if (_.isObject(triggeredAction)) {\n      return dispatch(triggeredAction);\n    }\n    throw new Error('DevErr: a triggered action must be a function or an object');\n  };\n  return _.mapValues(actions, action => dispatcher(action));\n};\n\nexport default createActionDispatches;\n","import _ from 'lodash';\n\nconst createIdKeyedObject = <T extends {[key: string]: string}>(arr: T[], key: string) => (\n  _.reduce(arr, (acc: Record<string, T>, curr: T) => {\n    const i = curr[key];\n    acc[i] = curr;\n    return acc;\n  }, {})\n);\n\nexport default createIdKeyedObject;\n","import {has} from 'lodash/fp';\n\n/**\n *\n * @param defaultState - initial state\n * @param handlers - object of reducer cases\n * @returns {function(*=, *=): *}\n */\nconst createReducer = (defaultState, handlers) => (\n  (state = defaultState, action) => (has(action.type, handlers)\n    ? handlers[action.type](state, action)\n    : state)\n);\n\nexport default createReducer;\n","// form-wizard/config-validator.js\n\nimport _ from 'lodash';\n\nimport {VALIDATION_VISIBILITY_TYPES} from './state/constants';\nimport {FormConfig, InputConfig, Validator} from '../../types';\n\nconst PREFIX = 'generateForm dev error:';\n\nconst validateConfig = (data: FormConfig) => {\n  if (!_.isPlainObject(data)) {\n    throwError(`config must be an object`);\n  }\n  if (!_.size(data)) {\n    throwError(`config must not be an empty object`);\n  }\n  _.each(data, (inputConfig, inputName) => (\n    validateInputConfig(inputConfig, inputName)\n  ));\n};\n\nconst validateInputConfig = (inputConfig: InputConfig, inputName: string) => {\n  if (!_.isPlainObject(inputConfig)) {\n    throwError(`${inputName} must be an object`);\n  }\n  if (_.isNil(inputConfig.validation)) {\n    throwError(`${inputName}.validation must be included`);\n  }\n  const {\n    defaultValue,\n    validation: {\n      visibilityType,\n      validMessage,\n      validators,\n    },\n  } = inputConfig;\n  if (_.isNil(defaultValue)) {\n    throwError(`${inputName}.defaultValue must be included`);\n  }\n  if (_.isNil(visibilityType)) {\n    throwError(`${inputName}.validation.visibilityType must be included`);\n  }\n  if (!VALIDATION_VISIBILITY_TYPES[visibilityType]) {\n    throwError(`${inputName}.validation.visibilityType (${visibilityType}) must be one of: ${_.map(VALIDATION_VISIBILITY_TYPES)}`);\n  }\n  if (!_.isNil(validMessage) && !_.isString(validMessage)) {\n    throwError(`${inputName}.validation.validMessage must be a string`);\n  }\n  if (!_.isNil(validators)) {\n    if (!_.isArray(validators)) {\n      throwError(`${inputName}.validation.validators must be an array`);\n    }\n    _.each(validators, (validator, i) => (\n      validateInputValidator(validator, `${inputName}.validation.validators[${i}]`)\n    ));\n  }\n};\n\nconst validateInputValidator = (validator: Validator, validatorPrefix: string) => {\n  if (!_.isPlainObject(validator) && !_.isFunction(validator)) {\n    throwError(`${validatorPrefix} must be an object or function`);\n  }\n  if (_.isFunction(validator)) {\n    return;\n  }\n  if (_.isNil(validator.validate)) {\n    throwError(`${validatorPrefix} must have a validate property`);\n  }\n  if (!_.isFunction(validator.validate)) {\n    throwError(`${validatorPrefix} validate must be a function`);\n  }\n  if (_.isNil(validator.message)) {\n    throwError(`${validatorPrefix} must have a message property`);\n  }\n  if (!_.isString(validator.message) && !_.isFunction(validator.message)) {\n    throwError(`${validatorPrefix} message must be a string or a function`);\n  }\n};\n\nconst throwError = (message: string) => {\n  throw new Error(`${PREFIX} ${message}`);\n};\n\nexport {\n  validateConfig,\n};\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\n// @ts-ignore because we will stop using this package soon\nimport {PropTypes as VanillaPropTypes} from 'vanilla-prop-types';\n\nimport {FormInputs, Form, Validation} from '../../types';\nimport {ACTION_TYPES} from './state';\n\nconst getValidationErrorMessage = ({validation: v}: {validation: Validation}) => (\n  !v.isValid && v.isVisible ? v.message : null\n);\n\nconst getValidationSuccessMessage = ({validation: v}: {validation: Validation}) => (\n  v.isValid && v.isVisible ? v.message : null\n);\n\nconst isFormValid = (formInputs: FormInputs) => (\n  _.every(formInputs, 'validation.isValid')\n);\n\nconst getFormValues = (formInputs: FormInputs) => (\n  _.mapValues(formInputs, ({value}) => value)\n);\n\nconst getFormShape = (inputs: {[inputName: string]: PropTypes.Validator<unknown>}) => {\n  if (!_.isPlainObject(inputs)) {\n    throw new Error('DevErr: inputs should be key-value pairs e.g. {name: PropTypes.string}');\n  }\n  const formInputsShape = PropTypes.shape(_.mapValues(inputs, propType => {\n    return PropTypes.shape({\n      value: propType,\n      validation: PropTypes.shape({\n        message: PropTypes.string,\n        isValid: PropTypes.bool.isRequired,\n        isVisible: PropTypes.bool.isRequired,\n      })\n    });\n  }));\n  const actionsShapes = _.mapValues(ACTION_TYPES, () => PropTypes.func.isRequired);\n  return {\n    formInputs: formInputsShape,\n    isPopulated: PropTypes.bool,\n    ...actionsShapes,\n  };\n};\n\n\nconst generateHandleValueChange = (\n  props: Form,\n  show: boolean,\n) => (evt: React.ChangeEvent<HTMLInputElement>) => {\n  const {target: {value, name}} = evt;\n  props.setInputValue(name, value);\n  if (show) {\n    props.showInputValidation(name);\n  }\n};\n\nconst generateShowInputValidation = (\n  props: Form,\n) => (evt: React.ChangeEvent<HTMLInputElement>) => {\n  const {target: {name}} = evt;\n  props.showInputValidation(name);\n};\n\n// ignoring since we will stop using this package soon\n/* eslint-disable */\nconst getVanillaPropTypesInputsShape = (inputs: {[inputName: string]: any}) => {\n  if (!_.isPlainObject(inputs)) {\n    throw new Error('DevErr: inputs should be key-value pairs e.g. {name: PropTypes.string}');\n  }\n  const formInputsShape = VanillaPropTypes.shape(_.mapValues(inputs, (propType) => {\n    return VanillaPropTypes.shape({\n      value: propType.isRequired,\n      validation: VanillaPropTypes.shape({\n        message: VanillaPropTypes.string.isRequiredOrNull,\n        isValid: VanillaPropTypes.bool.isRequired,\n        isVisible: VanillaPropTypes.bool.isRequired,\n      }, {isExact: true}).isRequired,\n    }, {isExact: true}).isRequired;\n  }), {isExact: true});\n  const shape = {\n    formInputs: formInputsShape.isRequired,\n    isPopulated: VanillaPropTypes.bool.isRequired,\n  };\n  return shape;\n};\n/* eslint-enable */\n\nexport {\n  getValidationErrorMessage,\n  getValidationSuccessMessage,\n  isFormValid,\n  getFormValues,\n  getFormShape,\n  getVanillaPropTypesInputsShape,\n  generateHandleValueChange,\n  generateShowInputValidation,\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"// form-wizard/form-wizard.stories.js\\n\\nimport {storiesOf} from '@storybook/react';\\nimport {\\n  def,\\n  simple,\\n  populate,\\n  visibilityTypes,\\n} from './stories';\\n\\nstoriesOf('Utils/Form Wizard', module)\\n  .add('default', def)\\n  .add('simple', simple)\\n  .add('populate', populate)\\n  .add('visibilityTypes', visibilityTypes);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"visibilitytypes\":{\"startLoc\":{\"col\":7,\"line\":15},\"endLoc\":{\"col\":41,\"line\":15},\"startBody\":{\"col\":26,\"line\":15},\"endBody\":{\"col\":41,\"line\":15}},\"populate\":{\"startLoc\":{\"col\":7,\"line\":14},\"endLoc\":{\"col\":27,\"line\":14},\"startBody\":{\"col\":19,\"line\":14},\"endBody\":{\"col\":27,\"line\":14}},\"simple\":{\"startLoc\":{\"col\":7,\"line\":13},\"endLoc\":{\"col\":23,\"line\":13},\"startBody\":{\"col\":17,\"line\":13},\"endBody\":{\"col\":23,\"line\":13}},\"default\":{\"startLoc\":{\"col\":7,\"line\":12},\"endLoc\":{\"col\":21,\"line\":12},\"startBody\":{\"col\":18,\"line\":12},\"endBody\":{\"col\":21,\"line\":12}}};\n    \n// form-wizard/form-wizard.stories.js\n\nimport {storiesOf} from '@storybook/react';\nimport {\n  def,\n  simple,\n  populate,\n  visibilityTypes,\n} from './stories';\n\nstoriesOf('Utils/Form Wizard', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n  .add('default', def)\n  .add('simple', simple)\n  .add('populate', populate)\n  .add('visibilityTypes', visibilityTypes);\n","import _ from 'lodash';\n\nimport {validateConfig} from './config-validator';\nimport {\n  actions,\n  createReducer,\n  ACTION_TYPES,\n  VALIDATION_VISIBILITY_TYPES,\n  validateInputValue,\n} from './state';\nimport {FormConfig} from '../../types';\n\nconst createDefaultState = (config: FormConfig) => {\n  const defaultFormInputs = _.mapValues(config, inputConfig => {\n    const {isValid, message} = validateInputValue(inputConfig, inputConfig.defaultValue);\n    return {\n      value: inputConfig.defaultValue,\n      validation: {\n        message,\n        isValid,\n        isVisible: false,\n      }\n    };\n  });\n  return {\n    formInputs: defaultFormInputs,\n    isPopulated: false,\n  };\n};\n\nconst generateForm = (config: FormConfig) => {\n  validateConfig(config);\n  const defaultState = createDefaultState(config);\n  const reducer = createReducer(config, defaultState);\n  return {\n    actions,\n    reducer,\n    actionTypes: ACTION_TYPES,\n  };\n};\n\nexport {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n};\n","import {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n} from './generate-form';\nimport inputValidators from './lib/input-validators';\nimport {\n  getValidationErrorMessage,\n  getValidationSuccessMessage,\n  isFormValid,\n  getFormValues,\n  getFormShape,\n  getVanillaPropTypesInputsShape,\n  generateHandleValueChange,\n  generateShowInputValidation,\n} from './external-utils';\n\nexport {\n  generateForm,\n  // used for form-config\n  VALIDATION_VISIBILITY_TYPES,\n  inputValidators,\n  // utils\n  getValidationErrorMessage,\n  getValidationSuccessMessage,\n  isFormValid,\n  getFormValues,\n  getFormShape,\n  getVanillaPropTypesInputsShape,\n  generateHandleValueChange,\n  generateShowInputValidation,\n};\n","import _ from 'lodash';\n\nimport {InputValue} from '../../../types';\n\nconst emailPattern = /\\b[\\w.-]+@[\\w.-]+\\.\\w{2,4}\\b/i;\n\nconst inputRequired = (message: string) => ({\n  validate: (value: InputValue) => (\n    typeof value === 'string' && value.length !== 0\n  ),\n  message,\n});\n\nconst nonEmptyTrimmedString = (message: string) => ({\n  validate: (value: InputValue) => (\n    typeof value === 'string' && _.trim(value).length !== 0\n  ),\n  message,\n});\n\nconst minimumLength = (minLength: number) => ({\n  validate: (value: InputValue) => {\n    if (!value) return true;\n    return typeof value === 'string' && value.length >= minLength;\n  },\n  message: `Must be at least ${minLength} characters`,\n});\n\nconst maximumLength = (maxLength: number) => ({\n  validate: (value: InputValue) => {\n    if (!value) return true;\n    return typeof value === 'string' && value.length <= maxLength;\n  },\n  message: `Cannot be longer than ${maxLength} characters`,\n});\n\nconst validEmailAddress = ({\n  validate: (value: InputValue) => {\n    if (!value) return true;\n    return typeof value === 'string' && emailPattern.test(value);\n  },\n  message: 'Please enter a valid email address',\n});\n\n\nexport default {\n  inputRequired,\n  nonEmptyTrimmedString,\n  minimumLength,\n  maximumLength,\n  validEmailAddress,\n};\n","enum ACTION_TYPES {\n  setInputValue = 'setInputValue',\n  showInputValidation = 'showInputValidation',\n  hideInputValidation = 'hideInputValidation',\n  showAllInputValidations = 'showAllInputValidations',\n  hideAllInputValidations = 'hideAllInputValidations',\n  populateInputValues = 'populateInputValues',\n  resetForm = 'resetForm',\n}\n\n\nenum VALIDATION_VISIBILITY_TYPES {\n  always,\n  never,\n  optIn,\n  manual,\n}\n\nexport {\n  ACTION_TYPES,\n  VALIDATION_VISIBILITY_TYPES,\n};\n","import _ from 'lodash';\n\nimport {\n  shouldBeVisible,\n  validateInputValue,\n} from './validation';\nimport {FormInput, FormConfig, FormInputs, InputValue} from '../../../types';\nimport {\n  ACTION_TYPES,\n  VALIDATION_VISIBILITY_TYPES\n} from './constants';\n\ninterface DispatchParams {\n  type: string;\n  payload?: {\n    inputName?: string,\n    value?: InputValue,\n    newInputs?: {[inputName: string]: InputValue},\n  };\n}\ntype Dispatch = (obj: DispatchParams) => void;\n\nconst actions = {\n  setInputValue: (\n    inputName: string,\n    value: InputValue,\n  ) => (dispatch: Dispatch) => dispatch({\n    type: ACTION_TYPES.setInputValue,\n    payload: {inputName, value},\n  }),\n  showInputValidation: (inputName: string) => (dispatch: Dispatch) => dispatch({\n    type: ACTION_TYPES.showInputValidation,\n    payload: {inputName},\n  }),\n  hideInputValidation: (inputName: string) => (dispatch: Dispatch) => dispatch({\n    type: ACTION_TYPES.hideInputValidation,\n    payload: {inputName},\n  }),\n  showAllInputValidations: () => (dispatch: Dispatch) => dispatch({\n    type: ACTION_TYPES.showAllInputValidations,\n  }),\n  hideAllInputValidations: () => (dispatch: Dispatch) => dispatch({\n    type: ACTION_TYPES.hideAllInputValidations,\n  }),\n  populateInputValues: (\n    newInputs: {[inputName: string]: InputValue}\n  ) => (dispatch: Dispatch) => dispatch({\n    type: ACTION_TYPES.populateInputValues,\n    payload: {newInputs},\n  }),\n  resetForm: () => (dispatch: Dispatch) => dispatch({\n    type: ACTION_TYPES.resetForm,\n  }),\n};\n\nconst changeFormInputVisibility = (\n  formInputState: FormInput,\n  visibilityType: VALIDATION_VISIBILITY_TYPES,\n  actionType: ACTION_TYPES,\n) => {\n  const isVisible = shouldBeVisible(\n    visibilityType,\n    actionType\n  );\n  return {\n    ...formInputState,\n    validation: {\n      ...formInputState.validation,\n      isVisible,\n    }\n  };\n};\n\ninterface DefaultState {\n  formInputs: FormInputs;\n  isPopulated: boolean;\n}\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nconst createReducer = (\n  config: FormConfig,\n  defaultState: DefaultState,\n) => (state = defaultState, action: DispatchParams) => {\n  const {type, payload} = action;\n\n  switch (type) {\n\n    case ACTION_TYPES.setInputValue: {\n      const inputName = payload!.inputName!;\n      const value = payload!.value!;\n      const {\n        isValid,\n        message\n      } = validateInputValue(config[inputName], value, state.formInputs);\n      const isVisible = shouldBeVisible(\n        config[inputName].validation.visibilityType,\n        ACTION_TYPES.setInputValue,\n        state.formInputs[inputName].validation.isVisible\n      );\n      return {\n        ...state,\n        formInputs: {\n          ...state.formInputs,\n          [inputName]: {\n            ...state.formInputs[inputName],\n            value,\n            validation: {\n              ...state.formInputs[inputName].validation,\n              message,\n              isValid,\n              isVisible,\n            }\n          }\n        }\n      };\n    }\n\n    case ACTION_TYPES.showInputValidation: {\n      const inputName = payload!.inputName!;\n\n      const inputStateShown = changeFormInputVisibility(\n        state.formInputs[inputName],\n        config[inputName].validation.visibilityType,\n        ACTION_TYPES.showInputValidation\n      );\n\n      return {\n        ...state,\n        formInputs: {\n          ...state.formInputs,\n          [inputName]: {\n            ...inputStateShown,\n          }\n        }\n      };\n    }\n\n    case ACTION_TYPES.hideInputValidation: {\n      const inputName = payload!.inputName!;\n\n      const inputStateHidden = changeFormInputVisibility(\n        state.formInputs[inputName],\n        config[inputName].validation.visibilityType,\n        ACTION_TYPES.hideInputValidation\n      );\n\n      return {\n        ...state,\n        formInputs: {\n          ...state.formInputs,\n          [inputName]: {\n            ...inputStateHidden,\n          }\n        }\n      };\n    }\n\n    case ACTION_TYPES.showAllInputValidations: {\n      const newFormInputs = _.mapValues(state.formInputs, (input, inputName) => {\n        return changeFormInputVisibility(\n          input,\n          config[inputName].validation.visibilityType,\n          ACTION_TYPES.showInputValidation\n        );\n      });\n\n      return {\n        ...state,\n        formInputs: {\n          ...newFormInputs,\n        }\n      };\n    }\n\n    case ACTION_TYPES.hideAllInputValidations: {\n      const newFormInputs = _.mapValues(state.formInputs, (input, inputName) => {\n        return changeFormInputVisibility(\n          input,\n          config[inputName].validation.visibilityType,\n          ACTION_TYPES.hideInputValidation\n        );\n      });\n      return {\n        ...state,\n        formInputs: {\n          ...newFormInputs,\n        }\n      };\n    }\n\n    case ACTION_TYPES.populateInputValues: {\n      const newInputs = payload!.newInputs!;\n      const newFormInputs = _.mapValues(newInputs, (newInputVal, newInputName) => {\n        const {\n          isValid,\n          message,\n        } = validateInputValue(config[newInputName], newInputVal, state.formInputs);\n        return {\n          value: newInputVal,\n          validation: {\n            message,\n            isValid,\n            isVisible: !isValid,\n          }\n        };\n      });\n      return {\n        ...state,\n        formInputs: newFormInputs,\n        isPopulated: true,\n      };\n    }\n\n    case ACTION_TYPES.resetForm: {\n      return defaultState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport {\n  actions,\n  createReducer,\n  ACTION_TYPES,\n  VALIDATION_VISIBILITY_TYPES,\n  validateInputValue,\n};\n","import _ from 'lodash';\n\nimport {\n  ACTION_TYPES,\n  VALIDATION_VISIBILITY_TYPES\n} from './constants';\nimport {InputConfig, FormInputs, InputValue} from '../../../types';\n\nconst shouldBeVisible = (\n  visibilityType: VALIDATION_VISIBILITY_TYPES,\n  actionType: ACTION_TYPES,\n  isVisible?: boolean,\n) => {\n\n  switch (actionType) {\n\n    case ACTION_TYPES.setInputValue: {\n      switch (visibilityType) {\n        case VALIDATION_VISIBILITY_TYPES.always: return true;\n        case VALIDATION_VISIBILITY_TYPES.never: return false;\n        case VALIDATION_VISIBILITY_TYPES.optIn: return false;\n        case VALIDATION_VISIBILITY_TYPES.manual: return isVisible;\n        default: return true;\n      }\n    }\n\n    case ACTION_TYPES.showInputValidation: {\n      switch (visibilityType) {\n        case VALIDATION_VISIBILITY_TYPES.always: return true;\n        case VALIDATION_VISIBILITY_TYPES.never: return false;\n        case VALIDATION_VISIBILITY_TYPES.optIn: return true;\n        case VALIDATION_VISIBILITY_TYPES.manual: return true;\n        default: return true;\n      }\n    }\n\n    case ACTION_TYPES.hideInputValidation: {\n      switch (visibilityType) {\n        case VALIDATION_VISIBILITY_TYPES.always: return true;\n        case VALIDATION_VISIBILITY_TYPES.never: return false;\n        case VALIDATION_VISIBILITY_TYPES.optIn: return false;\n        case VALIDATION_VISIBILITY_TYPES.manual: return false;\n        default: return true;\n      }\n    }\n\n    default: return true;\n  }\n};\n\n\nconst validateInputValue = (\n  inputConfig: InputConfig,\n  value: InputValue,\n  formInputs?: FormInputs,\n) => {\n  const validators = inputConfig.validation.validators || [];\n  let isValid = true;\n  let validationMessage = null;\n  _.forEach(validators, validator => {\n    // Object validator\n    if (_.isPlainObject(validator)) {\n      const valid = validator.validate(value, formInputs);\n      if (!valid) {\n        isValid = false;\n        const {message} = validator;\n        if (_.isFunction(message)) {\n          validationMessage = message(value);\n        } else {\n          validationMessage = message;\n        }\n      }\n    }\n    // Function validator\n    if (_.isFunction(validator)) {\n      try {\n        validator(value, formInputs);\n      } catch (error: unknown) {\n        isValid = false;\n        if (error instanceof Error) {\n          validationMessage = error.message;\n        }\n      }\n    }\n    // No need to do more validation if false\n    if (!isValid) {\n      return false;\n    }\n  });\n\n  // Optional valid message\n  const {validMessage} = inputConfig.validation;\n  if (isValid && !!validMessage) {\n    validationMessage = validMessage;\n  }\n\n  return {\n    isValid,\n    message: validationMessage,\n  };\n};\n\nexport {\n  validateInputValue,\n  shouldBeVisible,\n  VALIDATION_VISIBILITY_TYPES,\n};\n","// form-wizard/default/component.js\n\nimport React from 'react';\n\nimport {\n  getValidationErrorMessage,\n  getValidationSuccessMessage,\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n} from '../..';\n\nimport Button from '../../../../components/button';\nimport Select from '../../../../components/select';\nimport TextField from '../../../../components/text-field';\n\nconst BasicFormComponent = props => {\n  const onBlur = generateShowInputValidation(props);\n\n  return (\n    <>\n      <Select\n        label=\"Connector\"\n        name=\"connector\"\n        options={props.connectorOptions || []}\n        value={props.formInputs.connector.value}\n        onChange={generateHandleValueChange(props, false)}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.connector)}\n      />\n      <TextField\n        label=\"DevEUI\"\n        name=\"devEui\"\n        value={props.formInputs.devEui.value}\n        onChange={generateHandleValueChange(props, true)}\n        onBlur={onBlur}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.devEui)}\n        validationSuccessMessage={getValidationSuccessMessage(props.formInputs.devEui)}\n      />\n      <TextField\n        label=\"AppKey\"\n        name=\"appKey\"\n        value={props.formInputs.appKey.value}\n        onChange={generateHandleValueChange(props, true)}\n        onBlur={onBlur}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.appKey)}\n        validationSuccessMessage={getValidationSuccessMessage(props.formInputs.appKey)}\n      />\n      <Button\n        color=\"green\"\n        content=\"Submit\"\n        onClick={() => {\n          if (!isFormValid(props.formInputs)) {\n            props.showAllInputValidations();\n          }\n        }}\n        margin=\"0 0 40px 0\"\n      />\n      <hr />\n      {\n        isFormValid(props.formInputs)\n          ? <p>Currently form is valid. If you press Submit, nothing will happe in this story.</p>\n          : (\n            <p>\n              Currently form is NOT valid.&nbsp;\n              If you press Submit, all validation messages will be shown.\n            </p>\n          )\n      }\n    </>\n  );\n};\n\nexport default BasicFormComponent;\n","// form-wizard/default/config.js\n\nimport {\n  VALIDATION_VISIBILITY_TYPES,\n  inputValidators,\n} from '../../index';\n\nconst devEuiPattern = /^[A-Z0-9]{16}$/;\nconst appKeyPattern = /^[A-Z0-9]{32}$/;\n\nconst conf = {\n  connector: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validMessage: 'Valid',\n      validators: [\n        inputValidators.inputRequired('Please select a connector'),\n      ],\n    }\n  },\n  devEui: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validMessage: 'Valid',\n      validators: [\n        inputValidators.inputRequired('Please enter a DevEUI'),\n        {\n          validate: value => devEuiPattern.test(value),\n          message: 'Must be 16 characters, numbers and uppercase letters only',\n        }\n      ],\n    }\n  },\n  appKey: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validMessage: 'Valid',\n      validators: [\n        inputValidators.inputRequired('Please enter a AppKey'),\n        {\n          validate: value => appKeyPattern.test(value),\n          message: 'Must be 32 characters, numbers and uppercase letters only',\n        }\n      ],\n    }\n  }\n};\n\nexport default conf;\n","// form-wizard/default/index.ts\n\nimport React from 'react';\nimport {compose} from 'lodash/fp';\n\nimport {generateForm} from '../../index';\n\nimport {withState} from '../../../../hocs';\n\nimport config from './config';\nimport BasicFormComponent from './component';\n\nconst connectorOptions = [\n  {\n    value: '123',\n    label: 'connector nbr one',\n  },\n  {\n    value: '321',\n    label: 'connector nbr two',\n  },\n];\n\nconst story = () => {\n  const formState = generateForm(config);\n\n  const RawFormComponent = compose(\n    withState(formState),\n  )(BasicFormComponent);\n\n  const FormComponent = props => {\n    return (\n      <RawFormComponent\n        {...props}\n        connectorOptions={connectorOptions}\n      />\n    );\n  };\n\n  return <FormComponent />;\n};\n\nexport default story;\n","// form-wizard/index.ts\n\nimport def from './default';\nimport simple from './simple';\nimport populate from './populate';\nimport visibilityTypes from './visibility-types';\n\nexport {\n  def,\n  simple,\n  populate,\n  visibilityTypes,\n};\n","// form-wizard/default/component.js\n\nimport React from 'react';\n\nimport {\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n} from '../..';\n\nimport TextField from '../../../../components/text-field';\nimport TextArea from '../../../../components/text-area';\n\nconst BasicFormComponent = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n  return (\n    <>\n      <TextField\n        label=\"Name\"\n        name=\"name\"\n        value={props.formInputs.name.value}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n      <TextArea\n        label=\"Description\"\n        name=\"description\"\n        value={props.formInputs.description.value}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n      <hr />\n      {isFormValid(props.formInputs)\n        ? <p>Currently form is valid.</p>\n        : <p>Currently form is NOT valid.</p>}\n    </>\n  );\n};\n\nexport default BasicFormComponent;\n","// form-wizard/default/config.js\n\nimport {\n  VALIDATION_VISIBILITY_TYPES,\n  inputValidators,\n} from '../../index';\n\nconst conf = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please type a name'),\n      ],\n    }\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.maximumLength(2000),\n      ],\n    }\n  }\n};\n\nexport default conf;\n","// form-wizard/default/index.ts\n\nimport React from 'react';\nimport {compose} from 'lodash/fp';\n\nimport {generateForm} from '../../index';\n\nimport {withState, withEffect} from '../../../../hocs';\n\nimport config from './config';\nimport BasicFormComponent from './component';\n\nconst story = () => {\n  const formState = generateForm(config);\n\n  const initializeFormEffect = props => {\n    if (!props.isPopulated) {\n      props.populateInputValues({\n        name: 'Existing Name',\n        description: 'This is an existing description that I want to edit.',\n        noConfigValue: 'I will not get added because I do not have a config :('\n      });\n    }\n  };\n\n  const RawFormComponent = compose(\n    withState(formState),\n    withEffect(initializeFormEffect, {init: []}),\n  )(BasicFormComponent);\n\n  return <RawFormComponent />;\n};\n\nexport default story;\n","// form-wizard/default/component.js\n\nimport React from 'react';\n\nimport {\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n} from '../..';\n\nimport TextField from '../../../../components/text-field';\n\nconst BasicFormComponent = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n  return (\n    <>\n      <TextField\n        label=\"Name\"\n        name=\"name\"\n        value={props.formInputs.name.value}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n      <hr />\n      {isFormValid(props.formInputs)\n        ? <p>Currently form is valid.</p>\n        : <p>Currently form is NOT valid.</p>}\n    </>\n  );\n};\n\nexport default BasicFormComponent;\n","// form-wizard/default/config.js\n\nimport {\n  VALIDATION_VISIBILITY_TYPES,\n  inputValidators,\n} from '../../index';\n\nconst conf = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please type a name'),\n      ],\n    }\n  }\n};\n\nexport default conf;\n","// form-wizard/default/index.ts\n\nimport React from 'react';\nimport {compose} from 'lodash/fp';\n\nimport {generateForm} from '../../index';\n\nimport {withState} from '../../../../hocs';\n\nimport config from './config';\nimport BasicFormComponent from './component';\n\nconst story = () => {\n  const formState = generateForm(config);\n\n  const RawFormComponent = compose(\n    withState(formState),\n  )(BasicFormComponent);\n\n  return <RawFormComponent />;\n};\n\nexport default story;\n","// form-wizard/default/component.js\n\nimport React from 'react';\n\nimport {\n  getValidationErrorMessage,\n  getValidationSuccessMessage,\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n} from '../..';\n\nimport TextField from '../../../../components/text-field';\n\nconst BasicFormComponent = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n  return (\n    <>\n      <TextField\n        label=\"always\"\n        name=\"always\"\n        value={props.formInputs.always.value}\n        onChange={onChange}\n        onBlur={onBlur}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.always)}\n        validationSuccessMessage={getValidationSuccessMessage(props.formInputs.always)}\n      />\n      <TextField\n        label=\"never\"\n        name=\"never\"\n        value={props.formInputs.never.value}\n        onChange={onChange}\n        onBlur={onBlur}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.never)}\n        validationSuccessMessage={getValidationSuccessMessage(props.formInputs.never)}\n      />\n      <TextField\n        label=\"optIn\"\n        name=\"optIn\"\n        value={props.formInputs.optIn.value}\n        onChange={onChange}\n        onBlur={onBlur}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.optIn)}\n        validationSuccessMessage={getValidationSuccessMessage(props.formInputs.optIn)}\n      />\n      <TextField\n        label=\"manual\"\n        name=\"manual\"\n        value={props.formInputs.manual.value}\n        onChange={onChange}\n        onBlur={onBlur}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.manual)}\n        validationSuccessMessage={getValidationSuccessMessage(props.formInputs.manual)}\n      />\n      <hr />\n      {isFormValid(props.formInputs)\n        ? <p>Currently form is valid.</p>\n        : <p>Currently form is NOT valid.</p>}\n    </>\n  );\n};\n\nexport default BasicFormComponent;\n","// form-wizard/default/config.js\n\nimport {\n  VALIDATION_VISIBILITY_TYPES,\n  inputValidators,\n} from '../../index';\n\nconst conf = {\n  always: {\n    defaultValue: '',\n    validation: {\n      validMessage: 'Valid',\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please type one letter'),\n        inputValidators.maximumLength(1),\n      ],\n    }\n  },\n  never: {\n    defaultValue: '',\n    validation: {\n      validMessage: 'Valid',\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n      validators: [\n        inputValidators.inputRequired('Please type one letter'),\n        inputValidators.maximumLength(1),\n      ],\n    }\n  },\n  optIn: {\n    defaultValue: '',\n    validation: {\n      validMessage: 'Valid',\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please type one letter'),\n        inputValidators.maximumLength(1),\n      ],\n    }\n  },\n  manual: {\n    defaultValue: '',\n    validation: {\n      validMessage: 'Valid',\n      visibilityType: VALIDATION_VISIBILITY_TYPES.manual,\n      validators: [\n        inputValidators.inputRequired('Please type one letter'),\n        inputValidators.maximumLength(1),\n      ],\n    }\n  },\n};\n\nexport default conf;\n","// form-wizard/default/index.ts\n\nimport React from 'react';\nimport {compose} from 'lodash/fp';\n\nimport {generateForm} from '../../index';\n\nimport {withState} from '../../../../hocs';\n\nimport config from './config';\nimport BasicFormComponent from './component';\n\nconst story = () => {\n  const formState = generateForm(config);\n\n  const RawFormComponent = compose(\n    withState(formState),\n  )(BasicFormComponent);\n\n  return <RawFormComponent />;\n};\n\nexport default story;\n","// General utilities\n\nconst multiply = times => val => val * times;\nconst divide = times => val => val / times;\n\nexport {\n  multiply,\n  divide,\n};\n","/*\n  #### UUID Generation Utility ####\n\n  This utility is used for the generation of UUID into lists\n  for the purpose of rendering lists in React, which requires\n  a \"key\" prop to work properly\n\n  will ONLY accept the following types:\n  - objects (nested)\n  - arrays of objects (nested)\n*/\n\nimport _ from 'lodash';\nimport {v4} from 'uuid';\n\nconst idKey = 'id';\n\nconst assertNoExistingIdsExist = source => {\n  if (_.isArray(source)) {\n    const keyedArray = _.map(source, curr => _.keys(curr));\n    const keys = _.flatten(keyedArray);\n    return !(_.includes(keys, 'id') || _.includes(keys, '_id'));\n  }\n\n  if (_.isPlainObject(source)) {\n    const keys = _.keys(source);\n    return !(_.includes(keys, 'id') || _.includes(keys, '_id'));\n  }\n};\n\nconst generateRecursiveUUID = source => {\n  if (_.isPlainObject(source)) {\n    return _.reduce(source, (acc, curr, key) => {\n      if (_.isPlainObject(curr)) {\n        if (assertNoExistingIdsExist(source)) {\n          acc[key] = {\n            ...generateRecursiveUUID(curr),\n            [idKey]: v4(),\n          };\n        } else {\n          acc[key] = {\n            ...generateRecursiveUUID(curr),\n          };\n        }\n      }\n\n      if (_.isArray(curr)) {\n        acc[key] = generateRecursiveUUID(curr);\n      }\n      return acc;\n    }, {});\n  }\n  if (_.isArray(source)) {\n    return _.reduce(source, (acc, curr) => {\n      if (_.isPlainObject(curr)) {\n        if (assertNoExistingIdsExist(source)) {\n          acc.push({\n            ...generateRecursiveUUID(curr),\n            [idKey]: v4(),\n          });\n        } else {\n          acc.push({\n            ...generateRecursiveUUID(curr),\n            [idKey]: v4(),\n          });\n        }\n      }\n      return acc;\n    }, []);\n  }\n};\n\nconst generateArrayUUID = (source, opts) => {\n  const generateDestination = _.reduce(source, (acc, curr) => {\n    if (opts.nested) {\n      if (_.isPlainObject(curr)) {\n        if (assertNoExistingIdsExist(source)) {\n          acc.push({\n            ...generateRecursiveUUID(curr),\n            [idKey]: v4(),\n          });\n        } else {\n          acc.push({\n            ...generateRecursiveUUID(curr),\n          });\n        }\n      }\n    } else if (assertNoExistingIdsExist(source)) {\n      acc.push({\n        ...curr,\n        id: v4(),\n      });\n    } else {\n      acc.push({\n        ...curr,\n      });\n    }\n\n    return acc;\n  }, []);\n  return _.defaultsDeep(generateDestination, source);\n};\n\nconst generateObjectUUID = (source, opts) => {\n  const generateDestination = _.reduce(source, (acc, curr, key) => {\n    if (opts.nested) {\n      if (_.isPlainObject(curr)) {\n        if (assertNoExistingIdsExist(source)) {\n          acc[key] = {\n            ...generateRecursiveUUID(curr),\n            [idKey]: v4(),\n          };\n        } else {\n          acc[key] = {\n            ...generateRecursiveUUID(curr),\n          };\n        }\n      }\n\n\n      if (_.isArray(curr)) {\n        acc[key] = generateArrayUUID(curr, opts);\n      }\n    }\n\n    if (assertNoExistingIdsExist(source)) {\n      acc[idKey] = v4();\n    }\n\n    return acc;\n  }, {});\n  return _.defaultsDeep(generateDestination, source);\n};\n\nconst generateUUID = (source, opts = {}) => {\n  if (_.isArray(source)) {\n    return generateArrayUUID(source, opts);\n  }\n\n  if (_.isPlainObject(source)) {\n    return generateObjectUUID(source, opts);\n  }\n\n  throw new Error('DevErr: missing valid source');\n};\n\nexport {\n  generateUUID,\n};\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\n\nimport {STATUS_TYPES} from '../constants';\n\nconst checkExpectedReportIntervalStatus = props => {\n  if (props.device.expectedReportInterval) {\n    const currentDate = Date.now();\n    const reportedAtTime = new Date(props.device.reportedAt).getTime();\n    const reportTime = (currentDate - props.device.expectedReportInterval);\n    const hasNotReportedInTime = reportTime > reportedAtTime;\n    if (hasNotReportedInTime) {\n      props.items.push({\n        text: props.t('deviceStatus.deviceDidNotReportInTime'),\n        type: STATUS_TYPES.warning.name\n      });\n    }\n  }\n\n  return props;\n};\n\nconst checkCalculatedDeviceStatus = props => {\n  const isCalculatedDevice = _.find(props.calculations, calculation => {\n    return _.get(calculation, 'destination.mongoId') === props.device._id;\n  });\n  if (isCalculatedDevice) {\n    props.items.push({type: STATUS_TYPES.info.name, text: props.t('deviceStatus.calculated')});\n  }\n\n  return props;\n};\n\nconst checkConnectorStatus = props => {\n  const isConnector = !!props.device.downlinkQueue;\n  const shouldHaveConnector = _.some([props.device.tag, props.device.devEui, _.get(props.device, 'nodeInfo.nodeId'), props.device.gatewayEui]) && !isConnector;\n  if (props.device.connector && !_.isEmpty(props.device.connector)) {\n    props.items.push({\n      type: STATUS_TYPES.ok.name,\n      text: `${props.t('deviceStatus.connectedTo')}: ${_.get(props.device, 'connector.name', 'unknown')}`\n    });\n\n    if (props.device.vid && props.device.pid) {\n      const level = _.get(props.device, 'nodeInfo.commandClasses.0x0080.battery.level');\n      if (level) {\n        const levelText = level === '255' ? 'LOW' : `${level}%`;\n        switch (true) {\n          case (level <= 10):\n            props.items.push({type: STATUS_TYPES.error.name, text: `${props.t('deviceStatus.battery')}:  ${levelText}`});\n            break;\n          case (level < 30 && level > 10):\n            props.items.push({type: STATUS_TYPES.warning.name, text: `${props.t('deviceStatus.battery')}:  ${levelText}`});\n            break;\n          case (level <= 100 && level >= 30):\n            props.items.push({type: STATUS_TYPES.ok.name, text: `${props.t('deviceStatus.battery')}:  ${levelText}`});\n            break;\n          case (level === '255'):\n            props.items.push({type: STATUS_TYPES.error.name, text: props.t('deviceStatus.battery')});\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  } else if (shouldHaveConnector) {\n    props.items.push({type: STATUS_TYPES.error.name, text: props.t('deviceStatus.noConnectorSet')});\n  }\n\n  if (!props.device.synchronizedAt && (shouldHaveConnector || isConnector)) {\n    props.items.push({type: STATUS_TYPES.warning.name, text: props.t('deviceStatus.notSynchronizedWithIntegration')});\n  }\n\n  if (isConnector) {\n    props.items.push({\n      type: STATUS_TYPES.ok.name,\n      text: `${props.t('deviceStatus.connectedToIntegration')}: ${props.device.downlinkQueue}`\n    });\n  }\n\n  return props;\n};\n\nconst checkRSSIStatus = props => {\n  if (props.device.devEui) {\n    const signalStrength = Number(props.device.rssi) + Number(props.device.snr || 0);\n    if (Number.isNaN(signalStrength)) {\n      props.items.push({type: STATUS_TYPES.warning.name, text: props.t('deviceStatus.signalUnknown')});\n    } else {\n      const strongSignal = signalStrength > -110;\n      if (strongSignal) {\n        props.items.push({type: STATUS_TYPES.ok.name, text: props.t('deviceStatus.signalStrong')});\n      } else {\n        props.items.push({type: STATUS_TYPES.warning.name, text: props.t('deviceStatus.signalWeak')});\n      }\n    }\n  }\n\n  return props;\n};\n\nconst checkCoAPStatus = props => {\n  if (props.device.resourceName) { // coap\n    if (props.device.acknowledged) {\n      props.items.push({type: STATUS_TYPES.ok.name, text: props.t('deviceStatus.acknowledgedByCoaP')});\n    } else {\n      props.items.push({type: STATUS_TYPES.error.name, text: props.t('deviceStatus.notAcknowledgedByCoaP')});\n    }\n  }\n\n  return props;\n};\n\nconst checkValueStatus = props => {\n  const digital2 = _.get(props.device, 'value.digital2');\n  if (_.eq(digital2, 0)) {\n    props.items.push({type: STATUS_TYPES.ok.name, text: props.t('deviceStatus.waterLevelOK')});\n  }\n\n  if (_.eq(digital2, 1)) {\n    props.items.push({type: STATUS_TYPES.error.name, text: props.t('deviceStatus.waterLevelCritical')});\n  }\n\n  const occupancy = _.get(props.device, 'value.occupancy');\n  if (_.eq(occupancy, 0)) {\n    props.items.push({type: STATUS_TYPES.ok.name, text: props.t('deviceStatus.notOccupied')});\n  }\n\n  if (_.eq(occupancy, 1)) {\n    props.items.push({type: STATUS_TYPES.warning.name, text: props.t('deviceStatus.occupied')});\n  }\n\n  if (_.eq(occupancy, 2)) {\n    props.items.push({type: STATUS_TYPES.error.name, text: props.t('deviceStatus.occupied')});\n  }\n\n  if (_.lte(occupancy, 75)) {\n    props.items.push({type: STATUS_TYPES.ok.name, text: 'OK'});\n  }\n\n  const presence = _.get(props.device, 'value.presence.value');\n  if (presence) {\n    props.items.push({type: STATUS_TYPES.error.name, text: props.t('deviceStatus.occupied')});\n  }\n\n  const floodValue = _.get(props.device, 'value.flood.value');\n  if (_.gt(floodValue, 75)) {\n    props.items.push({type: STATUS_TYPES.error.name, text: props.t('deviceStatus.flooded')});\n  }\n\n  return props;\n};\n\nconst getDeviceStatus = (device, calculations, t) => {\n  const items = [];\n\n  if (!device) {\n    return [{\n      text: t('deviceStatus.unidentifiedNodeType'),\n      type: STATUS_TYPES.warning.name,\n    }];\n  }\n\n  const result = compose(\n    checkValueStatus,\n    checkCoAPStatus,\n    checkRSSIStatus,\n    checkConnectorStatus,\n    checkCalculatedDeviceStatus,\n    checkExpectedReportIntervalStatus,\n  )({device, calculations, t, items});\n\n  const worstStatus = _.reduce(result.items, (acc, item) => {\n    if (STATUS_TYPES[item.type].severity > acc.severity) {\n      return STATUS_TYPES[item.type];\n    }\n    return acc;\n  }, STATUS_TYPES.info);\n\n  return {\n    worstStatusType: worstStatus.name,\n    items: result.items,\n  };\n};\n\nexport default getDeviceStatus;\n","import {AxiosError} from 'axios';\n\nconst getRequestErrorMessage = (error: unknown) => {\n  return `${(error as AxiosError)?.response?.status} - ${(error as AxiosError)?.response?.data}`;\n};\n\nexport default getRequestErrorMessage;\n","import {getConfig} from '../yggio-config';\nimport {IMAGES} from '../constants';\n\n// right now we're just keeping the images straight in the backend\n\nconst getFullImageUrl = imageUrl => (\n  !imageUrl ? null : `${getConfig().restUrl}/${imageUrl}`\n);\n\nconst getLocationIconUrl = iconUrl => (\n  getFullImageUrl(iconUrl) || IMAGES.defaultLocationIcon\n);\n\nconst getBlueprintImageUrl = imageUrl => (\n  getFullImageUrl(imageUrl) || IMAGES.defaultBlueprintImage\n);\n\nconst getDeviceIconUrl = iconUrl => (\n  getFullImageUrl(iconUrl) || IMAGES.defaultDeviceIcon\n);\n\nexport {\n  getFullImageUrl,\n  getLocationIconUrl,\n  getBlueprintImageUrl,\n  getDeviceIconUrl,\n};\n","import {formatDistance, parseISO, getUnixTime} from 'date-fns';\n\nimport createReducer from './create-reducer';\nimport createStateLogger from './state-logger';\nimport {isValidLength} from './validation';\nimport createActionDispatches from './create-action-dispatches';\nimport memoizedInputsChecker from './memoized-inputs-checker';\nimport parseCsvFileToJson from './parse-csv-file-too-json';\nimport objectToQueryString from './object-to-query-string';\nimport organizationUtils from './organization-utils';\nimport resolveDeviceType from './resolve-device-type';\nimport {generateUUID} from './generate-uuid';\nimport createIdKeyedObject from './create-id-keyed-object';\nimport getRequestErrorMessage from './get-request-error-message';\n\nimport {\n  getFullImageUrl,\n  getBlueprintImageUrl,\n  getDeviceIconUrl,\n  getLocationIconUrl,\n} from './images';\n\nimport {\n  multiply,\n  divide,\n} from './general';\n\nconst formatTimeSinceLastReported = reportedAt => {\n  if (!reportedAt) {\n    return 'Never';\n  }\n\n  const unixReportedAt = getUnixTime(parseISO(reportedAt));\n  const unixNow = getUnixTime(new Date());\n\n  if (unixReportedAt > unixNow) {\n    return `in ${formatDistance(new Date(), parseISO(reportedAt))}`;\n  }\n  if (unixReportedAt <= unixNow) {\n    return `${formatDistance(new Date(), parseISO(reportedAt))} ago`;\n  }\n};\n\nexport {\n  createReducer,\n  createStateLogger,\n  isValidLength,\n  createActionDispatches,\n  memoizedInputsChecker,\n  parseCsvFileToJson,\n  getFullImageUrl,\n  getBlueprintImageUrl,\n  getDeviceIconUrl,\n  getLocationIconUrl,\n  objectToQueryString,\n  organizationUtils,\n  resolveDeviceType,\n  multiply,\n  divide,\n  generateUUID,\n  createIdKeyedObject,\n  formatTimeSinceLastReported,\n  getRequestErrorMessage,\n};\n","// memoized-inputs-checker\n\nconst memoizedInputsChecker = equalityCheck => {\n  // the mutable state\n  let prevValue = null;\n  // and the memoized equality check\n  const checkInputs = currValue => {\n    const isUnchanged = equalityCheck\n      ? equalityCheck(currValue, prevValue)\n      : currValue === prevValue;\n    if (isUnchanged) {\n      return true;\n    }\n    prevValue = currValue;\n    return false;\n  };\n  return checkInputs;\n};\n\nexport default memoizedInputsChecker;\n","import _ from 'lodash';\n\nconst objectToQueryString = params => {\n  if (!params) return '';\n  const array = _.map(params, (v, k) => {\n    return _([k, v]).map(encodeURIComponent).join('=');\n  });\n  return `?${_.join(array, '&')}`;\n};\n\nexport default objectToQueryString;\n","import _ from 'lodash';\n\n// ////\n// findUnit\n// ////\n\nconst findSubUnit = (currUnit, targetUnitId) => {\n  let subUnit = _.find(currUnit.children, child => {\n    return _.isEqual(targetUnitId, child._id);\n  });\n  if (subUnit) {\n    return subUnit;\n  }\n  _.each(currUnit.children, child => {\n    const foundUnit = findSubUnit(child, targetUnitId);\n    if (foundUnit) {\n      subUnit = foundUnit;\n      return false; // early return\n    }\n  });\n  return subUnit || null;\n};\n\nconst findUnit = (organization, targetUnitId) => {\n  const rootUnit = _.get(organization, 'rootUnit');\n  if (!rootUnit) {\n    return null;\n  }\n  if (targetUnitId === rootUnit._id) {\n    return rootUnit;\n  }\n  const subUnit = findSubUnit(rootUnit, targetUnitId);\n  return subUnit || null;\n};\n\n// ////\n// findUnitByGroupId\n// THESE SHOULD BE DEPRECATED & USAGE ELIMINATED\n// ////\n\n\nconst findSubUnitByGroupId = (currUnit, targetUnitGroupId) => {\n  let subUnit = _.find(currUnit.children, child => {\n    const groupIds = _.map(child.groups, group => group.groupId);\n    const includesTarget = _.includes(groupIds, targetUnitGroupId);\n    return includesTarget;\n  });\n  if (subUnit) {\n    return subUnit;\n  }\n  _.each(currUnit.children, child => {\n    const foundUnit = findSubUnitByGroupId(child, targetUnitGroupId);\n    if (foundUnit) {\n      subUnit = foundUnit;\n      return false; // early return\n    }\n  });\n  return subUnit || null;\n};\n\nconst findUnitByGroupId = (organization, targetUnitGroupId) => {\n  const rootUnit = _.get(organization, 'rootUnit');\n  if (!rootUnit) {\n    return null;\n  }\n  const groupIds = _.map(rootUnit.groups, group => group.groupId);\n  if (_.includes(groupIds, targetUnitGroupId)) {\n    return rootUnit;\n  }\n  const subUnit = findSubUnitByGroupId(rootUnit, targetUnitGroupId);\n  return subUnit || null;\n};\n\n// ////\n// getAllUnits\n// ////\n\nconst extractUnitDescendants = (unit, descendants) => {\n  _.each(unit.children, child => {\n    descendants.push(child); // MUTATE!! (this one collects ALL subunits)\n    extractUnitDescendants(child, descendants);\n  });\n  return descendants;\n};\n\nconst getAllUnits = organization => {\n  const rootUnit = _.get(organization, 'rootUnit');\n  if (!rootUnit) {\n    return [];\n  }\n  const allUnits = extractUnitDescendants(rootUnit, [rootUnit]);\n  return allUnits;\n};\n\n// ////\n// decomposeUnit\n// ////\n\nconst extractUnitPath = (unit, targetUnitId, prevPath) => {\n  const path = _.concat(prevPath, unit._id);\n  const isTargetUnit = _.isEqual(targetUnitId, unit._id);\n  if (isTargetUnit) {\n    return path;\n  }\n  let resolvedPath = null;\n  _.each(unit.children, child => {\n    const subPath = extractUnitPath(child, targetUnitId, path);\n    if (subPath) {\n      resolvedPath = subPath;\n      return false; // early return\n    }\n  });\n  return resolvedPath;\n};\n\nconst decomposeUnit = (organization, targetUnitId) => {\n  const unitPath = extractUnitPath(organization.rootUnit, targetUnitId, []);\n  if (!unitPath) {\n    return {};\n  }\n  const allUnits = getAllUnits(organization);\n  const unit = _.find(allUnits, unit => (unit._id === targetUnitId));\n  const descendants = extractUnitDescendants(unit, []);\n  const ancestors = _.filter(allUnits, unit => {\n    const isAncestor = (unit._id !== targetUnitId) && _.includes(unitPath, unit._id);\n    return isAncestor;\n  });\n  return {\n    unit,\n    unitPath,\n    ancestors,\n    descendants,\n  };\n};\n\n// ////\n//\n// ////\n\nconst replaceSubUnit = (unit, path, replacement) => {\n  if (unit._id !== path[0]) {\n    return unit;\n  }\n  if (path.length === 1) {\n    return replacement;\n  }\n  const nextPath = path.slice(1);\n  const children = _.compact(_.map(unit.children, child => {\n    const replacementChild = replaceSubUnit(child, nextPath, replacement);\n    return replacementChild;\n  }));\n  return {\n    ...unit,\n    children,\n  };\n};\n\n\nconst replaceUnit = (organization, path, replacement) => {\n  const rootUnit = replaceSubUnit(organization.rootUnit, path, replacement);\n  return {\n    ...organization,\n    rootUnit,\n  };\n};\n\n// ////\n// exports\n// ////\n\nconst organizationUtils = {\n  findUnit,\n  findUnitByGroupId,\n  getAllUnits,\n  decomposeUnit,\n  replaceUnit,\n};\n\n\nexport default organizationUtils;\n","import csvtojson from 'csvtojson';\nimport _ from 'lodash';\n\nconst parseCsvFileToJson = async (file: File) => {\n  const readFileAsync = async () => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onabort = () => reject(Error('File reading was aborted.'));\n      reader.onerror = () => reject(Error('Could not read the file.'));\n      reader.onload = async () => {\n        await csvtojson({\n          delimiter: 'auto', // delimiter will be auto-detected (by best attempt)\n        })\n          .fromString(reader.result as string)\n          .then(foundItems => {\n            if (foundItems.length > 0) {\n              resolve(foundItems);\n            } else {\n              reject(Error('Found no valid lines.'));\n            }\n          });\n      };\n      reader.readAsText(file);\n    });\n  };\n  const extension = _.get(file, 'name').split('.')[1];\n  if (extension !== 'csv') {\n    throw Error('The file is not a CSV file.');\n  }\n  return readFileAsync();\n};\n\nexport default parseCsvFileToJson;\n","import fp from 'lodash/fp';\nimport {DEVICE_TYPES} from '../constants';\n\nconst hasTruthy = fp.any(Boolean); // Checks if any item in collection is true\n\nconst isLoRaType = device => {\n  const hasDevEui = !!device?.devEui;\n  const isLoRa = hasTruthy([hasDevEui]);\n  return isLoRa && DEVICE_TYPES.lora;\n};\n\nconst isBox2Type = device => {\n  const hasTag = !!device?.tag;\n  const isBox2 = hasTruthy([hasTag]);\n  return isBox2 && DEVICE_TYPES.box2;\n};\n\nconst isCalculatedType = device => {\n  const hasCalculations = fp.compose(\n    fp.includes('calculations'),\n    fp.keys,\n  )(device);\n  const isCalculated = hasTruthy([hasCalculations]);\n  return isCalculated && DEVICE_TYPES.calculated;\n};\n\nconst isGenericType = device => {\n  const hasSecret = !!device?.secret;\n  const isGeneric = hasTruthy([hasSecret]);\n  return isGeneric && DEVICE_TYPES.generic;\n};\n\nconst isConnector = device => {\n  const hasDownlinkQueue = !!device?.downlinkQueue;\n  const isConnector = hasTruthy([hasDownlinkQueue]);\n  return isConnector && DEVICE_TYPES.connector;\n};\n\nconst isChirpStackDevice = device => {\n  const hasChirpStackConnector = device?.connector?.downlinkQueue === 'ChirpStack';\n  const isChirpStackDevice = hasTruthy([hasChirpStackConnector]);\n  return isChirpStackDevice && DEVICE_TYPES.chirpStack;\n};\n\nconst typeCreators = [\n  isBox2Type,\n  isLoRaType,\n  isCalculatedType,\n  isGenericType,\n  isConnector,\n  isChirpStackDevice,\n];\n\nconst resolveDeviceType = device => {\n  const invokeTypeCreator = typeCreator => typeCreator(device);\n  const type = fp.compose(\n    fp.toString,\n    fp.compact,\n    fp.map(invokeTypeCreator),\n  )(typeCreators);\n\n  return type || 'Unknown';\n};\n\nexport default resolveDeviceType;\n","import _ from 'lodash';\nimport {ENV_TYPES} from '../constants';\nimport {getConfig} from '../yggio-config';\n\n// NOTE: This is mimicking the redux-logger package\n\nconst STYLES = {\n  title1: [\n    `color: #7E7E7E`,\n    `font-weight: normal`,\n  ],\n  title2: [\n    `color: #BBC5CF`,\n    `font-weight: bold`,\n  ],\n  title3: [\n    `color: #7E7E7E`,\n    `font-weight: normal`,\n  ],\n  prevState: [\n    `color: #9E9E9E`,\n    `font-weight: bold`,\n  ],\n  action: [\n    `color: #03A9F4`,\n    `font-weight: bold`,\n  ],\n  nextState: [\n    `color: #4CAF50`,\n    `font-weight: bold`,\n  ],\n};\n\nconst getStyle = path => STYLES[path].join('; ');\n\nconst repeat = (str, times) => (new Array(times + 1)).join(str);\nconst pad = (num, maxLength) => repeat('0', maxLength - num.toString().length) + num;\nconst getTime = () => {\n  const time = new Date();\n  return `${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`;\n};\n\n/**\n *\n * @param reducer\n * @returns {function(*=, *=): *}\n */\nconst logState = reducer => (state, action) => {\n  const nextState = reducer(state, action);\n  console.groupCollapsed(`%c action %c${action.type} %c@ ${getTime()}`, getStyle('title1'), getStyle('title2'), getStyle('title3'));\n  console.info('%cprev state', getStyle('prevState'), state);\n  console.info('%caction', getStyle('action'), action);\n  console.info('%cnext state', getStyle('nextState'), nextState);\n  console.groupEnd();\n  return nextState;\n};\n\nconst createStateLogger = reducer => {\n  if (_.eq(getConfig().nodeEnv, ENV_TYPES.development)) {\n    return logState(reducer);\n  }\n  return reducer;\n};\n\nexport default createStateLogger;\n","import _ from 'lodash';\nimport translation from '../../locales/en/translation.json';\n\n// Used by stories\n\nconst t = path => _.get(translation, path, 'NO_TRANSLATION_FOUND');\n\nexport default t;\n","import {size, gte, lte} from 'lodash/fp';\n\nconst isValidLength = (collection, minLength = 1, maxLength = 5) => {\n  const collectionLength = size(collection);\n  return gte(collectionLength, minLength) && lte(collectionLength, maxLength);\n};\n\nexport {\n  isValidLength,\n};\n","import React from 'react';\nimport {Icon} from 'react-icons-kit';\nimport {ic_gps_fixed as crosshairsIcon} from 'react-icons-kit/md/ic_gps_fixed';\nimport {ic_delete as deleteIcon} from 'react-icons-kit/md/ic_delete';\nimport {pencil as editIcon} from 'react-icons-kit/fa/pencil';\nimport {chevronDown as chevronDownIcon} from 'react-icons-kit/fa/chevronDown';\nimport {chevronUp as chevronUpIcon} from 'react-icons-kit/fa/chevronUp';\nimport {IconWrapper} from './styled';\n\nconst DEFAULT_ICON_SIZE = 20;\n\nconst MapPointerIconButton = props => {\n  return (\n    <IconWrapper {...props}>\n      <Icon size={DEFAULT_ICON_SIZE} icon={crosshairsIcon} />\n    </IconWrapper>\n  );\n};\n\nconst DeleteIconButton = props => {\n  return (\n    <IconWrapper {...props}>\n      <Icon size={DEFAULT_ICON_SIZE} icon={deleteIcon} />\n    </IconWrapper>\n  );\n};\n\nconst EditIconButton = props => {\n  return (\n    <IconWrapper {...props}>\n      <Icon size={DEFAULT_ICON_SIZE} icon={editIcon} />\n    </IconWrapper>\n  );\n};\n\nconst ChevronDownIconButton = props => {\n  return (\n    <IconWrapper {...props}>\n      <Icon size={DEFAULT_ICON_SIZE} icon={chevronDownIcon} />\n    </IconWrapper>\n  );\n};\n\nconst ChevronUpIconButton = props => {\n  return (\n    <IconWrapper {...props}>\n      <Icon size={DEFAULT_ICON_SIZE} icon={chevronUpIcon} />\n    </IconWrapper>\n  );\n};\n\nexport {\n  MapPointerIconButton,\n  DeleteIconButton,\n  EditIconButton,\n  ChevronDownIconButton,\n  ChevronUpIconButton,\n};\n","import React from 'react';\nimport {\n  MapPointerIconButton,\n  DeleteIconButton,\n  EditIconButton,\n  ChevronDownIconButton,\n} from './icons';\nimport Button from '../../components/button';\nimport {COLORS} from '../../constants';\n\nconst baseButtonOptions = {\n  width: '120px',\n  height: '40px',\n  borderRadius: '5px'\n};\n\nconst SuccessButton = props => {\n  const style = {\n    color: COLORS.black,\n    background: COLORS.greenLight,\n    backgroundHover: COLORS.greenLightAlt,\n  };\n  return (\n    <Button\n      {...props}\n      {...style}\n      {...baseButtonOptions}\n    />\n  );\n};\n\nconst DangerButton = props => {\n  const style = {\n    color: COLORS.white,\n    background: COLORS.red,\n    backgroundHover: COLORS.redAlt,\n  };\n  return (\n    <Button\n      {...props}\n      {...style}\n      {...baseButtonOptions}\n    />\n  );\n};\n\nconst RegularButton = props => {\n  const style = {\n    color: COLORS.white,\n    background: COLORS.greyDarkAlt,\n    backgroundHover: COLORS.greyDark,\n  };\n  return (\n    <Button\n      {...props}\n      {...style}\n      {...baseButtonOptions}\n    />\n  );\n};\n\nconst DarkRegularButton = props => {\n  const style = {\n    color: COLORS.greyDark,\n    background: COLORS.greyDarkAlt,\n    backgroundHover: COLORS.greyDarkAlt,\n  };\n  return (\n    <Button\n      {...props}\n      {...style}\n      {...baseButtonOptions}\n    />\n  );\n};\n\nconst ControlButton = props => {\n  const style = {\n    width: '25px',\n    height: '25px',\n    borderRadius: '3px',\n    color: COLORS.white,\n    background: COLORS.greenRacing,\n    backgroundHover: COLORS.greenMedium,\n  };\n  return (\n    <Button\n      {...props}\n      {...style}\n    />\n  );\n};\n\nexport {\n  SuccessButton,\n  DangerButton,\n  RegularButton,\n  DarkRegularButton,\n  ControlButton,\n\n  MapPointerIconButton,\n  DeleteIconButton,\n  EditIconButton,\n  ChevronDownIconButton,\n};\n","import styled from 'styled-components';\nimport {COLORS} from '../../constants';\n\nconst IconWrapper = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid ${COLORS.transparent};\n  border-radius: 2px;\n  color: ${COLORS.black};\n  transition: color 0.2s;\n\n  &:hover {\n    transition: color 0.2s;\n    color: ${COLORS.greenLight};\n  }\n`;\n\nexport {\n  IconWrapper,\n};\n","import React from 'react';\nimport useState from 'storybook-addon-state';\n\nimport ContextualParametersEditor from './index';\nimport {YggioFontDecorator} from '../../decorators';\n\nconst defaultValue = [\n  {name: 'Placement', value: 'Floor'},\n  {name: 'Installer', value: 'Markus'},\n];\n\nconst main = {\n  title: 'Yggio/Contextual Parameters Editor',\n  component: ContextualParametersEditor,\n  decorators: [YggioFontDecorator],\n  argTypes: {\n\n  }\n};\n\nconst Template = args => {\n  const [parameters, set] = useState('parameters', defaultValue);\n  return (\n    <ContextualParametersEditor\n      onChange={parameters => set(parameters)}\n      value={parameters}\n      {...args}\n    />\n  );\n};\n\nconst Primary = Template.bind({});\nPrimary.args = {\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","import _ from 'lodash';\nimport {confirmAlert} from 'react-confirm-alert';\n\nconst onAddSave = props => () => {\n  const name = props.formInputs.name.value;\n  if (_.some(props.value, ['name', name])) {\n    showNameConflicPromt(name);\n  } else {\n    const modifiedParameters = [...props.value];\n    modifiedParameters.push({\n      name,\n      value: props.formInputs.value.value,\n    });\n    props.onChange(modifiedParameters);\n    props.exitAddMode();\n    props.resetForm();\n  }\n};\n\nconst onEditSave = props => index => {\n  const name = props.formInputs.name.value;\n  const parametersExcludingCurrent = [...props.value];\n  _.pullAt(parametersExcludingCurrent, index);\n  if (_.some(parametersExcludingCurrent, ['name', name])) {\n    showNameConflicPromt(name);\n  } else {\n    const modifiedParameters = [...props.value];\n    modifiedParameters[index] = {\n      name: props.formInputs.name.value,\n      value: props.formInputs.value.value\n    };\n    if (!_.isEqual(props.value[index], modifiedParameters[index])) {\n      props.onChange(modifiedParameters);\n    }\n    props.cancelEditing();\n    props.resetForm();\n  }\n};\n\nconst onRemove = props => index => {\n  const performRemove = () => {\n    const modifiedParameters = [...props.value];\n    _.pullAt(modifiedParameters, [index]);\n    props.onChange(modifiedParameters);\n  };\n  if (props.showRemovePromt) {\n    showRemovePromt(props.value[index].name, performRemove);\n  } else {\n    performRemove();\n  }\n};\n\nconst onCancelEditing = props => () => {\n  props.cancelEditing();\n  props.resetForm();\n};\n\nconst onCancelAdding = props => () => {\n  props.exitAddMode();\n  props.resetForm();\n};\n\nconst onEditStart = props => index => {\n  const {name, value} = props.value[index];\n  props.setInputValue('name', name);\n  props.setInputValue('value', value);\n  props.startEditingParameter(index);\n};\n\nconst showNameConflicPromt = name => {\n  confirmAlert({\n    title: 'Name conflict',\n    message: `There already exists a parameter with name: \"${name}\"`,\n    buttons: [{label: 'Ok'}]\n  });\n};\n\nconst showRemovePromt = (name, performRemove) => {\n  const buttons = [\n    {\n      label: 'Yes',\n      onClick: () => performRemove(),\n    },\n    {\n      label: 'No',\n      onClick: () => {}\n    }\n  ];\n  confirmAlert({\n    title: 'Remove contextual parameter?',\n    message: `Are you sure you want the remove: \"${name}\"?`,\n    buttons,\n  });\n};\n\nexport default {\n  onAddSave,\n  onEditSave,\n  onRemove,\n  onEditStart,\n  onCancelEditing,\n  onCancelAdding,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\nimport {Icon} from 'react-icons-kit';\nimport {ic_do_not_disturb as cancelIcon} from 'react-icons-kit/md/ic_do_not_disturb';\nimport {checkmark as checkIcon} from 'react-icons-kit/ionicons/checkmark';\nimport {ic_clear as removeIcon} from 'react-icons-kit/md/ic_clear';\nimport {ic_mode_edit as editIcon} from 'react-icons-kit/md/ic_mode_edit';\n\nimport {withState, withEvents} from '../../hocs';\nimport {isFormValid, getFormShape} from '../../utils/form-wizard';\nimport Spinner from '../../components/spinner';\nimport {generalState, formState} from './state';\nimport events from './events';\nimport {\n  Container,\n  Table,\n  AddButton,\n  SpinnerContainer,\n  ParameterName,\n  ParameterValue,\n  TableButton,\n  StyledInput,\n  TableHeading,\n} from './styled';\n\n// BASIC\n\nconst BasicContextualParametersEditor = props => {\n  return (\n    <Container\n      margin={props.margin}\n      maxWidth={props.maxWidth}\n    >\n      {props.value.length > 0 && (\n        <Table showTopBorder={!props.showTableHeading}>\n          {props.showTableHeading && (\n            <>\n              <TableHeading>Name</TableHeading>\n              <TableHeading>Value</TableHeading>\n              <TableHeading />\n              <TableHeading />\n            </>\n          )}\n          {_.map(props.value, (parameter, index) => (\n            <React.Fragment key={parameter.name}>\n              {props.editingParameter !== index && (\n                <TableRow {...props} parameter={parameter} index={index} />\n              )}\n              {props.editingParameter === index && (\n                <TableRowEdit {...props} parameter={parameter} index={index} />\n              )}\n            </React.Fragment>\n          ))}\n        </Table>\n      )}\n      {(!props.isInAddMode && !props.isLoading) && (\n        <AddButton\n          onClick={() => props.enterAddMode()}\n          disabled={props.editingParameter !== null}\n        >\n          + Add\n        </AddButton>\n      )}\n      {(props.isInAddMode && !props.isLoading) && (\n        <AddForm {...props} />\n      )}\n      {props.isLoading && (\n        <SpinnerContainer>\n          <Spinner size={18} color={'#555'} />\n        </SpinnerContainer>\n      )}\n    </Container>\n  );\n};\n\nconst TableRow = props => {\n  const disabled = props.editingParameter !== null || props.isInAddMode || props.isLoading;\n  return (\n    <>\n      <ParameterName disabled={disabled}>\n        {props.parameter.name}\n      </ParameterName>\n      <ParameterValue disabled={disabled}>\n        {props.parameter.value}\n      </ParameterValue>\n      <TableButton\n        onClick={() => !disabled && props.onEditStart(props.index)}\n        disabled={disabled}\n        hoverColor={'black'}\n        title={'Edit'}\n      >\n        <Icon icon={editIcon} size={14} />\n      </TableButton>\n      <TableButton\n        onClick={() => !disabled && props.onRemove(props.index)}\n        disabled={disabled}\n        hoverColor={'red'}\n        title={'Delete'}\n      >\n        <Icon icon={removeIcon} size={17} />\n      </TableButton>\n    </>\n  );\n};\n\nconst TableRowEdit = props => {\n  const disabled = !isFormValid(props.formInputs) || props.isLoading;\n  const onKeyPressed = evt => {\n    if (evt.key === 'Enter' && !disabled) {\n      props.onEditSave(props.index);\n    }\n  };\n  return (\n    <>\n      <ParameterName>\n        <StyledInput\n          type=\"text\"\n          onChange={evt => props.setInputValue('name', evt.target.value)}\n          value={props.formInputs.name.value}\n          autoFocus\n          placeholder={'Name'}\n          onKeyPress={onKeyPressed}\n        />\n      </ParameterName>\n      <ParameterValue>\n        <StyledInput\n          type=\"text\"\n          onChange={evt => props.setInputValue('value', evt.target.value)}\n          value={props.formInputs.value.value}\n          placeholder={'Value'}\n          onKeyPress={onKeyPressed}\n        />\n      </ParameterValue>\n      <TableButton\n        onClick={() => props.onCancelEditing()}\n        hoverColor={'black'}\n        title={'Cancel'}\n      >\n        <Icon icon={cancelIcon} size={14} />\n      </TableButton>\n      <TableButton\n        onClick={() => !disabled && props.onEditSave(props.index)}\n        hoverColor={'green'}\n        title={'Save'}\n        disabled={disabled}\n      >\n        <Icon icon={checkIcon} size={15} />\n      </TableButton>\n    </>\n  );\n};\n\nconst AddForm = props => {\n  const disabled = !isFormValid(props.formInputs) || props.isLoading;\n  const onKeyPressed = evt => {\n    if (evt.key === 'Enter' && !disabled) {\n      events.onAddSave(props);\n    }\n  };\n  return (\n    <Table showTopBorder>\n      <ParameterName>\n        <StyledInput\n          type=\"text\"\n          onChange={evt => props.setInputValue('name', evt.target.value)}\n          value={props.formInputs.name.value}\n          autoFocus\n          placeholder={'Name'}\n          onKeyPress={onKeyPressed}\n        />\n      </ParameterName>\n      <ParameterValue>\n        <StyledInput\n          type=\"text\"\n          onChange={evt => props.setInputValue('value', evt.target.value)}\n          value={props.formInputs.value.value}\n          placeholder={'Value'}\n          onKeyPress={onKeyPressed}\n        />\n      </ParameterValue>\n      <TableButton\n        onClick={() => props.onCancelAdding()}\n        hoverColor={'black'}\n        title={'Cancel'}\n      >\n        <Icon icon={cancelIcon} size={14} />\n      </TableButton>\n      <TableButton\n        onClick={() => !disabled && props.onAddSave()}\n        hoverColor={'green'}\n        title={'Save'}\n        disabled={disabled}\n      >\n        <Icon icon={checkIcon} size={14} />\n      </TableButton>\n    </Table>\n  );\n};\n\nBasicContextualParametersEditor.propTypes = exact({\n  // from top\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.array.isRequired,\n  showRemovePromt: PropTypes.bool,\n  showTableHeading: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  margin: PropTypes.string,\n  maxWidth: PropTypes.string,\n  // from state\n  enterAddMode: PropTypes.func,\n  exitAddMode: PropTypes.func,\n  startEditingParameter: PropTypes.func,\n  cancelEditing: PropTypes.func,\n  isInAddMode: PropTypes.bool,\n  editingParameter: PropTypes.number,\n  // from events\n  onAddSave: PropTypes.func,\n  onEditSave: PropTypes.func,\n  onRemove: PropTypes.func,\n  onEditStart: PropTypes.func,\n  onCancelEditing: PropTypes.func,\n  onCancelAdding: PropTypes.func,\n  // from form state\n  ...getFormShape({\n    name: PropTypes.string,\n    value: PropTypes.string,\n  }),\n});\n\n// RAW\n\nconst ContextualParametersEditor = compose(\n  withState(generalState),\n  withState(formState),\n  withEvents(events),\n)(BasicContextualParametersEditor);\n\nContextualParametersEditor.propTypes = exact({\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.array.isRequired,\n  showRemovePromt: PropTypes.bool,\n  showTableHeading: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  margin: PropTypes.string,\n  maxWidth: PropTypes.string,\n});\n\nexport default ContextualParametersEditor;\n","import {\n  generateForm,\n  inputValidators,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../utils/form-wizard';\n\nconst formConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n        inputValidators.nonEmptyTrimmedString('Cannot only contain whitespace'),\n      ]\n    }\n  },\n  value: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a value'),\n        inputValidators.nonEmptyTrimmedString('Cannot only contain whitespace'),\n      ]\n    }\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","const ACTION_TYPES = {\n  enterAddMode: 'enterAddMode',\n  exitAddMode: 'exitAddMode',\n  startEditingParameter: 'startEditingParameter',\n  cancelEditing: 'cancelEditing',\n};\n\nconst actions = {\n  enterAddMode: () => ({\n    type: ACTION_TYPES.enterAddMode,\n  }),\n  exitAddMode: () => ({\n    type: ACTION_TYPES.exitAddMode,\n  }),\n  startEditingParameter: index => ({\n    type: ACTION_TYPES.startEditingParameter,\n    payload: {index},\n  }),\n  cancelEditing: () => ({\n    type: ACTION_TYPES.cancelEditing,\n  }),\n};\n\nconst defaultState = {\n  isInAddMode: false,\n  editingParameter: null,\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.enterAddMode: {\n      return {\n        ...state,\n        isInAddMode: true,\n      };\n    }\n\n    case ACTION_TYPES.exitAddMode: {\n      return {\n        ...state,\n        isInAddMode: false,\n      };\n    }\n\n    case ACTION_TYPES.startEditingParameter: {\n      const {index} = payload;\n      return {\n        ...state,\n        editingParameter: index,\n      };\n    }\n\n    case ACTION_TYPES.cancelEditing: {\n      return {\n        ...state,\n        editingParameter: null,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","import generalState from './general';\nimport formState from './form';\n\nexport {\n  generalState,\n  formState,\n};\n","import styled, {css} from 'styled-components';\n\nconst Container = styled.div`\n  width: 100%;\n  margin: ${({margin}) => margin || '0'};\n  max-width: ${({maxWidth}) => maxWidth || '100%'};\n  font-size: 13px;\n`;\n\nconst Table = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 34px 34px;\n  margin: 0 0 10px 0;\n  ${({showTopBorder}) => showTopBorder && css`\n    border-top: 1px solid #bbb;\n  `};\n`;\n\nconst TableHeading = styled.div`\n  padding-bottom: 5px;\n  font-weight: bold;\n  border-bottom: 1px solid #bbb;\n`;\n\nconst AddButton = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  height: 32px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px dashed ${({disabled}) => (disabled ? '#bbb' : '#999')};\n  border-radius: 3px;\n  cursor: ${({disabled}) => (disabled ? 'default' : 'pointer')};\n  color: ${({disabled}) => (disabled ? '#bbb' : 'black')};\n  user-select: none;\n  &:hover {\n    ${({disabled}) => !disabled && css`\n      background: #f5f5f5;\n    `};\n  }\n`;\n\nconst SpinnerContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ParameterName = styled.div`\n  height: 32px;\n  border-width: 0 1px 1px 0;\n  &:nth-child(1n) {\n    border-left-width: 1px;\n  }\n  border-color: #bbb;\n  border-style: solid;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  padding: 0 0 0 9px;\n  color: ${({disabled}) => (disabled ? '#bbb' : 'black')};\n`;\n\nconst ParameterValue = styled.div`\n  height: 32px;\n  border: 1px solid #bbb;\n  border-top: none;\n  border-left: none;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  padding: 0 0 0 9px;\n  color: ${({disabled}) => (disabled ? '#bbb' : 'black')};\n`;\n\nconst TableButton = styled.div`\n  height: 32px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid #bbb;\n  border-top: none;\n  border-left: none;\n  background: #eee;\n  cursor: ${({disabled}) => (disabled ? 'default' : 'pointer')};\n  color: ${({disabled}) => (disabled ? '#bbb' : '#333')};\n  &:hover {\n    outline: none;\n    ${({disabled}) => !disabled && css`\n      color: ${({hoverColor}) => hoverColor || 'black'};\n      background: #ddd;\n    `};\n  }\n`;\n\nconst StyledInput = styled.input`\n  border: none;\n  outline: none;\n  height: 30px;\n  width: 100%;\n`;\n\nexport {\n  Container,\n  Table,\n  TableHeading,\n  AddButton,\n  SpinnerContainer,\n  ParameterName,\n  ParameterValue,\n  TableButton,\n  StyledInput,\n};\n","const DEFAULTS = {\n  centered: false,\n  contentWidth: 800,\n  title: 'Yggio',\n};\n\nconst CONNECTIVITY_STATES = {\n  connected: 'connected',\n  online: 'online',\n  offline: 'offline',\n};\n\nconst COLORS = {\n  yellow: '#FFDB5A',\n  red: '#FF7B7B',\n};\n\nexport {\n  DEFAULTS,\n  CONNECTIVITY_STATES,\n  COLORS,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {compose} from 'lodash/fp';\nimport {useIsFetching} from 'react-query';\n\nimport state from './state';\nimport {withState} from '../../hocs';\nimport {CONNECTIVITY_STATES} from './constants';\n\nimport {\n  Bar,\n  ContentWrapper,\n  Section,\n} from './styled';\n\nimport Logo from './sub-components/logo';\nimport HorizontalMenu from './sub-components/horizontal-menu';\nimport VerticalMenu from './sub-components/vertical-menu';\nimport MenuButton from './sub-components/menu-button';\nimport ConnectWidget from './sub-components/connect-widget';\nimport LanguageWidget from './sub-components/language-widget';\nimport UserWidget from './sub-components/user-widget';\nimport DocsWidget from './sub-components/docs-widget';\nimport Spinner from '../../components/spinner';\nimport {COLORS} from '../../constants';\n\nconst BasicNavBar = props => {\n  const isFetching = useIsFetching();\n  return (\n    <Bar>\n      <ContentWrapper\n        centered={props.centered}\n        contentWidth={props.contentWidth}\n      >\n        <Section>\n          <Logo\n            router={props.router}\n            history={props.history}\n            title={props.title}\n            username={_.get(props, 'user.username')}\n          />\n\n          <div style={{width: '30px'}}>\n            {!!isFetching && (\n              <Spinner color={COLORS.greyLight} size={22} margin={'0 10px 0 0'} />\n            )}\n          </div>\n          <HorizontalMenu\n            router={props.router}\n            links={props.links}\n            activeLink={props.activeLink}\n          />\n        </Section>\n        <Section>\n          {!!_.size(props.links) &&\n            <MenuButton\n              isShowingMenuDropdown={props.isShowingMenuDropdown}\n              showMenuDropdown={props.showMenuDropdown}\n              closeAllDropdowns={props.closeAllDropdowns}\n            />}\n          {!!props.isShowingMenuDropdown && (\n            <VerticalMenu\n              router={props.router}\n              links={props.links}\n              activeLink={props.activeLink}\n            />\n          )}\n          {(props.connectivityState === CONNECTIVITY_STATES.online ||\n              props.connectivityState === CONNECTIVITY_STATES.offline) &&\n                <ConnectWidget\n                  connectivityState={props.connectivityState}\n                  isShowingConnectivityDropdown={props.isShowingConnectivityDropdown}\n                  showConnectivityDropdown={props.showConnectivityDropdown}\n                  closeAllDropdowns={props.closeAllDropdowns}\n                  t={props.t}\n                />}\n          <DocsWidget\n            isShowingDocsDropdown={props.isShowingDocsDropdown}\n            showDocsDropdown={props.showDocsDropdown}\n            closeAllDropdowns={props.closeAllDropdowns}\n            t={props.t}\n          />\n          <LanguageWidget\n            updateUser={props.updateUser}\n            user={props.user}\n            isShowingLanguageDropdown={props.isShowingLanguageDropdown}\n            showLanguageDropdown={props.showLanguageDropdown}\n            closeAllDropdowns={props.closeAllDropdowns}\n            t={props.t}\n            changeLanguage={props.changeLanguage}\n            currentLanguage={props.currentLanguage}\n          />\n          <UserWidget\n            username={_.get(props, 'user.username')}\n            isShowingUserDropdown={props.isShowingUserDropdown}\n            showUserDropdown={props.showUserDropdown}\n            closeAllDropdowns={props.closeAllDropdowns}\n            signOut={props.signOut}\n            t={props.t}\n          />\n        </Section>\n      </ContentWrapper>\n    </Bar>\n  );\n};\n\nBasicNavBar.propTypes = {\n  // from top\n  title: PropTypes.string,\n  links: PropTypes.array,\n  activeLink: PropTypes.string,\n  user: PropTypes.object,\n  connectivityState: PropTypes.string,\n  centered: PropTypes.bool,\n  contentWidth: PropTypes.number,\n  signOut: PropTypes.func.isRequired,\n  t: PropTypes.func.isRequired,\n  changeLanguage: PropTypes.func.isRequired,\n  currentLanguage: PropTypes.string.isRequired,\n  // from router\n  history: PropTypes.object,\n  // from state\n  isShowingMenuDropdown: PropTypes.bool,\n  isShowingLanguageDropdown: PropTypes.bool,\n  isShowingUserDropdown: PropTypes.bool,\n  isShowingDocsDropdown: PropTypes.bool,\n  isShowingConnectivityDropdown: PropTypes.bool,\n  showMenuDropdown: PropTypes.func,\n  showLanguageDropdown: PropTypes.func,\n  showUserDropdown: PropTypes.func,\n  showDocsDropdown: PropTypes.func,\n  showConnectivityDropdown: PropTypes.func,\n  closeAllDropdowns: PropTypes.func,\n};\n\nconst NavBar = compose(\n  withState(state),\n)(BasicNavBar);\n\nNavBar.propTypes = {\n  title: PropTypes.string,\n  links: PropTypes.array,\n  activeLink: PropTypes.string,\n  user: PropTypes.object,\n  connectivityState: PropTypes.string,\n  centered: PropTypes.bool,\n  contentWidth: PropTypes.number,\n  signOut: PropTypes.func.isRequired,\n  t: PropTypes.func.isRequired,\n  changeLanguage: PropTypes.func.isRequired,\n  currentLanguage: PropTypes.string.isRequired,\n};\n\nexport default NavBar;\n","import React from 'react';\nimport ReactRouter from 'storybook-react-router';\n\nimport Navbar from './index';\nimport t from '../../utils/translation-prop';\nimport {YggioFontDecorator} from '../../decorators';\n\n// NOTE: Proptypes doesent seem to work so there are no autogenerated controls\n\nconst main = {\n  title: 'Yggio/Navbar',\n  component: Navbar,\n  decorators: [YggioFontDecorator, ReactRouter()],\n  parameters: {\n    layout: 'fullscreen',\n  }\n};\n\nconst Template = args => (\n  <Navbar\n    {...args}\n    t={t}\n    changeLanguage={() => null}\n    signOut={() => null}\n  />\n);\n\nconst Primary = Template.bind({});\nPrimary.args = {\n  currentLanguage: 'en',\n  links: [\n    {name: 'Devices', url: '/devices'},\n    {name: 'Locations', url: '/locations'},\n    {name: 'Organizations', url: '/organizations'},\n  ],\n  activeLink: '/devices',\n};\n\nexport default main;\nexport {\n  Primary,\n};\n","const ACTION_TYPES = {\n  showMenuDropdown: 'showMenuDropdown',\n  showLanguageDropdown: 'showLanguageDropdown',\n  showUserDropdown: 'showUserDropdown',\n  showDocsDropdown: 'showDocsDropdown',\n  showConectivityDropdown: 'showConectivityDropdown',\n  closeAllDropdowns: 'closeAllDropdowns',\n};\n\nconst actions = {\n  showMenuDropdown: () => ({\n    type: ACTION_TYPES.showMenuDropdown,\n  }),\n  showLanguageDropdown: () => ({\n    type: ACTION_TYPES.showLanguageDropdown,\n  }),\n  showUserDropdown: () => ({\n    type: ACTION_TYPES.showUserDropdown,\n  }),\n  showDocsDropdown: () => ({\n    type: ACTION_TYPES.showDocsDropdown,\n  }),\n  showConnectivityDropdown: () => ({\n    type: ACTION_TYPES.showConectivityDropdown,\n  }),\n  closeAllDropdowns: () => ({\n    type: ACTION_TYPES.closeAllDropdowns,\n  }),\n};\n\nconst defaultState = {\n  isShowingMenuDropdown: false,\n  isShowingLanguageDropdown: false,\n  isShowingUserDropdown: false,\n  isShowingDocsDropdown: false,\n  isShowingConnectivityDropdown: false,\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type} = action;\n  switch (type) {\n\n    case ACTION_TYPES.showMenuDropdown: {\n      return {\n        ...defaultState,\n        isShowingMenuDropdown: true,\n      };\n    }\n\n    case ACTION_TYPES.showLanguageDropdown: {\n      return {\n        ...defaultState,\n        isShowingLanguageDropdown: true,\n      };\n    }\n\n    case ACTION_TYPES.showUserDropdown: {\n      return {\n        ...defaultState,\n        isShowingUserDropdown: true,\n      };\n    }\n\n    case ACTION_TYPES.showDocsDropdown: {\n      return {\n        ...defaultState,\n        isShowingDocsDropdown: true,\n      };\n    }\n\n    case ACTION_TYPES.showConectivityDropdown: {\n      return {\n        ...defaultState,\n        isShowingConnectivityDropdown: true,\n      };\n    }\n\n    case ACTION_TYPES.closeAllDropdowns: {\n      return defaultState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  defaultState,\n  reducer,\n};\n","import styled, {css} from 'styled-components';\n\nimport {COLORS, MEASUREMENTS} from '../../constants';\nimport {DEFAULTS} from './constants';\n\nconst Bar = styled.div`\n  position: fixed;\n  z-index: 9999;\n  top: 0;\n  display: flex;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 100%;\n  padding: 0 12px;\n  height: ${MEASUREMENTS.navDefaultHeight};\n  background: ${COLORS.greenRacing};\n  color: ${COLORS.white};\n  user-select: none;\n`;\n\nconst ContentWrapper = styled.div`\n  width: 100%;\n  ${({centered = DEFAULTS.centered, contentWidth = DEFAULTS.contentWidth}) => centered && `max-width: ${contentWidth}px`};\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Section = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst navButtonStyles = css`\n  height: 32px;\n  display: flex;\n  align-items: center;\n  padding: 0 8px;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: background 0.2s;\n  &:hover {\n    background: rgba(255, 255, 255, 0.15);\n    transition: background 0.2s;\n  }\n`;\n\nconst NavButtonWithDropdown = styled.div`\n  position: relative;\n`;\n\nconst NavButton = styled.div`\n  ${navButtonStyles}\n  color: ${({color}) => color || '#E4EEEA'};\n  ${({isActive}) => isActive && css`\n    background: rgba(255, 255, 255, 0.15);\n  `};\n`;\n\nconst Title = styled.h1`\n  font-size: 16px;\n  font-weight: normal;\n`;\n\nconst HorizontalMenuStyled = styled.section`\n  display: flex;\n  margin-left: 30px;\n  height: 100%;\n  align-items: center;\n\n  @media (max-width: 550px) {\n    display: none;\n  }\n`;\n\nconst VerticalMenuStyled = styled.section`\n  display: flex;\n  position: absolute;\n  width: 100%;\n  top: ${MEASUREMENTS.navDefaultHeight};\n  left: 0;\n  background: ${COLORS.greenAlt};\n  flex-direction: column;\n  padding: 5px 0;\n\n  @media (min-width: 550px) {\n    display: none;\n  }\n`;\n\nconst HorizontalLinkButton = styled.div`\n  ${navButtonStyles};\n  display: flex;\n  font-size: 13px;\n  margin: 0 5px;\n  color: ${COLORS.white};\n  text-decoration: none;\n  background: ${({active}) => (active ? 'rgba(255, 255, 255, 0.15)' : 'none')};\n`;\n\nconst VerticalLinkButton = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n  font-size: 13px;\n  padding: 0 0 0 20px;\n  color: ${COLORS.white};\n  text-decoration: none;\n  transition: background 0.2s, color 0.2s;\n  text-decoration: ${({active}) => (active ? 'underline' : 'none')};\n  font-weight: ${({active}) => (active ? 'bold' : 'normal')};\n\n  cursor: pointer;\n\n  &:hover {\n    transition: background 0.2s, color 0.2s;\n    background: rgba(255, 255, 255, 0.15);\n  }\n`;\n\nconst ToggleButton = styled.div`\n  ${navButtonStyles}\n  @media (min-width: 550px) {\n    display: none;\n  }\n`;\n\nconst Dropdown = styled.div`\n  width: 200px;\n  padding: 9px 0;\n  background: white;\n  position: absolute;\n  top: 44px;\n  right: 0;\n  border-radius: 5px;\n  border: 1px solid #d5d5d5;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, .1);\n\n  @media (max-width: 300px) {\n    position: fixed;\n    width: calc(100% - 16px);\n    top: 51px;\n    right: 8px;\n  }\n`;\n\nconst DropdownParagraph = styled.p`\n  color: black;\n  font-weight: 500;\n  padding: 0 12px;\n  font-size: 13px;\n  margin: 0;\n  word-break: ${({wordBreak}) => wordBreak || 'normal'};\n`;\n\nconst DropdownHeading = styled(DropdownParagraph)`\n  font-weight: 600;\n  margin: 5px 0 5px 0;\n`;\n\nconst DropdownButton = styled(DropdownParagraph)`\n  cursor: pointer;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  text-decoration: ${({active}) => (active ? 'underline' : 'none')};\n  &:hover {\n    background: #eee;\n  }\n`;\n\nexport {\n  Bar,\n  ContentWrapper,\n  Section,\n  NavButtonWithDropdown,\n  NavButton,\n  Title,\n  HorizontalMenuStyled,\n  VerticalMenuStyled,\n  HorizontalLinkButton,\n  VerticalLinkButton,\n  ToggleButton,\n  Dropdown,\n  DropdownParagraph,\n  DropdownHeading,\n  DropdownButton,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport {plug as connectIcon} from 'react-icons-kit/ikons/plug';\n\nimport {CONNECTIVITY_STATES, COLORS} from '../constants';\nimport {\n  NavButtonWithDropdown,\n  NavButton,\n  Dropdown,\n  DropdownHeading,\n  DropdownParagraph,\n} from '../styled';\n\nconst ConnectWidget = props => {\n  const isOnline = props.connectivityState === CONNECTIVITY_STATES.online;\n  return (\n    <NavButtonWithDropdown>\n      <NavButton\n        color={isOnline ? COLORS.yellow : COLORS.red}\n        onClick={() => (\n          props.isShowingConnectivityDropdown\n            ? props.closeAllDropdowns()\n            : props.showConnectivityDropdown()\n        )}\n      >\n        <Icon icon={connectIcon} size={16} />\n      </NavButton>\n      {props.isShowingConnectivityDropdown &&\n        <Dropdown>\n          <DropdownHeading>\n            {isOnline\n              ? _.capitalize(props.t('titles.connectionOnline'))\n              : _.capitalize(props.t('titles.connectionOffline'))}\n          </DropdownHeading>\n          <DropdownParagraph>\n            {isOnline\n              ? props.t('phrases.connectionOnline')\n              : props.t('phrases.connectionOffline')}\n          </DropdownParagraph>\n        </Dropdown>}\n      data-cy='profile-button'\n    </NavButtonWithDropdown>\n  );\n};\n\nexport default ConnectWidget;\n","import React from 'react';\nimport {Icon} from 'react-icons-kit';\nimport {ic_menu_book as docsIcon} from 'react-icons-kit/md/ic_menu_book';\nimport {getExternalUrls} from '../../../constants';\n\nimport {\n  NavButtonWithDropdown,\n  NavButton,\n  Dropdown,\n  DropdownButton,\n} from '../styled';\n\nconst DocsWidget = props => (\n  <NavButtonWithDropdown>\n    <NavButton\n      onClick={() => (\n        props.isShowingDocsDropdown\n          ? props.closeAllDropdowns()\n          : props.showDocsDropdown()\n      )}\n      isActive={props.isShowingDocsDropdown}\n    >\n      <Icon icon={docsIcon} size={18} />\n    </NavButton>\n    {props.isShowingDocsDropdown && (\n      <Dropdown>\n        <DropdownButton onClick={() => window.open(getExternalUrls().docs, '_blank')}>\n          Yggio Docs\n        </DropdownButton>\n        <DropdownButton onClick={() => window.open(getExternalUrls().swagger, '_blank')}>\n          Yggio Swagger\n        </DropdownButton>\n        <DropdownButton onClick={() => window.open(getExternalUrls().webshop, '_blank')}>\n          Sensative Webshop\n        </DropdownButton>\n      </Dropdown>\n    )}\n  </NavButtonWithDropdown>\n);\n\nexport default DocsWidget;\n","import _ from 'lodash';\nimport React from 'react';\n\nimport {\n  HorizontalMenuStyled,\n  HorizontalLinkButton,\n} from '../styled';\n\nconst HorizontalMenu = props => (\n  <HorizontalMenuStyled>\n    {_.map(props.links, link => (\n      <HorizontalLinkButton\n        data-cy={`horizontal-buttons-${link.name}`}\n        key={link.name}\n        onClick={() => props.router.push(link.url)}\n        active={link.url === props.activeLink}\n      >\n        {_.capitalize(link.name)}\n      </HorizontalLinkButton>\n    ))}\n  </HorizontalMenuStyled>\n);\n\nexport default HorizontalMenu;\n","import React from 'react';\nimport {Icon} from 'react-icons-kit';\nimport {ic_language as languageIcon} from 'react-icons-kit/md/ic_language';\n\nimport {\n  NavButtonWithDropdown,\n  NavButton,\n  Dropdown,\n  DropdownHeading,\n  DropdownButton,\n} from '../styled';\n\nconst LanguageWidget = props => (\n  <NavButtonWithDropdown>\n    <NavButton\n      onClick={() => (\n        props.isShowingLanguageDropdown\n          ? props.closeAllDropdowns()\n          : props.showLanguageDropdown()\n      )}\n      isActive={props.isShowingLanguageDropdown}\n      data-cy='language-selection'\n    >\n      <Icon icon={languageIcon} size={16} />\n    </NavButton>\n    {props.isShowingLanguageDropdown &&\n      <Dropdown>\n        <DropdownHeading>Language</DropdownHeading>\n        <DropdownButton\n          onClick={() => {\n            props.changeLanguage('en');\n            props.updateUser({updates: {...props.user, language: 'en'}});\n          }}\n          active={props.currentLanguage === 'en'}\n          data-cy='language-english-button'\n        >\n          English\n        </DropdownButton>\n        <DropdownButton\n          onClick={() => {\n            props.changeLanguage('de');\n            props.updateUser({updates: {...props.user, language: 'de'}});\n          }}\n          active={props.currentLanguage === 'de'}\n          data-cy='language-german-button'\n        >\n          German\n        </DropdownButton>\n      </Dropdown>}\n  </NavButtonWithDropdown>\n);\n\nexport default LanguageWidget;\n","import React from 'react';\n\nimport {DEFAULTS} from '../constants';\nimport LogoIcon from '../../../components/logo';\nimport YGGIO_LOGO from '../../../assets/images/yggio-icon.svg';\n\nimport {\n  Title,\n  NavButton,\n} from '../styled';\n\nconst Logo = props => (\n  <NavButton\n    data-cy='yggio-logo'\n    onClick={() => props.router.push('/')}\n  >\n    <LogoIcon\n      src={props.logoSrc || YGGIO_LOGO}\n      alt={'Yggio'}\n      height={'21px'}\n      width={'21px'}\n      margin={'0 9px 0 0'}\n    />\n    <Title>\n      {props.title || DEFAULTS.title}\n    </Title>\n  </NavButton>\n);\n\nexport default Logo;\n","import React from 'react';\nimport {Icon} from 'react-icons-kit';\nimport {ic_menu as toggleIcon} from 'react-icons-kit/md/ic_menu';\n\nimport {ToggleButton} from '../styled';\n\nconst MenuButton = props => (\n  <ToggleButton\n    onClick={() => {\n      if (props.isShowingMenuDropdown) {\n        props.closeAllDropdowns();\n      } else {\n        props.showMenuDropdown();\n      }\n    }}\n  >\n    <Icon icon={toggleIcon} size={20} />\n  </ToggleButton>\n);\n\nexport default MenuButton;\n","import React from 'react';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport {ic_person as userIcon} from 'react-icons-kit/md/ic_person';\nimport {getConfig} from '../../../yggio-config';\n\nimport {\n  NavButtonWithDropdown,\n  NavButton,\n  Dropdown,\n  DropdownHeading,\n  DropdownButton,\n} from '../styled';\n\nconst UserWidget = props => (\n  <NavButtonWithDropdown data-cy='profile-button'>\n    <NavButton\n      onClick={() => (\n        props.isShowingUserDropdown\n          ? props.closeAllDropdowns()\n          : props.showUserDropdown()\n      )}\n      isActive={props.isShowingUserDropdown}\n    >\n      <Icon icon={userIcon} size={18} />\n    </NavButton>\n    {props.isShowingUserDropdown &&\n      <Dropdown>\n        <DropdownHeading data-cy=\"profile-dropdown-menu-header\" wordBreak=\"break-all\">\n          {props.username || '- no user -'}\n        </DropdownHeading>\n        <DropdownButton\n          onClick={() => {\n            window.location = `https://${getConfig().domain}/auth/realms/yggio/account`;\n          }}\n          data-cy='profile-dropdown-menu-manage-account'\n        >\n          Manage account\n        </DropdownButton>\n        <DropdownButton onClick={props.signOut} data-cy='profile-dropdown-menu-sign-out'>\n          {_.capitalize(props.t('labels.signOut'))}\n        </DropdownButton>\n      </Dropdown>}\n  </NavButtonWithDropdown>\n);\n\nexport default UserWidget;\n","import _ from 'lodash';\nimport React from 'react';\n\nimport {\n  VerticalMenuStyled,\n  VerticalLinkButton,\n} from '../styled';\n\nconst VerticalMenu = props => (\n  <VerticalMenuStyled>\n    {_.map(props.links, link => (\n      <VerticalLinkButton\n        data-cy={`vertical-buttons-${link.name}`}\n        key={link.name}\n        onClick={() => props.router.push(link.url)}\n        active={link.url === props.activeLink}\n      >\n        {_.capitalize(link.name)}\n      </VerticalLinkButton>\n    ))}\n  </VerticalMenuStyled>\n);\n\nexport default VerticalMenu;\n","import _ from 'lodash';\n\ninterface YggioConfig {\n  baseRequestUrl: string;\n  socketHostname: string;\n  socketPort: string;\n  restUrl: string;\n  isFiware: boolean;\n  domain: string;\n  nodeEnv: string;\n  version: string;\n}\n\nconst generateConfig = (configObj: YggioConfig): YggioConfig => {\n  const cfg = <YggioConfig>{};\n  cfg.baseRequestUrl = _.get(configObj, 'REACT_APP_BACKEND_URL', 'https://dev.local.yggio') as string;\n  cfg.socketHostname = _.get(configObj, 'REACT_APP_YGGIO_WEBSOCKET_HOSTNAME', 'dev.local.yggio') as string;\n  cfg.socketPort = _.get(configObj, 'REACT_APP_YGGIO_WEBSOCKET_PORT', '15676') as string;\n  cfg.restUrl = _.get(configObj, 'REACT_APP_YGGIO_REST_API_URL', 'https://dev.local.yggio/api') as string;\n  cfg.isFiware = _.get(configObj, 'REACT_APP_IS_FIWARE', false) as boolean;\n\n  // the domain controls access to yggio cookies\n  cfg.domain = _.get(configObj, 'REACT_APP_DOMAIN', 'dev.local.yggio') as string;\n\n  // other stuff\n  cfg.nodeEnv = _.get(configObj, 'NODE_ENV', 'development') as string;\n  cfg.version = _.get(configObj, 'YGGIO_VERSION') as string;\n  return cfg;\n};\n\nlet CONFIG = generateConfig({} as YggioConfig);\n\nconst setConfig = (\n  {config, setAppReady}: {config: YggioConfig, setAppReady(arg: boolean): void}\n) => {\n  if (setAppReady) {\n    CONFIG = generateConfig(config);\n    setAppReady(true);\n  }\n};\n\nconst getConfig = () => CONFIG;\n\nexport {\n  setConfig,\n  getConfig\n};\n","import React, {useState} from 'react';\nimport _ from 'lodash';\nimport {NextRouter} from 'next/router';\n\nimport {clientAppsApi} from '../../api';\nimport {selectCategorizedApps} from '../apps-pane/selectors';\nimport defaultIcon from '../../assets/images/picture.svg';\n\nimport {CenteredPage} from '../../global/components';\nimport ContainerBox from '../../components/container-box';\nimport Chip from '../../components/chip';\nimport Button from '../../components/button';\nimport {\n  NotFoundNote,\n  BackLink,\n  TopContainer,\n  TopMiddleSection,\n  TopRightSection,\n  AppIcon,\n  AppName,\n  AppTagline,\n  TagsContainer,\n  Heading,\n  Description,\n  ScreenshotsContainer,\n  ScreenshotsLeftSection,\n  ScreenshotsRightSection,\n  MiniScreenshot,\n  SelectedScreenshotMarker,\n  Email,\n} from './styled';\n\ninterface Props {\n  appId: string;\n  router: NextRouter;\n}\n\nconst AppPane = (props: Props) => {\n\n  const clientAppsQuery = clientAppsApi.useClientAppsQuery();\n\n  const categorizedApps = selectCategorizedApps({clientAppsQueryData: clientAppsQuery.data});\n\n  const [selectedScreenshot, setSelectedScreenshot] = useState(0);\n\n  const allApps = [\n    ...categorizedApps.yggioApps,\n    ...categorizedApps.staticApps,\n    ...categorizedApps.clientApps\n  ];\n  const app = _.find(allApps, ['id', props.appId]);\n\n  if (!app) {\n    return <NotFoundNote>404 - No app found</NotFoundNote>;\n  }\n\n  const screenshots = app.images?.screenshots;\n\n  return (\n    <CenteredPage maxWidth={'1200px'}>\n      <BackLink onClick={async () => props.router.push('/apps')}>&lsaquo; Back to apps</BackLink>\n      <ContainerBox padding={'30px 30px 60px 30px'} margin={'0 0 50px 0'}>\n        <TopContainer>\n          <AppIcon showBackground={!app.images?.icon}>\n            {app.images?.icon ? (\n              <img src={app.images?.icon} width={'100%'} />\n            ) : (\n              <img src={defaultIcon} width={'50%'} />\n            )}\n          </AppIcon>\n          <TopMiddleSection>\n            <AppName>{app.name}</AppName>\n            <AppTagline>{app.tagline}</AppTagline>\n            <TagsContainer>\n              {_.map(app.tags, tag => (\n                <Chip\n                  text={tag}\n                  key={tag}\n                  margin={'0 5px 0 0'}\n                />\n              ))}\n            </TagsContainer>\n          </TopMiddleSection>\n          <TopRightSection>\n            <Button\n              label={'Launch'}\n              color={'green'}\n              width={'110px'}\n              disabled={!app.url}\n              onClick={() => window.open(app.url, '_blank')}\n            />\n          </TopRightSection>\n        </TopContainer>\n        {!!_.size(screenshots) && (\n          <ScreenshotsContainer>\n            <ScreenshotsLeftSection>\n              <img src={screenshots![selectedScreenshot]} width={'100%'} />\n            </ScreenshotsLeftSection>\n            {_.size(screenshots) > 1 && (\n              <ScreenshotsRightSection>\n                {_.map(screenshots, (screenshot, index) => (\n                  <MiniScreenshot\n                    onClick={() => setSelectedScreenshot(index)}\n                    key={index}\n                  >\n                    {screenshots && (\n                      <img src={screenshot} width={'100%'} />\n                    )}\n                    {index === selectedScreenshot && (\n                      <SelectedScreenshotMarker />\n                    )}\n                  </MiniScreenshot>\n                ))}\n              </ScreenshotsRightSection>\n            )}\n          </ScreenshotsContainer>\n        )}\n        <Description>\n          {app.description}\n        </Description>\n        {app.demoUrl && (\n          <>\n            <Heading>Demo</Heading>\n            <Button\n              label={'Try demo'}\n              onClick={() => window.open(app.demoUrl, '_blank')!.focus()}\n            />\n          </>\n        )}\n        {app.support && (\n          <>\n            <Heading>Support</Heading>\n            <Email>{app.support}</Email>\n          </>\n        )}\n      </ContainerBox>\n    </CenteredPage>\n  );\n};\n\nexport default AppPane;\n","import styled from 'styled-components';\n\nconst NotFoundNote = styled.p`\n  color: #555;\n  font-size: 20px;\n  margin-top: 30%;\n  text-align: center;\n`;\n\nconst BackLink = styled.p`\n  margin: 15px 0 15px 0;\n  color: #004799;\n  font-size: 15px;\n  text-decoration: underline;\n  cursor: pointer;\n  &:hover {\n    color: black;\n    color: #002c5e;\n  }\n`;\n\nconst TopContainer = styled.div`\n  width: 100%;\n  height: 80px;\n  display: flex;\n  margin: 0 0 40px 0;\n`;\n\ninterface AppIconProps {\n  showBackground: boolean;\n}\n\nconst AppIcon = styled.div<AppIconProps>`\n  width: 80px;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 10px 0 0;\n  flex-shrink: 0;\n  background: ${({showBackground}) => (showBackground ? '#ddd' : 'none')};\n`;\n\nconst TopMiddleSection = styled.div`\n  flex-grow: 1;\n`;\n\nconst TopRightSection = styled.div`\n  width: 200px;\n  display: flex;\n  align-items: center;\n  justify-content: right;\n`;\n\nconst AppName = styled.p`\n  font-size: 14px;\n  font-weight: bold;\n  margin: 2px 0 8px 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst AppTagline = styled.p`\n  margin: 0;\n  font-size: 13px;\n  margin: 0 0 12px 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TagsContainer = styled.div`\n  display: flex;\n  overflow-x: hidden;\n`;\n\nconst Heading = styled.p`\n  font-size:  13px;\n  font-weight: bold;\n  color: #333;\n  margin: 30px 0 8px 0;\n`;\n\nconst Description = styled.p`\n  font-size:  13px;\n  margin: 0;\n  line-height: 1.7;\n  max-width: 800px;\n`;\n\nconst ScreenshotsContainer = styled.div`\n  width: 100%;\n  height: 400px;\n  margin: 0 0 30px 0;\n  display: flex;\n`;\n\nconst ScreenshotsLeftSection = styled.div`\n  background: #eee;\n  flex-grow: 1;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    object-fit: contain;\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst ScreenshotsRightSection = styled.div`\n  width: 140px;\n  height: 100%;\n  margin: 0 0 0 14px;\n`;\n\nconst MiniScreenshot = styled.div`\n  background: #eee;\n  width: 100%;\n  height: 60px;\n  margin: 0 0 10px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  cursor: pointer;\n\n  img {\n    object-fit: contain;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst SelectedScreenshotMarker = styled.div`\n  width: 7px;\n  height: 100%;;\n  background: green;\n  position: absolute;\n  top:  0px;\n  left: 0px;\n`;\n\nconst Email = styled.p`\n  margin: 0;\n  font-size: 14px;\n  font-style: italic;\n`;\n\nexport {\n  NotFoundNote,\n  BackLink,\n  TopContainer,\n  AppIcon,\n  TopMiddleSection,\n  TopRightSection,\n  AppName,\n  AppTagline,\n  TagsContainer,\n  Heading,\n  Description,\n  ScreenshotsContainer,\n  ScreenshotsLeftSection,\n  ScreenshotsRightSection,\n  SelectedScreenshotMarker,\n  MiniScreenshot,\n  Email,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {NextRouter} from 'next/router';\n\nimport {clientAppsApi} from '../../api';\nimport {selectCategorizedApps, selectFilteredApps} from './selectors';\nimport {useLocalState} from '../../hooks';\nimport state from './state';\nimport {APP_TAGS} from '../../constants/apps';\n\nimport {CenteredPage} from '../../global/components';\nimport ContainerBox from '../../components/container-box';\nimport TextField from '../../components/text-field';\nimport Select from '../../components/select';\nimport AppCard from './sub-components/app-card';\nimport {\n  SearchBar,\n  HeadingBar,\n  Heading,\n  SubHeading,\n  AppsContainer,\n  NoAppsNote,\n} from './styled';\n\ninterface Props {\n  router: NextRouter;\n}\n\nconst AppsPane = (props: Props) => {\n\n  const clientAppsQuery = clientAppsApi.useClientAppsQuery();\n\n  const form = useLocalState(state);\n\n  const isFiltering = !!form.formInputs.name.value || !_.isEmpty(form.formInputs.tags.value);\n\n  const categorizedApps = selectCategorizedApps({clientAppsQueryData: clientAppsQuery.data});\n  const filteredApps = selectFilteredApps(categorizedApps, form);\n\n  return (\n    <CenteredPage maxWidth={'1200px'}>\n\n      <SearchBar>\n        <Select\n          options={_.map(APP_TAGS, tag => ({label: tag, value: tag}))}\n          isMulti\n          isClearable={false}\n          placeholder={'Filter by tags'}\n          width={'300px'}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => form.setInputValue('tags', evt.target.value)}\n        />\n        <TextField\n          placeholder={'Filter by name'}\n          width={'200px'}\n          value={form.formInputs.name.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => form.setInputValue('name', evt.target.value)}\n          margin={'0 7px 0 0'}\n          height={'38px'}\n        />\n      </SearchBar>\n\n      <HeadingBar>\n        <Heading>Yggio Apps</Heading>\n        <SubHeading>Apps created by Sensative</SubHeading>\n      </HeadingBar>\n      <ContainerBox padding={'30px'} margin={'0 0 35px 0'}>\n        <AppsContainer>\n          {_.map(filteredApps.yggioApps, (app, index) => (\n            <AppCard\n              key={index}\n              app={app}\n              router={props.router}\n              shouldLaunchOnClick\n            />\n          ))}\n          {isFiltering && _.isEmpty(filteredApps.yggioApps) && (\n            <NoAppsNote>No yggio apps found with filter</NoAppsNote>\n          )}\n        </AppsContainer>\n      </ContainerBox>\n\n      <HeadingBar>\n        <Heading>Marketplace</Heading>\n        <SubHeading>Various third party apps</SubHeading>\n      </HeadingBar>\n      <ContainerBox padding={'30px'} margin={'0 0 35px 0'}>\n        <AppsContainer>\n          {_.map(filteredApps.staticApps, (app, index) => (\n            <AppCard\n              key={index}\n              app={app}\n              router={props.router}\n            />\n          ))}\n          {isFiltering && _.isEmpty(filteredApps.staticApps) && (\n            <NoAppsNote>No static apps found with filter</NoAppsNote>\n          )}\n        </AppsContainer>\n      </ContainerBox>\n\n      <HeadingBar>\n        <Heading>Client Apps</Heading>\n        <SubHeading>Apps connected to Yggio via OAuth</SubHeading>\n      </HeadingBar>\n      <ContainerBox padding={'30px'} margin={'0 0 70px 0'}>\n        <AppsContainer>\n          {_.map(filteredApps.clientApps, (app, index) => (\n            <AppCard\n              key={index}\n              app={app}\n              router={props.router}\n              isClientApp\n              shouldLaunchOnClick\n            />\n          ))}\n          {isFiltering && _.isEmpty(filteredApps.clientApps) && (\n            <NoAppsNote>No client apps found with filter</NoAppsNote>\n          )}\n          {!isFiltering && _.isEmpty(filteredApps.clientApps) && (\n            <NoAppsNote>No client apps added yet</NoAppsNote>\n          )}\n        </AppsContainer>\n      </ContainerBox>\n\n    </CenteredPage>\n  );\n};\n\nexport default AppsPane;\n","import _ from 'lodash';\nimport Fuse from 'fuse.js';\nimport {createSelector} from 'reselect';\n\nimport {getStaticApps, getYggioApps} from '../../constants/apps';\nimport {ClientApp, App, Form} from '../../types';\nimport {CategorizedApps} from './types';\n\nconst selectCategorizedApps = createSelector(\n  (props: {clientAppsQueryData?: ClientApp[]}) => props.clientAppsQueryData,\n  clientAppsQueryData => {\n\n    const clientApps = _.map(clientAppsQueryData, clientApp => {\n      const formatted: App = {\n        id: clientApp._id,\n        name: clientApp.client_id,\n        tagline: clientApp.info,\n        url: clientApp.redirect_uri[0],\n      };\n      return formatted;\n    });\n\n    return {\n      yggioApps: getYggioApps(),\n      staticApps: getStaticApps(),\n      clientApps,\n    };\n  }\n);\n\nconst filterApps = (apps: App[], nameInput: string, tagsInput: string[]) => {\n  let filteredApps = apps;\n\n  // Filter with tags\n  if (!_.isEmpty(tagsInput)) {\n    filteredApps = _.filter(filteredApps, app => {\n      const foundTags = _.intersection(app.tags, tagsInput);\n      return foundTags.length === tagsInput.length;\n    });\n  }\n\n  // Filter with name\n  if (nameInput) {\n    const fuse = new Fuse(filteredApps, {keys: ['name'], threshold: 0.5});\n    const result = fuse.search(nameInput);\n    filteredApps = _.map(result, 'item');\n  }\n\n  return filteredApps;\n};\n\n\nconst selectFilteredApps = (apps: CategorizedApps, form: Form): CategorizedApps => {\n  const nameInput = form.formInputs.name.value as string;\n  const tagsInput = form.formInputs.tags.value as string[];\n\n  const clientApps = filterApps(apps.clientApps, nameInput, tagsInput);\n  const yggioApps = filterApps(apps.yggioApps, nameInput, tagsInput);\n  const staticApps = filterApps(apps.staticApps, nameInput, tagsInput);\n\n  return {\n    yggioApps,\n    staticApps,\n    clientApps,\n  };\n};\n\nexport {\n  selectCategorizedApps,\n  selectFilteredApps,\n};\n","import {generateForm, VALIDATION_VISIBILITY_TYPES} from '../../utils/form-wizard';\nimport {FormConfig} from '../../types';\n\nconst formConfig: FormConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  tags: {\n    defaultValue: [],\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled from 'styled-components';\n\nconst SearchBar = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  margin: 20px 0 0 0;\n\n  @media (max-width: 700px) {\n    flex-direction: column;\n    align-items: start;\n  }\n`;\n\nconst HeadingBar = styled.div`\n  height: 55px;\n`;\n\nconst Heading = styled.p`\n  font-size: 17px;\n  margin: 0;\n`;\n\nconst SubHeading = styled.p`\n  font-size: 13px;\n  margin: 3px 0 0 0;\n  color: #555;\n`;\n\nconst AppsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px 20px;\n`;\n\nconst AppContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100px;\n  padding: 10px;\n  display: flex;\n  border-radius: 3px;\n  cursor: pointer;\n  @media (min-width: 1000px) {\n    width: calc(50% - 10px);\n  }\n  &:hover {\n    background: #f7f7f7;\n  }\n`;\n\ninterface AppIconProps {\n  showBackground: boolean;\n}\n\nconst AppIcon = styled.div<AppIconProps>`\n  width: 80px;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 16px 0 0;\n  flex-shrink: 0;\n  background: ${({showBackground}) => (showBackground ? '#ddd' : 'none')};\n`;\n\nconst AppInfoContainer = styled.div`\n  width: calc(100% - 90px);\n`;\n\nconst AppName = styled.p`\n  font-size: 14px;\n  font-weight: bold;\n  margin: 2px 0 8px 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst AppTagline = styled.p`\n  margin: 0;\n  font-size: 13px;\n  margin: 0 0 12px 0;\n  color: #333;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TagsContainer = styled.div`\n  display: flex;\n  overflow-x: hidden;\n`;\n\nconst NoAppsNote = styled.p`\n  width: 100%;\n  text-align: center;\n  color: #777;\n`;\n\nexport {\n  SearchBar,\n  HeadingBar,\n  Heading,\n  SubHeading,\n  AppsContainer,\n  AppContainer,\n  AppIcon,\n  AppInfoContainer,\n  AppName,\n  AppTagline,\n  TagsContainer,\n  NoAppsNote,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {NextRouter} from 'next/router';\n\nimport {App} from '../../../types';\nimport defaultIcon from '../../../assets/images/picture.svg';\nimport clientAppIcon from '../../../assets/images/apps/client-app.png';\n\nimport Chip from '../../../components/chip';\nimport {\n  AppContainer,\n  AppIcon,\n  AppInfoContainer,\n  AppName,\n  AppTagline,\n  TagsContainer,\n} from '../styled';\n\ninterface Props {\n  app: App;\n  router: NextRouter;\n  isClientApp?: boolean;\n  shouldLaunchOnClick?: boolean;\n}\n\nconst AppCard = (props: Props) => {\n  const icon = props.app.images?.icon;\n  const onClickHandler = async () => {\n    if (props.shouldLaunchOnClick) {\n      window.open(props.app.url, '_blank');\n    } else {\n      await props.router.push(`/apps/${props.app.id}`);\n    }\n  };\n  return (\n    <AppContainer onClick={onClickHandler}>\n      <AppIcon showBackground={!icon && !props.isClientApp}>\n        {icon && (\n          <img src={icon} width={'100%'} />\n        )}\n        {!icon && props.isClientApp && (\n          <img src={clientAppIcon} width={'100%'} />\n        )}\n        {!icon && !props.isClientApp && (\n          <img src={defaultIcon} width={'50%'} />\n        )}\n      </AppIcon>\n      <AppInfoContainer>\n        <AppName>{props.app.name}</AppName>\n        <AppTagline>{props.app.tagline}</AppTagline>\n        <TagsContainer>\n          {_.map(props.app.tags, tag => (\n            <Chip\n              text={tag}\n              key={tag}\n              margin={'0 5px 0 0'}\n            />\n          ))}\n        </TagsContainer>\n      </AppInfoContainer>\n    </AppContainer>\n  );\n};\n\nexport default AppCard;\n","const SIDEBAR_SIBLING_MAX_WIDTH = 1400;\n\nexport {\n  SIDEBAR_SIBLING_MAX_WIDTH,\n};\n","import _ from 'lodash';\nimport queryString from 'query-string';\n\nimport {AddedDevice} from './types';\n\nconst updateUrl = (devices: string[], forceStateUpdate: () => void) => {\n  const params = queryString.stringify({devices}, {arrayFormat: 'comma'});\n  const newUrl = `charts?${params}`;\n  window.history.replaceState({...window.history.state, as: newUrl, url: newUrl}, '', newUrl);\n  // NOTE: Fix for forcing a rerender after url updates. There are probably better solutions.\n  forceStateUpdate();\n};\n\nconst onAddDevice = (\n  addedDevices: AddedDevice[],\n  deviceId: string,\n  forceStateUpdate: () => void,\n) => {\n  const addedDevicesIds = _.map(addedDevices, 'id');\n  const newAddedDevicesIds = [...addedDevicesIds, deviceId];\n  updateUrl(newAddedDevicesIds, forceStateUpdate);\n};\n\nconst onRemoveDevice = (\n  addedDevices: AddedDevice[],\n  deviceId: string,\n  clearFields: () => void,\n  forceStateUpdate: () => void,\n) => {\n  const addedDevicesIds = _.map(addedDevices, 'id');\n  const newAddedDevicesIds = _.reject(addedDevicesIds, id => id === deviceId);\n  if (newAddedDevicesIds.length === 0) {\n    clearFields();\n  }\n  updateUrl(newAddedDevicesIds, forceStateUpdate);\n};\n\nexport {\n  onAddDevice,\n  onRemoveDevice,\n};\n","import React from 'react';\nimport {useQuery, useQueries} from 'react-query';\n\nimport {devicesRequests} from '../../api';\nimport {\n  addDeviceOptionsSelector,\n  availableFieldsSelector,\n  fieldOptionsSelector,\n  chartEntriesSelector,\n  deviceIdsInUrlSelector,\n  addedDevicesSelector,\n} from './selectors';\nimport {useLocalState} from '../../hooks';\nimport localStateOptions from './state';\nimport {SIDEBAR_SIBLING_MAX_WIDTH} from './constants';\n\nimport {\n  SidebarParent,\n  SidebarSibling,\n  sidebarState as sidebarStateOptions,\n} from '../../components/sidebar-components';\nimport Sidebar from './sub-components/sidebar';\nimport HeadingBar from './sub-components/heading-bar';\nimport {CenteredPage} from '../../global/components';\nimport ContainerBox from '../../components/container-box';\nimport {NoSourceView} from './styled';\n\nimport ChartsViewer from '../charts-viewer';\n\nconst ChartsPane = () => {\n\n  const addedDevicesIds = deviceIdsInUrlSelector();\n\n  const sidebarState = useLocalState(sidebarStateOptions);\n  const localState = useLocalState(localStateOptions);\n\n  const addedDevicesQueries = useQueries(\n    addedDevicesIds.map(deviceId => ({\n      queryKey: ['devices', deviceId],\n      queryFn: async () => devicesRequests.fetchOne({deviceId}),\n      refetchOnWindowFocus: false,\n    }))\n  );\n\n  const addedDevices = addedDevicesSelector(addedDevicesQueries);\n\n  const devicesQuery = useQuery(\n    ['devices'],\n    async () => devicesRequests.fetch({}),\n    {refetchOnWindowFocus: false}\n  );\n\n  const fieldsQueries = useQueries(\n    addedDevices.map(device => ({\n      queryKey: ['devices', device.id, 'statistics', 'fields'],\n      queryFn: async () => devicesRequests.getStatisticsFields(device.id),\n      refetchOnWindowFocus: false,\n    }))\n  );\n\n  const addDeviceOptions = addDeviceOptionsSelector(addedDevices, devicesQuery.data);\n\n  const availableFields = availableFieldsSelector(addedDevices, fieldsQueries);\n\n  const fieldOptions = fieldOptionsSelector(localState.fields, availableFields);\n\n  const chartEntries = chartEntriesSelector(localState.fields, availableFields, devicesQuery.data);\n\n  return (\n    <SidebarParent>\n      <Sidebar\n        addedDevices={addedDevices}\n        localState={localState}\n        sidebarState={sidebarState}\n        addDeviceOptions={addDeviceOptions}\n        availableFields={availableFields}\n        fieldOptions={fieldOptions}\n      />\n      <SidebarSibling isSidebarOpen={sidebarState.isSidebarOpen}>\n        <CenteredPage maxWidth={`${SIDEBAR_SIBLING_MAX_WIDTH}px`}>\n          <HeadingBar sidebarState={sidebarState} />\n          <ContainerBox padding={'10px 30px 30px 30px'}>\n            {chartEntries.length > 0 ? (\n              <ChartsViewer chartEntries={chartEntries} />\n            ) : (\n              <NoSourceView>\n                <div>\n                  <h3>No source</h3>\n                  <p>Please select devices and fields in the sidebar</p>\n                </div>\n              </NoSourceView>\n            )}\n          </ContainerBox>\n        </CenteredPage>\n      </SidebarSibling>\n    </SidebarParent>\n  );\n};\n\nexport default ChartsPane;\n","import _ from 'lodash';\nimport {UseQueryResult} from 'react-query';\nimport queryString from 'query-string';\n\nimport {AddedDevice, Field, AvailableFields} from './types';\nimport {Device, Devices, InputOptions} from '../../types';\n\nconst NO_NAME = 'no-name';\n\nconst deviceIdsInUrlSelector = () => {\n  const parsed = queryString.parse(window.location.search, {arrayFormat: 'comma'});\n  const devicesParam = parsed.devices;\n  let devices: string[] = [];\n  if (_.isArray(devicesParam)) {\n    devices = devicesParam;\n  } else if (devicesParam) {\n    devices = [devicesParam];\n  }\n  return devices;\n};\n\nconst addedDevicesSelector = (addedDevicesQueries: UseQueryResult<Device, unknown>[]) => {\n  const acc: AddedDevice[] = [];\n  const fields = _.reduce(addedDevicesQueries, (result, query) => {\n    const res = query.data;\n    if (res) {\n      result.push({\n        id: res._id,\n        name: res.name || NO_NAME,\n      });\n    }\n    return result;\n  }, acc);\n  return fields;\n};\n\nconst devicesSelector = (data: unknown) => {\n  return _.map(data as [], device => _.pick(device, ['_id', 'name']));\n};\n\nconst addDeviceOptionsSelector = (addedDevices: AddedDevice[], devices?: Devices) => {\n  const addedDevicesIds = _.map(addedDevices, 'id');\n  const notYetAddedDevices = _.filter(devices, device => {\n    return !_.includes(addedDevicesIds, device._id);\n  });\n  return _.map(notYetAddedDevices, device => ({\n    value: device._id,\n    label: device.name || NO_NAME,\n  }));\n};\n\nconst availableFieldsSelector = (\n  addedDevies: AddedDevice[],\n  fieldsQueries: UseQueryResult<unknown, unknown>[],\n) => {\n  const acc: AvailableFields = {};\n  const fields = _.reduce(fieldsQueries, (result, query, index) => {\n    const res = query.data as string[];\n    if (res) {\n      _.each(res, field => {\n        const old = result[field] || [];\n        result[field] = [...old, addedDevies[index].id];\n      });\n    }\n    return result;\n  }, acc);\n  return fields;\n};\n\nconst fieldOptionsSelector = (addedFields: Field[], availableFields: AvailableFields) => {\n  const addedFieldNames = _.map(addedFields, 'name');\n  const acc: InputOptions = [];\n  const options = _.reduce(availableFields, (result, deviceIds, field) => {\n    if (!addedFieldNames.includes(field)) {\n      acc.push({\n        label: `${field} (${deviceIds.length})`,\n        value: field,\n      });\n    }\n    return result;\n  }, acc);\n  return options;\n};\n\ninterface ChartEntry {\n  deviceId: string;\n  deviceName: string;\n  field: string;\n  axis: 'left' | 'right';\n}\n\nconst chartEntriesSelector = (\n  addedFields: Field[],\n  availableFields: AvailableFields,\n  devices?: Devices,\n) => {\n  const acc: ChartEntry[] = [];\n  const entries = _.reduce(addedFields, (result, field) => {\n    _.each(availableFields[field.name], deviceId => {\n      const device = _.find(devices, ['_id', deviceId]);\n      if (device) {\n        result.push({\n          deviceId,\n          deviceName: device.name || NO_NAME,\n          field: field.name,\n          axis: 'left',\n        });\n      }\n    });\n    return result;\n  }, acc);\n\n  return entries;\n};\n\nexport {\n  deviceIdsInUrlSelector,\n  addedDevicesSelector,\n  devicesSelector,\n  addDeviceOptionsSelector,\n  availableFieldsSelector,\n  fieldOptionsSelector,\n  chartEntriesSelector,\n};\n","import _ from 'lodash';\n\nimport {Field} from './types';\n\nconst ACTION_TYPES = {\n  addField: 'addField',\n  removeField: 'removeField',\n  clearFields: 'clearFields',\n  forceStateUpdate: 'forceStateUpdate',\n};\n\nconst actions = {\n  addField: (fieldName: string) => ({\n    type: ACTION_TYPES.addField,\n    payload: {\n      fieldName,\n    }\n  }),\n  removeField: (fieldName: string) => ({\n    type: ACTION_TYPES.removeField,\n    payload: {\n      fieldName,\n    }\n  }),\n  clearFields: () => ({\n    type: ACTION_TYPES.clearFields,\n  }),\n  forceStateUpdate: () => ({\n    type: ACTION_TYPES.forceStateUpdate,\n  }),\n};\n\nconst defaultState = {\n  fields: [],\n  force: 0,\n};\n\ntype State = {\n  fields: Field[];\n  force: number;\n};\n\ntype Action = {\n  type: string;\n  payload: {\n    deviceId: string;\n    deviceName: string;\n    fieldName: string;\n  };\n};\n\nconst reducer = (state: State = defaultState, action: Action) => {\n  if (!action) {\n    return state;\n  }\n  const {type, payload} = action;\n\n  switch (type) {\n\n    case ACTION_TYPES.addField: {\n      const newField = {\n        name: action.payload.fieldName,\n      };\n      return {\n        ...state,\n        fields: [...state.fields, newField],\n      };\n    }\n\n    case ACTION_TYPES.removeField: {\n      const updatedFields = _.reject(state.fields, ['name', payload.fieldName]);\n      return {\n        ...state,\n        fields: updatedFields,\n      };\n    }\n\n    case ACTION_TYPES.clearFields: {\n      return {\n        ...state,\n        fields: [],\n      };\n    }\n\n    case ACTION_TYPES.forceStateUpdate: {\n      return {\n        ...state,\n        force: state.force + 1,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled from 'styled-components';\n\nconst SidebarTitle = styled.p`\n  margin: 0 0 10px 0;\n  font-weight: bold;\n  font-size: 14px;\n`;\n\nconst SidebarSection = styled.div`\n  margin: 10px 0 30px 0;\n`;\n\nconst ListEntry = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  box-sizing: border-box;\n  width: 100%;\n  padding: 0 5px 0 10px;\n  height: 40px;\n  background: #f5f5f5;\n  border: 1px solid #d1d1d1;\n  border-radius: 4px;\n  margin: 0 0 6px 0;\n`;\n\nconst RemoveButton = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 15px;\n  width: 28px;\n  height: 28px;\n  border-radius: 14px;\n  cursor: pointer;\n  color: #333;\n  &:hover {\n    background: #e5e5e5;\n    color: black;\n  }\n`;\n\ninterface ListEntryTitleProps {\n  redColor?: boolean;\n}\n\nconst ListEntryTitle = styled.p<ListEntryTitleProps>`\n  font-size: 14px;\n  color: ${({redColor}) => (redColor ? 'red' : 'black')};\n`;\n\nconst NoSourceView = styled.div`\n  width: 100%;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  color: #555;\n  font-style: italic;\n  h3 {\n    font-size: 15px;\n    font-weight: normal;\n    margin: 0 0 10px 0;\n  }\n  p {\n    font-size: 14px;\n    margin: 0px;\n  }\n`;\n\nexport {\n  SidebarSection,\n  SidebarTitle,\n  ListEntry,\n  ListEntryTitle,\n  RemoveButton,\n  NoSourceView,\n};\n","import React from 'react';\nimport {Icon} from 'react-icons-kit';\nimport {ic_dehaze as SidebarIcon} from 'react-icons-kit/md/ic_dehaze';\n\nimport {SIDEBAR_SIBLING_MAX_WIDTH} from '../constants';\nimport {\n  HeadingBarContainer,\n  HeadingBarLeftSection,\n  HeadingBarMiddleSection,\n  ToggleSidebarButton,\n} from '../../../global/styled';\n\ninterface Props {\n  sidebarState: {\n    isSidebarOpen: boolean;\n    closeSidebar: () => void;\n    openSidebar: () => void;\n  }\n}\n\nconst HeadingBar = (props: Props) => {\n  return (\n    <HeadingBarContainer>\n      <HeadingBarLeftSection\n        // @ts-ignore because the component is not ts yet\n        siblingWidth={SIDEBAR_SIBLING_MAX_WIDTH}\n      >\n        <ToggleSidebarButton\n          onClick={() => {\n            if (props.sidebarState.isSidebarOpen) {\n              props.sidebarState.closeSidebar();\n            } else {\n              props.sidebarState.openSidebar();\n            }\n          }}\n        >\n          <Icon icon={SidebarIcon as object} size={17} />\n        </ToggleSidebarButton>\n      </HeadingBarLeftSection>\n      <HeadingBarMiddleSection>\n        <p>Charts</p>\n      </HeadingBarMiddleSection>\n    </HeadingBarContainer>\n  );\n};\n\nexport default HeadingBar;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {Sidebar as SidebarComponent} from '../../../components/sidebar-components';\nimport Select from '../../../components/select';\nimport {AddedDevice, Field, AvailableFields} from '../types';\nimport {InputOptions} from '../../../types';\nimport {SIDEBAR_SIBLING_MAX_WIDTH} from '../constants';\nimport {onAddDevice, onRemoveDevice} from '../events';\nimport {\n  SidebarSection,\n  SidebarTitle,\n  ListEntry,\n  ListEntryTitle,\n  RemoveButton\n} from '../styled';\n\ninterface Props {\n  addedDevices: AddedDevice[];\n  localState: {\n    fields: Field[];\n    addField: (fieldName: string) => void;\n    removeField: (fieldName: string) => void;\n    clearFields: () => void;\n    forceStateUpdate: () => void;\n  },\n  sidebarState: {\n    isSidebarOpen: boolean;\n    closeSidebar: () => void;\n    openSidebar: () => void;\n  }\n  addDeviceOptions: InputOptions;\n  availableFields: AvailableFields;\n  fieldOptions: InputOptions;\n}\n\nconst Sidebar = (props: Props) => {\n  return (\n    <SidebarComponent\n      isSidebarOpen={props.sidebarState.isSidebarOpen}\n      siblingWidth={SIDEBAR_SIBLING_MAX_WIDTH}\n      isUsingNavbar\n      closeSidebar={props.sidebarState.closeSidebar}\n      openSidebar={props.sidebarState.openSidebar}\n    >\n      <SidebarSection>\n        <SidebarTitle>Devices</SidebarTitle>\n        <Select\n          placeholder={'Add device...'}\n          options={props.addDeviceOptions}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n            const id = evt.target.value;\n            onAddDevice(props.addedDevices, id, props.localState.forceStateUpdate);\n          }}\n          value={null}\n          margin={'0 0 10px 0'}\n        />\n        {_.map(props.addedDevices, device => (\n          <ListEntry key={device.id}>\n            <ListEntryTitle>{device.name}</ListEntryTitle>\n            <RemoveButton\n              onClick={() => {\n                onRemoveDevice(\n                  props.addedDevices,\n                  device.id,\n                  props.localState.clearFields,\n                  props.localState.forceStateUpdate,\n                );\n              }}\n            >x\n            </RemoveButton>\n          </ListEntry>\n        ))}\n      </SidebarSection>\n      {props.addedDevices.length > 0 && (\n        <SidebarSection>\n          <SidebarTitle>Fields</SidebarTitle>\n          <Select\n            placeholder={'Add field...'}\n            options={props.fieldOptions}\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n              props.localState.addField(evt.target.value)\n            )}\n            value={null}\n            margin={'0 0 10px 0'}\n          />\n          {_.map(props.localState.fields, field => (\n            <ListEntry key={field.name}>\n              <ListEntryTitle redColor={!props.availableFields[field.name]}>\n                {field.name}\n                {\n                  /*\n                    // Maybe show the number of occurences?\n                    ({(props.availableFields[field.name] || []).length})\n                  */\n                }\n              </ListEntryTitle>\n              <RemoveButton\n                onClick={() => props.localState.removeField(field.name)}\n              >\n                x\n              </RemoveButton>\n            </ListEntry>\n          ))}\n        </SidebarSection>\n      )}\n    </SidebarComponent>\n  );\n};\n\nexport default Sidebar;\n","import {\n  getUnixTime,\n  startOfHour,\n  startOfDay,\n  startOfWeek,\n} from 'date-fns';\n\nimport {TimePeriod} from './types';\n\nenum TIME_PERIOD_TYPES {\n  hour = 'hour',\n  day = 'day',\n  week = 'week',\n  month = 'month',\n}\n\nenum RESOLUTIONS {\n  low = 'Low',\n  high = 'High',\n  full = 'Full',\n}\n\nenum RANGES {\n  auto = 'Auto',\n  fromZero = 'From zero',\n}\n\nconst INTERPOLATION_OPTIONS = {\n  linear: {value: 'linear', label: 'Linear'},\n  smooth: {value: 'monotone', label: 'Smooth'},\n  step: {value: 'stepBefore', label: 'Step'},\n};\n\nconst ONE_MINUTE = 60;\nconst ONE_HOUR = ONE_MINUTE * 60;\nconst ONE_DAY = ONE_HOUR * 24;\nconst ONE_WEEK = ONE_DAY * 7;\nconst ONE_MONTH = ONE_WEEK * 4;\n\nconst startOfCurrentQuarterHour = (nowUnix: number) => (nowUnix - nowUnix) % (ONE_MINUTE * 15);\nconst startOfCurrentHour = (nowUnix: number) => getUnixTime(startOfHour(nowUnix * 1000));\nconst startOfCurrentDay = (nowUnix: number) => getUnixTime(startOfDay(nowUnix * 1000));\nconst startOfCurrentWeek = (nowUnix: number) => getUnixTime(startOfWeek(nowUnix * 1000));\n\nconst TIME_PERIODS: Record<TIME_PERIOD_TYPES, TimePeriod> = {\n  [TIME_PERIOD_TYPES.hour]: {\n    name: 'Last 60 minutes',\n    timeFormat: 'HH:mm',\n    duration: ONE_HOUR,\n    tickSettings: {\n      getLastTick: startOfCurrentQuarterHour,\n      numTicks: 4,\n      distance: ONE_MINUTE * 15,\n    },\n    resolutions: {\n      low: ONE_MINUTE, // => 60 points\n      high: 5, // => 720 points\n    },\n  },\n  [TIME_PERIOD_TYPES.day]: {\n    name: 'Last 24 hours',\n    timeFormat: 'HH:mm',\n    duration: ONE_DAY,\n    tickSettings: {\n      getLastTick: startOfCurrentHour,\n      numTicks: 4,\n      distance: ONE_HOUR * 6,\n    },\n    resolutions: {\n      low: ONE_MINUTE * 15, // => 96 points\n      high: ONE_MINUTE * 2, // => 720 points\n    },\n  },\n  [TIME_PERIOD_TYPES.week]: {\n    name: 'Last 7 days',\n    timeFormat: 'EEE',\n    duration: ONE_WEEK,\n    tickSettings: {\n      getLastTick: startOfCurrentDay,\n      numTicks: 7,\n      distance: ONE_DAY,\n    },\n    resolutions: {\n      low: ONE_HOUR * 2, // => 84 points\n      high: ONE_MINUTE * 10, // => 1008 points\n    },\n  },\n  [TIME_PERIOD_TYPES.month]: {\n    name: 'Last 30 days',\n    timeFormat: 'dd/MM',\n    duration: ONE_MONTH,\n    tickSettings: {\n      getLastTick: startOfCurrentWeek,\n      numTicks: 6,\n      distance: ONE_DAY * 6,\n    },\n    resolutions: {\n      low: ONE_HOUR * 8, // => 90 points\n      high: ONE_HOUR, // => 720 points\n    },\n  },\n};\n\nconst COLORS = [\n  '#0989D1', // blue\n  '#00A441', // green\n  '#DD8500', // orange\n  '#A838FF', // purple\n  '#DD0050', // pink\n  '#00CCC0', // teal\n  '#88B800', // lime\n  '#D6C000', // yellow\n];\n\nexport {\n  TIME_PERIOD_TYPES,\n  TIME_PERIODS,\n  RESOLUTIONS,\n  INTERPOLATION_OPTIONS,\n  RANGES,\n  COLORS,\n};\n","import React, {useState} from 'react';\nimport {useQueries} from 'react-query';\nimport {CurveType} from 'recharts/types/shape/Curve';\n\nimport {getStatistics} from '../../api/devices/requests';\nimport {selectAttributes, selectDataSeries, selectLegendEntries} from './selectors';\nimport {useLocalState} from '../../hooks';\nimport state from './state';\nimport {ChartEntry} from './types';\n\nimport Chart from './sub-components/chart';\nimport Options from './sub-components/options';\nimport Legend from './sub-components/legend';\nimport {Container, LowerSection, NoDataView} from './styled';\n\ninterface ChartsViewerContentProps {\n  chartEntries: ChartEntry[];\n  hideLegend?: boolean;\n  orientation?: string;\n  type?: 'simple' | 'full';\n}\n\nconst ChartsViewerContent = (props: ChartsViewerContentProps) => {\n\n  const [highlightedEntry, setHightlightedEntry] = useState<number | null>(null);\n\n  const form = useLocalState(state);\n\n  const attributes = selectAttributes(form.formInputs);\n\n  const params = attributes ? {\n    startTime: attributes.startTime * 1000,\n    endTime: attributes.endTime * 1000,\n    distance: attributes.distance,\n  } : null;\n\n  const statsQueries = useQueries(\n    props.chartEntries.map(entry => ({\n      queryKey: ['devices', entry.deviceId, 'statistics', entry.field, params],\n      queryFn: async () => getStatistics(\n        entry.deviceId,\n        entry.field,\n        params!.startTime,\n        params!.endTime,\n        params!.distance,\n      ),\n      enabled: !!params,\n      refetchOnWindowFocus: false,\n    }))\n  );\n\n  const dataSeries = selectDataSeries(statsQueries, props.chartEntries);\n\n  const legendEntries = selectLegendEntries(dataSeries);\n\n  return (\n    <Container>\n      {attributes ? (\n        <Chart\n          dataSeries={dataSeries!}\n          attributes={attributes}\n          selectedInterpolation={form.formInputs.interpolation.value as CurveType}\n          highlightedEntry={highlightedEntry}\n        />\n      ) : (\n        <NoDataView>Please enter custom time period</NoDataView>\n      )}\n      <LowerSection>\n        {props.type !== 'simple' && (\n          <Options\n            form={form}\n            hideLegend={props.hideLegend}\n          />\n        )}\n        {(!!dataSeries && !props.hideLegend) && (\n          <Legend\n            legendEntries={legendEntries}\n            setHightlightedEntry={setHightlightedEntry}\n          />\n        )}\n      </LowerSection>\n    </Container>\n  );\n};\n\ninterface ChartsViewerProps {\n  chartEntries: ChartEntry[];\n  hideLegend?: boolean;\n  orientation?: 'landscape';\n  type?: 'simple' | 'full';\n}\n\nconst ChartsViewer = (props: ChartsViewerProps) => {\n\n  return (\n    <>\n      {props.chartEntries.length === 0 ? (\n        <p>No source</p>\n      ) : (\n        <ChartsViewerContent\n          {...props}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ChartsViewer;\n","import _ from 'lodash';\nimport {\n  format,\n  getUnixTime,\n  parseISO,\n} from 'date-fns';\nimport {UseQueryResult} from 'react-query';\n\nimport {FormInputs} from '../../types';\nimport {\n  resolveNumDecimals,\n  isFormValid,\n  generateTicks,\n} from './utils';\nimport {\n  Data,\n  FormattedData,\n  DataSerie,\n  Attributes,\n  ChartEntry,\n  LegendEntry,\n  YAxisDomain,\n} from './types';\nimport {\n  TIME_PERIODS,\n  TIME_PERIOD_TYPES,\n  RESOLUTIONS,\n  COLORS,\n  RANGES\n} from './constants';\n\nconst selectDataSeries = (\n  statsQueries: UseQueryResult<Data, unknown>[],\n  chartEntries: ChartEntry[],\n): DataSerie[] | null => {\n  if (_.some(statsQueries, query => !query.isSuccess)) {\n    return null;\n  }\n  const dataSeries = _.map(statsQueries, (query, index) => {\n    const data = query.data || [];\n    const formattedData = formatData(data);\n    const entry = chartEntries[index];\n    const serie: DataSerie = {\n      deviceName: entry.deviceName,\n      deviceId: entry.deviceId,\n      field: entry.field,\n      data: formattedData,\n      axis: entry.axis,\n      color: COLORS[index % COLORS.length],\n    };\n    return serie;\n  });\n  return dataSeries;\n};\n\nconst formatData = (data: Data): FormattedData => {\n  const numDecimals = resolveNumDecimals(data);\n  const roundMultiplier = 10 ** numDecimals;\n  const formattedData = _.map(data, point => {\n    const roundedValue = Math.round(point.value * roundMultiplier) / roundMultiplier;\n    return {\n      value: point.value,\n      unixTime: getUnixTime(parseISO(point.time)),\n      formattedTime: format(parseISO(point.time), 'yyyy-MM-dd HH:mm:ss'),\n      roundedValue: roundedValue.toFixed(numDecimals),\n    };\n  });\n  return formattedData;\n};\n\nconst selectAttributes = (formInputs: FormInputs): Attributes | null => {\n  if (!isFormValid(formInputs)) {\n    return null;\n  }\n\n  const selectedTimePeriod = formInputs.timePeriod.value as TIME_PERIOD_TYPES | 'custom';\n  const range = formInputs.range.value as string;\n\n  let yAxisDomain: YAxisDomain = [0, 'auto'];\n  if (range === RANGES.auto) {\n    yAxisDomain = ['auto', 'auto'];\n  }\n\n  let attributes;\n  if (selectedTimePeriod === 'custom') {\n    attributes = getAttributesFromCustomTimePeriod(formInputs, yAxisDomain);\n  } else {\n    attributes = getAttributesFromPredefinedTimePeriod(formInputs, yAxisDomain);\n  }\n\n  return attributes;\n};\n\nconst getAttributesFromCustomTimePeriod = (\n  formInputs: FormInputs,\n  yAxisDomain: YAxisDomain,\n): Attributes => {\n  const customFromTime = formInputs.customFromTime.value as string;\n  const customToTime = formInputs.customToTime.value as string;\n  const selectedResolution = formInputs.resolution.value as RESOLUTIONS;\n\n  const fromTimeUnix = getUnixTime(new Date(customFromTime));\n  const toTimeUnix = getUnixTime(new Date(customToTime));\n\n  const duration = toTimeUnix - fromTimeUnix;\n\n  let distance = null;\n  if (selectedResolution === RESOLUTIONS.low) {\n    distance = Math.floor(duration / 100);\n  }\n  if (selectedResolution === RESOLUTIONS.high) {\n    distance = Math.floor(duration / 500);\n  }\n\n  return {\n    timeFormat: 'yyyy-MM-dd HH:mm',\n    startTime: fromTimeUnix,\n    endTime: toTimeUnix,\n    ticks: [],\n    distance,\n    xAxisDomain: [fromTimeUnix, toTimeUnix],\n    yAxisDomain,\n  };\n};\n\nconst getAttributesFromPredefinedTimePeriod = (\n  formInputs: FormInputs,\n  yAxisDomain: YAxisDomain,\n): Attributes => {\n\n  const selectedTimePeriod = formInputs.timePeriod.value as TIME_PERIOD_TYPES;\n  const selectedResolution = formInputs.resolution.value as RESOLUTIONS;\n\n  const timePeriod = TIME_PERIODS[selectedTimePeriod];\n\n  // Round end time to lower number of queries and rerenders\n  const nowUnix = Math.round(Date.now() / 1000);\n  const endTime = (nowUnix - nowUnix) % (60 * 5);\n\n  const ticks = generateTicks(timePeriod.tickSettings, endTime);\n\n  let distance = null;\n  if (selectedResolution === RESOLUTIONS.low) {\n    distance = timePeriod.resolutions.low;\n  }\n  if (selectedResolution === RESOLUTIONS.high) {\n    distance = timePeriod.resolutions.high;\n  }\n\n  return {\n    timeFormat: timePeriod.timeFormat,\n    startTime: endTime - timePeriod.duration,\n    endTime,\n    ticks,\n    distance,\n    xAxisDomain: [endTime - timePeriod.duration, endTime],\n    yAxisDomain,\n  };\n};\n\nconst selectLegendEntries = (dataSeries: DataSerie[] | null): LegendEntry[] => {\n  const entries = _.map(dataSeries, serie => {\n    const entry: LegendEntry = {\n      deviceId: serie.deviceId,\n      deviceName: serie.deviceName,\n      field: serie.field,\n      axis: serie.axis,\n      isDataEmpty: !serie.data.length,\n      color: serie.color,\n    };\n    return entry;\n  });\n  return entries;\n};\n\nexport {\n  selectDataSeries,\n  selectAttributes,\n  selectLegendEntries,\n};\n","import {isValid, isBefore, isAfter, isPast} from 'date-fns';\n\nimport {generateForm, VALIDATION_VISIBILITY_TYPES} from '../../utils/form-wizard';\nimport {FormConfig, InputValue} from '../../types';\nimport {\n  TIME_PERIOD_TYPES,\n  RESOLUTIONS,\n  INTERPOLATION_OPTIONS,\n  RANGES,\n} from './constants';\n\nconst validTimeValidator = {\n  validate: (value: InputValue) => {\n    if (typeof value !== 'string') return false; // fix for ts\n    return isValid(new Date(value));\n  },\n  message: 'Not a valid time',\n};\n\nconst pastTimeValidator = {\n  validate: (value: InputValue) => {\n    if (typeof value !== 'string') return false; // fix for ts\n    return isPast(new Date(value));\n  },\n  message: 'Must be in the past',\n};\n\nconst formConfig: FormConfig = {\n  timePeriod: {\n    defaultValue: TIME_PERIOD_TYPES.day,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  resolution: {\n    defaultValue: RESOLUTIONS.low,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  customFromTime: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        validTimeValidator,\n        pastTimeValidator,\n        {\n          validate: (value, formInputs) => {\n            if (typeof value !== 'string') return false; // fix for ts\n            if (!formInputs) return true;\n            const toTime = formInputs.customToTime.value as string;\n            if (!toTime) return true;\n            if (!isBefore(new Date(value), new Date(toTime))) {\n              return false;\n            }\n            return true;\n          },\n          message: 'Must be before \"to\" time',\n        },\n      ]\n    },\n  },\n  customToTime: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        validTimeValidator,\n        pastTimeValidator,\n        {\n          validate: (value, formInputs) => {\n            if (typeof value !== 'string') return false; // fix for ts\n            if (!formInputs) return true;\n            const fromTime = formInputs.customFromTime.value as string;\n            if (!fromTime) return true;\n            if (!isAfter(new Date(value), new Date(fromTime))) {\n              return false;\n            }\n            return true;\n          },\n          message: 'Must be after \"from\" time',\n        },\n      ]\n    },\n  },\n  interpolation: {\n    defaultValue: INTERPOLATION_OPTIONS.linear.value,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  range: {\n    defaultValue: RANGES.auto,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  justify-content: space-around;\n  margin: 30px 0 30px 0;\n`;\n\nconst TooltipContainer = styled.div`\n  background: #444;\n  color: white;\n  border-radius: 4px;\n  padding: 7px 10px 7px 10px;\n`;\n\nconst TooltipEntry = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst TooltipEntryValue = styled.p`\n  margin: 0px;\n`;\n\ninterface ToolTipColorBarProps {\n  color: string;\n}\n\nconst TooltipColorBar = styled.div<ToolTipColorBarProps>`\n  width: 20px;\n  height: 8px;\n  border-radius: 4px;\n  background: ${({color}) => color};\n  margin: 0 5px 0 0;\n`;\n\nconst TooltipTime = styled.div`\n  color: #ddd;\n  margin: 3px 0 0 0;\n  font-size: 14px;\n`;\n\nconst LowerSection = styled.div`\n  width: 100%;\n  display: flex;\n  margin: 30px 0 0 0;\n  padding: 0 0;\n  @media (max-width: 1000px) {\n    flex-direction: column;\n  }\n`;\n\nconst LowerSectionHeading = styled.p`\n  font-size: 15px;\n  margin: 0 0 30px 0;\n  @media (max-width: 1000px) {\n    margin: 0 0 20px 0;\n  }\n  font-weight: bold;\n  color: #333;\n`;\n\nconst OptionsSection = styled.div`\n  width: 360px;\n  padding: 0 50px 0 0;\n  @media (max-width: 1000px) {\n    width: 100%;\n  }\n`;\n\nconst LegendSection = styled.div`\n  width: 100%;\n  @media (min-width: 1000px) {\n    width: 330px;\n    padding: 0 0 0 50px;\n    border-left: 1px solid #ccc;\n  }\n`;\n\nconst LegendEntryContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 0 ;\n  cursor: pointer;\n  &:hover {\n    background: #eee;\n  }\n`;\n\nconst LegendEntryDeviceName = styled.p`\n  margin: 0;\n  font-size: 14px;\n  position: relative;\n  top: -1px;\n`;\n\nconst LegendEntryField = styled.p`\n  margin: 0;\n  font-size: 14px;\n  color: #333;\n  margin: 0 0 0 3px;\n`;\n\nconst LegendEntryEmptyDataNote = styled.p`\n  margin: 0;\n  font-size: 14px;\n  color: #aaa;\n  font-style: italic;\n  margin: 0 0 0 3px;\n`;\n\nconst NoDataView = styled.div`\n  width: calc(100% - 100px);\n  margin: 0 50px;\n  height: 400px;\n  border: 1px dotted #aaa;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #777;\n  font-style: italic;\n`;\n\nexport {\n  Container,\n  TooltipContainer,\n  TooltipEntry,\n  TooltipColorBar,\n  TooltipEntryValue,\n  TooltipTime,\n  LowerSection,\n  LowerSectionHeading,\n  OptionsSection,\n  LegendSection,\n  LegendEntryContainer,\n  LegendEntryDeviceName,\n  LegendEntryField,\n  LegendEntryEmptyDataNote,\n  NoDataView,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Label,\n} from 'recharts';\nimport {format, fromUnixTime} from 'date-fns';\nimport {CurveType} from 'recharts/types/shape/Curve';\n\nimport TooltipContent from './tooltip-content';\nimport {Attributes, DataSerie} from '../types';\n\ninterface ChartProps {\n  dataSeries: DataSerie[];\n  attributes: Attributes;\n  selectedInterpolation: CurveType;\n  highlightedEntry: number | null;\n  width?: string;\n}\n\nconst Chart = (props: ChartProps) => {\n  const noDataAvailable = !_.some(props.dataSeries, serie => !_.isEmpty(serie.data));\n  return (\n    <ResponsiveContainer width={props.width || '99%'} aspect={3}>\n      <LineChart margin={{right: 0}}>\n        <CartesianGrid strokeDasharray=\"1 1\" fill='#fbfbfb' />\n        <XAxis\n          dataKey=\"unixTime\"\n          type=\"number\"\n          allowDataOverflow\n          allowDuplicatedCategory={false}\n          // @ts-ignore the type from recharts seems to be broken\n          domain={props.attributes.xAxisDomain}\n          tickFormatter={(time: number): string => {\n            return format(fromUnixTime(time), props.attributes.timeFormat);\n          }}\n          ticks={props.attributes.ticks}\n          axisLine={false}\n        >\n          {noDataAvailable && (\n            <Label value=\"No data available\" offset={180} position=\"top\" style={{fill: '#777', fontStyle: 'italic'}} />\n          )}\n        </XAxis>\n        <YAxis\n          yAxisId='left'\n          type={'number'}\n          axisLine={false}\n          width={60}\n          // @ts-ignore the type from recharts seems to be broken\n          domain={props.attributes.yAxisDomain}\n        />\n        <Tooltip\n          content={<TooltipContent />}\n          filterNull={false}\n        />\n        {_.map(props.dataSeries, (serie, index) => (\n          <Line\n            type={props.selectedInterpolation}\n            dataKey=\"value\"\n            data={serie.data}\n            stroke={serie.color}\n            strokeWidth={2}\n            strokeOpacity={\n              !_.isNull(props.highlightedEntry) && props.highlightedEntry !== index ? 0.2 : 1\n            }\n            yAxisId={serie.axis}\n            dot={false}\n            name={serie.deviceName}\n            key={index}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default Chart;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {LegendEntry} from '../types';\nimport {\n  LegendSection,\n  LowerSectionHeading,\n  TooltipColorBar,\n  LegendEntryContainer,\n  LegendEntryDeviceName,\n  LegendEntryField,\n  LegendEntryEmptyDataNote\n} from '../styled';\n\ninterface LegendProps {\n  legendEntries: LegendEntry[];\n  setHightlightedEntry: (index: number | null) => void;\n}\n\nconst Legend = (props: LegendProps) => {\n  return (\n    <LegendSection>\n      <LowerSectionHeading>Legend</LowerSectionHeading>\n      {_.map(props.legendEntries, (entry, index) => (\n        <LegendEntryContainer\n          key={`${entry.deviceName}${entry.field}`}\n          onMouseEnter={() => props.setHightlightedEntry(index)}\n          onMouseLeave={() => props.setHightlightedEntry(null)}\n        >\n          <TooltipColorBar color={entry.color} />\n          <LegendEntryDeviceName>{entry.deviceName} -</LegendEntryDeviceName>\n          <LegendEntryField>{entry.field}</LegendEntryField>\n          {entry.isDataEmpty && (\n            <LegendEntryEmptyDataNote>(no data)</LegendEntryEmptyDataNote>\n          )}\n        </LegendEntryContainer>\n      ))}\n    </LegendSection>\n  );\n};\n\nexport default Legend;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {\n  TIME_PERIODS,\n  RESOLUTIONS,\n  INTERPOLATION_OPTIONS,\n  RANGES,\n} from '../constants';\nimport {Form} from '../../../types';\n\nimport DatePicker from '../../../components/date-picker';\nimport SegmentedControl from '../../../components/segmented-control';\nimport Select from '../../../components/select';\nimport {OptionsSection, LowerSectionHeading} from '../styled';\n\nconst SEGMENT_WIDTH = 100;\n\ninterface Props {\n  form: Form;\n  hideLegend?: boolean;\n}\n\nconst Options = (props: Props) => {\n  return (\n    <OptionsSection>\n      {!props.hideLegend && (\n        <LowerSectionHeading>Options</LowerSectionHeading>\n      )}\n      <Select\n        label={'Time period'}\n        options={[..._.map(TIME_PERIODS, (period, key) => ({\n          value: key,\n          label: period.name,\n        })), {label: 'Custom', value: 'custom'}]}\n        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n          props.form.setInputValue('timePeriod', evt.target.value)\n        )}\n        value={props.form.formInputs.timePeriod.value as string}\n        margin={'0 0 15px 0'}\n        width={'300px'}\n      />\n      {props.form.formInputs.timePeriod.value === 'custom' && (\n        <>\n          <DatePicker\n            label={'From'}\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n              props.form.setInputValue('customFromTime', evt.target.value);\n              props.form.showInputValidation('customFromTime');\n            }}\n            value={props.form.formInputs.customFromTime.value as string}\n            validationErrorMessage={props.form.formInputs.customFromTime.validation.isVisible\n              ? props.form.formInputs.customFromTime.validation.message\n              : null}\n            margin={'0 0 15px 0'}\n            maxWidth={'300px'}\n          />\n          <DatePicker\n            label={'To'}\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n              props.form.setInputValue('customToTime', evt.target.value);\n              props.form.showInputValidation('customToTime');\n            }}\n            value={props.form.formInputs.customToTime.value as string}\n            validationErrorMessage={props.form.formInputs.customToTime.validation.isVisible\n              ? props.form.formInputs.customToTime.validation.message\n              : null}\n            margin={'0 0 15px 0'}\n            maxWidth={'300px'}\n          />\n        </>\n      )}\n      <SegmentedControl\n        label={'Resolution'}\n        options={_.map(RESOLUTIONS, r => ({value: r, label: r}))}\n        onChange={(value: string) => props.form.setInputValue('resolution', value)}\n        value={props.form.formInputs.resolution.value as string}\n        segmentWidth={SEGMENT_WIDTH}\n        margin={'0 0 15px 0'}\n      />\n      <SegmentedControl\n        label={'Interpolation'}\n        options={_.values(INTERPOLATION_OPTIONS)}\n        onChange={(value: string) => props.form.setInputValue('interpolation', value)}\n        value={props.form.formInputs.interpolation.value as string}\n        segmentWidth={SEGMENT_WIDTH}\n        margin={'0 0 15px 0'}\n      />\n      <SegmentedControl\n        label={'Range'}\n        options={_.map(RANGES, r => ({value: r, label: r}))}\n        onChange={(value: string) => props.form.setInputValue('range', value)}\n        value={props.form.formInputs.range.value as string}\n        segmentWidth={SEGMENT_WIDTH}\n      />\n    </OptionsSection>\n  );\n};\n\nexport default Options;\n","import React from 'react';\nimport _ from 'lodash';\nimport {TooltipProps} from 'recharts';\n\nimport {\n  TooltipContainer,\n  TooltipEntry,\n  TooltipColorBar,\n  TooltipEntryValue,\n  TooltipTime,\n} from '../styled';\n\nimport {FormattedDataPoint} from '../types';\n\nconst TooltipContent = (props: TooltipProps<number, string>) => {\n\n  if (!props.active || !props.payload || !props.payload.length) {\n    return null;\n  }\n\n  const dataPoints = _.map(props.payload, dataPoint => {\n    const formattedDataPoint = dataPoint.payload as FormattedDataPoint;\n    const valueText = formattedDataPoint.roundedValue.toString();\n    return {\n      valueText,\n      color: dataPoint.color || 'black',\n    };\n  });\n\n  const {formattedTime} = props.payload[0].payload as FormattedDataPoint;\n\n  return (\n    <TooltipContainer>\n      {_.map(dataPoints, (point, index) => (\n        <TooltipEntry key={index}>\n          <TooltipColorBar color={point.color} />\n          <TooltipEntryValue>\n            {point.valueText}\n          </TooltipEntryValue>\n        </TooltipEntry>\n      ))}\n      <TooltipTime>{formattedTime}</TooltipTime>\n    </TooltipContainer>\n  );\n};\n\nexport default TooltipContent;\n","import _ from 'lodash';\n\nimport {FormInputs} from '../../types';\nimport {Data, TickSettings} from './types';\n\nconst resolveNumDecimals = (data: Data) => {\n  let maxValue = -Infinity;\n  _.forEach(data, device => {\n    if (_.isNull(device.value)) return;\n    if (Math.abs(device.value) > maxValue) maxValue = Math.abs(device.value);\n  });\n  if (maxValue === 0) return 2;\n  // ex: ..., 1000 => 0, 100 => 0, 10 => 1, 1 => 2, 0.1 => 3, 0.01 => 4, ...\n  return Math.max(0, 2 - Math.floor(Math.log10(Math.abs(maxValue))));\n};\n\n// Note: form-wizards validation was insufficient\nconst isFormValid = (formInputs: FormInputs) => {\n  if (\n    formInputs.timePeriod.value === 'custom' &&\n    (!formInputs.customFromTime.validation.isValid ||\n      !formInputs.customToTime.validation.isValid)) {\n    return false;\n  }\n  return true;\n};\n\nconst generateTicks = (tickSettings: TickSettings, nowUnix: number) => {\n  const lastTick = tickSettings.getLastTick(nowUnix);\n  return _.times(\n    tickSettings.numTicks,\n    i => lastTick - (tickSettings.numTicks - 1 - i) * tickSettings.distance,\n  );\n};\n\nexport {\n  resolveNumDecimals,\n  isFormValid,\n  generateTicks,\n};\n","import React from 'react';\nimport {NextRouter} from 'next/router';\nimport {ic_stay_current_portrait as deviceIcon} from 'react-icons-kit/md/ic_stay_current_portrait';\nimport {ic_location_on as locationIcon} from 'react-icons-kit/md/ic_location_on';\nimport {office as organizationIcon} from 'react-icons-kit/icomoon/office';\nimport {thLarge as providerIcon} from 'react-icons-kit/fa/thLarge';\nimport {cog as ruleIcon} from 'react-icons-kit/fa/cog';\nimport dynamic from 'next/dynamic';\n\nimport {getConfig} from '../../yggio-config';\nimport {RESOURCE_TYPES, getExternalUrls} from '../../constants';\nimport {\n  useNumLocationsQuery,\n  useNumOrganizationsQuery,\n  useNumProvidersQuery,\n} from './queries';\nimport {CenteredPage} from '../../global/components';\nimport CountBox from './sub-components/count-box';\nimport {\n  Heading,\n  GreenText,\n  CountBoxesWrapper,\n  Version,\n  MapWrapper,\n} from './styled';\nimport {devicesApi, locationsApi, rulesApi} from '../../api';\n\nconst Map = dynamic(async () => import('../../components/map'), {ssr: false});\n\ninterface BasicDashboardProps {\n  router: NextRouter;\n  version?: string;\n  children?: React.FC;\n}\n\nconst DashboardPane = (props: BasicDashboardProps) => {\n  const locationsQuery = locationsApi.useLocationsQuery();\n  const devicesQuery = devicesApi.useDevicesQuery({\n    params: {},\n    select: data => data,\n  });\n\n  const numDevicesQuery = devicesApi.useNumDevicesQuery();\n  const numLocationsQuery = useNumLocationsQuery();\n  const numProvidersQuery = useNumProvidersQuery();\n  const numOrganizationsQuery = useNumOrganizationsQuery();\n  const rulesSizeQuery = rulesApi.useNumRulesQuery();\n\n  const externalUrls = getExternalUrls();\n\n  return (\n    <CenteredPage maxWidth={'1200px'}>\n      <Heading>Welcome to your <GreenText>Yggio</GreenText>.</Heading>\n\n      <CountBoxesWrapper>\n        <CountBox\n          title='Devices'\n          icon={deviceIcon as object}\n          iconSize={36}\n          query={numDevicesQuery}\n          onClick={async () => props.router.push('/devices')}\n        />\n        <CountBox\n          title='Locations'\n          icon={locationIcon as object}\n          iconSize={40}\n          query={numLocationsQuery}\n          onClick={() => window.open(externalUrls.locationManager, '_blank')}\n        />\n        <CountBox\n          title='Organizations'\n          icon={organizationIcon as object}\n          iconSize={32}\n          query={numOrganizationsQuery}\n          onClick={async () => props.router.push('/organizations')}\n        />\n        <CountBox\n          title='Rules'\n          icon={ruleIcon as object}\n          iconSize={34}\n          query={rulesSizeQuery}\n          onClick={() => window.open(externalUrls.ruleEngine, '_blank')}\n        />\n        <CountBox\n          title='Client Apps'\n          icon={providerIcon as object}\n          iconSize={34}\n          query={numProvidersQuery}\n          onClick={async () => props.router.push('/apps')}\n        />\n      </CountBoxesWrapper>\n\n      <MapWrapper>\n        <Map\n          // @ts-ignore - seem to bug the ts-compiler for some unknown reason\n          viewOnly\n          router={props.router}\n          height={'40vh'}\n          width={'100%'}\n          mapLayers={{\n            devices: {\n              _id: 'devices',\n              items: devicesQuery.data,\n              URI: RESOURCE_TYPES.devices,\n              markerShape: 'round',\n            },\n            locations: {\n              _id: 'locations',\n              items: locationsQuery.data,\n              URI: RESOURCE_TYPES.locations,\n            },\n          }}\n        />\n      </MapWrapper>\n\n\n      <Version>{getConfig().version || 'No version specified'}</Version>\n    </CenteredPage>\n  );\n};\n\nexport default DashboardPane;\n","import _ from 'lodash';\nimport {useQuery} from 'react-query';\n\nimport {\n  locationsRequests,\n  clientAppsRequests,\n  organizationsRequests,\n} from '../../api';\n\nconst useNumOrganizationsQuery = () => useQuery(\n  ['organizations'],\n  async () => organizationsRequests.fetch(),\n  {select: data => _.size(data)}\n);\n\nconst useNumProvidersQuery = () => useQuery(\n  ['providers'],\n  async () => clientAppsRequests.fetch(),\n  {select: data => _.size(data)},\n);\n\nconst useNumLocationsQuery = () => useQuery(\n  ['locations'],\n  async () => locationsRequests.fetch(),\n  {select: data => _.size(data)},\n);\n\nexport {\n  useNumLocationsQuery,\n  useNumOrganizationsQuery,\n  useNumProvidersQuery,\n};\n","import styled from 'styled-components';\n\nimport ContainerBox from '../../components/container-box';\nimport {COLORS} from '../../constants';\n\nconst Heading = styled.h2`\n  font-size: 23px;\n  color: #222;\n  margin: 50px 0 40px 0;\n  @media (max-width: 500px){\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst GreenText = styled.span`\n  color: #21752b;\n`;\n\nconst CountBoxesWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nconst CountBoxContainer = styled(ContainerBox)`\n  min-height: 100px;\n  width: 200px;\n  height: 80px;\n  box-sizing: border-box;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  transition: border-color 200ms;\n\n  &:hover {\n    border-color: #21752b;\n    transition: border-color 200ms;\n  }\n\n  @media (min-width: 980px) {\n    width: 19%;\n  }\n  @media (max-width: 980px) and (min-width: 500px) {\n    width: 49%;\n  }\n  @media (max-width: 500px){\n    width: 100%;\n  }\n\n  h3 {\n    font-size: 25px;\n    margin: 0 0 3px 0;\n  }\n  h4 {\n    font-size: 14px;\n    color: #555;\n    font-weight: normal;\n    margin: 0;\n  }\n`;\n\nconst IconContainer = styled.div`\n  padding: 0 20px 0 20px;\n  color: #3C7D44;\n`;\n\nconst Version = styled.div`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n  font-size: 0.6em;\n`;\n\nconst MapWrapper = styled.div`\n  margin: 5px 0 20px 0;\n  border-radius: 5px;\n  overflow: hidden;\n  width: 100%;\n  box-shadow: 0px 0px 7px rgba(0, 0, 0, .1);\n  border: 1px solid ${COLORS.greyAlt};\n`;\n\nexport {\n  Heading,\n  GreenText,\n  CountBoxesWrapper,\n  CountBoxContainer,\n  IconContainer,\n  Version,\n  MapWrapper,\n};\n","import React from 'react';\nimport Icon from 'react-icons-kit';\nimport {UseQueryResult} from 'react-query';\n\nimport Spinner from '../../../components/spinner';\nimport {\n  CountBoxContainer,\n  IconContainer,\n} from '../styled';\n\ninterface CountBoxProps {\n  title: string;\n  icon: object;\n  iconSize: number,\n  query: UseQueryResult;\n  onClick: () => void;\n}\n\nconst CountBox = (props: CountBoxProps) => (\n  <CountBoxContainer onClick={props.onClick}>\n    <IconContainer>\n      <Icon icon={props.icon} size={props.iconSize} />\n    </IconContainer>\n    {props.query?.isLoading\n      ? <Spinner color={'#555'} />\n      : (\n        <div>\n          <h3>{props.query?.error ? '-' : props.query?.data as string}</h3>\n          <h4>{props.title}</h4>\n        </div>\n      )}\n  </CountBoxContainer>\n);\n\nexport default CountBox;\n","// constants.ts\n\nimport {RELEVANT_VALUES} from '../../constants';\n\nconst TABLE_ROW_HEIGHT = 44;\n\nconst VALUE_TYPES = {\n  temperature: 'temperature',\n  temperature_value: 'temperature_value',\n  averageTemperature: 'averageTemperature',\n  temperatureAverage: 'temperatureAverage',\n  temperatureAverage_value: 'temperatureAverage_value',\n  averageTemperature_value: 'averageTemperature_value',\n  humidity: 'humidity',\n  humidity_value: 'humidity_value',\n  snr: 'snr',\n  rssi: 'rssi',\n  moisture: 'moisture',\n  luminance: 'luminance',\n  illuminance: 'illuminance',\n  door: 'door',\n  presence: 'presence',\n};\n\nconst temperature = {name: 'temp', unit: '°C'};\nconst averageTemperature = {name: 'avgTemp', unit: '°C'};\nconst door = {name: 'door'};\nconst humidity = {name: 'humidity', unit: '%'};\nconst snr = {name: 'snr', unit: 'dB'};\nconst rssi = {name: 'rssi'};\nconst moisture = {name: 'moisture', unit: '%'};\nconst luminance = {name: 'luminance', unit: 'lux'};\nconst illuminance = {name: 'illuminance', unit: 'lux'};\nconst presence = {name: 'presence'};\n\nconst KNOWN_VALUES = {\n  [VALUE_TYPES.temperature]: temperature,\n  [VALUE_TYPES.temperature_value]: temperature,\n  [VALUE_TYPES.averageTemperature]: averageTemperature,\n  [VALUE_TYPES.averageTemperature_value]: averageTemperature,\n  [VALUE_TYPES.temperatureAverage]: averageTemperature,\n  [VALUE_TYPES.temperatureAverage_value]: averageTemperature,\n  [VALUE_TYPES.door]: door,\n  [VALUE_TYPES.humidity]: humidity,\n  [VALUE_TYPES.humidity_value]: humidity,\n  [VALUE_TYPES.snr]: snr,\n  [VALUE_TYPES.rssi]: rssi,\n  [VALUE_TYPES.moisture]: moisture,\n  [VALUE_TYPES.luminance]: luminance,\n  [VALUE_TYPES.illuminance]: illuminance,\n  [VALUE_TYPES.presence]: presence,\n};\n\nconst DEFAULT_PAGE_SIZE = 15;\n\nconst PAGE_SIZES = [\n  {label: '15', value: 15},\n  {label: '25', value: 25},\n  {label: '50', value: 50},\n  {label: '100', value: 100},\n  {label: '200', value: 200},\n  {label: '500', value: 500},\n  {label: '1000', value: 1000},\n];\n\nconst FILTERING_TYPES = {\n  name: 'name',\n  deviceModelName: 'deviceModelName',\n  type: 'type',\n};\n\nconst FILTER_TAGS_NAMES = {\n  filterName: 'name',\n  filterDeviceModelName: 'device model name',\n  filterType: 'type',\n};\n\nconst INTEGRATION_TYPES = [\n  {value: 'TheThingsNetwork', label: 'The Things Network'},\n  {value: 'Netmore', label: 'Netmore'},\n  {value: 'ActilityThingpark', label: 'Actility Thingpark'},\n  {value: 'CTSiCPE', label: 'CTSiCPE'},\n  {value: 'AstroClock', label: 'AstroClock'},\n  {value: 'ChirpStack', label: 'Chirp Stack'},\n];\n\nconst DEVICE_TYPES = [\n  {value: 'device', label: 'Device'},\n  {value: 'connector', label: 'Connector'},\n];\n\nconst COLUMNS = {\n  name: {\n    name: 'name',\n    width: 'minmax(100px, 3fr)',\n    sortable: true,\n  },\n  type: {\n    name: 'type',\n    width: 'minmax(0, 2fr)',\n  },\n  id: {\n    name: 'id',\n    width: 'minmax(0, 2fr)',\n  },\n  status: {\n    name: 'status',\n    width: 'minmax(50px, 1fr)',\n  },\n  values: {\n    name: 'values',\n    width: 'minmax(0, 2fr)',\n  },\n  expectedReportInterval: {\n    name: 'expectedReportInterval',\n    width: 'minmax(0, 2fr)',\n  },\n  reportedAt: {\n    name: 'reportedAt',\n    width: 'minmax(0, 2fr)',\n    align: 'right',\n    sortable: true,\n  },\n  owned: {\n    name: 'owned',\n    width: 'minmax(50px, 1fr)'\n  },\n  actions: {\n    name: 'actions',\n    width: 'minmax(0, 2fr)',\n  },\n  [RELEVANT_VALUES.lora.devEui.name]: {\n    name: RELEVANT_VALUES.lora.devEui.name,\n    width: 'minmax(0, 2fr)',\n  },\n  [RELEVANT_VALUES.lora.rssi.name]: {\n    name: RELEVANT_VALUES.lora.rssi.name,\n    width: 'minmax(0, 1fr)',\n    align: 'right',\n  },\n  [RELEVANT_VALUES.lora.frameCount.name]: {\n    name: RELEVANT_VALUES.lora.frameCount.name,\n    width: 'minmax(0, 1fr)',\n    align: 'right',\n  },\n  [RELEVANT_VALUES.lora.fPort.name]: {\n    name: RELEVANT_VALUES.lora.fPort.name,\n    width: 'minmax(0, 1fr)',\n    align: 'right',\n  },\n  [RELEVANT_VALUES.lora.dataRate.name]: {\n    name: RELEVANT_VALUES.lora.dataRate.name,\n    width: 'minmax(0, 1fr)',\n    align: 'right',\n  },\n  [RELEVANT_VALUES.lora.spreadingFactor.name]: {\n    name: RELEVANT_VALUES.lora.spreadingFactor.name,\n    width: 'minmax(0, 1fr)',\n    align: 'right',\n  },\n};\n\nconst COLUMN_PRESETS = {\n  default: {\n    name: 'Default',\n    columns: [\n      COLUMNS.name.name,\n      COLUMNS.type.name,\n      COLUMNS.status.name,\n      COLUMNS.values.name,\n      COLUMNS.reportedAt.name,\n    ],\n  },\n  lora: {\n    name: 'LoRa',\n    columns: [\n      COLUMNS.name.name,\n      COLUMNS.devEui.name,\n      COLUMNS.rssi.name,\n      COLUMNS.reportedAt.name,\n    ],\n  },\n};\n\nconst SIDEBAR_SIBLING_WIDTH = 1300;\n\nconst PAGES = {\n  default: 'default',\n  calculations: 'calculations',\n  tools: 'tools',\n  configuration: 'configuration',\n  editing: 'editing',\n  reportInterval: 'reportInterval',\n  deletion: 'deletion',\n};\n\nexport {\n  TABLE_ROW_HEIGHT,\n  DEFAULT_PAGE_SIZE,\n  PAGE_SIZES,\n  FILTERING_TYPES,\n  FILTER_TAGS_NAMES,\n  KNOWN_VALUES,\n  INTEGRATION_TYPES,\n  DEVICE_TYPES,\n  COLUMNS,\n  COLUMN_PRESETS,\n  SIDEBAR_SIBLING_WIDTH,\n  PAGES,\n};\n","import _ from 'lodash';\nimport {CALCULATIONS_TYPES} from '../../../../constants';\nimport {createValueFields} from './utils';\n\nconst DEVICE_PATHS = {\n  pm10: {\n    label: 'Pm10',\n    value: 'pm10',\n    paths: createValueFields('pm10'),\n  },\n  pm2_5: {\n    label: 'Pm2_5',\n    value: 'pm2_5',\n    paths: createValueFields('pm2_5'),\n  },\n  pm1: {\n    label: 'Pm1',\n    value: 'pm1',\n    paths: createValueFields('pm1'),\n  },\n  voc: {\n    label: 'Voc',\n    value: 'voc',\n    paths: createValueFields('voc'),\n  },\n  co: {\n    label: 'Co',\n    value: 'co',\n    paths: createValueFields('co'),\n  },\n  co2: {\n    label: 'Co2',\n    value: 'co2',\n    paths: createValueFields('co2'),\n  },\n  currentVolume: {\n    label: 'Current volume',\n    value: 'currentVolume',\n    paths: createValueFields('currentVolume'),\n  },\n  electricityConsumption: {\n    label: 'Electricity consumption',\n    value: 'electricityConsumption',\n    paths: createValueFields('electricityConsumption'),\n  },\n  electricEnergy: {\n    label: 'Electric energy',\n    value: 'electricEnergy',\n    paths: createValueFields('electricEnergy'),\n  },\n  counter: {\n    label: 'Counter',\n    value: 'counter',\n    paths: createValueFields('counter'),\n  },\n  counterATotal: {\n    label: 'Counter A total',\n    value: 'counterATotal',\n    paths: createValueFields('counterATotal'),\n  },\n  counterBTotal: {\n    label: 'Counter B total',\n    value: 'counterBTotal',\n    paths: createValueFields('counterBTotal'),\n  },\n  counterB: {\n    label: 'Counter B',\n    value: 'counterB',\n    paths: createValueFields('counterB'),\n  },\n  counterA: {\n    label: 'Counter A',\n    value: 'counterA',\n    paths: createValueFields('counterA'),\n  },\n  countDetection: {\n    label: 'Count detection',\n    value: 'countDetection',\n    paths: createValueFields('countDetection'),\n  },\n  presence: {\n    label: 'Presence',\n    value: 'presence',\n    paths: createValueFields('presence'),\n  },\n  occupancy: {\n    label: 'Occupancy',\n    value: 'occupancy',\n    paths: createValueFields('occupancy'),\n  },\n  motion: {\n    label: 'Motion',\n    value: 'motion',\n    paths: createValueFields('motion'),\n  },\n  doorCounter: {\n    label: 'Door counter',\n    value: 'doorCounter',\n    paths: createValueFields('doorCounter'),\n  },\n  door: {\n    label: 'Door',\n    value: 'door',\n    paths: createValueFields('door'),\n  },\n  alarmCloseProximity: {\n    label: 'Alarm close proximity',\n    value: 'alarmCloseProximity',\n    paths: createValueFields('alarmCloseProximity'),\n  },\n  alarmDoor: {\n    label: 'Alarm door',\n    value: 'alarmDoor',\n    paths: createValueFields('alarmDoor'),\n  },\n  alarmFlood: {\n    label: 'Alarm flood',\n    value: 'alarmFlood',\n    paths: createValueFields('alarmFlood'),\n  },\n  temperature: {\n    label: 'Temperature',\n    value: 'temperature',\n    paths: _.concat(\n      createValueFields('temperature0'),\n      createValueFields('temperature1'),\n      createValueFields('temperature'),\n      createValueFields('averageTemperature'),\n      createValueFields('temperatureAverage'),\n    ),\n  },\n  peopleCounterOut: {\n    label: 'People counter out',\n    value: 'peopleCounterOut',\n    paths: createValueFields('peopleCounter.out'),\n  },\n  peopleCounterIn: {\n    label: 'People counter in',\n    value: 'peopleCounterIn',\n    paths: createValueFields('peopleCounter.in'),\n  },\n  peopleCounterTot: {\n    label: 'People counter tot',\n    value: 'peopleCounterTot',\n    paths: createValueFields('peopleCounter.tot'),\n  }\n};\n\nconst CALCULATIONS = {\n  average: 'average',\n  averageAccumulation: 'average,accumulation',\n  accumulation: 'accumulation',\n  accumulationAccumulation: 'accumulation,accumulation',\n  lastAccumulation: 'last,accumulation',\n  lastAverage: 'last,average',\n  lastMax: 'last,max',\n  lastMin: 'last,min',\n  differenceTotal: 'differenceTotal',\n  difference: 'difference',\n};\n\nconst GROUP_TYPES = {\n  series: {\n    type: 'series',\n  },\n  time: {\n    type: 'time',\n  },\n  imd: {\n    type: 'series',\n    time: '1mo'\n  },\n};\n\nconst CALCULATION_PRESETS = [\n  {\n    value: 'a',\n    label: 'Sum of last values',\n  },\n  {\n    value: 'b',\n    label: 'Average of last values',\n  },\n  {\n    value: 'c',\n    label: 'Maximum of last values',\n  },\n  {\n    value: 'd',\n    label: 'Minimum of last values',\n  },\n  {\n    value: 'e',\n    label: 'Average of each node',\n  },\n  {\n    value: 'f',\n    label: 'Sum of each node',\n  },\n  {\n    value: 'g',\n    label: 'Aggregated value over time',\n  },\n  {\n    value: 'h',\n    label: 'Aggregated average value over time (average of sum)',\n  },\n  {\n    value: 'i',\n    label: 'Monthly sum per each node',\n  },\n  {\n    value: 'j',\n    label: 'Total monthly sum',\n  },\n  {\n    value: 'k',\n    label: 'Monthly difference from total on each node',\n  },\n  {\n    value: 'l',\n    label: 'Monthly difference from total grouped',\n  },\n];\n\nconst CALCULATION_SETTINGS = {\n  a: {\n    type: CALCULATIONS_TYPES.sumLastValues,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.lastAccumulation.split(','),\n      }\n    }\n  },\n  b: {\n    type: CALCULATIONS_TYPES.averageLastValues,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.lastAverage.split(','),\n      },\n    }\n  },\n  c: {\n    type: CALCULATIONS_TYPES.maxLastValues,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.lastMax.split(','),\n      },\n    }\n  },\n  d: {\n    type: CALCULATIONS_TYPES.min,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.lastMin.split(','),\n      },\n    }\n  },\n  e: {\n    type: CALCULATIONS_TYPES.averageEachNode,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.average.split(','),\n      },\n    }\n  },\n  f: {\n    type: CALCULATIONS_TYPES.sumEachNode,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.accumulation.split(','),\n      },\n    }\n  },\n  g: {\n    type: CALCULATIONS_TYPES.aggregatedValueOverTime,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.accumulationAccumulation.split(','),\n      },\n    }\n  },\n  h: {\n    type: CALCULATIONS_TYPES.averageAggregatedValueOverTime,\n    preset: {\n      calcType: {\n        groupingCalcs: CALCULATIONS.averageAccumulation.split(','),\n      },\n    }\n  },\n  i: {\n    type: CALCULATIONS_TYPES.monthlySumPerEachNode,\n    preset: {\n      calcType: {\n        grouping: {\n          type: 'series',\n          time: '1mo'\n        },\n        groupingCalcs: CALCULATIONS.accumulation.split(','),\n      },\n    }\n  },\n  j: {\n    type: CALCULATIONS_TYPES.totalMonthlySum,\n    preset: {\n      calcType: {\n        grouping: {\n          type: 'series',\n          time: '1mo'\n        },\n        groupingCalcs: CALCULATIONS.accumulationAccumulation.split(','),\n      },\n      interval: {\n        from: new Date(0).toISOString(),\n        to: new Date().toISOString()\n      }\n    }\n  },\n  k: {\n    type: CALCULATIONS_TYPES.monthlyDiffFromTotalEachNode,\n    preset: {\n      calcType: {\n        grouping: {\n          type: 'series',\n          time: '1mo'\n        },\n        groupingCalcs: CALCULATIONS.differenceTotal.split(','),\n      },\n      interval: {\n        from: new Date(0).toISOString(),\n        to: new Date().toISOString()\n      }\n    }\n  },\n  l: {\n    type: CALCULATIONS_TYPES.monthlyDiffFromTotal,\n    preset: {\n      calcType: {\n        grouping: {\n          type: 'series',\n          time: '1mo',\n          fn: 'last'\n        },\n        groupingCalcs: CALCULATIONS.difference.split(','),\n      },\n      interval: {\n        from: new Date(0).toISOString(),\n        to: new Date().toISOString()\n      }\n    }\n  },\n};\n\nconst CALCULATION_DESCRIPTIONS = {\n  a: 'This setting will calculate the sum of your last reported values',\n  b: 'This setting will calculate the average value of your last reported values',\n  c: 'This setting will calculate the maximum value of your last reported values',\n  d: 'This setting will calculate the minimum value of your last reported values',\n  e: 'This setting will calculate average value of each device selected',\n  f: 'This setting will calculate sum value of each device selected',\n  g: 'This setting will calculate the aggregated value over time',\n  h: 'This setting will calculate the average value of the aggregated values over time',\n  i: 'This setting will calculate the monthly sum for each device selected',\n  j: 'This setting will calculate the total monthly sum',\n  k: 'This setting will calculate the monthly difference from total value on each device',\n  l: 'This setting will calculate the monthly difference from total value of all devices',\n};\n\nconst STEPS = {\n  calculationName: {\n    name: 'calculationName',\n    progressBarTitle: 'DESCRIPTION',\n  },\n  calculationSource: {\n    name: 'calculationSource',\n    progressBarTitle: 'SOURCE',\n  },\n  calculationSetting: {\n    name: 'calculationSetting',\n    progressBarTitle: 'SETTING',\n  },\n  calculationInterval: {\n    name: 'calculationInterval',\n    progressBarTitle: 'INTERVAL'\n  },\n  calculationDevice: {\n    name: 'calculationDevice',\n    progressBarTitle: 'DEVICE',\n  },\n};\n\nconst CALCULATION_AUTOMATIC_UPDATE_TYPES = {\n  event: 'event',\n  periodic: 'periodic',\n};\n\nexport {\n  DEVICE_PATHS,\n  CALCULATIONS,\n  GROUP_TYPES,\n  CALCULATION_PRESETS,\n  CALCULATION_SETTINGS,\n  CALCULATION_DESCRIPTIONS,\n  STEPS,\n  CALCULATION_AUTOMATIC_UPDATE_TYPES,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport Icon from 'react-icons-kit';\nimport {calculator} from 'react-icons-kit/icomoon/calculator';\nimport {infoCircle} from 'react-icons-kit/fa/infoCircle';\nimport {useQueryClient} from 'react-query';\nimport {compose} from 'lodash/fp';\nimport {NextRouter} from 'next/router';\n\nimport {Calculate, Calculation, Device, Devices, Interval} from '../../../../types';\nimport {FlexWrapper} from '../../../../global/styled';\nimport selectors, {selectDevices} from './selectors';\nimport Button from '../../../../components/button';\nimport Select from '../../../../components/select';\nimport {withReselect, withLanguage} from '../../../../hocs';\nimport {formState, navigationState} from './state';\nimport TextField from '../../../../components/text-field';\nimport {\n  CalculationContainerBox,\n  CalculationIntervalContainer,\n  CalculationPaneWrapper,\n  CalculationParagraph,\n  CalculationProgressContainer,\n  CalculationSpan,\n  CreateCalculationButtonContainer,\n  CreateCalculationDescription,\n  CreateCalculationText,\n  MarginFlexColWrapper,\n  StyledDatePicker,\n  StyledFlexWrapper,\n} from './styled';\nimport StepProgressBar from '../../../../components/step-progress-bar';\nimport RadioButton from '../../../../components/radio-button';\nimport {isDisabledCreateCalculationButton, isDisabledDatePicker, buildSourcePath} from './utils';\nimport {\n  CALCULATION_DESCRIPTIONS,\n  CALCULATION_SETTINGS,\n  CALCULATION_PRESETS,\n  STEPS,\n  CALCULATION_AUTOMATIC_UPDATE_TYPES,\n} from './constants';\nimport {CALCULATION_NAMES} from '../../../../constants';\nimport {useFetchDevices} from '../../queries';\nimport {devicesApi, calculationsApi, devicesRequests} from '../../../../api';\nimport {getFormValues} from '../../../../utils/form-wizard';\nimport {useLocalState} from '../../../../hooks';\n\nconst steps = [\n  {name: STEPS.calculationSetting.name, progressBarTitle: 'SETTING'},\n  {name: STEPS.calculationSource.name, progressBarTitle: 'SOURCE'},\n  {name: STEPS.calculationName.name, progressBarTitle: 'DESCRIPTION'},\n  {name: STEPS.calculationInterval.name, progressBarTitle: 'INTERVAL'},\n  {name: STEPS.calculationDevice.name, progressBarTitle: 'DEVICE'},\n];\n\n\ninterface ProgressBarTitleProps {\n  selectedDevices: string[];\n  t(key: string): string;\n}\n\nconst ProgressBarTitle = (props: ProgressBarTitleProps) => (\n  <>\n    <Icon size={16} icon={calculator as object} />\n    &nbsp;\n    {_.capitalize(props.t('titles.createCalculation'))}\n    &nbsp;\n    <CalculationSpan>\n      ({_.size(props.selectedDevices)} {props.t('phrases.devicesSelected')})\n    </CalculationSpan>\n  </>\n);\n\ninterface CalculationPaneProps {\n  selectedDevices: string[];\n  devices: Devices;\n  router: NextRouter;\n  devicePaths: {\n    value: string;\n    label: string;\n  }[];\n\n  t(key: string): string;\n  setSelectMode(key: boolean): void;\n  setSelectedDevices(key: []): void;\n  setPage(key: string): void;\n}\n\ninterface Source {\n  sourceId: string;\n  path: string;\n  currentValue: object;\n}\n\nconst BasicCalculationPane = (props: CalculationPaneProps) => {\n  if (!_.size(props.selectedDevices)) {\n    return props.router.push('/devices');\n  }\n\n  const queryClient = useQueryClient();\n\n  const formData = useLocalState(formState);\n  const navState = useLocalState(navigationState);\n\n  const destPath = formData.formInputs.destination.value;\n  const nameFilter = formData.formInputs.deviceNameFilter.value;\n  const matchPattern = {name: nameFilter};\n  const params = {\n    filter: {matchPattern},\n    key: 'calculations',\n  };\n\n  React.useEffect(() => {\n    formData.setInputValue('devices', props.devices);\n  }, []);\n\n  const useCreateCalculation = calculationsApi.useCreateCalculation(queryClient);\n  const useCreateDevice = devicesApi.useCreateDevice(queryClient);\n  const useUpdateDevice = devicesApi.useUpdateDevice(queryClient);\n  const devicesResult = useFetchDevices({params});\n  const selectableDevices = selectDevices({devices: devicesResult?.data});\n\n  //\n  //\n  // EVENTS\n  //\n  //\n\n  const createCalculation = async () => {\n    const formValues = getFormValues(formData.formInputs);\n    const devices = _.pick(formValues.devices, props.selectedDevices) as Devices;\n    const sources = _.map(devices, device => {\n      const path = buildSourcePath(formValues.devicePath, device, device.secret);\n      if (path) {\n        return ({\n          sourceId: device._id,\n          path,\n          currentValue: {} // ?\n        });\n      }\n    });\n\n    const calcSettings = CALCULATION_SETTINGS[\n      formValues.preset as keyof typeof CALCULATION_SETTINGS\n    ];\n    const intervalData = {\n      from: formValues.calculationTimePeriodFrom,\n      to: formValues.calculationTimePeriodTo,\n    };\n    // eslint-disable-next-line\n    const interval: Interval = intervalData.from && intervalData.to\n      ? intervalData\n      // FIXME:\n      // @ts-ignore - TS cant seem to read CALCULATIONS_SETTINGS properly as\n      // interval DOES exist in it but TS complains about it not existing there??\n      : calcSettings.preset.interval;\n    const automaticUpdate = formValues.automaticUpdate\n      ? CALCULATION_AUTOMATIC_UPDATE_TYPES.event\n      : CALCULATION_AUTOMATIC_UPDATE_TYPES.periodic;\n    const calculation = {\n      ...calcSettings.preset,\n      automaticUpdate,\n      interval: formValues.interval && interval,\n    };\n\n    const data: Omit<Calculation, '_id'> = {\n      name: formValues.name as string,\n      type: calcSettings.type as string,\n      calculation: calculation as Calculate,\n      sources: _.compact(sources) as Source[],\n      destination: {\n        mongoId: formValues.deviceSelection as string,\n        path: `calculations.${formValues.customDestinationPath || 'values'}`,\n      },\n    };\n\n    if (destPath === 'createNewDevice') {\n      const result = await useCreateDevice.mutateAsync({\n        name: formValues.createDeviceName as string,\n      });\n      data.destination.mongoId = result._id;\n    }\n\n    if (formValues.automaticUpdate) {\n      const setupAutoUpdate = async () => {\n        const deviceItems = _.map(data.sources, 'sourceId');\n        const soughtDevices = devicesRequests.seek({deviceItems});\n        const updatedSources = _.map(data.sources, (source: Source) => {\n          const device = _.find(soughtDevices, (device: Device) => (\n            device._id === source.sourceId) as Partial<Device>);\n          const rabbitRouting = (_.get(device, 'rabbitRouting.value') || []) as [];\n          const updates = {\n            rabbitRouting: {\n              value: _.uniq([\n                ...rabbitRouting,\n                'calculator',\n                'receiver',\n              ]),\n            }\n          };\n          useUpdateDevice.mutate({updates, deviceId: source.sourceId});\n        });\n        await Promise.all(updatedSources);\n      };\n      /* eslint-disable-next-line */\n      setupAutoUpdate();\n    }\n    useCreateCalculation.mutate({data});\n\n    // setPage needs to be executed before setSelectedDevices to avoid error\n    props.setPage('default');\n    props.setSelectMode(false);\n    props.setSelectedDevices([]);\n  };\n\n  const onChangeCalculation = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {target} = evt;\n    const value = target.type === 'checkbox'\n      ? target.checked\n      : target.value;\n    formData.setInputValue(target.name, value);\n  };\n\n  return (\n    <CalculationPaneWrapper>\n      <CalculationProgressContainer>\n        <StepProgressBar\n          title={<ProgressBarTitle t={props.t} selectedDevices={props.selectedDevices} />}\n          steps={_.map(steps, 'progressBarTitle')}\n          currentStep={navState.currentStep + 1}\n          margin={'0 0 9px 0'}\n        />\n      </CalculationProgressContainer>\n\n      <CalculationContainerBox>\n        {{\n          [STEPS.calculationName.name]: (\n            <>\n              <CalculationParagraph>\n                <b>{_.capitalize(props.t('titles.description'))}</b>\n                <CreateCalculationText>\n                  &nbsp;- {props.t('phrases.calculationDescription')}\n                </CreateCalculationText>\n              </CalculationParagraph>\n              <TextField\n                name={'name'}\n                value={CALCULATION_NAMES[\n                  formData.formInputs.name.value as keyof typeof CALCULATION_NAMES\n                ]}\n                onChange={onChangeCalculation}\n                placeholder={props.t('placeholders.calculationName')}\n                margin={'0 10px 20px 0'}\n                autoFocus\n                maxLength={30}\n              />\n              <CreateCalculationButtonContainer>\n                <Button\n                  content={'Back'}\n                  ghosted\n                  onClick={navState.decrementCurrentStep}\n                />\n                <Button\n                  disabled={!_.get(formData.formInputs, 'name.validation.isValid')}\n                  color={'green'}\n                  content={_.capitalize(props.t('labels.continue'))}\n                  onClick={navState.incrementCurrentStep}\n                />\n              </CreateCalculationButtonContainer>\n            </>\n          ),\n          [STEPS.calculationSource.name]: (\n            <>\n              <CreateCalculationDescription>\n                {props.t('phrases.sourcePathDescription')}\n              </CreateCalculationDescription>\n              <CalculationParagraph>\n                <b>{props.t('titles.sourcePath')}</b>\n                <CreateCalculationText>\n                  &nbsp;- {props.t('phrases.sourcePathText')}\n                </CreateCalculationText>\n              </CalculationParagraph>\n              <Select\n                isClearable\n                width={'100%'}\n                name={'devicePath'}\n                placeholder={props.t('placeholders.devicePaths')}\n                options={props.devicePaths}\n                margin={'0 10px 20px 0'}\n                value={formData.formInputs.devicePath.value as string}\n                onChange={onChangeCalculation}\n              />\n              <CreateCalculationButtonContainer>\n                <Button\n                  content={_.capitalize(props.t('labels.back'))}\n                  ghosted\n                  onClick={navState.decrementCurrentStep}\n                />\n                <Button\n                  disabled={!_.get(formData.formInputs, 'devicePath.validation.isValid')}\n                  color={'green'}\n                  content={_.capitalize(props.t('labels.continue'))}\n                  onClick={navState.incrementCurrentStep}\n                />\n              </CreateCalculationButtonContainer>\n            </>\n          ),\n          [STEPS.calculationSetting.name]: (\n            <>\n              <CreateCalculationDescription>\n                {props.t('phrases.createCalculationDescription')}&nbsp;\n                {props.t('phrases.calculationSettingDescription')}\n              </CreateCalculationDescription>\n              <CalculationParagraph>\n                <b>{props.t('titles.setting')}</b>\n                <CreateCalculationText>\n                  &nbsp;- The predetermined calculation setting\n                </CreateCalculationText>\n              </CalculationParagraph>\n              <Select\n                isClearable\n                name={'preset'}\n                placeholder={props.t('placeholders.preset')}\n                options={CALCULATION_PRESETS}\n                margin={'0 10px 20px 0'}\n                value={formData.formInputs.preset.value as string}\n                onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                  onChangeCalculation({\n                    ...evt,\n                    target: {...evt.target, value: evt.target.value, name: 'preset'},\n                  });\n                  onChangeCalculation({\n                    ...evt,\n                    target: {...evt.target, value: evt.target.value, name: 'name'},\n                  });\n                }}\n              />\n\n              <CreateCalculationDescription>\n                {formData.formInputs.preset.value && <Icon icon={infoCircle as object} />}\n                {CALCULATION_DESCRIPTIONS[\n                  formData.formInputs.preset.value as keyof typeof CALCULATION_DESCRIPTIONS\n                ]}\n              </CreateCalculationDescription>\n\n              <FlexWrapper>\n                <input\n                  name={'automaticUpdate'}\n                  onChange={onChangeCalculation}\n                  type={'checkbox'}\n                  checked={!!formData.formInputs.automaticUpdate.value}\n                />\n                <span>Automatic update on event</span>\n              </FlexWrapper>\n\n              <CreateCalculationButtonContainer>\n                <Button\n                  content={_.capitalize(props.t('labels.cancel'))}\n                  ghosted\n                  onClick={() => {\n                    props.setSelectMode(false);\n                    props.setSelectedDevices([]);\n                    props.setPage('default');\n                  }}\n                />\n                <Button\n                  disabled={!_.get(formData.formInputs, 'preset.validation.isValid')}\n                  color={'green'}\n                  content={'Continue'}\n                  onClick={navState.incrementCurrentStep}\n                />\n              </CreateCalculationButtonContainer>\n            </>\n          ),\n          [STEPS.calculationInterval.name]: (\n            <>\n              <CalculationParagraph>\n                <b>{props.t('titles.interval')}</b>\n                <CreateCalculationText>\n                  &nbsp;- {props.t('phrases.calculationIntervalText')}\n                  &nbsp; {\n                    isDisabledDatePicker(formData.formInputs) && (\n                      `(${props.t('phrases.calculationIntervalDisabled')})`\n                    )\n                  }\n                </CreateCalculationText>\n              </CalculationParagraph>\n              {!isDisabledDatePicker(formData.formInputs) && (\n                <FlexWrapper>\n                  <input\n                    name={'interval'}\n                    onChange={onChangeCalculation}\n                    type={'checkbox'}\n                    checked={!!formData.formInputs.interval.value}\n                  />\n                  <span>Interval activation</span>\n                </FlexWrapper>\n              )}\n              <MarginFlexColWrapper>\n                <CalculationIntervalContainer>\n                  <StyledDatePicker\n                    margin={'0 10px 0'}\n                    disabled={isDisabledDatePicker(formData.formInputs) || !_.get(formData.formInputs, 'interval.value')}\n                    name={'calculationTimePeriodFrom'}\n                    value={_.get(formData.formInputs, 'calculationTimePeriodFrom.value')}\n                    onChange={onChangeCalculation}\n                  />\n                  <StyledDatePicker\n                    margin={'0 10px 0'}\n                    disabled={isDisabledDatePicker(formData.formInputs) || !_.get(formData.formInputs, 'interval.value')}\n                    name={'calculationTimePeriodTo'}\n                    value={_.get(formData.formInputs, 'calculationTimePeriodTo.value')}\n                    onChange={onChangeCalculation}\n                  />\n                </CalculationIntervalContainer>\n              </MarginFlexColWrapper>\n              <CreateCalculationButtonContainer>\n                <Button\n                  content={_.capitalize(props.t('labels.back'))}\n                  ghosted\n                  onClick={navState.decrementCurrentStep}\n                />\n                <Button\n                  disabled={!_.get(formData.formInputs, 'preset.value')}\n                  color={'green'}\n                  content={_.capitalize(props.t('labels.continue'))}\n                  onClick={navState.incrementCurrentStep}\n                />\n              </CreateCalculationButtonContainer>\n            </>\n          ),\n          [STEPS.calculationDevice.name]: (\n            <>\n              <CalculationParagraph>\n                <b>{props.t('titles.destination')}</b>\n                <CreateCalculationText>\n                  &nbsp;- {props.t('phrases.calculationDestinationText')}\n                </CreateCalculationText>\n              </CalculationParagraph>\n              {/* @ts-ignore - don't understand why this triggers error */}\n              <StyledFlexWrapper justifyContent={'space-around'}>\n                <FlexWrapper>\n                  <RadioButton\n                    isSelected={formData.formInputs.destination.value === 'createNewDevice'}\n                    onClick={() => formData.setInputValue('destination', 'createNewDevice')}\n                  />\n                  &nbsp;\n                  <CalculationSpan>{_.capitalize(props.t('labels.newDevice'))}</CalculationSpan>\n                </FlexWrapper>\n\n                <FlexWrapper>\n                  <RadioButton\n                    isSelected={formData.formInputs.destination.value === 'saveToDevice'}\n                    onClick={() => formData.setInputValue('destination', 'saveToDevice')}\n                  />\n                  &nbsp;\n                  <CalculationSpan>{_.capitalize(props.t('labels.existingDevice'))}</CalculationSpan>\n                </FlexWrapper>\n              </StyledFlexWrapper>\n\n              {formData.formInputs.destination.value === 'saveToDevice' && (\n                <>\n                  <CreateCalculationDescription>\n                    {props.t('phrases.calculationDeviceSearchDescription')}\n                  </CreateCalculationDescription>\n\n                  <CalculationParagraph>\n                    <b>{props.t('titles.deviceSelection')}</b>\n                    <CreateCalculationText>\n                      &nbsp;- {props.t('phrases.calculationDeviceSearchText')}\n                    </CreateCalculationText>\n                  </CalculationParagraph>\n                  <TextField\n                    name={'deviceNameFilter'}\n                    value={formData.formInputs.deviceNameFilter.value as string}\n                    onChange={onChangeCalculation}\n                    placeholder={props.t('placeholders.deviceNameFilter')}\n                    margin={'0 10px 20px 0'}\n                    autoFocus\n                    maxLength={50}\n                  />\n                  <Select\n                    name={'deviceSelection'}\n                    placeholder={props.t('placeholders.selectDevice')}\n                    options={selectableDevices}\n                    margin={'0 10px 20px 0'}\n                    value={formData.formInputs.deviceSelection.value as string}\n                    onChange={onChangeCalculation}\n                  />\n                </>\n              )}\n\n              {formData.formInputs.destination.value === 'createNewDevice' && (\n                <>\n                  <CalculationParagraph>\n                    <b>{props.t('titles.deviceName')}</b>\n                    <CreateCalculationText>\n                      &nbsp;- {props.t('phrases.calculatedDeviceName')}\n                    </CreateCalculationText>\n                  </CalculationParagraph>\n                  <TextField\n                    name={'createDeviceName'}\n                    value={formData.formInputs.createDeviceName.value as string}\n                    onChange={onChangeCalculation}\n                    placeholder={props.t('placeholders.newDeviceName')}\n                    margin={'0 10px 20px 0'}\n                    autoFocus\n                    maxLength={50}\n                  />\n                </>\n              )}\n\n              {(formData.formInputs.destination.value === 'createNewDevice' || formData.formInputs.destination.value === 'saveToDevice') && (\n                <>\n                  <CalculationParagraph>\n                    <b>{props.t('titles.destinationPath')}</b>\n                    <CreateCalculationText>\n                      &nbsp;- {props.t('phrases.calculationDestinationPath')}\n                    </CreateCalculationText>\n                  </CalculationParagraph>\n                  <TextField\n                    isRequired\n                    name={'customDestinationPath'}\n                    value={formData.formInputs.customDestinationPath.value as string}\n                    onChange={onChangeCalculation}\n                    placeholder={props.t('placeholders.customDevicePath')}\n                    margin={'0 10px 20px 0'}\n                    autoFocus\n                  />\n                </>\n              )}\n              <CreateCalculationButtonContainer>\n                <Button\n                  content={_.capitalize(props.t('labels.back'))}\n                  ghosted\n                  onClick={navState.decrementCurrentStep}\n                />\n                <Button\n                  color={'green'}\n                  disabled={isDisabledCreateCalculationButton(formData.formInputs)}\n                  onClick={createCalculation}\n                  content={_.capitalize(props.t('labels.submit'))}\n                  width={'150px'}\n                  margin={'10px'}\n                />\n              </CreateCalculationButtonContainer>\n            </>\n          ),\n          // eslint-disable-next-line no-useless-computed-key\n          ['STEP_NOT_FOUND']: (\n            <div>NOT FOUND</div>\n          ),\n        }[steps[navState.currentStep].name || 'STEP_NOT_FOUND']}\n\n\n      </CalculationContainerBox>\n    </CalculationPaneWrapper>\n  );\n};\n\nconst CalculationPane = compose(\n  withReselect(selectors),\n  withLanguage()\n)(BasicCalculationPane);\n\nexport default CalculationPane;\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\nimport {DEVICE_PATHS} from './constants';\n\nconst accessibleDevicePathsSelector = createSelector(\n  props => props.selectedDevices,\n  props => props.devices,\n  (selectedDevicesIds, devices) => {\n    const selectedDevices = _.pick(devices, selectedDevicesIds);\n    const obtainableDevicePaths = _.reduce(selectedDevices, (acc, curr) => {\n      const keys = _.keys(curr);\n      const matchPaths = _.filter(DEVICE_PATHS, ({paths, label, value}) => {\n        const accessiblePaths = _.filter(paths, path => {\n          return _.includes(keys, path);\n        });\n        if (!_.isEmpty(accessiblePaths)) {\n          return {\n            label,\n            value,\n          };\n        }\n      });\n      if (matchPaths) {\n        acc = [...acc, ...matchPaths];\n      }\n      return acc;\n    }, []);\n    return _.uniq(obtainableDevicePaths);\n  }\n);\n\nconst selectableDevicesSelector = createSelector(\n  props => props.devices,\n  devices => {\n    return _.map(devices, curr => {\n      return {\n        value: curr._id,\n        label: curr.name,\n      };\n    }, []);\n  }\n);\n\nconst selectableCalculationsSelector = createSelector(\n  props => props.calculations,\n  calculations => {\n    return _.map(calculations, curr => {\n      return {\n        value: curr._id,\n        label: curr.name,\n      };\n    }, []);\n  }\n);\n\nconst selectDevices = createSelector(\n  props => props.devices,\n  devices => {\n    return _.map(devices, curr => {\n      return {\n        value: curr._id,\n        label: curr.name,\n      };\n    }, []);\n  }\n);\n\nexport default {\n  devicePaths: accessibleDevicePathsSelector,\n  selectableDevices: selectableDevicesSelector,\n  selectableCalculations: selectableCalculationsSelector,\n};\nexport {\n  selectDevices,\n};\n","import _ from 'lodash';\nimport {format} from 'date-fns';\nimport {Action, InputValue} from '../../../../types';\nimport {generateForm, inputValidators, VALIDATION_VISIBILITY_TYPES} from '../../../../utils/form-wizard';\n\ninterface NavState {\n  [currentStep: string]: number;\n}\n\nconst saveToDeviceFormData = {\n  deviceSelection: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please select a valid device',\n      }],\n    }\n  },\n};\n\nconst createNewDeviceFormData = {\n  createDeviceName: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validMessage: `Valid`,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n        inputValidators.maximumLength(50),\n      ],\n    }\n  },\n};\n\nconst createCalculation = {\n  preset: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please choose a preset',\n      }],\n    }\n  },\n  name: {\n    defaultValue: 'Your custom calculation description',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please enter a valid name',\n      }],\n    }\n  },\n  devicePath: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please enter a valid path',\n      }],\n    }\n  },\n  calculationType: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please enter a valid calculation',\n      }],\n    }\n  },\n  groupType: {\n    defaultValue: 'series',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please enter a valid group type',\n      }],\n    }\n  },\n  interval: {\n    defaultValue: false,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  calculationTimePeriodFrom: {\n    defaultValue: '1970-01-01T00:00',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  calculationTimePeriodTo: {\n    defaultValue: format(new Date(), 'yyyy-MM-dd\\'T\\'hh:mm'),\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  destination: {\n    defaultValue: 'createNewDevice',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please enter a valid destination',\n      }],\n    }\n  },\n  customDestinationPath: {\n    defaultValue: 'data',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => _.isString(value) && !(/\\s/g.test(value)),\n        message: 'Please enter a valid destination path',\n      }],\n    }\n  },\n  deviceNameFilter: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  devices: {\n    defaultValue: {},\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  automaticUpdate: {\n    defaultValue: true,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst performCalculation = {\n  selectedCalculation: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst ACTION_TYPES = {\n  setCurrentStep: 'setCurrentStep',\n  incrementCurrentStep: 'incrementCurrentStep',\n  decrementCurrentStep: 'decrementCurrentStep',\n};\n\ninterface Actions {\n  setCurrentStep: (currentStep: number) => void;\n  incrementCurrentStep: () => void;\n  decrementCurrentStep: () => void;\n}\n\nconst actions: Actions = {\n  setCurrentStep: (currentStep: number) => ({\n    type: ACTION_TYPES.setCurrentStep,\n    payload: {currentStep},\n  }),\n  incrementCurrentStep: () => ({\n    type: ACTION_TYPES.incrementCurrentStep,\n  }),\n  decrementCurrentStep: () => ({\n    type: ACTION_TYPES.decrementCurrentStep,\n  }),\n};\n\nconst defaultState: NavState = {\n  currentStep: 0,\n};\n\nconst reducer = (\n  state = defaultState,\n  action: Action<NavState>,\n) => {\n  if (!action) {\n    return state;\n  }\n  const {type, payload} = action;\n\n  switch (type) {\n    case ACTION_TYPES.setCurrentStep: {\n      const {currentStep} = payload;\n      return {\n        ...state,\n        currentStep,\n      };\n    }\n    case ACTION_TYPES.incrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      };\n    }\n    case ACTION_TYPES.decrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep - 1,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst navigationState = {\n  actions,\n  reducer,\n};\n\nconst formData = {\n  ...createCalculation,\n  ...saveToDeviceFormData,\n  ...createNewDeviceFormData,\n  ...performCalculation,\n};\n\nconst formState = generateForm(formData);\n\n\nexport {\n  formState,\n  navigationState,\n  NavState,\n};\n","import styled from 'styled-components';\nimport ContainerBox from '../../../../components/container-box';\nimport {COLORS} from '../../../../constants';\nimport {FlexColWrapper, FlexMaxWidthSpaceBetweenWrapper, FlexWrapper} from '../../../../global/styled';\nimport DatePicker from '../../../../components/date-picker';\n\nconst CalculationPaneWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  height: calc(100% - 45px);\n`;\n\nconst CalculationContainerBox = styled(ContainerBox)`\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width:800px)  {\n    width: 800px;\n    padding: 20px;\n  }\n`;\n\nconst CalculationProgressContainer = styled.div`\n  width: 800px;\n  margin: 20px 0 5px;\n`;\n\nconst CalculationTitle = styled(FlexWrapper)`\n  align-items: center;\n`;\n\nconst CreateCalculationText = styled.span`\n  color: ${COLORS.greyMedium};\n`;\n\nconst CreateCalculationDescription = styled.span`\n  font-size: 0.8em;\n  display: flex;\n  align-items: center;\n  height: 60px;\n`;\n\nconst CreateCalculationButtonContainer = styled(FlexMaxWidthSpaceBetweenWrapper)`\n  height: 100px;\n  align-items: flex-end;\n`;\n\nconst CalculationParagraph = styled.p`\n  font-size: 0.8em;\n`;\n\nconst CalculationSpan = styled.span`\n  font-size: 0.8em;\n`;\n\nconst MarginFlexColWrapper = styled(FlexColWrapper)`\n  margin: 10px;\n`;\n\nconst CalculationIntervalContainer = styled(FlexWrapper)`\n  width: 500px;\n  margin-bottom: 10px;\n`;\n\nconst StyledDatePicker = styled(DatePicker)`\n  width: 220px;\n`;\n\nconst StyledFlexWrapper = styled(FlexWrapper)`\n  width: 50%;\n`;\n\nexport {\n  CalculationPaneWrapper,\n  CalculationContainerBox,\n  CalculationProgressContainer,\n  CalculationTitle,\n  CreateCalculationText,\n  CreateCalculationDescription,\n  CreateCalculationButtonContainer,\n  CalculationParagraph,\n  CalculationSpan,\n  MarginFlexColWrapper,\n  CalculationIntervalContainer,\n  StyledDatePicker,\n  StyledFlexWrapper,\n};\n","import _ from 'lodash';\nimport {DEVICE_PATHS} from './constants';\n\nconst buildSourcePath = (type, value, isGeneric) => {\n  const {paths} = DEVICE_PATHS[type];\n  const availablePaths = _.pick(value, paths);\n  const path = _.reduce(availablePaths, (acc, curr, index) => {\n    if (_.isPlainObject(curr)) {\n      const keys = _.keys(curr);\n      _.each(keys, key => {\n        acc = `${index}_${key}`;\n      });\n    }\n\n    if (_.isString(curr) || _.isNumber(curr)) {\n      acc = index;\n    }\n    return acc;\n  }, '');\n\n  if (!path) {\n    return null;\n  }\n  if (isGeneric) {\n    return `value_${path}`;\n  }\n  return path;\n};\n\nconst isDisabledCreateCalculationButton = formInputs => {\n  const isValidName = _.get(formInputs, 'name.validation.isValid');\n  const isValidDevicePath = _.get(formInputs, 'devicePath.validation.isValid');\n  // const isValidCalculationType = _.get(formInputs, 'calculationType.validation.isValid');\n  const isValidCreateDeviceName = _.get(formInputs, 'createDeviceName.validation.isValid');\n  const isValidDeviceSelection = _.get(formInputs, 'deviceSelection.validation.isValid');\n  const isValidDestination = _.get(formInputs, 'destination.validation.isValid');\n  const isValidDestinationPath = _.get(formInputs, 'customDestinationPath.validation.isValid');\n\n  const destinationValue = _.get(formInputs, 'destination.value');\n\n  const isValidCreateNewDevice = _.eq(destinationValue, 'createNewDevice') && isValidCreateDeviceName;\n  const isValidSelectedDevice = _.eq(destinationValue, 'saveToDevice') && isValidDeviceSelection;\n\n  const isValidSaveDeviceOption = isValidCreateNewDevice || isValidSelectedDevice;\n\n  const validators = [\n    isValidName,\n    isValidDevicePath,\n    // isValidCalculationType,\n    isValidDestination,\n    isValidSaveDeviceOption,\n    isValidDestinationPath,\n  ];\n\n  return !_.every(validators);\n};\n\nconst isDisabledDatePicker = formInputs => {\n  const presetValue = _.get(formInputs, 'preset.value');\n  const disablingPresets = ['a', 'b', 'c', 'd'];\n\n  return _.includes(disablingPresets, presetValue);\n};\n\n// Different sensors have different fields, which is why this is needed to support all\nconst createValueFields = string => {\n  return [\n    string,\n    `${string}.value`,\n  ];\n};\n\nexport {\n  buildSourcePath,\n  isDisabledCreateCalculationButton,\n  isDisabledDatePicker,\n  createValueFields,\n};\n","const LORA_PRESET_SELECTIONS = {\n  // Comfort\n  a: {\n    fPort: '11',\n    data: '0103000022100B000003841B0001518022000000D023000020032A00000000',\n  },\n  b: {\n    fPort: '11',\n    data: '0103000022100B00001C201B0001518022000000D023000020032A00000000',\n  },\n  c: {\n    fPort: '11',\n    data: '01030000001022000000D00B00000E10',\n  },\n  d: {\n    fPort: '11',\n    data: '0103000002100B00001C202200000052',\n  },\n\n  // Presence\n  e: {\n    fPort: '11',\n    data: '0103010002002F00000078300000000A3100000E10',\n  },\n  f: {\n    fPort: '11',\n    data: '0103030002002E000000782F00000078300000000A3100000E10',\n  },\n\n  // Guard\n};\n\nconst LORA_LABELS: Record<string, string> = {\n  a: 'Strips Comfort - Change battery status report interval to 15 minutes',\n  b: 'Strips Comfort - Change battery status report interval to 120 minutes',\n  c: 'Strips Comfort - Change temperature moisture, lux status report interval to 60 minutes',\n  d: 'Strips Comfort - Change temperature, moisture status report interval to 120 minutes',\n  e: 'Strips Presence - Standard',\n  f: 'Strips Presence - Proximity report',\n};\n\nconst LORA_PRESETS = [\n  {label: LORA_LABELS.a, value: 'a'},\n  {label: LORA_LABELS.b, value: 'b'},\n  {label: LORA_LABELS.c, value: 'c'},\n  {label: LORA_LABELS.d, value: 'd'},\n  {label: LORA_LABELS.e, value: 'e'},\n  {label: LORA_LABELS.f, value: 'f'},\n];\n\nconst DEFAULT_CONFIG_OPTIONS = [\n  {label: 'Presets', value: 'presets'},\n  {label: 'Custom', value: 'custom'},\n];\n\nexport {\n  LORA_PRESET_SELECTIONS,\n  LORA_LABELS,\n  LORA_PRESETS,\n  DEFAULT_CONFIG_OPTIONS,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {NextRouter} from 'next/router';\nimport {useQueryClient} from 'react-query';\nimport {IdKeyedDevices} from '../../../../types';\nimport ProgressBar from '../../../../components/progress-bar';\nimport Select from '../../../../components/select';\nimport ContainerBox from '../../../../components/container-box';\nimport Button from '../../../../components/button';\nimport TextField from '../../../../components/text-field';\nimport {CenteredPage} from '../../../../global/components';\nimport StepProgressBar from '../../../../components/step-progress-bar';\nimport {\n  FlexColCenterMaxWidthWrapper,\n  FlexColMaxWidthWrapper,\n  FlexColWrapper,\n  FlexSpaceBetweenWrapper,\n} from '../../../../global/styled';\nimport {useLocalState} from '../../../../hooks';\nimport {selectConfigurableDevices} from './selectors';\nimport {createDownlinkData, validateDevices} from './utils';\nimport {Actions, formState, navigationState, NavState} from './state';\nimport {ConfigurationButtonContainer, TextSpan} from './styled';\nimport {DEFAULT_CONFIG_OPTIONS, LORA_PRESETS, LORA_LABELS} from './constants';\nimport {jobApi} from '../../../../api';\n\ninterface BaseConfigurationProps {\n  selectedDevices: string[];\n  devices: IdKeyedDevices;\n  router: NextRouter;\n  setSelectedDevices(devices: string[]): void;\n  setSelectMode(selectMode: boolean): void;\n  setPage(page: string): void;\n  t(key: string): string;\n}\n\nconst steps = [\n  {name: 'options', progressBarTitle: 'OPTIONS'},\n  {name: 'config', progressBarTitle: 'CONFIGURATION'},\n  {name: 'confirmation', progressBarTitle: 'CONFIRMATION'},\n  {name: 'summary', progressBarTitle: 'SUMMARY'},\n];\n\nconst [\n  options,\n  config,\n  confirmation,\n  summary,\n] = steps;\n\nconst BaseConfiguration = (props: BaseConfigurationProps) => {\n  const navState = useLocalState(navigationState);\n  const configurableDevices = selectConfigurableDevices({\n    devices: props.devices,\n    selectedDevices: props.selectedDevices,\n  });\n\n  const isValidConfiguration = validateDevices(configurableDevices);\n\n  return (\n    <CenteredPage>\n      <StepProgressBar\n        title={<div>Configuration ({_.size(configurableDevices)} devices)</div>}\n        steps={_.map(steps, 'progressBarTitle')}\n        currentStep={navState.currentStep + 1}\n        margin={'0 0 9px 0'}\n        width={'100%'}\n      />\n      <ContainerBox>\n        <Configuration\n          {...props}\n          navState={navState}\n          router={props.router}\n          configurableDevices={configurableDevices}\n          isValidConfiguration={isValidConfiguration}\n        />\n      </ContainerBox>\n    </CenteredPage>\n  );\n};\n\ninterface ConfigurationProps {\n  navState: NavState & Actions;\n  configurableDevices: IdKeyedDevices;\n  isValidConfiguration: boolean;\n  router: NextRouter;\n  setSelectedDevices(devices: string[]): void;\n  setSelectMode(selectMode: boolean): void;\n  setPage(page: string): void;\n  t(key: string): string;\n}\n\nconst CHIRP_STACK_COMMANDS = {\n  loraAppServerQueueDownlink: 'loraAppServerQueueDownlink',\n  loraAppServerGetDeviceQueue: 'loraAppServerGetDeviceQueue',\n  loraAppServerFlushQueue: 'loraAppServerFlushQueue',\n};\n\nconst Configuration = (props: ConfigurationProps) => {\n  const [jobId, setJobId] = React.useState('');\n  const queryClient = useQueryClient();\n  const deviceCommandsJobMutation = jobApi.useDeviceCommandsJob(queryClient);\n  const jobQuery = jobApi.useJob(jobId);\n  const configForm = useLocalState(formState);\n\n  const sendLoraDownlink = async () => {\n    const data = createDownlinkData(\n      CHIRP_STACK_COMMANDS.loraAppServerQueueDownlink,\n      props.configurableDevices,\n      configForm.formInputs,\n    );\n\n    const result = await deviceCommandsJobMutation.mutateAsync(data);\n\n    setJobId(result._id);\n    configForm.resetForm();\n  };\n\n  if (!props.isValidConfiguration) {\n    return (\n      <FlexColCenterMaxWidthWrapper>\n        {props.t('phrases.invalidConfigurationDevices')}\n\n        <Button\n          margin={'20px 0 0 0'}\n          width={'300px'}\n          color={'green'}\n          content={props.t('labels.backToDeviceList')}\n          onClick={async () => props.router.push('/devices')}\n        />\n      </FlexColCenterMaxWidthWrapper>\n    );\n  }\n\n  return (\n    <FlexColCenterMaxWidthWrapper>\n\n      {{\n        [options.name]: (\n          <>\n            <p>Select option</p>\n            <Select\n              isClearable\n              onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                configForm.setInputValue('option', evt.target.value);\n              }}\n              value={configForm.formInputs.option.value as string}\n              options={DEFAULT_CONFIG_OPTIONS}\n            />\n            <ConfigurationButtonContainer>\n              <Button\n                content={_.capitalize(props.t('labels.cancel'))}\n                ghosted\n                onClick={() => {\n                  props.setSelectMode(false);\n                  props.setSelectedDevices([]);\n                  props.setPage('default');\n                }}\n              />\n              <Button\n                disabled={!configForm.formInputs.option.validation.isValid}\n                color={'green'}\n                content={_.capitalize(props.t('labels.continue'))}\n                onClick={props.navState.incrementCurrentStep}\n              />\n            </ConfigurationButtonContainer>\n          </>\n        ),\n        [config.name]: (\n          <>\n            {configForm.formInputs.option.value === 'presets' && (\n              <FlexColMaxWidthWrapper>\n                <h4>Presets</h4>\n                <p>Select downlink preset</p>\n\n                <Select\n                  isClearable\n                  onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                    configForm.setInputValue('preset', evt.target.value);\n                  }}\n                  value={configForm.formInputs.preset.value as string}\n                  options={LORA_PRESETS}\n                />\n              </FlexColMaxWidthWrapper>\n            )}\n            {configForm.formInputs.option.value === 'custom' && (\n              <FlexColMaxWidthWrapper>\n                <h4>Custom</h4>\n                <TextField\n                  label={'fPort'}\n                  additionalInfo={'FPort used (must be between 1-1000).'}\n                  name={'fPort'}\n                  onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n                    configForm.setInputValue('fPort', evt.target.value)\n                  )}\n                  value={configForm.formInputs.fPort.value as string}\n                  margin={'0 0 10px 0'}\n                  autoFocus\n                />\n                <TextField\n                  label={'Data'}\n                  additionalInfo={'Hex data to be sent.'}\n                  name={'data'}\n                  onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n                    configForm.setInputValue('data', evt.target.value)\n                  )}\n                  value={configForm.formInputs.data.value as string}\n                  margin={'0 0 10px 0'}\n                />\n                <TextField\n                  label={'Reference'}\n                  additionalInfo='(optional) Random reference (used on ack notification).'\n                  name={'reference'}\n                  onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n                    configForm.setInputValue('reference', evt.target.value)\n                  )}\n                  value={configForm.formInputs.reference.value as string}\n                  margin={'0 0 10px 0'}\n                />\n                <Select\n                  label={'Confirmed'}\n                  additionalInfo={'Is an ACK required from the node? Defaults to false.'}\n                  name='confirmed'\n                  isClearable\n                  options={[\n                    {label: 'True', value: true},\n                    {label: 'False', value: false},\n                  ]}\n                  value={configForm.formInputs.confirmed.value as string}\n                  onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n                    configForm.setInputValue('confirmed', evt.target.value)\n                  )}\n                />\n              </FlexColMaxWidthWrapper>\n            )}\n            <ConfigurationButtonContainer>\n              <Button\n                content={_.capitalize(props.t('labels.back'))}\n                ghosted\n                onClick={props.navState.decrementCurrentStep}\n              />\n              {configForm.formInputs.option.value === 'presets' && (\n                <Button\n                  disabled={!configForm.formInputs.preset.validation.isValid}\n                  color={'green'}\n                  content={_.capitalize(props.t('labels.continue'))}\n                  onClick={props.navState.incrementCurrentStep}\n                />\n              )}\n              {configForm.formInputs.option.value === 'custom' && (\n                <Button\n                  disabled={!_.every([\n                    configForm.formInputs.fPort.validation.isValid,\n                    configForm.formInputs.data.validation.isValid,\n                  ])}\n                  color={'green'}\n                  content={_.capitalize(props.t('labels.continue'))}\n                  onClick={props.navState.incrementCurrentStep}\n                />\n              )}\n            </ConfigurationButtonContainer>\n          </>\n        ),\n        [confirmation.name]: (\n          <>\n            <p>\n              Press continue button if you are sure you want to send this downlink to {\n                _.size(props.configurableDevices)\n              } devices.\n            </p>\n            {configForm.formInputs.option.value === 'presets' && (\n              <b>{LORA_LABELS[configForm.formInputs.preset.value as string]}</b>\n            )}\n            {configForm.formInputs.option.value === 'custom' && (\n              <FlexColWrapper>\n                <FlexSpaceBetweenWrapper>\n                  fPort: <b>{configForm.formInputs.fPort.value}</b>\n                </FlexSpaceBetweenWrapper>\n                <FlexSpaceBetweenWrapper>\n                  data: <b>{configForm.formInputs.data.value}</b>\n                </FlexSpaceBetweenWrapper>\n                <FlexSpaceBetweenWrapper>\n                  reference: <b>{configForm.formInputs.reference.value}</b>\n                </FlexSpaceBetweenWrapper>\n                <FlexSpaceBetweenWrapper>\n                  confirmed: <b>{configForm.formInputs.confirmed.value}</b>\n                </FlexSpaceBetweenWrapper>\n              </FlexColWrapper>\n            )}\n            <ConfigurationButtonContainer>\n              <Button\n                content={_.capitalize(props.t('labels.back'))}\n                ghosted\n                onClick={props.navState.decrementCurrentStep}\n              />\n              <Button\n                disabled={!configForm.formInputs.option.validation.isValid}\n                color={'green'}\n                content={_.capitalize(props.t('labels.continue'))}\n                onClick={async () => {\n                  await sendLoraDownlink();\n                  props.navState.incrementCurrentStep();\n                }}\n              />\n            </ConfigurationButtonContainer>\n          </>\n        ),\n        [summary.name]: (\n          <>\n            {!jobQuery?.data?.isFinished\n              ? <b>Sending downlinks..</b>\n              : <b>Finished!</b>}\n            <FlexColWrapper>\n              <p>\n                <b>{jobQuery?.data?.numItemsDone}</b> of {jobQuery?.data?.numItems} devices done\n              </p>\n              <TextSpan>{jobQuery?.data?.numSuccesses} succeeded</TextSpan>\n              <TextSpan>{jobQuery?.data?.numFailures} failures</TextSpan>\n            </FlexColWrapper>\n            <ProgressBar\n              progress={jobQuery?.data?.progressPercentage}\n              margin={'50px 0 0 0'}\n            />\n            {!jobQuery?.data?.isFinished && (\n              <p>\n                Estimated time left:&nbsp;\n                <b>\n                  {!_.isNil(jobQuery?.data?.expectedTimeLeftText)\n                    ? jobQuery?.data?.expectedTimeLeftText\n                    : 'Calculating..'}\n                </b>\n              </p>\n            )}\n            <ConfigurationButtonContainer>\n              <Button\n                content={_.capitalize(props.t('labels.back'))}\n                ghosted\n                onClick={props.navState.decrementCurrentStep}\n              />\n              <Button\n                disabled={!jobQuery?.data?.isFinished}\n                color={'green'}\n                content={_.capitalize(props.t('labels.finish'))}\n                onClick={() => {\n                  setJobId('');\n                  props.setSelectMode(false);\n                  props.setSelectedDevices([]);\n                  props.setPage('default');\n                }}\n              />\n            </ConfigurationButtonContainer>\n          </>\n        ),\n      }[steps[props.navState.currentStep].name || 'STEP_NOT_FOUND']}\n\n    </FlexColCenterMaxWidthWrapper>\n  );\n};\n\nexport default BaseConfiguration;\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\nimport {IdKeyedDevices} from '../../../../types';\n\nconst selectConfigurableDevices = createSelector(\n  (props: {devices: IdKeyedDevices}) => props.devices,\n  (props: {selectedDevices: string[]}) => props.selectedDevices,\n  (devices: IdKeyedDevices, selectedDevices: string[]) => (\n    _.reduce(selectedDevices, (acc: IdKeyedDevices, curr: string) => {\n      const device = devices[curr];\n      acc[curr] = device;\n      return acc;\n    }, {})\n  )\n);\n\nexport {\n  selectConfigurableDevices,\n};\n","import {Action, InputValue} from '../../../../types';\nimport {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../utils/form-wizard';\n\n\ninterface NavState {\n  [currentStep: string]: number;\n}\n\nconst ACTION_TYPES = {\n  setCurrentStep: 'setCurrentStep',\n  incrementCurrentStep: 'incrementCurrentStep',\n  decrementCurrentStep: 'decrementCurrentStep',\n};\n\ninterface Actions {\n  setCurrentStep: (currentStep: number) => void;\n  incrementCurrentStep: () => void;\n  decrementCurrentStep: () => void;\n}\n\nconst actions: Actions = {\n  setCurrentStep: (currentStep: number) => ({\n    type: ACTION_TYPES.setCurrentStep,\n    payload: {currentStep},\n  }),\n  incrementCurrentStep: () => ({\n    type: ACTION_TYPES.incrementCurrentStep,\n  }),\n  decrementCurrentStep: () => ({\n    type: ACTION_TYPES.decrementCurrentStep,\n  }),\n};\n\nconst defaultState: NavState = {\n  currentStep: 0,\n};\n\nconst reducer = (\n  state = defaultState,\n  action: Action<NavState>,\n) => {\n  if (!action) {\n    return state;\n  }\n  const {type, payload} = action;\n\n  switch (type) {\n    case ACTION_TYPES.setCurrentStep: {\n      const {currentStep} = payload;\n      return {\n        ...state,\n        currentStep,\n      };\n    }\n    case ACTION_TYPES.incrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      };\n    }\n    case ACTION_TYPES.decrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep - 1,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst configurationFormConfig = {\n  option: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please select a valid option',\n      }],\n    }\n  },\n};\n\nconst presetFormConfig = {\n  preset: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please select a valid preset',\n      }],\n    }\n  },\n};\n\nconst loraFormConfig = {\n  fPort: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please use a valid fPort',\n      }],\n    }\n  },\n  data: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value: InputValue) => !!value,\n        message: 'Please use valid data',\n      }],\n    }\n  },\n  reference: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  confirmed: {\n    defaultValue: false,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst formState = generateForm({\n  ...configurationFormConfig,\n  ...loraFormConfig,\n  ...presetFormConfig,\n});\n\nconst navigationState = {\n  actions,\n  reducer,\n};\n\nexport {\n  navigationState,\n  formState,\n  NavState,\n  Actions,\n};\n","import styled from 'styled-components';\nimport {FlexMaxWidthSpaceBetweenWrapper} from '../../../../global/styled';\n\nconst ConfigurationButtonContainer = styled(FlexMaxWidthSpaceBetweenWrapper)`\n  height: 100px;\n  align-items: flex-end;\n`;\n\nconst TextSpan = styled.span`\n  font-size: 0.8em;\n`;\n\nexport {\n  ConfigurationButtonContainer,\n  TextSpan,\n};\n","import _ from 'lodash';\nimport {FormInputs, IdKeyedDevices} from '../../../../types';\nimport {getFormValues} from '../../../../utils/form-wizard';\nimport {LORA_PRESET_SELECTIONS} from './constants';\n\nconst validateDevices = (devices: IdKeyedDevices) => {\n  const isValid = _.every(devices, 'devEui');\n  return isValid;\n};\n\nconst createDownlinkData = (command: string, devices: IdKeyedDevices, formInputs: FormInputs) => {\n  const dataInputs = getFormValues(formInputs);\n\n  const custom = {\n    reference: dataInputs.reference,\n    fPort: dataInputs.fPort,\n    data: dataInputs.data,\n    confirmed: dataInputs.confirmed,\n  };\n\n  const body = dataInputs.preset\n    ? LORA_PRESET_SELECTIONS[dataInputs.preset as keyof typeof LORA_PRESET_SELECTIONS]\n    : custom;\n\n  const data = _.map(devices, device => {\n    return {\n      command,\n      devEui: device.devEui,\n      integrationName: 'ChirpStack',\n      integrationCommand: 'loraAppServerQueueDownlink',\n      iotnodeId: device._id,\n      data: body,\n    };\n  });\n  return data;\n};\n\nexport {\n  validateDevices,\n  createDownlinkData,\n};\n","import _ from 'lodash';\n\nconst STEPS_NAMES = {\n  confirmation: 'confirmation',\n  summary: 'summary',\n};\n\nconst STEPS = [\n  {name: STEPS_NAMES.confirmation, progressBarTitle: _.toUpper(STEPS_NAMES.confirmation)},\n  {name: STEPS_NAMES.summary, progressBarTitle: _.toUpper(STEPS_NAMES.summary)},\n];\n\nexport {\n  STEPS_NAMES,\n  STEPS,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {useQueryClient} from 'react-query';\nimport {NextRouter} from 'next/router';\nimport {IdKeyedDevices} from '../../../../types';\nimport {CenteredPage} from '../../../../global/components';\nimport StepProgressBar from '../../../../components/step-progress-bar';\nimport Button from '../../../../components/button';\nimport {useLocalState} from '../../../../hooks';\nimport {navigationState} from './state';\nimport ContainerBox from '../../../../components/container-box';\nimport {DeletionButtonContainer, TextSpan, ConfirmationContainer} from './styled';\nimport {jobApi} from '../../../../api';\nimport {FlexColWrapper} from '../../../../global/styled';\nimport ProgressBar from '../../../../components/progress-bar';\nimport InfoBox from '../../../../components/info-box';\nimport {STEPS, STEPS_NAMES} from './constants';\n\ninterface DeletionProps {\n  selectedDevices: string[];\n  devices: IdKeyedDevices;\n  router: NextRouter;\n  setSelectedDevices(devices: string[]): void;\n  setSelectMode(selectMode: boolean): void;\n  setPage(page: string): void;\n  t(key: string): string;\n}\n\nconst Deletion = (props: DeletionProps) => {\n  const [jobId, setJobId] = React.useState('');\n  const queryClient = useQueryClient();\n\n  const deviceRemovalJobmutation = jobApi.useRemoveDevicesJob(queryClient);\n\n  const navState = useLocalState(navigationState);\n\n  const jobQuery = jobApi.useJob(jobId);\n\n  const sendRemoveDevicesJob = async () => {\n    const result = await deviceRemovalJobmutation.mutateAsync(props.selectedDevices);\n    setJobId(result._id);\n  };\n\n  return (\n    <CenteredPage>\n      <StepProgressBar\n        title={'Device removal'}\n        steps={_.map(STEPS, 'progressBarTitle')}\n        currentStep={navState.currentStep + 1}\n        margin={'0 0 9px 0'}\n        width={'100%'}\n      />\n      <ContainerBox>\n        {{\n          [STEPS_NAMES.confirmation]: (\n            <>\n              <ConfirmationContainer>\n                <InfoBox\n                  type={'error'}\n                  heading={'This action will permanently remove all selected devices.'}\n                />\n                <p>\n                  Press continue if you are sure you want to remove&nbsp;\n                  <b>{_.size(props.selectedDevices)}</b>&nbsp;devices.\n                </p>\n              </ConfirmationContainer>\n              <DeletionButtonContainer>\n                <Button\n                  content={_.capitalize(props.t('labels.cancel'))}\n                  ghosted\n                  onClick={() => {\n                    props.setSelectMode(false);\n                    props.setSelectedDevices([]);\n                    props.setPage('default');\n                  }}\n                />\n                <Button\n                  color={'green'}\n                  content={_.capitalize(props.t('labels.continue'))}\n                  onClick={() => {\n                    void sendRemoveDevicesJob();\n                    navState.incrementCurrentStep();\n                  }}\n                />\n              </DeletionButtonContainer>\n            </>\n          ),\n          [STEPS_NAMES.summary]: (\n            <>\n              {\n                !jobQuery?.data?.isFinished\n                  ? <b>Removing devices..</b>\n                  : <b>Finished!</b>\n              }\n              <FlexColWrapper>\n                <p>\n                  <b>{jobQuery?.data?.numItemsDone}</b>\n                  &nbsp;of {jobQuery?.data?.numItems} devices removed\n                </p>\n                <TextSpan>{jobQuery?.data?.numSuccesses} succeeded</TextSpan>\n                <TextSpan>{jobQuery?.data?.numFailures} failures</TextSpan>\n              </FlexColWrapper>\n              <ProgressBar\n                progress={jobQuery?.data?.progressPercentage}\n                margin={'50px 0 0 0'}\n              />\n              {!jobQuery?.data?.isFinished && (\n                <p>\n                  Estimated time left:&nbsp;\n                  <b>\n                    {\n                      !_.isNil(jobQuery?.data?.expectedTimeLeftText)\n                        ? jobQuery?.data?.expectedTimeLeftText\n                        : 'Calculating..'\n                    }\n                  </b>\n                </p>\n              )}\n              <DeletionButtonContainer>\n                <Button\n                  disabled={!jobQuery?.data?.isFinished}\n                  content={_.capitalize(props.t('labels.back'))}\n                  ghosted\n                  onClick={navState.decrementCurrentStep}\n                />\n                <Button\n                  disabled={!jobQuery?.data?.isFinished}\n                  color={'green'}\n                  content={_.capitalize(props.t('labels.finish'))}\n                  onClick={async () => {\n                    await queryClient.invalidateQueries('devices');\n                    setJobId('');\n                    props.setSelectMode(false);\n                    props.setSelectedDevices([]);\n                    props.setPage('default');\n                  }}\n                />\n              </DeletionButtonContainer>\n            </>\n          ),\n        }[STEPS[navState.currentStep].name || 'STEP_NOT_FOUND']}\n      </ContainerBox>\n    </CenteredPage>\n  );\n};\n\nexport default Deletion;\n","import {Action} from '../../../../types';\n\ninterface NavState {\n  [currentStep: string]: number;\n}\n\nconst ACTION_TYPES = {\n  setCurrentStep: 'setCurrentStep',\n  incrementCurrentStep: 'incrementCurrentStep',\n  decrementCurrentStep: 'decrementCurrentStep',\n};\n\ninterface Actions {\n  setCurrentStep: (currentStep: number) => void;\n  incrementCurrentStep: () => void;\n  decrementCurrentStep: () => void;\n}\n\nconst actions: Actions = {\n  setCurrentStep: (currentStep: number) => ({\n    type: ACTION_TYPES.setCurrentStep,\n    payload: {currentStep},\n  }),\n  incrementCurrentStep: () => ({\n    type: ACTION_TYPES.incrementCurrentStep,\n  }),\n  decrementCurrentStep: () => ({\n    type: ACTION_TYPES.decrementCurrentStep,\n  }),\n};\n\nconst defaultState: NavState = {\n  currentStep: 0,\n};\n\nconst reducer = (\n  state = defaultState,\n  action: Action<NavState>,\n) => {\n  if (!action) {\n    return state;\n  }\n  const {type, payload} = action;\n\n  switch (type) {\n    case ACTION_TYPES.setCurrentStep: {\n      const {currentStep} = payload;\n      return {\n        ...state,\n        currentStep,\n      };\n    }\n    case ACTION_TYPES.incrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      };\n    }\n    case ACTION_TYPES.decrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep - 1,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n\nconst navigationState = {\n  actions,\n  reducer,\n};\n\nexport {\n  navigationState,\n  NavState,\n  Actions,\n};\n","import styled from 'styled-components';\nimport {FlexMaxWidthSpaceBetweenWrapper} from '../../../../global/styled';\n\nconst DeletionButtonContainer = styled(FlexMaxWidthSpaceBetweenWrapper)`\n  height: 100px;\n  align-items: flex-end;\n`;\n\nconst TextSpan = styled.span`\n  font-size: 0.8em;\n`;\n\nconst ConfirmationContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport {\n  DeletionButtonContainer,\n  TextSpan,\n  ConfirmationContainer,\n};\n","import {NextRouter} from 'next/router';\nimport React from 'react';\nimport {useQueryClient} from 'react-query';\nimport _ from 'lodash';\nimport {Device, Devices} from '../../../../types';\nimport {CenteredPage} from '../../../../global/components';\nimport {\n  FlexSpaceBetweenWrapper,\n  FlexColWrapper,\n  TextParagraph,\n  HorizontalLine,\n} from '../../../../global/styled';\nimport ContainerBox from '../../../../components/container-box';\nimport Button from '../../../../components/button';\nimport TextArea from '../../../../components/text-area';\nimport InfoBox from '../../../../components/info-box';\nimport {devicesApi} from '../../../../api';\nimport {editState} from './state';\nimport {useLocalState} from '../../../../hooks';\nimport {TextHeading} from './styled';\nimport ContextualParametersEditor from '../../../../yggio-components/contexutal-parameters-editor';\n\ninterface EditingProps {\n  router: NextRouter;\n  selectedDevices: string[];\n  devices: Devices;\n  t: (key: string) => string;\n  setSelectedDevices: (devices: string[]) => void;\n  setSelectMode: (selectMode: boolean) => void;\n  setPage: (page: string) => void;\n}\n\nconst EditingPane = (props: EditingProps) => {\n  /*\n    Hooks\n  */\n  const queryClient = useQueryClient();\n\n  const {\n    mutateAsync: mutateDevice,\n    isLoading: isUpdatingDevice,\n  } = devicesApi.useUpdateDevice(queryClient);\n  const editForm = useLocalState(editState);\n\n  /*\n    Event handlers\n  */\n  const saveDeviceUpdates = async () => {\n    const contextMap = editForm.formInputs.contextMap.value as object;\n    const description = editForm.formInputs.description.value as string;\n\n    const deviceUpdates = _.map(props.selectedDevices, async (deviceId: string) => {\n      const currentDevice = _.find(props.devices, device => device._id === deviceId);\n      const desc = description || currentDevice?.description;\n      const updates: Partial<Device> = {\n        contextMap: {\n          ...currentDevice?.contextMap,\n          ...contextMap,\n        },\n        description: desc || '',\n      };\n      await mutateDevice({deviceId, updates});\n    });\n    await Promise.all(deviceUpdates);\n    editForm.setInputValue('contextMapKey', '');\n    editForm.setInputValue('contextMapValue', '');\n    editForm.setInputValue('description', '');\n    props.setSelectMode(false);\n    props.setSelectedDevices([]);\n    props.setPage('default');\n  };\n\n  const handleContextMapUpdates = (parameters: Record<string, string>) => {\n    const parametersObject = _.chain(parameters)\n      .keyBy('name')\n      .mapValues('value')\n      .value();\n    editForm.setInputValue('contextMap', parametersObject);\n  };\n\n  return (\n    <CenteredPage>\n      <ContainerBox>\n        <p>You have {_.size(props.selectedDevices)} devices selected.</p>\n\n        <InfoBox type={'warning'} heading={'Saving new data will overwrite existing data.'} />\n        {/* @ts-ignore - styled component not typed */}\n        <TextParagraph fontSize={'0.8em'}>\n          Fill in all the fields below, and once you are done press the Save\n          button to save your new data to all selected devices.\n        </TextParagraph>\n        <HorizontalLine />\n        <TextHeading>Contextual Parameters</TextHeading>\n\n        <ContextualParametersEditor\n          onChange={handleContextMapUpdates}\n          value={_.map(\n            editForm.formInputs.contextMap.value as object,\n            (value, name) => ({name, value})\n          )}\n        />\n\n        <TextHeading>Description</TextHeading>\n        {/* @ts-ignore - styled component not typed */}\n        <TextParagraph fontSize={'0.8em'}>\n          Add a description below. Leave empty to keep old description.\n        </TextParagraph>\n        {/* @ts-ignore - styled component not typed */}\n        <FlexColWrapper margin={'10px 0 30px'}>\n          <TextArea\n            margin={'0 5px 0 0'}\n            name={'description'}\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n              editForm.setInputValue('description', evt.target.value))}\n            placeholder={'Description'}\n            value={editForm.formInputs.description.value as string}\n          />\n\n        </FlexColWrapper>\n\n        <FlexSpaceBetweenWrapper>\n          <Button\n            content={_.capitalize(props.t('labels.cancel'))}\n            onClick={() => {\n              props.setSelectMode(false);\n              props.setSelectedDevices([]);\n              props.setPage('default');\n            }}\n            ghosted\n            width={'120px'}\n            height={'30px'}\n            padding={'0 15px'}\n          />\n          <Button\n            isLoading={isUpdatingDevice}\n            content={_.capitalize(props.t('labels.save'))}\n            onClick={saveDeviceUpdates}\n            color={'green'}\n            width={'200px'}\n            height={'30px'}\n            padding={'0 15px'}\n          />\n        </FlexSpaceBetweenWrapper>\n      </ContainerBox>\n    </CenteredPage>\n  );\n};\n\nexport default EditingPane;\n","import {generateForm, VALIDATION_VISIBILITY_TYPES, inputValidators} from '../../../../utils/form-wizard';\nimport {FormConfig} from '../../../../types';\n\nconst editConfig: FormConfig = {\n  contextMapKey: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a key'),\n        {\n          validate: value => {\n            const alphanumericPattern = /^[a-zA-Z0-9]*$/; // only alphanumeric\n            return alphanumericPattern.test(value as string);\n          },\n          message: 'Key must be alphanumeric',\n        },\n      ],\n    }\n  },\n  contextMapValue: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a value'),\n      ]\n    }\n  },\n  contextMap: {\n    defaultValue: {},\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: []\n    }\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst editState = generateForm(editConfig);\n\nexport {\n  editState,\n};\n","import styled from 'styled-components';\n\nconst TextHeading = styled.h5`\n  margin-bottom: 0;\n  margin-top: 40px;\n`;\n\nexport {\n  TextHeading,\n};\n","import {useQueryClient} from 'react-query';\nimport React from 'react';\nimport _ from 'lodash';\nimport {FlexColWrapper, FlexWrapper, TextParagraph, HorizontalLine, FlexSpaceBetweenWrapper} from '../../../../global/styled';\nimport {Devices} from '../../../../types';\nimport NumberField from '../../../../components/number-field';\nimport {useLocalState} from '../../../../hooks';\nimport {devicesApi} from '../../../../api';\nimport Button from '../../../../components/button';\nimport ContainerBox from '../../../../components/container-box';\nimport {reportIntervalData} from './state';\nimport {CenteredPage} from '../../../../global/components';\nimport InfoBox from '../../../../components/info-box';\n\ninterface ReportIntervalProps {\n  selectedDevices: string[];\n  devices: Devices;\n  t: (key: string) => string;\n  setSelectedDevices: (devices: string[]) => void;\n  setSelectMode: (selectMode: boolean) => void;\n  setPage: (page: string) => void;\n}\n\nconst ReportInterval = (props: ReportIntervalProps) => {\n  /*\n    Hooks\n  */\n  const queryClient = useQueryClient();\n  const reportIntervalForm = useLocalState(reportIntervalData);\n\n  const {\n    mutateAsync: mutateDevice,\n    isLoading: isUpdatingDevice,\n  } = devicesApi.useUpdateDevice(queryClient);\n\n  /*\n    Event handlers\n  */\n  const handleExpectedReportInterval = async () => {\n    const {formInputs} = reportIntervalForm;\n    const seconds = _.get(formInputs, 'seconds.value', 0) as number;\n    const minutes = _.get(formInputs, 'minutes.value', 0) as number;\n    const hours = _.get(formInputs, 'hours.value', 0) as number;\n    const expectedReportInterval = (seconds * 1000) + (minutes * 60000) + (hours * 3600000);\n    const updates = {\n      expectedReportInterval\n    };\n    const deviceMutations = _.map(props.devices, async device => {\n      await mutateDevice({deviceId: device._id, updates});\n    });\n    await Promise.all(deviceMutations);\n    props.setPage('default');\n    props.setSelectMode(false);\n    props.setSelectedDevices([]);\n  };\n\n  return (\n    <CenteredPage>\n      <ContainerBox>\n        <p>You have {_.size(props.selectedDevices)} devices selected.</p>\n        <InfoBox type={'warning'} heading={'Saving new data will overwrite existing data.'} />\n        {/* @ts-ignore - styled component not typed */}\n        <TextParagraph fontSize={'0.8em'}>\n          Fill in all the fields below, and once you are done press the Save\n          button to save your new data to all selected devices.\n        </TextParagraph>\n        <HorizontalLine />\n        {/* @ts-ignore - styled component not typed */}\n        <FlexWrapper margin={'0 0 30px'}>\n          {/* @ts-ignore - styled component not typed */}\n          <FlexColWrapper margin={'10px'}>\n            <h5>Hour:</h5>\n            <NumberField\n              name={'hours'}\n              isRequired\n              width={'100px'}\n              value={reportIntervalForm.formInputs.hours.value as number}\n              onChange={(evt: React.ChangeEvent<HTMLInputElement>) => reportIntervalForm.setInputValue('hours', evt.target.value)}\n            />\n          </FlexColWrapper>\n          {/* @ts-ignore - styled component not typed */}\n          <FlexColWrapper margin={'10px'}>\n            <h5>Minute:</h5>\n            <NumberField\n              name={'minutes'}\n              isRequired\n              min={'0'}\n              max={'59'}\n              width={'100px'}\n              value={reportIntervalForm.formInputs.minutes.value as number}\n              onChange={(evt: React.ChangeEvent<HTMLInputElement>) => reportIntervalForm.setInputValue('minutes', evt.target.value)}\n            />\n          </FlexColWrapper>\n          {/* @ts-ignore - styled component not typed */}\n          <FlexColWrapper margin={'10px'}>\n            <h5>Second:</h5>\n            <NumberField\n              name={'seconds'}\n              isRequired\n              min={'0'}\n              max={'59'}\n              width={'100px'}\n              value={reportIntervalForm.formInputs.seconds.value as number}\n              onChange={(evt: React.ChangeEvent<HTMLInputElement>) => reportIntervalForm.setInputValue('seconds', evt.target.value)}\n            />\n          </FlexColWrapper>\n        </FlexWrapper>\n\n        <FlexSpaceBetweenWrapper>\n          <Button\n            content={_.capitalize(props.t('labels.cancel'))}\n            onClick={() => {\n              props.setSelectMode(false);\n              props.setSelectedDevices([]);\n              props.setPage('default');\n            }}\n            ghosted\n            width={'120px'}\n            height={'30px'}\n            padding={'0 15px'}\n          />\n          <Button\n            isLoading={isUpdatingDevice}\n            content={_.capitalize(props.t('labels.save'))}\n            onClick={handleExpectedReportInterval}\n            color={'green'}\n            width={'200px'}\n            height={'30px'}\n            padding={'0 15px'}\n          />\n        </FlexSpaceBetweenWrapper>\n      </ContainerBox>\n    </CenteredPage>\n  );\n};\n\nexport default ReportInterval;\n","import {generateForm, VALIDATION_VISIBILITY_TYPES} from '../../../../utils/form-wizard';\n\nconst reportIntervalConfig = {\n  hours: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  minutes: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  seconds: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst reportIntervalData = generateForm(reportIntervalConfig);\n\nexport {\n  reportIntervalData,\n};\n","import _ from 'lodash';\nimport React from 'react';\n\nconst withRouteCheck = Component => props => {\n  if (!_.size(props.selectedDevices)) {\n    props.setPage('default');\n  }\n  return <Component {...props} />;\n};\n\nexport {\n  withRouteCheck,\n};\n","import _ from 'lodash';\nimport {handleExit} from './utils';\n\nconst onSetConnector = props => async () => {\n  const updates = {\n    connector: _.get(props, 'formInputs.setConnectorId.value'),\n  };\n\n  const updatedDevices = _.map(props.selectedDevices, deviceId => {\n    props.updateDevice({deviceId, updates});\n  });\n  await Promise.all(updatedDevices);\n  handleExit(props);\n};\n\nexport default {\n  onSetConnector,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {useQueryClient} from 'react-query';\n\nimport {compose} from 'lodash/fp';\nimport events from './events';\nimport Button from '../../../../components/button';\nimport Select from '../../../../components/select';\nimport {withEvents, withState, withLanguage} from '../../../../hocs';\nimport {formState} from './state';\nimport {withRouteCheck} from './effects';\nimport ContainerBox from '../../../../components/container-box';\nimport {Info} from './styled';\nimport {FlexSpaceBetweenWrapper} from '../../../../global/styled';\nimport {CenteredPage} from '../../../../global/components';\nimport {devicesApi} from '../../../../api';\nimport {selectDeviceOptions} from './selectors';\nimport {handleExit} from './utils';\n\nconst BasicToolsPane = props => {\n  const queryClient = useQueryClient();\n\n  const {mutateAsync: mutateDevice} = devicesApi.useUpdateDevice(queryClient);\n\n  const devices = devicesApi.useConnectorsDevicesQuery();\n  const deviceOptions = selectDeviceOptions({devices});\n\n  const handleSetConnector = async () => {\n    const updatedDevices = _.map(props.selectedDevices, deviceId => {\n      mutateDevice({\n        deviceId,\n        updates: {connector: _.get(props, 'formInputs.setConnectorId.value')},\n      });\n    });\n    await Promise.all(updatedDevices);\n    handleExit(props);\n  };\n\n  return (\n    <CenteredPage>\n      <ContainerBox>\n        <p>You have {_.size(props.selectedDevices)} devices selected.</p>\n\n        <Info>\n          Select your connector\n          , and press the Set connector button to update your selected device(s) with a connector.\n        </Info>\n        <Select\n          name={'setConnectorId'}\n          placeholder={props.t('placeholders.selectDevice')}\n          options={deviceOptions}\n          margin={'0 10px 20px 0'}\n          value={_.get(props.formInputs, 'setConnectorId.value')}\n          onChange={evt => props.setInputValue('setConnectorId', evt.target.value)}\n        />\n\n        <FlexSpaceBetweenWrapper>\n          <Button\n            content={props.t('labels.cancel')}\n            onClick={() => {\n              handleExit(props);\n            }}\n            ghosted\n            width={'120px'}\n            height={'30px'}\n            padding={'0 15px'}\n          />\n          <Button\n            content={props.t('common.setConnector')}\n            onClick={handleSetConnector}\n            color={'green'}\n            width={'200px'}\n            height={'30px'}\n            padding={'0 15px'}\n          />\n        </FlexSpaceBetweenWrapper>\n      </ContainerBox>\n    </CenteredPage>\n  );\n};\n\nBasicToolsPane.propTypes = {\n};\n\nconst RawToolsPane = compose(\n  withState(formState),\n  withEvents(events),\n  withRouteCheck,\n  withLanguage()\n)(BasicToolsPane);\n\nRawToolsPane.propTypes = {\n  devices: PropTypes.object\n};\n\nRawToolsPane.defaultProps = {};\n\nconst ToolsPane = compose(\n)(RawToolsPane);\n\nToolsPane.propTypes = {};\n\nexport default ToolsPane;\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\n\nconst selectDeviceOptions = createSelector(\n  props => props.devices,\n  devices => _.map(devices, device => ({\n    value: device._id,\n    label: device.name,\n  }))\n);\n\nexport {\n  selectDeviceOptions,\n};\n","import {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../utils/form-wizard';\n\nconst toolsConfig = {\n  setConnectorId: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst formState = generateForm(toolsConfig);\n\nexport {\n  formState,\n};\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\n  margin: 40px 0 0 0;\n  width: 800px;\n`;\n\nconst Info = styled.p`\n  font-size: 0.8em;\n`;\n\nexport {\n  Wrapper,\n  Container,\n  Info,\n};\n","const handleExit = props => {\n  props.resetForm();\n  props.setSelectMode(false);\n  props.setSelectedDevices([]);\n  props.setPage('default');\n};\n\nexport {\n  handleExit,\n};\n","import _ from 'lodash';\nimport {getFormValues} from '../../utils/form-wizard';\n\nconst handleTypeCheckbox = props => type => evt => {\n  const {target: {name, checked}} = evt;\n  const updates = {\n    ...getFormValues(props.formInputs)[name],\n    [type]: checked,\n  };\n  props.setInputValue(name, updates);\n  props.setCurrentPage(1);\n};\n\nconst setDeviceSelected = props => ({deviceId, selected}) => {\n  if (selected) {\n    const updates = _.concat(props.selectedDevices, deviceId);\n    props.setSelectedDevices(updates);\n  } else {\n    const updates = _.without(props.selectedDevices, deviceId);\n    props.setSelectedDevices(updates);\n  }\n};\n\nexport default {\n  setDeviceSelected,\n  handleTypeCheckbox,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport {useQueryClient} from 'react-query';\nimport {compose} from 'lodash/fp';\n\nimport {\n  withEvents,\n  withContext,\n  withLanguage,\n} from '../../hocs';\nimport {usePersistentState, useLocalState} from '../../hooks';\n\nimport {\n  Sidebar,\n  HeadingBar,\n  FilterBar,\n  SelectionBar,\n  Table,\n} from './sub-components';\nimport {SIDEBAR_SIBLING_WIDTH, PAGES} from './constants';\nimport {\n  generalState,\n  formState,\n  persistentState,\n  pageState,\n  contextActions as actions,\n  StateContext as context,\n  StateContextProvider,\n} from './state';\nimport {modalState} from '../../components/modal';\nimport {\n  MainContentWrapper,\n  MainContentContainer,\n} from '../../yggio-managers/device-manager/styled';\nimport {\n  selectPageInfo,\n  selectTags,\n} from './selectors';\nimport events from './events';\nimport {\n  SidebarParent,\n  SidebarSibling,\n  sidebarState,\n} from '../../components/sidebar-components';\nimport Calculations from './containers/calculation-pane';\nimport Tools from './containers/tools-pane';\nimport Configuration from './containers/configuration-pane';\nimport Editing from './containers/editing-pane';\nimport ReportInterval from './containers/report-interval-pane';\nimport Deletion from './containers/deletion-pane';\nimport {devicesApi, userApi, jobApi} from '../../api';\nimport {\n  createAttributeFilter,\n  createMatchPattern,\n  createOrderByParam,\n} from './utils';\nimport {\n  useFetchDevices,\n  useFetchDeviceItems,\n  useCalculationResult,\n  useAccessRightsResult,\n} from './queries';\n\nconst BasicDevicesListPane = props => {\n\n  //\n  //\n  // HOOKS\n  //\n  //\n\n  const queryClient = useQueryClient();\n\n  const userQuery = userApi.useTokenUser();\n\n  const useRemoveDevices = jobApi.useRemoveDevicesJob(queryClient);\n\n  const filterState = usePersistentState(formState, 'devices-list-filter');\n  const listState = usePersistentState(persistentState, 'devices-list-ui');\n\n  const routeState = useLocalState(pageState);\n  const generalModalState = useLocalState(generalState);\n  const columnsModalState = useLocalState(modalState);\n  const sidebarToggleState = useLocalState(sidebarState);\n\n  const matchPattern = createMatchPattern(_.get(filterState, 'formInputs'));\n  const attributeExists = createAttributeFilter(_.get(filterState, 'formInputs'));\n  const offset = (listState.pageSize * listState.currentPage) - listState.pageSize;\n  const orderBy = createOrderByParam(listState.sortingField, listState.sortingOrder);\n\n  const devicesParams = {\n    limit: listState.pageSize,\n    offset,\n    orderBy,\n    filter: {matchPattern, attributeExists},\n  };\n  const numDevicesQuery = devicesApi.useNumDevicesQuery();\n  const devicesResult = useFetchDevices({params: devicesParams});\n  const calculationsResult = useCalculationResult();\n  const accessRightsResult = useAccessRightsResult({subjectId: _.get(userQuery, 'data._id')});\n\n  const {data: deviceItems} = useFetchDeviceItems({\n    params: devicesParams,\n    calculations: calculationsResult.data,\n    t: props.t\n  });\n\n  //\n  //\n  // SELECTORS\n  //\n  //\n\n  const pageInfo = selectPageInfo({\n    currentPage: listState.currentPage,\n    pageSize: listState.pageSize,\n    deviceTotalCount: numDevicesQuery.data,\n    deviceItems,\n    t: props.t,\n  });\n\n  const filterTags = selectTags({formInputs: filterState.formInputs});\n\n  //\n  //\n  // EVENTS\n  //\n  //\n\n  const handleValueChange = evt => {\n    const {target: {value, name}} = evt;\n    filterState.setInputValue(name, value);\n    listState.setCurrentPage(1);\n  };\n\n\n  const handleSetPageSize = evt => {\n    const {target: {value}} = evt;\n    listState.setPageSize(Number(value));\n    listState.setCurrentPage(1);\n  };\n\n  const handleSetSorting = field => () => {\n    if (listState.sortingOrder === 'asc' && listState.sortingField === field) {\n      listState.setSortingOrder('desc');\n    } else {\n      listState.setSortingOrder('asc');\n    }\n    listState.setSortingField(field);\n  };\n\n  const removeSelectedDevices = async () => {\n    useRemoveDevices.mutate(props.selectedDevices);\n    props.setSelectedDevices([]);\n    props.setSelectMode(false);\n  };\n\n  const clearFilters = () => {\n    filterState.resetForm();\n  };\n\n  const handleSelectAllDevices = evt => {\n    const {target: {checked}} = evt;\n    if (checked) {\n      const allDevices = _.map(deviceItems, '_id');\n      props.setSelectedDevices(allDevices);\n    } else {\n      props.setSelectedDevices([]);\n    }\n  };\n\n  return (\n    <SidebarParent>\n      {{\n        [PAGES.default]: (\n          <>\n            <Sidebar\n              clearFilters={clearFilters}\n              filterTags={filterTags}\n              setFilterCollapsed={listState.setFilterCollapsed}\n              filterCollapsed={listState.filterCollapsed}\n              handleTypeCheckbox={props.handleTypeCheckbox}\n              handleValueChange={handleValueChange}\n              formInputs={filterState.formInputs}\n              isSidebarOpen={sidebarToggleState.isSidebarOpen}\n              closeSidebar={sidebarToggleState.closeSidebar}\n              openSidebar={sidebarToggleState.openSidebar}\n              t={props.t}\n            />\n            <SidebarSibling isSidebarOpen={sidebarToggleState.isSidebarOpen}>\n              <MainContentWrapper>\n                <MainContentContainer maxWidth={SIDEBAR_SIBLING_WIDTH}>\n\n                  <HeadingBar\n                    router={props.router}\n                    deviceTotalCount={numDevicesQuery.data}\n                    isLoading={devicesResult.isLoading}\n                    isSidebarOpen={sidebarToggleState.isSidebarOpen}\n                    closeSidebar={sidebarToggleState.closeSidebar}\n                    openSidebar={sidebarToggleState.openSidebar}\n                    setSelectMode={props.setSelectMode}\n                    selectMode={props.selectMode}\n                    deviceItems={deviceItems}\n                    columns={listState.columns}\n                    setColumns={listState.setColumns}\n                    customizeColumnsModal={columnsModalState}\n                    siblingWidth={SIDEBAR_SIBLING_WIDTH}\n                    t={props.t}\n                  />\n\n                  {!_.isEmpty(filterTags) && (\n                    <FilterBar\n                      handleTypeCheckbox={props.handleTypeCheckbox}\n                      deviceTotalCount={numDevicesQuery.data}\n                      filterTags={filterTags}\n                      deviceItems={deviceItems}\n                      setInputValue={filterState.setInputValue}\n                      t={props.t}\n                    />\n                  )}\n\n                  {!!props.selectMode && (\n                    <SelectionBar\n                      router={props.router}\n                      setSelectMode={props.setSelectMode}\n                      selectedDevices={props.selectedDevices}\n                      deviceItems={deviceItems}\n                      setSelectedDevices={props.setSelectedDevices}\n                      removeSelectedDevices={removeSelectedDevices}\n                      onCalculation={props.onCalculation}\n                      setPage={routeState.setPage}\n                      t={props.t}\n                    />\n                  )}\n\n                  <Table\n                    error={devicesResult.error}\n                    router={props.router}\n                    activateRuleAction={props.activateRuleAction}\n                    accessRights={accessRightsResult}\n                    deviceTotalCount={numDevicesQuery.data}\n                    isLoading={devicesResult.isLoading}\n                    pageInfo={pageInfo}\n                    pageSize={listState.pageSize}\n                    handleSetPageSize={handleSetPageSize}\n                    handleSetSorting={handleSetSorting}\n                    sortingOrder={listState.sortingOrder}\n                    sortingField={listState.sortingField}\n                    setCurrentPage={listState.setCurrentPage}\n                    currentPage={listState.currentPage}\n                    deviceItems={deviceItems}\n                    selectMode={props.selectMode}\n                    handleSelectAllDevices={handleSelectAllDevices}\n                    selectedDevices={props.selectedDevices}\n                    setDeviceSelected={props.setDeviceSelected}\n                    columns={listState.columns}\n                    deviceWithOpenStatusModal={generalModalState.deviceWithOpenStatusModal}\n                    openStatusModal={generalModalState.openStatusModal}\n                    closeStatusModal={generalModalState.closeStatusModal}\n                    t={props.t}\n                  />\n\n                </MainContentContainer>\n              </MainContentWrapper>\n            </SidebarSibling>\n          </>\n        ),\n        [PAGES.calculations]: (\n          <Calculations\n            router={props.router}\n            selectedDevices={props.selectedDevices}\n            devices={devicesResult.data}\n            createCalculation={props.createCalculation}\n            seekDevices={props.seekDevices}\n            setSelectedDevices={props.setSelectedDevices}\n            setSelectMode={props.setSelectMode}\n            setPage={routeState.setPage}\n          />\n        ),\n        [PAGES.tools]: (\n          <Tools\n            selectedDevices={props.selectedDevices}\n            devices={devicesResult.data}\n            setSelectedDevices={props.setSelectedDevices}\n            setSelectMode={props.setSelectMode}\n            setPage={routeState.setPage}\n          />\n        ),\n        [PAGES.configuration]: (\n          <Configuration\n            t={props.t}\n            router={props.router}\n            selectedDevices={props.selectedDevices}\n            devices={devicesResult.data}\n            setSelectedDevices={props.setSelectedDevices}\n            setSelectMode={props.setSelectMode}\n            setPage={routeState.setPage}\n          />\n        ),\n        [PAGES.editing]: (\n          <Editing\n            t={props.t}\n            router={props.router}\n            selectedDevices={props.selectedDevices}\n            devices={devicesResult.data}\n            setSelectedDevices={props.setSelectedDevices}\n            setSelectMode={props.setSelectMode}\n            setPage={routeState.setPage}\n          />\n        ),\n        [PAGES.reportInterval]: (\n          <ReportInterval\n            t={props.t}\n            selectedDevices={props.selectedDevices}\n            devices={devicesResult.data}\n            setSelectedDevices={props.setSelectedDevices}\n            setSelectMode={props.setSelectMode}\n            setPage={routeState.setPage}\n          />\n        ),\n        [PAGES.deletion]: (\n          <Deletion\n            t={props.t}\n            selectedDevices={props.selectedDevices}\n            devices={devicesResult.data}\n            setSelectedDevices={props.setSelectedDevices}\n            setSelectMode={props.setSelectMode}\n            setPage={routeState.setPage}\n          />\n        ),\n      }[routeState.page]}\n    </SidebarParent>\n  );\n};\n\n\nconst RawDevicesListPane = compose(\n  withContext({context, actions}),\n  withLanguage(),\n  withEvents(events),\n)(BasicDevicesListPane);\n\n\nconst withContextProvider = Component => props => (\n  <StateContextProvider>\n    <Component {...props} />\n  </StateContextProvider>\n);\n\nconst DevicesListPane = compose(\n  withContextProvider,\n)(RawDevicesListPane);\n\nexport default DevicesListPane;\n","import {devicesApi, accessRightsApi, calculationsApi} from '../../api';\nimport {\n  selectDevData,\n  selectAccessRightsData,\n  selectCalculationsData,\n  selectDevicesData,\n} from './selectors';\n\nconst useFetchDevices = ({params}) => (\n  devicesApi.useDevicesQuery({\n    params,\n    select: selectDevicesData,\n  })\n);\n\nconst useFetchDeviceItems = ({params, calculations, t}) => (\n  devicesApi.useDevicesQuery({\n    params,\n    select: selectDevData({calculations, t}),\n  })\n);\n\nconst useAccessRightsResult = ({subjectId}) => (\n  accessRightsApi.useAccessRightsSubjectQuery({\n    subjectId,\n    select: selectAccessRightsData,\n  })\n);\n\nconst useCalculationResult = () => (\n  calculationsApi.useCalculationsQuery({\n    select: selectCalculationsData,\n  })\n);\n\n\nexport {\n  useFetchDevices,\n  useFetchDeviceItems,\n  useAccessRightsResult,\n  useCalculationResult,\n};\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport getDeviceStatus from '../../utils/get-device-status';\nimport {FILTER_TAGS_NAMES} from './constants';\nimport {getDeviceValues} from './utils';\nimport {createIdKeyedObject} from '../../utils';\n\nconst selectTags = createSelector(\n  props => props.formInputs,\n  formInputs => {\n    const arr = [];\n\n    if (_.get(formInputs, 'filterName.value')) {\n      arr.push({\n        inputName: 'filterName',\n        text: `${FILTER_TAGS_NAMES.filterName}: ${_.get(formInputs, 'filterName.value')}`,\n      });\n    }\n\n    if (_.get(formInputs, 'filterDeviceModelName.value')) {\n      arr.push({\n        inputName: 'filterDeviceModelName',\n        text: `${FILTER_TAGS_NAMES.filterDeviceModelName}: ${_.get(formInputs, 'filterDeviceModelName.value')}`,\n      });\n    }\n\n    if (_.get(formInputs, 'filterType.value')) {\n      arr.push({\n        inputName: 'filterType',\n        text: `${FILTER_TAGS_NAMES.filterType}: ${_.get(formInputs, 'filterType.value')}`,\n      });\n    }\n\n    return arr;\n  }\n);\n\nconst selectPageInfo = createSelector(\n  props => props.currentPage,\n  props => props.pageSize,\n  props => props.deviceTotalCount,\n  props => props.deviceItems,\n  props => props.t,\n  (currentPage, pageSize, total, deviceItems, t) => {\n    if (!deviceItems) return '';\n    const from = (currentPage - 1) * pageSize + 1;\n    const to = from + deviceItems.length - 1;\n    return `${_.capitalize(t('titles.showing'))} ${from}-${to} ${t('common.of')} ${total}`;\n  },\n);\n\n// Query selectors\n\nconst selectDevicesData = data => {\n  const res = createIdKeyedObject(data, '_id');\n  return res;\n};\n\nconst selectAccessRightsData = data => {\n  const res = createIdKeyedObject(data, 'resourceId');\n  return res;\n};\n\nconst selectCalculationsData = data => {\n  const res = createIdKeyedObject(data, '_id');\n  return res;\n};\n\n\nconst selectDevData = ({calculations, t}) => devices => {\n  const statusCreator = devices => {\n    return _.map(devices, device => {\n      return {...device, status: getDeviceStatus(device, calculations, t)};\n    });\n  };\n\n  const valueCreator = devices => {\n    return _.map(devices, device => {\n      return {...device, values: getDeviceValues(device, t)};\n    });\n  };\n\n  return compose(\n    valueCreator,\n    statusCreator,\n  )(devices);\n};\n\nexport {\n  selectPageInfo,\n  selectTags,\n  selectDevicesData,\n  selectAccessRightsData,\n  selectCalculationsData,\n  selectDevData,\n};\n","import React, {createContext, useReducer, useMemo} from 'react';\nimport {createStateLogger} from '../../../utils';\n\nconst STATES = {\n  selectedDevices: 'selectedDevices',\n  selectMode: 'selectMode',\n};\n\nconst ACTION_TYPES = {\n  setSelectedDevices: 'setSelectedDevices',\n  setSelectMode: 'setSelectMode',\n};\n\nconst actions = {\n  setSelectedDevices: selectedDevices => ({\n    type: ACTION_TYPES.setSelectedDevices,\n    payload: {selectedDevices},\n  }),\n  setSelectMode: selectMode => ({\n    type: ACTION_TYPES.setSelectMode,\n    payload: {selectMode},\n  }),\n};\n\nconst defaultState = {\n  [STATES.selectedDevices]: [],\n  [STATES.selectMode]: false,\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.setSelectedDevices: {\n      const {selectedDevices} = action.payload;\n      return {\n        ...state,\n        selectedDevices,\n      };\n    }\n\n    case ACTION_TYPES.setSelectMode: {\n      const {selectMode} = action.payload;\n      return {\n        ...state,\n        selectMode,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nconst StateContext = createContext({});\n\nconst StateContextProvider = props => {\n  const reducerWithLogger = createStateLogger(reducer);\n\n  const defaultState = reducer(undefined, {});\n  const [state, dispatch] = useReducer(reducerWithLogger, defaultState);\n  const value = useMemo(() => {\n    return {state, dispatch};\n  }, [state]);\n\n  return (\n    <StateContext.Provider value={value}>\n      {props.children}\n    </StateContext.Provider>\n  );\n};\n\nexport {\n  actions,\n  reducer,\n  StateContext,\n  StateContextProvider,\n};\n","import {PropTypes, checkProps} from 'vanilla-prop-types';\n\nimport {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n  getVanillaPropTypesInputsShape,\n} from '../../../utils/form-wizard';\n\nconst formData = {\n  filterName: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  filterDeviceModelName: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  filterType: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst inputsProps = {\n  filterName: PropTypes.string,\n  filterDeviceModelName: PropTypes.string,\n  filterType: PropTypes.string,\n};\n\nconst propTypes = getVanillaPropTypesInputsShape(inputsProps);\n\nconst validateState = checkProps(propTypes, {isExact: true});\n\nconst {actions, reducer} = generateForm(formData);\n\nexport default {\n  actions,\n  reducer,\n  validateState,\n};\n","const ACTION_TYPES = {\n  openStatusModal: 'openStatusModal',\n  closeStatusModal: 'closeStatusModal',\n};\n\nconst actions = {\n  openStatusModal: deviceId => ({\n    type: ACTION_TYPES.openStatusModal,\n    payload: {deviceId},\n  }),\n  closeStatusModal: () => ({\n    type: ACTION_TYPES.closeStatusModal,\n  }),\n};\n\nconst defaultState = {\n  deviceWithOpenStatusModal: null,\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.openStatusModal: {\n      const {deviceId} = payload;\n      return {\n        ...state,\n        deviceWithOpenStatusModal: deviceId,\n      };\n    }\n\n    case ACTION_TYPES.closeStatusModal: {\n      return {\n        ...state,\n        deviceWithOpenStatusModal: null,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","import generalState from './general-state';\nimport formState from './form-state';\nimport persistentState from './persistent-state';\nimport pageState from './page-state';\nimport {\n  actions as contextActions,\n  StateContext,\n  StateContextProvider,\n} from './context-state';\n\nexport {\n  generalState,\n  formState,\n  persistentState,\n  pageState,\n  contextActions,\n  StateContext,\n  StateContextProvider,\n};\n","const ACTION_TYPES = {\n  setPage: 'setPage',\n};\n\nconst actions = {\n  setPage: page => ({\n    type: ACTION_TYPES.setPage,\n    payload: {page},\n  }),\n};\n\nconst defaultState = {\n  page: 'default',\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.setPage: {\n      const {page} = payload;\n      return {\n        ...state,\n        page,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","import {PropTypes, checkProps} from 'vanilla-prop-types';\n\nimport {DEFAULT_PAGE_SIZE, COLUMN_PRESETS} from '../constants';\n\nconst ACTION_TYPES = {\n  setFilterCollapsed: 'setFilterCollapsed',\n  setCurrentPage: 'setCurrentPage',\n  setPageSize: 'setPageSize',\n  setSortingOrder: 'setSortingOrder',\n  setSortingField: 'setSortingField',\n  setColumns: 'setColumns',\n};\n\nconst defaultState = {\n  filterCollapsed: {},\n  currentPage: 1,\n  pageSize: DEFAULT_PAGE_SIZE,\n  sortingOrder: 'asc',\n  sortingField: 'name',\n  columns: COLUMN_PRESETS.default.columns,\n};\n\nconst propTypes = {\n  filterCollapsed: PropTypes.object.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  sortingOrder: PropTypes.string.isRequired,\n  sortingField: PropTypes.string.isRequired,\n  columns: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst validateState = checkProps(propTypes, {isExact: true});\n\nconst actions = {\n  setFilterCollapsed: filter => ({\n    type: ACTION_TYPES.setFilterCollapsed,\n    payload: {filter},\n  }),\n  setCurrentPage: currentPage => ({\n    type: ACTION_TYPES.setCurrentPage,\n    payload: {currentPage},\n  }),\n  setPageSize: pageSize => ({\n    type: ACTION_TYPES.setPageSize,\n    payload: {pageSize},\n  }),\n  setSortingOrder: sortingOrder => ({\n    type: ACTION_TYPES.setSortingOrder,\n    payload: {sortingOrder},\n  }),\n  setSortingField: sortingField => ({\n    type: ACTION_TYPES.setSortingField,\n    payload: {sortingField},\n  }),\n  setColumns: columns => ({\n    type: ACTION_TYPES.setColumns,\n    payload: {columns},\n  }),\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.setFilterCollapsed: {\n      const {filter} = payload;\n      return {\n        ...state,\n        filterCollapsed: {\n          ...state.filterCollapsed,\n          [filter]: !state.filterCollapsed[filter],\n        },\n      };\n    }\n\n    case ACTION_TYPES.setCurrentPage: {\n      const {currentPage} = payload;\n      return {\n        ...state,\n        currentPage,\n      };\n    }\n\n    case ACTION_TYPES.setPageSize: {\n      const {pageSize} = payload;\n      return {\n        ...state,\n        pageSize,\n      };\n    }\n\n    case ACTION_TYPES.setSortingOrder: {\n      const {sortingOrder} = payload;\n      return {\n        ...state,\n        sortingOrder,\n      };\n    }\n\n    case ACTION_TYPES.setSortingField: {\n      const {sortingField} = payload;\n      return {\n        ...state,\n        sortingField,\n      };\n    }\n\n    case ACTION_TYPES.setColumns: {\n      const {columns} = payload;\n      return {\n        ...state,\n        columns,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n  validateState,\n};\n","import _ from 'lodash';\nimport styled, {css} from 'styled-components';\nimport Icon from 'react-icons-kit';\n\nimport {FlexWrapper} from '../../global/styled';\nimport {COLORS} from '../../constants';\nimport {TABLE_ROW_HEIGHT, COLUMNS} from './constants';\n\n// GENERAL\n\nconst SmallScreenHider = styled.div`\n  display: none;\n\n  @media (min-width:1100px)  {\n    display: flex;\n  }\n`;\n\nconst BigScreenHider = styled.div`\n  display: flex;\n\n  @media (min-width:1100px)  {\n    display: none;\n  }\n`;\n\n// HEADING BAR\n\nconst HeadingTitle = styled.p`\n  font-weight: bold;\n`;\n\nconst NumDevicesPill = styled.div`\n  position: relative;\n  top: 1px;\n  padding: 0 5px;\n  height: 16px;\n  margin: 0 0 0 8px;\n  background: #d7d7d7;\n  border-radius: 8px;\n  font-size: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\n\n// FILTER BAR\n\nconst FilterBarContainer = styled.div`\n  width: 100%;\n  display: flex;\n  padding: 11px 0 5px 0;\n  margin: 0 0 5px 0;\n  border-top: 1px solid #ccc;\n  flex-wrap: wrap;\n`;\n\nconst FilterBarLeftSection = styled.div`\n  width: 80px;\n  height: 30px;\n  display: flex;\n  font-size: 12px;\n  align-items: center;\n\n  @media (max-width: 1560px) {\n    display: none;\n  }\n`;\n\nconst FilterBarMiddleSection = styled.div`\n  width: 100px;\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  overflow: auto;\n  flex-wrap: nowrap;\n\n  /* Hide scrollbar */\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst FilterBarRightSection = styled.div`\n  width: fit-content;\n  padding: 0 0 0 10px;\n  height: 30px;\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  p {\n    font-size: 12px;\n    margin: 0;\n  }\n`;\n\n// SELECTION BAR\n\nconst SelectionBarContainer = styled.div`\n  width: 100%;\n  height: 56px;\n  display: flex;\n  margin: 0 0 14px 0;\n  border-top: 1px solid #ccc;\n  border-bottom: 1px solid #ccc;\n  justify-content: space-between;\n`;\n\nconst SelectionBarLeftSection = styled.div`\n  width: fit-content;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  p {\n    margin: 0;\n    font-size: 13px;\n  }\n`;\n\nconst NumSelectedText = styled.span`\n  color: ${({noDevices}) => (noDevices ? 'black' : 'blue')};\n  font-weight: ${({noDevices}) => (noDevices ? 'normal' : 'bold')};\n  margin: 0 5px 0 0;\n`;\n\nconst SelectionBarRightSection = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n`;\n\nconst SelectAllLabel = styled.p`\n  font-size: 12px;\n  margin: 0 0 0 3px;\n\n  @media (max-width: 700px) {\n    display: none;\n  }\n`;\n\n// SIDEBAR\n\nconst SidebarHeading = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 46px;\n`;\n\nconst SidebarHeadingLeftSection = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SidebarHeadingTitle = styled.p`\n  font-size: 13px;\n  margin: 0 0 0 5px;\n  font-weight: bold;\n  position: relative;\n  top: 1px;\n`;\n\nconst CollapsableButton = styled.div`\n  cursor: pointer;\n  justify-content: space-between;\n  color: ${COLORS.greyDark};\n  display: flex;\n  height: 44px;\n  font-size: 13px;\n  align-items: center;\n  border-top: 1px solid #E1E1E1;\n`;\n\nconst CollapsableButtonIconWrapper = styled.div`\n  color: #666;\n`;\n\nconst TypeWrapper = styled(FlexWrapper)`\n  margin: 6px 0 0 0;\n  font-size: 0.8em;\n`;\n\nconst TypeCheckbox = styled.input`\n  margin: 0 6px 0 0;\n  position: relative;\n  top: 2px;\n`;\n\n// TABLE OPTIONS\n\nconst ListOptionsButtonsRow = styled.div`\n  display: flex;\n\n  @media (min-width:800px)  {\n    height: auto;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst HorizontalLine = styled.div`\n  display: none;\n\n  @media (min-width:800px)  {\n    display: flex;\n    height: 100%;\n    margin: 5px;\n    width: 1px;\n    background: ${COLORS.greyLight};\n  }\n`;\n\nconst LabelsSelectedRow = styled(FlexWrapper)`\n  justify-content: center;\n  align-items: center;\n  font-size: 0.6em;\n\n  @media (min-width:800px)  {\n    font-size: 0.8em;\n  }\n`;\n// TABLE\n\nconst TableContainer = styled.div`\n  width: 100%;\n  display: grid;\n  grid-auto-rows: ${TABLE_ROW_HEIGHT}px;\n  font-size: 12px;\n  grid-template-columns: ${({columns, selectMode}) => {\n    const selected = _.pick(COLUMNS, columns);\n    let items = _.map(selected, 'width');\n    if (selectMode) {\n      items = ['50px', ...items];\n    }\n    return _.join(items, ' ');\n  }};\n`;\n\nconst TableItem = styled.div`\n  box-sizing: border-box;\n  border-bottom: 1px solid #E1E1E1;\n  height: 100%;\n  display: flex;\n  padding-right: 20px;\n  justify-content: ${({align}) => (align === 'right' ? 'flex-end' : 'flex-start')};\n  text-align: ${({align}) => (align === 'right' ? 'right' : 'left')};\n  align-items: center;\n  overflow: hidden;\n  white-space: nowrap;\n  &:first-child {\n    padding-left: 16px;\n  }\n  &:last-child {\n    padding-right: 16px;\n  }\n  p {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n`;\n\nconst TableHeadingItem = styled(TableItem)`\n  font-weight: bold;\n`;\n\nconst HeadingRow = styled.div`\n  display: contents;\n`;\n\nconst TableRow = styled.div`\n  display: contents;\n  ${({selectMode}) => selectMode && css`\n      cursor: pointer;\n  `}\n  ${TableItem} {\n    ${({isSelected}) => isSelected && css`\n      background: #ecf3fc;\n    `}\n  }\n  &:hover ${TableItem} {\n    background: ${({isSelected}) => (isSelected ? '#e1edfa' : '#f5f5f5')};\n  }\n`;\n\nconst StyledCheckbox = styled.input`\n  margin: 0;\n`;\n\nconst DeviceName = styled.p`\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst ValueChip = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${COLORS.greyLightAlt};\n  font-size: 0.8em;\n  margin: 0 5px 0 0;\n  padding: 0 5px 0;\n  height: 20px;\n  border-radius: 15px;\n  white-space: nowrap;\n`;\n\nconst TableFooter = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0 16px 0 16px;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  border-bottom: 1px solid ${COLORS.greyAlt}\n`;\n\nconst TableFooterLeftSection = styled.div`\n  font-size: 12px;\n  color: #555;\n  display: flex;\n  align-items: center;\n  height: 60px;\n`;\n\nconst PageInfo = styled.p`\n  margin: 0;\n  margin: 0 40px 0 0;\n`;\n\nconst SetPageSizeContainer = styled.div`\n`;\n\nconst PageSizeSelect = styled.select`\n  border: 0;\n  background: none;\n  font-size: 11px;\n  cursor: pointer;\n  position: relative;\n  top: 1px;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst TableFooterRightSection = styled.div`\n  display: flex;\n  align-items: center;\n  height: 60px;\n`;\n\nconst EmptyTableView = styled.div`\n  width: 100%;\n  height: 120px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #555;\n  font-size: 15px;\n`;\n\n// CUSTOMIZE COLUMNS POPUP\n\nconst CustomizeColumnsHeader = styled.div`\n  width: 100%;\n  height: 60px;\n  box-sizing: border-box;\n  font-size: 15px;\n  padding: 0 17px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid #e7e7e7;\n`;\n\nconst CustomizeColumnsMainSection = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  height: 320px;\n  overflow-y: scroll;\n  padding: 20px 17px 0;\n  border-bottom: 1px solid #e7e7e7;\n`;\n\nconst CustomizeColumnsFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  box-sizing: border-box;\n  height: 78px;\n  padding: 20px 17px 0;\n`;\n\nconst CustomizeColumnsItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 13px;\n  height: 36px;\n  padding: 0 10px 0 13px;\n  margin: 0 0 7px 0;\n  border-radius: 4px;\n  background: #f1f1f1;\n  align-items: center;\n  color: ${({disabled}) => (disabled ? '#aaa' : 'black')};\n  p {\n    margin: 0;\n  }\n`;\n\nconst CustomizeColumnsItemButton = styled.div`\n  width: 24px;\n  height: 24px;\n  border-radius: 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: ${({margin}) => margin || '0'};\n  color: ${({disabled}) => (disabled ? '#bbb' : '#111')};\n  cursor: ${({disabled}) => (disabled ? 'default' : 'pointer')};\n  &:hover {\n    background: ${({disabled}) => (disabled ? 'none' : '#dadada')};\n  }\n`;\n\nconst AccessRightIcon = styled(Icon)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 5px;\n  margin: 0 1px 0;\n  height: 15px;\n  min-width: 15px;\n  color: ${({hasRight}) => (hasRight ? COLORS.greyDarkAlt : COLORS.greyLight)};\n`;\n\nexport {\n  // GENERAL\n  SmallScreenHider,\n  BigScreenHider,\n\n  // HEADING BAR\n  HeadingTitle,\n  NumDevicesPill,\n\n  // FILTER BAR\n  FilterBarContainer,\n  FilterBarLeftSection,\n  FilterBarMiddleSection,\n  FilterBarRightSection,\n\n  // SELECTION BAR\n  SelectionBarContainer,\n  SelectionBarLeftSection,\n  NumSelectedText,\n  SelectionBarRightSection,\n  SelectAllLabel,\n\n  // SIDEBAR\n  SidebarHeading,\n  SidebarHeadingLeftSection,\n  SidebarHeadingTitle,\n  CollapsableButton,\n  CollapsableButtonIconWrapper,\n  TypeWrapper,\n  TypeCheckbox,\n\n  // TABLE OPTIONS\n  ListOptionsButtonsRow,\n  HorizontalLine,\n  LabelsSelectedRow,\n\n  // TABLE\n  TableContainer,\n  TableItem,\n  TableHeadingItem,\n  HeadingRow,\n  TableRow,\n  StyledCheckbox,\n  DeviceName,\n  ValueChip,\n  TableFooter,\n  TableFooterLeftSection,\n  PageInfo,\n  SetPageSizeContainer,\n  PageSizeSelect,\n  TableFooterRightSection,\n  EmptyTableView,\n\n  // CUSTOMIZE COLUMNS POPUP\n  CustomizeColumnsHeader,\n  CustomizeColumnsMainSection,\n  CustomizeColumnsFooter,\n  CustomizeColumnsItem,\n  CustomizeColumnsItemButton,\n  AccessRightIcon,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\nimport {Icon} from 'react-icons-kit';\nimport {ic_close as removeIcon} from 'react-icons-kit/md/ic_close';\nimport {ic_keyboard_arrow_down as downIcon} from 'react-icons-kit/md/ic_keyboard_arrow_down';\nimport {ic_keyboard_arrow_up as upIcon} from 'react-icons-kit/md/ic_keyboard_arrow_up';\n\nimport {\n  addColumnOptions,\n  presetOptions,\n  moveItemUpInArray,\n  moveItemDownInArray,\n} from '../utils';\nimport {COLUMNS, COLUMN_PRESETS} from '../constants';\nimport Button from '../../../components/button';\nimport Select from '../../../components/select';\nimport {\n  FlexWrapper,\n} from '../../../global/styled';\nimport {\n  CustomizeColumnsHeader,\n  CustomizeColumnsMainSection,\n  CustomizeColumnsFooter,\n  CustomizeColumnsItem,\n  CustomizeColumnsItemButton,\n} from '../styled';\n\nconst CustomizeColumnsPopup = props => {\n\n  return (\n    <>\n      <CustomizeColumnsHeader>\n        {props.t('labels.customizeColumns')}\n        <Button\n          content={props.t('common.done')}\n          onClick={props.onClose}\n          ghosted\n          width={'fit'}\n          height={'30px'}\n          padding={'0 15px'}\n        />\n      </CustomizeColumnsHeader>\n      <CustomizeColumnsMainSection>\n        {_.map(props.columns, (column, index) => (\n          <CustomizeColumnsItem key={column} disabled={column === COLUMNS.name.name}>\n            <p>{props.t(`columns.${column}`)}</p>\n            {column !== COLUMNS.name.name && (\n              <FlexWrapper>\n                <CustomizeColumnsItemButton\n                  disabled={index === 1}\n                  onClick={() => props.setColumns(moveItemUpInArray(props.columns, index))}\n                >\n                  <Icon icon={upIcon} size={18} />\n                </CustomizeColumnsItemButton>\n                <CustomizeColumnsItemButton\n                  disabled={index === props.columns.length - 1}\n                  onClick={() => props.setColumns(moveItemDownInArray(props.columns, index))}\n                  margin={'0 30px 0 0'}\n                >\n                  <Icon icon={downIcon} size={18} />\n                </CustomizeColumnsItemButton>\n                <CustomizeColumnsItemButton\n                  onClick={() => (\n                    props.setColumns(_.without(props.columns, column))\n                  )}\n                >\n                  <Icon icon={removeIcon} size={14} />\n                </CustomizeColumnsItemButton>\n              </FlexWrapper>\n            )}\n          </CustomizeColumnsItem>\n        ))}\n      </CustomizeColumnsMainSection>\n      <CustomizeColumnsFooter>\n        <Select\n          placeholder={props.t(`labels.addColumn`)}\n          options={addColumnOptions(props.columns, props.t)}\n          margin={'0 10px 0 0'}\n          onChange={evt => {\n            const {target: {value}} = evt;\n            props.setColumns([...props.columns, value]);\n          }}\n          menuPlacement='top'\n        />\n        <Select\n          placeholder={props.t(`labels.selectPreset`)}\n          options={presetOptions}\n          onChange={evt => {\n            const {target: {value}} = evt;\n            props.setColumns(COLUMN_PRESETS[value].columns);\n          }}\n          menuPlacement='top'\n        />\n      </CustomizeColumnsFooter>\n    </>\n  );\n};\n\nCustomizeColumnsPopup.propTypes = exact({\n  columns: PropTypes.array,\n  setColumns: PropTypes.func,\n  onClose: PropTypes.func,\n  t: PropTypes.func,\n});\n\nexport default CustomizeColumnsPopup;\n","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\n\nimport Chip from '../../../components/chip';\nimport {\n  FilterBarContainer,\n  FilterBarLeftSection,\n  FilterBarMiddleSection,\n  FilterBarRightSection,\n} from '../styled';\n\nconst FilterBar = props => {\n  return (\n    <FilterBarContainer>\n      <FilterBarLeftSection>\n        {props.t('titles.activeFilters')}:\n      </FilterBarLeftSection>\n      <FilterBarMiddleSection>\n        {_.map(props.filterTags, tag => (\n          <Chip\n            text={tag.text}\n            key={tag.inputName}\n            color={'blue'}\n            showRemoveButton\n            onRemoveClick={() => {\n              if (tag.inputName === 'filterCheckedTypes') {\n                props.setInputValue(tag.inputName, []);\n              } else {\n                props.setInputValue(tag.inputName, '');\n              }\n            }}\n            ghosted\n            margin={'0 4px 0 0'}\n          />\n        ))}\n      </FilterBarMiddleSection>\n      <FilterBarRightSection>\n        <p>{props.t('titles.filteredOut')} <b>{_.size(props.deviceItems)} / {props.deviceTotalCount}</b></p>\n      </FilterBarRightSection>\n    </FilterBarContainer>\n  );\n};\n\nFilterBar.propTypes = exact({\n  filterTags: PropTypes.array,\n  deviceItems: PropTypes.array,\n  deviceTotalCount: PropTypes.number,\n  setInputValue: PropTypes.func,\n  handleTypeCheckbox: PropTypes.func,\n  t: PropTypes.func,\n});\n\nexport default FilterBar;\n","import React from 'react';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\nimport {ic_dehaze as SidebarIcon} from 'react-icons-kit/md/ic_dehaze';\n\nimport CustomizeColumnsPopup from './customize-columns-popup';\nimport Button from '../../../components/button';\nimport {Modal} from '../../../components/modal';\nimport {\n  HeadingTitle,\n  NumDevicesPill,\n} from '../styled';\nimport {\n  HeadingBarContainer,\n  HeadingBarLeftSection,\n  HeadingBarMiddleSection,\n  HeadingBarRightSection,\n  ToggleSidebarButton,\n} from '../../../global/styled';\n\nconst HeadingBar = props => {\n  return (\n    <HeadingBarContainer>\n      <HeadingBarLeftSection siblingWidth={props.siblingWidth}>\n        <ToggleSidebarButton\n          onClick={() => {\n            if (props.isSidebarOpen) {\n              props.closeSidebar();\n            } else {\n              props.openSidebar();\n            }\n          }}\n        >\n          <Icon icon={SidebarIcon} size={17} />\n        </ToggleSidebarButton>\n      </HeadingBarLeftSection>\n      <HeadingBarMiddleSection>\n        <HeadingTitle>\n          {_.capitalize(props.t('common.devices'))}\n        </HeadingTitle>\n        {!props.isLoading && (\n          <NumDevicesPill>\n            {props.deviceTotalCount}\n          </NumDevicesPill>\n        )}\n      </HeadingBarMiddleSection>\n      <HeadingBarRightSection>\n        {!props.selectMode && (\n          <>\n            <Button\n              content={props.t('labels.customizeColumns')}\n              height={'30px'}\n              width={'fit'}\n              ghosted\n              padding={'0 10px'}\n              margin={'0 6px 0 0'}\n              onClick={() => props.customizeColumnsModal.open()}\n            />\n            <Modal\n              isOpen={props.customizeColumnsModal.isOpen}\n              close={props.customizeColumnsModal.close}\n              width={'400px'}\n            >\n              <CustomizeColumnsPopup\n                onClose={props.customizeColumnsModal.close}\n                setColumns={props.setColumns}\n                columns={props.columns}\n                t={props.t}\n              />\n            </Modal>\n          </>\n        )}\n        {!props.selectMode && !props.isLoading && !!_.size(props.deviceItems) && (\n          <Button\n            content={_.capitalize(props.t('labels.selectMany'))}\n            height={'30px'}\n            ghosted\n            onClick={() => props.setSelectMode(!props.selectMode)}\n            margin={'0 6px 0 0'}\n          />\n        )}\n        <Button\n          content={_.capitalize(props.t('labels.newDevice'))}\n          color={'green'}\n          height={'30px'}\n          onClick={() => {\n            props.router.push('/devices/new');\n          }}\n        />\n      </HeadingBarRightSection>\n    </HeadingBarContainer>\n  );\n};\n\nHeadingBar.propTypes = exact({\n  router: PropTypes.object.isRequired,\n  customizeColumnsModal: PropTypes.object,\n  deviceTotalCount: PropTypes.string,\n  isLoading: PropTypes.bool,\n  isSidebarOpen: PropTypes.bool,\n  closeSidebar: PropTypes.func,\n  openSidebar: PropTypes.func,\n  setSelectMode: PropTypes.func,\n  selectMode: PropTypes.bool,\n  devices: PropTypes.object,\n  deviceItems: PropTypes.array,\n  columns: PropTypes.array,\n  setColumns: PropTypes.func,\n  siblingWidth: PropTypes.number,\n  t: PropTypes.func,\n});\n\nexport default HeadingBar;\n","import Sidebar from './sidebar';\nimport HeadingBar from './heading-bar';\nimport FilterBar from './filter-bar';\nimport SelectionBar from './selection-bar';\nimport Table from './table';\n\nexport {\n  Sidebar,\n  FilterBar,\n  HeadingBar,\n  SelectionBar,\n  Table,\n};\n","import React from 'react';\nimport _ from 'lodash';\n\nimport Button from '../../../components/button';\nimport Select from '../../../components/select';\nimport {\n  SelectionBarContainer,\n  SelectionBarLeftSection,\n  SelectionBarRightSection,\n  NumSelectedText,\n} from '../styled';\nimport {listActions} from '../utils';\n\nconst SelectionBar = props => {\n  return (\n    <SelectionBarContainer>\n      <SelectionBarLeftSection>\n        <p>\n          <NumSelectedText noDevices={_.isEmpty(props.selectedDevices.length)}>\n            {_.size(props.selectedDevices)}\n          </NumSelectedText>\n          {props.t('phrases.devicesSelected')}\n        </p>\n      </SelectionBarLeftSection>\n      <SelectionBarRightSection>\n        <Button\n          label={_.capitalize(props.t('labels.cancel'))}\n          margin={'0 20px 0'}\n          height={'35px'}\n          width={'fit'}\n          padding={'0 10px'}\n          ghosted\n          onClick={() => {\n            props.setSelectMode(false);\n            props.setSelectedDevices([]);\n          }}\n        />\n        <Select\n          disabled={_.isEmpty(props.selectedDevices)}\n          width={'150px'}\n          placeholder={_.capitalize(props.t('placeholders.action'))}\n          name={'selection'}\n          options={[\n            {value: 'setConnector', label: 'Set connector'},\n            {value: 'configure', label: 'Configure'},\n            {value: 'calculate', label: 'Calculate'},\n            {value: 'edit', label: 'Edit'},\n            {value: 'setReportInterval', label: 'Set report interval'},\n            {value: 'charts', label: 'Charts'},\n            {value: 'remove', label: 'Delete'},\n          ]}\n          onChange={evt => {\n            listActions[evt.target.value](props);\n          }}\n        />\n      </SelectionBarRightSection>\n    </SelectionBarContainer>\n  );\n};\n\nexport default SelectionBar;\n","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\nimport Icon from 'react-icons-kit';\nimport {ic_filter_list as filterIcon} from 'react-icons-kit/md/ic_filter_list';\nimport {ic_expand_more as expandIcon} from 'react-icons-kit/md/ic_expand_more';\nimport {ic_expand_less as collapseIcon} from 'react-icons-kit/md/ic_expand_less';\n\nimport {\n  SidebarHeading,\n  SidebarHeadingLeftSection,\n  SidebarHeadingTitle,\n  CollapsableButton,\n  CollapsableButtonIconWrapper,\n} from '../styled';\nimport Select from '../../../components/select';\nimport Collapsible from '../../../components/collapsible';\nimport {DEVICE_TYPES, FILTERING_TYPES, SIDEBAR_SIBLING_WIDTH} from '../constants';\nimport Button from '../../../components/button';\nimport TextField from '../../../components/text-field';\nimport {Sidebar as SidebarContainer} from '../../../components/sidebar-components';\n\nconst Sidebar = props => {\n  return (\n    <SidebarContainer\n      isSidebarOpen={props.isSidebarOpen}\n      closeSidebar={props.closeSidebar}\n      openSidebar={props.openSidebar}\n      siblingWidth={SIDEBAR_SIBLING_WIDTH}\n      isUsingNavbar\n    >\n      <SidebarHeading>\n        <SidebarHeadingLeftSection>\n          <Icon icon={filterIcon} size={18} />\n          <SidebarHeadingTitle>\n            {_.capitalize(props.t('labels.filter'))}\n          </SidebarHeadingTitle>\n        </SidebarHeadingLeftSection>\n        {!_.isEmpty(props.filterTags) && (\n          <Button\n            onClick={props.clearFilters}\n            color={'red'}\n            content={'Clear filter'}\n            height={'26px'}\n            width={'fit'}\n            ghosted\n          />\n        )}\n      </SidebarHeading>\n\n      <Collapsible\n        openedHeight={'110px'}\n        open={_.get(props, `filterCollapsed.${FILTERING_TYPES.name}`)}\n        onClick={() => (\n          props.setFilterCollapsed(FILTERING_TYPES.name, {[FILTERING_TYPES.name]: true})\n        )}\n        label={<CollapseButton filterName='name' {...props} />}\n      >\n        <TextField\n          name={'filterName'}\n          onChange={props.handleValueChange}\n          value={props.formInputs.filterName.value}\n          placeholder={`Name...`}\n        />\n      </Collapsible>\n\n      <Collapsible\n        openedHeight={'110px'}\n        open={_.get(props, `filterCollapsed.${FILTERING_TYPES.deviceModelName}`)}\n        onClick={() => (\n          props.setFilterCollapsed(\n            FILTERING_TYPES.deviceModelName,\n            {[FILTERING_TYPES.deviceModelName]: true}\n          )\n        )}\n        label={<CollapseButton filterName='deviceModelName' {...props} />}\n      >\n        <TextField\n          name={'filterDeviceModelName'}\n          onChange={props.handleValueChange}\n          value={props.formInputs.filterDeviceModelName.value}\n          placeholder={`Device model name...`}\n        />\n      </Collapsible>\n\n      <Collapsible\n        openedHeight={'530px'}\n        open={_.get(props, `filterCollapsed.${FILTERING_TYPES.type}`)}\n        onClick={() => {\n          props.setFilterCollapsed(FILTERING_TYPES.type, {[FILTERING_TYPES.type]: true});\n        }}\n        label={<CollapseButton filterName='type' {...props} />}\n      >\n        <Select\n          isClearable\n          width={'100%'}\n          placeholder={_.capitalize(props.t('placeholders.select'))}\n          name={'filterType'}\n          options={DEVICE_TYPES}\n          value={_.get(props.formInputs, 'filterType.value')}\n          onChange={props.handleValueChange}\n        />\n      </Collapsible>\n    </SidebarContainer>\n  );\n};\n\nconst CollapseButton = props => (\n  <CollapsableButton>\n    {_.capitalize(props.t(`common.${props.filterName}`))}\n    <CollapsableButtonIconWrapper>\n      {\n        _.get(props, `filterCollapsed.${FILTERING_TYPES[props.filterName]}`)\n          ? <Icon icon={collapseIcon} size={20} />\n          : <Icon icon={expandIcon} size={20} />\n      }\n    </CollapsableButtonIconWrapper>\n  </CollapsableButton>\n);\n\nSidebar.propTypes = exact({\n  clearFilters: PropTypes.func,\n  filterTags: PropTypes.array,\n  setFilterCollapsed: PropTypes.func,\n  filterCollapsed: PropTypes.object,\n  t: PropTypes.func,\n  handleTypeCheckbox: PropTypes.func,\n  handleValueChange: PropTypes.func,\n  formInputs: PropTypes.object,\n  isSidebarOpen: PropTypes.bool,\n  closeSidebar: PropTypes.func,\n  openSidebar: PropTypes.func,\n});\n\nexport default Sidebar;\n","import React from 'react';\nimport _ from 'lodash';\nimport {checkCircle} from 'react-icons-kit/fa/checkCircle';\n\nimport {formatTimeSinceLastReported, resolveDeviceType} from '../../../utils';\nimport {StatusPopup} from '../../../yggio-managers/device-manager/sub-components';\nimport {Modal} from '../../../components/modal';\nimport {\n  SmallStatusChip,\n  StatusChipIcon,\n} from '../../../yggio-managers/device-manager/styled';\nimport {\n  DeviceName,\n  ValueChip,\n  AccessRightIcon,\n} from '../styled';\nimport {createReadableExpectedReportInterval} from '../utils';\nimport {FlexWrapper} from '../../../global/styled';\nimport Button from '../../../components/button';\nimport {RELEVANT_VALUES, RULES_ACTIONS} from '../../../constants';\n\nconst Name = props => (\n  <DeviceName\n    onClick={() => !props.selectMode && props.router.push(`/devices/${props.device._id}/generalInfo`)}\n  >\n    {props.device.name || 'no-name'}\n  </DeviceName>\n);\n\nconst Type = props => (\n  <p>\n    {_.get(props, 'device') && resolveDeviceType(_.get(props, 'device'))}\n  </p>\n);\n\nconst Id = props => (\n  <p>\n    {props.device._id}\n  </p>\n);\n\nconst Status = props => (\n  <>\n    {!_.isEmpty(props.device.status.items) ? (\n      <>\n        <SmallStatusChip\n          type={props.device.status.worstStatusType}\n          onClick={() => props.openStatusModal(props.device._id)}\n        >\n          <StatusChipIcon type={props.device.status.worstStatusType} />\n          {_.size(props.device.status.items)}\n        </SmallStatusChip>\n        <Modal\n          isOpen={props.device._id === props.deviceWithOpenStatusModal}\n          close={props.closeStatusModal}\n          padding={'25px'}\n        >\n          <StatusPopup\n            title={props.device.name}\n            items={props.device.status.items}\n            onClose={props.closeStatusModal}\n          />\n        </Modal>\n      </>\n    ) : (\n      <p>-</p>\n    )}\n  </>\n);\n\nconst Values = props => (\n  <>\n    {\n      !_.isEmpty(props.device.values)\n        ? _.map(props.device.values, value => (<ValueChip key={value}>{value}</ValueChip>))\n        : <p>-</p>\n    }\n  </>\n);\n\nconst ReportedAt = props => (\n  <p>\n    {formatTimeSinceLastReported(props.device.reportedAt)}\n  </p>\n);\n\nconst ExpectedReportInterval = props => (\n  <p>\n    {\n      props.device.expectedReportInterval\n        ? createReadableExpectedReportInterval(props.device.expectedReportInterval)\n        : ''\n    }\n  </p>\n);\n\nconst DevEui = props => (\n  <p>{RELEVANT_VALUES.lora.devEui.getValue(props.device) || '-'}</p>\n);\n\nconst Rssi = props => (\n  <p>{RELEVANT_VALUES.lora.rssi.getValue(props.device) || '-'}</p>\n);\n\nconst FrameCount = props => (\n  <p>{RELEVANT_VALUES.lora.frameCount.getValue(props.device) || '-'}</p>\n);\n\nconst FPort = props => (\n  <p>{RELEVANT_VALUES.lora.fPort.getValue(props.device) || '-'}</p>\n);\n\nconst DataRate = props => (\n  <p>{RELEVANT_VALUES.lora.dataRate.getValue(props.device) || '-'}</p>\n);\n\nconst SpreadingFactor = props => (\n  <p>{RELEVANT_VALUES.lora.spreadingFactor.getValue(props.device) || '-'}</p>\n);\n\nconst Owned = props => (\n  <>\n    <AccessRightIcon\n      hasRight={_.includes(\n        _.get(props.accessRights, `data.${_.get(props, 'device._id')}.scope`),\n        'admin'\n      )}\n      icon={checkCircle}\n    />\n  </>\n);\n\nconst Actions = props => {\n  return _.map(props.rules, (rule, ruleId) => {\n    const [ruleName, deviceId] = _.split(rule.name, '.');\n    if (_.get(props, 'device._id') === deviceId) {\n      return (\n        <FlexWrapper key={ruleId}>\n          <Button\n            style={{padding: '0 15px 0', fontSize: '0.8em'}}\n            color={'green'}\n            margin={'2px'}\n            height={'20px'}\n            width={'20px'}\n            content={RULES_ACTIONS[ruleName]}\n            onClick={() => {\n              props.activateRuleAction(ruleId);\n            }}\n          />\n        </FlexWrapper>\n      );\n    }\n  });\n};\n\nexport default {\n  Name,\n  Type,\n  Id,\n  Status,\n  Values,\n  ExpectedReportInterval,\n  ReportedAt,\n  DevEui,\n  Rssi,\n  FrameCount,\n  FPort,\n  DataRate,\n  SpreadingFactor,\n  Owned,\n  Actions,\n};\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {PAGE_SIZES, COLUMNS} from '../constants';\nimport {capitalizeFirstLetter} from '../utils';\nimport {COLORS} from '../../../constants';\nimport ContainerBox from '../../../components/container-box';\n// import SortButton from '../../../components/sort-button';\nimport Pagination from '../../../components/pagination';\nimport Spinner from '../../../components/spinner';\nimport tableItems from './table-items';\nimport {\n  TableContainer,\n  TableItem,\n  TableHeadingItem,\n  HeadingRow,\n  TableRow,\n  StyledCheckbox,\n  TableFooter,\n  TableFooterLeftSection,\n  PageInfo,\n  SetPageSizeContainer,\n  PageSizeSelect,\n  TableFooterRightSection,\n  EmptyTableView,\n} from '../styled';\nimport {FlexColCenterMaxWidthWrapper} from '../../../global/styled';\n\nconst TableWrapper = props => (\n  <ContainerBox padding={'8px 0 0 0'}>\n    <TableSection {...props} />\n  </ContainerBox>\n);\n\nconst TableSection = props => {\n  if (props.isLoading) {\n    return (\n      <EmptyTableView>\n        <Spinner color={COLORS.greyMedium} size={26} margin={'0 10px 0 0'} />\n        {_.capitalize(props.t('common.fetching'))} {props.t('common.devices')}...\n      </EmptyTableView>\n    );\n  }\n\n  if (props.error) {\n    return (\n      <EmptyTableView>\n        <FlexColCenterMaxWidthWrapper>\n          <b>An error has occured!</b>\n          <p>{props.error.toString()}</p>\n        </FlexColCenterMaxWidthWrapper>\n      </EmptyTableView>\n    );\n  }\n\n  if (!props.isLoading && _.isEmpty(props.deviceItems)) {\n    return (\n      <EmptyTableView>\n        {props.t('phrases.noDevicesAvailable')}\n      </EmptyTableView>\n    );\n  }\n\n  return <Table {...props} />;\n};\n\nconst Table = props => (\n  <>\n    <TableOptions {...props} />\n    <TableContainer selectMode={props.selectMode} columns={props.columns}>\n      {props.selectMode && (\n        <TableHeadingItem>\n          <StyledCheckbox\n            type={'checkbox'}\n            readOnly\n            onChange={props.handleSelectAllDevices}\n            checked={props.selectedDevices.length === props.deviceItems.length}\n          />\n        </TableHeadingItem>\n      )}\n      <HeadingRow>\n        {_.map(props.columns, column => COLUMNS[column] && (\n          <TableHeadingItem align={_.get(COLUMNS[column], 'align')} key={column}>\n            {props.t(`columns.${column}`)}\n            {/*\n              TODO: Uncomment when backend sorting has been fixed\n              {COLUMNS[column].sortable && (\n                <SortButton\n                  order={props.sortingField === column ? props.sortingOrder : null}\n                  onClick={props.handleSetSorting(column)}\n                  margin={'0 0 0 2px'}\n                />\n              )}\n            */}\n          </TableHeadingItem>\n        ))}\n      </HeadingRow>\n\n      {_.map(props.deviceItems, device => (\n        <TableRow\n          onClick={() => props.selectMode && props.setDeviceSelected({\n            deviceId: device._id,\n            selected: !_.includes(props.selectedDevices, device._id)\n          })}\n          selectMode={props.selectMode}\n          isSelected={_.includes(props.selectedDevices, device._id)}\n          key={device._id}\n        >\n          {props.selectMode && (\n            <TableItem>\n              <StyledCheckbox\n                type={'checkbox'}\n                checked={props.selectedDevices && _.includes(props.selectedDevices, device._id)}\n                readOnly\n              />\n            </TableItem>\n          )}\n\n          {_.map(props.columns, column => COLUMNS[column] && (\n            <TableItem align={_.get(COLUMNS[column], 'align')} key={column}>\n              {\n                tableItems[capitalizeFirstLetter(column)]\n                  ? tableItems[capitalizeFirstLetter(column)]({...props, device})\n                  : 'DevErr'\n              }\n            </TableItem>\n          ))}\n\n        </TableRow>\n      ))}\n\n    </TableContainer>\n    <TableOptions {...props} />\n  </>\n);\n\nconst TableOptions = props => (\n  <TableFooter>\n    <TableFooterLeftSection>\n      <PageInfo>{props.pageInfo}</PageInfo>\n      <SetPageSizeContainer>{_.capitalize(props.t('titles.itemsPerPage'))}:</SetPageSizeContainer>\n      <PageSizeSelect\n        value={props.pageSize}\n        onChange={props.handleSetPageSize}\n      >\n        {_.map(PAGE_SIZES, pageSize => (\n          <option value={pageSize.value} key={pageSize.label}>\n            {pageSize.label}\n          </option>\n        ))}\n      </PageSizeSelect>\n    </TableFooterLeftSection>\n    <TableFooterRightSection>\n      <Pagination\n        t={props.t}\n        pageSize={Number(props.pageSize)}\n        page={props.currentPage}\n        totalItemsCount={Number(props.deviceTotalCount)}\n        onChange={props.setCurrentPage}\n      />\n    </TableFooterRightSection>\n  </TableFooter>\n);\n\nexport default TableWrapper;\n","import _ from 'lodash';\nimport queryString from 'query-string';\nimport {millisecondsToHours, millisecondsToMinutes} from 'date-fns';\nimport {\n  KNOWN_VALUES,\n  COLUMNS,\n  COLUMN_PRESETS,\n} from './constants';\n\nconst getDeviceValues = (device, t) => {\n  if (!device.value) {\n    return [];\n  }\n\n  const reducer = (acc, curr, key) => {\n    if (_.isObject(curr)) {\n      acc = {\n        ...acc,\n        ..._.mapKeys(curr, (val, index) => `${key}_${index}`),\n      };\n    } else {\n      acc = {...acc, [key]: curr};\n    }\n    return acc;\n  };\n  const values = _.reduce(device.value, reducer, {});\n  const displayableValues = _.map(values, (curr, key) => {\n    const knownValue = KNOWN_VALUES[key];\n    if (knownValue) {\n      return `${t(`values.${knownValue.name}`)}: ${curr} ${knownValue.unit || ''}`;\n    }\n  });\n  return _.compact(displayableValues);\n};\n\nconst createOrderByParam = (field, order) => {\n  const newField = _.eq(field, 'reportedAt')\n    ? 'dateModified'\n    : field;\n\n  if (_.eq(order, 'asc')) {\n    return field;\n  }\n\n  if (_.eq(order, 'desc')) {\n    return `!${field}`;\n  }\n\n  return newField;\n};\n\nconst createMatchPattern = formInputs => {\n  const name = _.get(formInputs, 'filterName.value');\n  const deviceModelName = _.get(formInputs, 'filterDeviceModelName.value');\n\n  if (name && deviceModelName) {\n    return {name, deviceModelName};\n  }\n\n  if (name) {\n    return {name};\n  }\n\n  if (deviceModelName) {\n    return {deviceModelName};\n  }\n};\n\nconst createAttributeFilter = formInputs => {\n  const typeFilter = _.get(formInputs, 'filterType.value');\n  if (typeFilter === 'connector') {\n    return 'downlinkQueue';\n  }\n  if (typeFilter === 'device') {\n    return '!downlinkQueue';\n  }\n  return null;\n};\n\nconst capitalizeFirstLetter = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst addColumnOptions = (columns, t) => (\n  _.reduce(COLUMNS, (acc, column) => {\n    if (!_.includes(columns, column.name)) {\n      acc.push({value: column.name, label: t(`columns.${column.name}`)});\n    }\n    return acc;\n  }, [])\n);\n\nconst presetOptions = _.map(COLUMN_PRESETS, (preset, key) => (\n  {value: key, label: preset.name}\n));\n\nconst moveItemUpInArray = (array, index) => {\n  const newArray = [...array];\n  const temp = newArray[index - 1];\n  newArray[index - 1] = newArray[index];\n  newArray[index] = temp;\n  return newArray;\n};\n\nconst moveItemDownInArray = (array, index) => {\n  const newArray = [...array];\n  const temp = newArray[index + 1];\n  newArray[index + 1] = newArray[index];\n  newArray[index] = temp;\n  return newArray;\n};\n\nconst createReadableExpectedReportInterval = milliseconds => {\n  if (millisecondsToHours(milliseconds)) {\n    return `${millisecondsToHours(milliseconds)} hours`;\n  }\n\n  return `${millisecondsToMinutes(milliseconds)} minutes`;\n};\n\nconst listActions = {\n  configure: props => {\n    props.setPage('configuration');\n  },\n  calculate: props => {\n    props.setPage('calculations');\n  },\n  setConnector: props => {\n    props.setPage('tools');\n  },\n  edit: props => {\n    props.setPage('editing');\n  },\n  setReportInterval: props => {\n    props.setPage('reportInterval');\n  },\n  charts: props => {\n    const params = queryString.stringify({devices: props.selectedDevices}, {arrayFormat: 'comma'});\n    const url = `/charts?${params}`;\n    props.router.push(url);\n  },\n  remove: props => {\n    props.setPage('deletion');\n  },\n};\n\nexport {\n  getDeviceValues,\n  createOrderByParam,\n  createMatchPattern,\n  createAttributeFilter,\n  capitalizeFirstLetter,\n  addColumnOptions,\n  presetOptions,\n  moveItemUpInArray,\n  moveItemDownInArray,\n  createReadableExpectedReportInterval,\n  listActions,\n};\n","import {ic_info_outline as generalInfoIcon} from 'react-icons-kit/md/ic_info_outline';\nimport {ic_subject as dataIcon} from 'react-icons-kit/md/ic_subject';\nimport {ic_memory as specificationsIcon} from 'react-icons-kit/md/ic_memory';\nimport {ic_gps_fixed as positionIcon} from 'react-icons-kit/md/ic_gps_fixed';\nimport {calculator as calculationsIcon} from 'react-icons-kit/fa/calculator';\nimport {angleDoubleRight as channelsIcon} from 'react-icons-kit/fa/angleDoubleRight';\nimport {ic_person as accessRightsIcon} from 'react-icons-kit/md/ic_person';\nimport {ic_edit as contextualParametersIcon} from 'react-icons-kit/md/ic_edit';\nimport {ic_show_chart as chartIcon} from 'react-icons-kit/md/ic_show_chart';\nimport {bullhorn as reportIntervalIcon} from 'react-icons-kit/iconic/bullhorn';\nimport {ic_cloud_upload as controlIcon} from 'react-icons-kit/md/ic_cloud_upload';\nimport {ic_settings as cogIcon} from 'react-icons-kit/md/ic_settings';\nimport {ic_business as realEstateCoreIcon} from 'react-icons-kit/md/ic_business';\n\nimport {Scope} from '../../types';\nimport {CALCULATIONS_TYPES} from '../../constants';\n\nconst CHIRP_STACK_COMMANDS = {\n  loraAppServerQueueDownlink: 'loraAppServerQueueDownlink',\n  loraAppServerGetDeviceQueue: 'loraAppServerGetDeviceQueue',\n  loraAppServerFlushQueue: 'loraAppServerFlushQueue',\n};\nconst CHIRP_STACK = 'ChirpStack';\nconst ONE_DAY = 60 * 60 * 24 * 1000;\n\nconst TAB_ITEMS = {\n  generalInfo: {\n    name: 'generalInfo',\n    icon: {\n      file: generalInfoIcon as object,\n      size: 18,\n      topPosition: -1,\n    }\n  },\n  position: {\n    name: 'position',\n    icon: {\n      file: positionIcon as object,\n      size: 18,\n      topPosition: -1\n    }\n  },\n  data: {\n    name: 'data',\n    icon: {\n      file: dataIcon as object,\n      size: 16,\n      topPosition: -1,\n    }\n  },\n  specifications: {\n    name: 'specifications',\n    icon: {\n      file: specificationsIcon as object,\n      size: 19,\n      topPosition: 0,\n    }\n  },\n  calculations: {\n    name: 'calculations',\n    icon: {\n      file: calculationsIcon as object,\n      size: 13,\n      topPosition: -2,\n    }\n  },\n  // Removed until translators tab is done\n  // translators: {\n  //   name: 'translators',\n  //   icon: {\n  //     file: transIcon as object,\n  //     size: 17,\n  //     topPosition: -1,\n  //   }\n  // },\n  channels: {\n    name: 'channels',\n    icon: {\n      file: channelsIcon as object,\n      size: 20,\n      topPosition: -2,\n    }\n  },\n  accessrights: {\n    name: 'accessrights',\n    icon: {\n      file: accessRightsIcon as object,\n      size: 17,\n      topPosition: -1,\n    }\n  },\n  contextualParameters: {\n    name: 'contextualParameters',\n    icon: {\n      file: contextualParametersIcon as object,\n      size: 15,\n      topPosition: -1,\n    }\n  },\n  charts: {\n    name: 'charts',\n    icon: {\n      file: chartIcon as object,\n      size: 18,\n      topPosition: -1,\n    }\n  },\n  reportInterval: {\n    name: 'reportInterval',\n    icon: {\n      file: reportIntervalIcon as object,\n      size: 14,\n      topPosition: -1,\n    }\n  },\n  tools: {\n    name: 'tools',\n    icon: {\n      file: cogIcon as object,\n      size: 15,\n      topPosition: -1,\n    }\n  },\n};\n\nconst LORA_TAB_ITEMS = {\n  loraControl: {\n    name: 'loraControl',\n    icon: {\n      file: controlIcon as object,\n      size: 14,\n      topPosition: -1,\n    }\n  },\n};\n\nconst BOX2_TAB_ITEMS = {\n  downlink: {\n    name: 'downlink',\n    icon: {\n      file: controlIcon as object,\n      size: 14,\n    }\n  },\n};\n\nconst SPECIFIC_TAB_KEYS = {\n  ChirpStack: 'ChirpStack',\n  box2: 'box2-node',\n};\n\nconst REAL_ESTATE_CORE_TAB_ITEM = {\n  name: 'realEstateCore',\n  icon: {\n    file: realEstateCoreIcon as object,\n    size: 16,\n    topPosition: -2,\n  }\n};\n\nconst SPECIFIC_TAB_ITEMS = {\n  [SPECIFIC_TAB_KEYS.ChirpStack]: LORA_TAB_ITEMS,\n  [SPECIFIC_TAB_KEYS.box2]: BOX2_TAB_ITEMS,\n};\n\nconst RIGHT_TYPES: Record<Scope, Scope> = {\n  admin: 'admin',\n  write: 'write',\n  read: 'read',\n  peek: 'peek',\n};\n\nconst TIME_PERIOD_TYPES = {\n  hour: 'hour',\n  day: 'day',\n  week: 'week',\n  month: 'month',\n  custom: 'custom',\n};\n\nconst TIME_PERIODS = {\n  [TIME_PERIOD_TYPES.hour]: {\n    name: 'Last 60 minutes',\n    timeFormat: 'HH:mm',\n    time: 1000 * 60 * 60, // 1 hour\n    ticks: {\n      interval: 60 * 10, // 10 minutes\n      count: 6,\n      lastTickStartOf: 'minute',\n    },\n    resolutions: {\n      low: 60, // 1 minute => 60 points\n      high: 5, // = 5 seconds => 720 points\n    },\n  },\n  [TIME_PERIOD_TYPES.day]: {\n    name: 'Last 24 hours',\n    timeFormat: 'HH:mm',\n    time: ONE_DAY, // 1 day\n    ticks: {\n      interval: 60 * 60 * 2, // 2 hours\n      count: 12,\n      lastTickStartOf: 'hour',\n    },\n    resolutions: {\n      low: 60 * 15, // 15 minutes => 96 points\n      high: 60 * 2, // 2 minutes => 720 points\n    },\n  },\n  [TIME_PERIOD_TYPES.week]: {\n    name: 'Last 7 days',\n    timeFormat: 'dd/MM',\n    time: 1000 * 60 * 60 * 24 * 7, // 7 days\n    ticks: {\n      interval: 60 * 60 * 24, // 1 day\n      count: 7,\n      lastTickStartOf: 'day',\n    },\n    resolutions: {\n      low: 60 * 60 * 2, // 2 hours => 84 points\n      high: 60 * 10, // 10 minutes => 1008 points\n    },\n  },\n  [TIME_PERIOD_TYPES.month]: {\n    name: 'Last 30 days',\n    timeFormat: 'dd/MM',\n    time: 1000 * 60 * 60 * 24 * 30, // 30 days\n    ticks: {\n      interval: 60 * 60 * 24 * 5, // 5 days\n      count: 6,\n      lastTickStartOf: 'day',\n    },\n    resolutions: {\n      low: 60 * 60 * 8, // 8 hours => 90 points\n      high: 60 * 60, // 1 hour => 720 points\n    },\n  },\n  [TIME_PERIOD_TYPES.custom]: {\n    name: 'Custom time period',\n    timeFormat: 'yyyy-MM-dd HH:mm',\n    resolutions: {\n      low: 100,\n      high: 1000,\n    },\n  }\n};\n\nconst transformations = {\n  door: {\n    closed: 0,\n    open: 1,\n    locked: 2,\n  },\n  presence: {\n    no: 0,\n    yes: 1,\n  },\n  tamper: {\n    no: 0,\n    yes: 1,\n  },\n};\n\nconst CALCULATION_LABELS = {\n  [CALCULATIONS_TYPES.averageAggregatedValueOverTime]: 'Aggregated average value over time (average of sum)',\n  [CALCULATIONS_TYPES.aggregatedValueOverTime]: 'Aggregated value over time',\n  [CALCULATIONS_TYPES.sumLastValues]: 'Accumulation of last reported values',\n  [CALCULATIONS_TYPES.averageLastValues]: 'Average of last reported values',\n  [CALCULATIONS_TYPES.maxLastValues]: 'Maximum of last reported values',\n  [CALCULATIONS_TYPES.minLastValues]: 'Minimum of last reported values',\n  [CALCULATIONS_TYPES.sumEachNode]: 'Sum of each node',\n  [CALCULATIONS_TYPES.monthlySumPerEachNode]: 'Monthly sum per each node',\n  [CALCULATIONS_TYPES.totalMonthlySum]: 'Total monthly sum',\n  [CALCULATIONS_TYPES.monthlyDiffFromTotalEachNode]: 'Monthly difference from total on each node',\n  [CALCULATIONS_TYPES.monthlyDiffFromTotal]: 'Monthly difference from total grouped',\n};\n\nconst SPEC_SECTIONS = {\n  lora: 'LoRa',\n  nibe: 'Nibe',\n  netmore: 'Netmore',\n  chirpstack: 'ChirpStack',\n};\n\nconst DATA_FILTER_OPTIONS = {\n  values: {\n    label: 'Values',\n    value: 'values',\n    noValuesText: 'The device has no values',\n  },\n  all: {\n    label: 'All',\n    value: 'all',\n  },\n  lora: {\n    label: 'LoRa',\n    value: 'lora',\n    noValuesText: 'The device has no LoRa values',\n  },\n  box2: {\n    label: 'BoX2',\n    value: 'box2',\n    noValuesText: 'The device has no BoX2 values',\n  },\n};\n\nconst DATA_DISPLAY_OPTIONS = [\n  {\n    label: 'Pretty',\n    value: 'pretty',\n  },\n  {\n    label: 'Raw',\n    value: 'raw',\n  },\n];\n\nconst SIDEBAR_SIBLING_WIDTH = 1200;\n\nconst RULES_ACTIONS_OPTIONS = [\n  {label: 'Turn On', value: 'turnOn'},\n  {label: 'Turn Off', value: 'turnOff'},\n];\n\nconst MAX_COORDINATE_LENGTH = 17;\n\nexport {\n  TAB_ITEMS,\n  LORA_TAB_ITEMS,\n  BOX2_TAB_ITEMS,\n  SPECIFIC_TAB_ITEMS,\n  CHIRP_STACK_COMMANDS,\n  CHIRP_STACK,\n  RIGHT_TYPES,\n  TIME_PERIOD_TYPES,\n  TIME_PERIODS,\n  MAX_COORDINATE_LENGTH,\n  transformations,\n  ONE_DAY,\n  DATA_DISPLAY_OPTIONS,\n  DATA_FILTER_OPTIONS,\n  CALCULATION_LABELS,\n  SIDEBAR_SIBLING_WIDTH,\n  SPEC_SECTIONS,\n  RULES_ACTIONS_OPTIONS,\n  SPECIFIC_TAB_KEYS,\n  REAL_ESTATE_CORE_TAB_ITEM,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {QueryClient, UseMutationResult} from 'react-query';\nimport Icon from 'react-icons-kit';\nimport {NextRouter} from 'next/router';\nimport {trash} from 'react-icons-kit/fa/trash';\nimport {format, parseISO} from 'date-fns';\n\nimport {\n  FlexColMaxWidthWrapper,\n  FlexColWrapper,\n  FlexMaxWidthWrapper,\n  FlexWrapper,\n} from '../../../../global/styled';\nimport Select from '../../../../components/select';\nimport {\n  CalculationRemovalContainer,\n  CalculationWrapper,\n  CalculationDataTable,\n  CalculationDataHeader,\n  CalculationDataItem,\n  CalculationDataSubject,\n  CalculationDataItemLink,\n  NoDataBox,\n} from '../../styled';\nimport {CALCULATIONS_TYPES, CALCULATION_NAMES} from '../../../../constants';\nimport {\n  IdKeyedCalculations,\n  CalculationValue,\n  Device,\n  Calculation,\n  Calculations,\n  IdKeyedDevices,\n} from '../../../../types';\nimport {\n  calculationsApi,\n  devicesApi,\n} from '../../../../api';\nimport {\n  selectAvailableCalculations,\n  selectCalculatedValues,\n} from '../../selectors';\nimport {\n  createSeekCalculationDevices\n} from '../../utils';\nimport {useLocalState} from '../../../../hooks';\nimport {calculationFormState} from '../../state';\n\ninterface FormInputs {\n  selectedCalculation: {\n    value: string;\n  };\n}\n\ninterface Value {\n  id: string;\n  value: number;\n  from: string;\n  to: string;\n  date: string;\n}\n\ninterface CalculatedValues {\n  [key: string]: Value;\n}\n\ntype Updates = {updates: {[x: string]: number}, deviceId: string};\n\ninterface CalculateProps {\n  queryClient: QueryClient;\n  router: NextRouter;\n  device: Device;\n  formInputs: FormInputs;\n  calculations: IdKeyedCalculations;\n  calculationsItems: Calculations;\n  calculatedValues: object;\n  selectableCalculations: [];\n  isPopulated: boolean;\n  updateDeviceMutation: UseMutationResult<string, unknown, Updates, unknown>\n  perform(): void;\n  t(key: string): string;\n  setInputValue(): void;\n  showInputValidation(): void;\n  hideInputValidation(): void;\n  hideAllInputValidations(): void;\n  showAllInputValidations(): void;\n  handleCalculationRemoval(): void;\n  removeCalculation(): void;\n  deleteCalculation(): void;\n  populateInputValues(): void;\n  resetForm(): void;\n  onChange(): void;\n}\n\nconst Calculate = (props: CalculateProps) => {\n  const [performedCalculation, setPerformedCalculation] = React.useState(0);\n  const calculationForm = useLocalState(calculationFormState);\n  const selectedCalculation = calculationForm.formInputs.selectedCalculation.value as string;\n  const currentCalculation = _.get(props.calculations, selectedCalculation);\n\n  const {\n    mutateAsync: mutatePerformCalculations,\n  } = calculationsApi.usePerformCalculations(props.queryClient);\n\n  const {\n    mutate: mutateRemoveCalculation,\n  } = calculationsApi.useRemoveCalculation(props.queryClient);\n\n  React.useEffect(() => {\n    if (currentCalculation) {\n      const updates = {\n        [currentCalculation.destination.path]: performedCalculation\n      };\n      props.updateDeviceMutation.mutate({updates, deviceId: props.device._id});\n    }\n  }, [performedCalculation, currentCalculation]);\n\n  React.useEffect(() => {\n    _.each(props.calculationsItems, async ({_id, calculation}: Calculation) => {\n      const mutation = await mutatePerformCalculations({\n        calculationId: _id,\n        calcType: calculation?.calcType,\n        interval: calculation?.interval,\n      });\n      setPerformedCalculation(mutation.result);\n    });\n  }, []);\n\n  const calculatedValues = selectCalculatedValues({\n    currentDevice: props.device,\n    calculations: props.calculations,\n    formInputs: calculationForm.formInputs,\n  }) as Record<string, CalculatedValues> | null;\n\n  const deviceItems = createSeekCalculationDevices({\n    calculations: props.calculations,\n    selectedCalculation: calculationForm.formInputs.selectedCalculation.value,\n    calculatedValues,\n  }) as string[];\n\n  const devices = devicesApi.useSeekDevicesQuery({params: {deviceItems}});\n\n  // Selectors aren't typed yet, needs to be ASAP\n  // eslint-disable-next-line\n  const selectableCalculations = selectAvailableCalculations({\n    device: props.device,\n    calculations: props.calculations,\n  }) as {value: string, label: string}[];\n\n  return (\n    <FlexColWrapper>\n      <FlexWrapper>\n        {_.isEmpty(selectableCalculations) && (\n          <NoDataBox>{props.t('phrases.noCalculationsAvailable')}</NoDataBox>\n        )}\n        {!_.isEmpty(selectableCalculations) && (\n          <div>\n            <Select\n              width={'220px'}\n              name={'selectedCalculation'}\n              options={selectableCalculations}\n              value={selectedCalculation}\n              onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n                calculationForm.setInputValue('selectedCalculation', evt.target.value)\n              )}\n            />\n          </div>\n        )}\n\n        {\n          !_.isEmpty(selectableCalculations) && (\n            <CalculationRemovalContainer\n              onClick={() => {\n                mutateRemoveCalculation(selectedCalculation);\n                calculationForm.setInputValue('selectedCalculation', '');\n              }}\n            >\n              <Icon icon={trash as object} size={26} />\n            </CalculationRemovalContainer>\n          )\n        }\n      </FlexWrapper>\n\n      <br />\n      {\n        _.get(calculationForm.formInputs, 'selectedCalculation.value') && (\n          <CalculationWrapper>\n            <FlexColMaxWidthWrapper\n              // @ts-ignore - don't understand why this triggers error\n              margin={'0 0 5px'}\n            >\n              <div>\n                <b>{_.capitalize(props.t('titles.description'))}:</b> {CALCULATION_NAMES[currentCalculation.name as keyof typeof CALCULATION_NAMES]}\n              </div>\n              <div>\n                <b>{_.capitalize(props.t('common.devices'))}:</b> {_.size(currentCalculation.sources)}\n              </div>\n              <div><b>{_.capitalize(props.t('titles.data'))}:</b></div>\n            </FlexColMaxWidthWrapper>\n            <FlexColMaxWidthWrapper>\n              {_.isEmpty(calculatedValues) && (\n                <NoDataBox>{props.t('phrases.noCalculatedValuesAvailable')}</NoDataBox>\n              )}\n\n              {\n                !_.isEmpty(calculatedValues) && (\n                  <CalculationData\n                    devices={devices.data}\n                    t={props.t}\n                    router={props.router}\n                    calculatedValues={calculatedValues}\n                    currentCalculation={currentCalculation}\n                  />\n                )\n              }\n            </FlexColMaxWidthWrapper>\n          </CalculationWrapper>\n        )\n      }\n    </FlexColWrapper>\n  );\n};\n\ninterface CalculationDataProps {\n  devices?: IdKeyedDevices;\n  router: NextRouter;\n  currentCalculation: Calculation;\n  calculatedValues: Record<string, CalculatedValues> | null;\n  t(key: string): string;\n}\n\nconst CalculationData = (props: CalculationDataProps) => {\n  if (_.some([\n    props.currentCalculation.type === CALCULATIONS_TYPES.minLastValues,\n    props.currentCalculation.type === CALCULATIONS_TYPES.maxLastValues,\n    props.currentCalculation.type === CALCULATIONS_TYPES.sumLastValues,\n    props.currentCalculation.type === CALCULATIONS_TYPES.averageLastValues,\n    props.currentCalculation.type === CALCULATIONS_TYPES.aggregatedValueOverTime,\n    props.currentCalculation.type === CALCULATIONS_TYPES.totalMonthlySum,\n    props.currentCalculation.type === CALCULATIONS_TYPES.averageAggregatedValueOverTime,\n  ])) {\n\n    return (\n      // @ts-ignore - don't understand why this triggers error\n      <FlexMaxWidthWrapper padding={'10px 0 0'}>\n        <b>{_.map(_.keys(_.omit(props.calculatedValues, 'id')), key => <div key={key}>{key}:&nbsp;</div>)}</b>\n        {_.map(_.omit(props.calculatedValues, 'id'), (val: number) => {\n          if (_.isNumber(val)) {\n            return (\n              <div key={val}>\n                {val.toFixed(2)}\n              </div>\n            );\n          }\n\n          return (\n            <div key={val}>\n              No value available\n            </div>\n          );\n        })}\n      </FlexMaxWidthWrapper>\n    );\n  }\n\n  if (_.some([\n    props.currentCalculation.type === CALCULATIONS_TYPES.sumEachNode,\n    props.currentCalculation.type === CALCULATIONS_TYPES.averageEachNode,\n  ])) {\n    return (\n      // @ts-ignore - don't understand why this triggers error\n      <FlexColMaxWidthWrapper margin={'30px 0 0'}>\n        <CalculationDataSubject>\n          {_.map(_.keys(props.calculatedValues), key => <div key={key}>{key}</div>)}\n        </CalculationDataSubject>\n        {\n          _.map(_.omit(props.calculatedValues, 'id'), (val, i) => (\n            <CalculationDataTable key={i}>\n              <CalculationDataHeader>Device</CalculationDataHeader>\n              <CalculationDataHeader>Value</CalculationDataHeader>\n              <CalculationDataHeader>From</CalculationDataHeader>\n              <CalculationDataHeader>To</CalculationDataHeader>\n              {\n                _.map(_.omit(val, 'id'), ({value, from, to}: Value, id) => {\n                  if (!value) {\n                    return (\n                      <React.Fragment key={id}>\n                        <CalculationDataItem>{id}</CalculationDataItem>\n                        <CalculationDataItem>No value available</CalculationDataItem>\n                        <CalculationDataItem>-</CalculationDataItem>\n                        <CalculationDataItem>-</CalculationDataItem>\n                      </React.Fragment>\n                    );\n                  }\n                  return (\n                    <React.Fragment key={id}>\n                      <CalculationDataItemLink\n                        onClick={() => void props.router.push(`/devices/${id}`)}\n                      >\n                        {_.truncate(_.get(_.get(props, `devices.${id}`), 'name', id) as string, {length: 16})}\n                      </CalculationDataItemLink>\n                      <CalculationDataItem>{value.toFixed(2)}</CalculationDataItem>\n                      <CalculationDataItem>{format(parseISO(from), 'yyyy-MM-dd')}</CalculationDataItem>\n                      <CalculationDataItem>{format(parseISO(to), 'yyyy-MM-dd')}</CalculationDataItem>\n                    </React.Fragment>\n                  );\n                })\n              }\n            </CalculationDataTable>\n          ))\n        }\n      </FlexColMaxWidthWrapper>\n    );\n  }\n\n  if (_.some([\n    props.currentCalculation.type === CALCULATIONS_TYPES.monthlySumPerEachNode,\n    props.currentCalculation.type === CALCULATIONS_TYPES.monthlyDiffFromTotalEachNode,\n  ])) {\n    return (\n      // @ts-ignore - don't understand why this triggers error\n      <FlexColMaxWidthWrapper margin={'30px 0 0'}>\n        <CalculationDataSubject>\n          {_.map(_.keys(props.calculatedValues), key => <div key={key}>{key}</div>)}\n        </CalculationDataSubject>\n        {_.map(_.omit(props.calculatedValues, 'id'), (val, key) => (\n          <CalculationDataTable key={key}>\n            <CalculationDataHeader>Device</CalculationDataHeader>\n            <CalculationDataHeader>Value</CalculationDataHeader>\n            <CalculationDataHeader>From</CalculationDataHeader>\n            <CalculationDataHeader>To</CalculationDataHeader>\n            {_.map(val, (curr, id: string) => {\n              if (_.isArray(curr)) {\n                return _.map(curr, ({value, from, to}: Value, key) => (\n                  <React.Fragment key={key}>\n                    <CalculationDataItemLink\n                      onClick={() => void props.router.push(`/devices/${id}`)}\n                    >\n                      {_.truncate(_.get(_.get(props, `devices.${id}`), 'name', id) as string, {length: 16})}\n                    </CalculationDataItemLink>\n                    <CalculationDataItem>{value.toFixed(2)}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(from), 'yyyy-MM-dd')}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(to), 'yyyy-MM-dd')}</CalculationDataItem>\n                  </React.Fragment>\n                ));\n              }\n            })}\n          </CalculationDataTable>\n        ))}\n      </FlexColMaxWidthWrapper>\n    );\n  }\n\n  if (props.currentCalculation.type === CALCULATIONS_TYPES.monthlyDiffFromTotal) {\n    const calculatedValues = _.omit(props.calculatedValues, 'id');\n    const calculatedKeys = _.keys(calculatedValues);\n    return (\n      // @ts-ignore - don't understand why this triggers error\n      <FlexColMaxWidthWrapper margin={'30px 0 0'}>\n        <CalculationDataSubject>\n          {_.map(calculatedKeys, key => <div key={key}>{key}</div>)}\n        </CalculationDataSubject>\n        {_.map(_.omit(props.calculatedValues, 'id'), (val, key: string) => (\n          // @ts-ignore - don't understand why this triggers error\n          <CalculationDataTable key={key} columnSize={5}>\n            <CalculationDataHeader>Device</CalculationDataHeader>\n            <CalculationDataHeader>Value</CalculationDataHeader>\n            <CalculationDataHeader>Date</CalculationDataHeader>\n            <CalculationDataHeader>From</CalculationDataHeader>\n            <CalculationDataHeader>To</CalculationDataHeader>\n            {_.map(_.omit(val, 'id'), (curr, deviceId) => {\n              if (_.isArray(curr)) {\n                return _.map(curr, (v: CalculationValue) => (\n                  <React.Fragment key={v.id}>\n                    <CalculationDataItemLink\n                      onClick={() => void props.router.push(`/devices/${deviceId}`)}\n                    >\n                      {_.truncate(_.get(_.get(props, `devices.${key}`), 'name', key) as string, {length: 16})}\n                    </CalculationDataItemLink>\n                    <CalculationDataItem>{v.value.toFixed(2)}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(v.date), 'yyyy-MM-dd hh:mm')}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(v.from), 'yyyy-MM-dd')}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(v.to), 'yyyy-MM-dd')}</CalculationDataItem>\n                  </React.Fragment>\n                ));\n              }\n              if (_.isPlainObject(curr)) {\n                const currentDevice = _.get(props, `devices.${key}`) as Device;\n                const deviceName = _.get(currentDevice, 'name', key);\n                return (\n                  <React.Fragment key={curr.id}>\n                    <CalculationDataItemLink\n                      onClick={() => void props.router.push(`/devices/${deviceId}`)}\n                    >\n                      {_.truncate(deviceName, {length: 16})}\n                    </CalculationDataItemLink>\n                    <CalculationDataItem>{curr.value.toFixed(2)}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(curr.date), 'yyyy-MM-dd hh:mm')}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(curr.from), 'yyyy-MM-dd')}</CalculationDataItem>\n                    <CalculationDataItem>{format(parseISO(curr.to), 'yyyy-MM-dd')}</CalculationDataItem>\n                  </React.Fragment>\n                );\n              }\n            })}\n          </CalculationDataTable>\n        ))}\n      </FlexColMaxWidthWrapper>\n    );\n  }\n\n  return <NoDataBox>{props.t('phrases.noCalculatedValuesAvailable')}</NoDataBox>;\n};\n\nexport default Calculate;\n","import Calculations from './calculations';\n\nexport {\n  Calculations,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {useQueryClient} from 'react-query';\nimport {confirmAlert} from 'react-confirm-alert';\nimport {compose} from 'lodash/fp';\nimport getDeviceStatus from '../../utils/get-device-status';\nimport {\n  selectNumItems,\n  selectCalculations,\n} from './selectors';\nimport {modalState} from '../../components/modal';\nimport {\n  AccessRights,\n  Specifications,\n  LoRaControl,\n  Channels,\n  Box2Downlink,\n  GeneralInfo,\n  ContextualParameters,\n  Data,\n  ReportInterval,\n  Charts,\n  Tools,\n  PositionSelector\n} from './sub-components';\nimport RecDeviceEditor from '../rec-device-editor';\nimport {Calculations} from './containers';\nimport {\n  TAB_ITEMS,\n  SIDEBAR_SIBLING_WIDTH,\n  LORA_TAB_ITEMS,\n  BOX2_TAB_ITEMS,\n  REAL_ESTATE_CORE_TAB_ITEM,\n} from './constants';\nimport withLanguage from '../../hocs/with-language';\nimport DetailsSidebar from './sub-components/sidebar';\nimport HeadingBar from './sub-components/heading-bar';\nimport ContainerBox from '../../components/container-box';\nimport Spinner from '../../components/spinner';\nimport {\n  SidebarParent,\n  SidebarSibling,\n  sidebarState,\n} from '../../components/sidebar-components';\nimport {\n  MainContentWrapper,\n  MainContentContainer,\n} from '../../yggio-managers/device-manager/styled';\nimport {LoadingView} from './styled';\nimport {COLORS} from '../../constants';\nimport {\n  devicesApi,\n  channelsApi,\n  calculationsApi,\n} from '../../api';\nimport {useLocalState} from '../../hooks';\n\nconst BasicDeviceDetailPane = props => {\n\n  //\n  //\n  // HOOKS\n  //\n  //\n\n  const queryClient = useQueryClient();\n\n  const deviceQuery = devicesApi.useDeviceQuery({deviceId: props.deviceId});\n\n  const recConnectorDevicesQuery = devicesApi.useConnectorDevicesQuery('RealEstateCore');\n\n  const channels = channelsApi.useChannelsQuery(props.deviceId);\n  const calculations = calculationsApi.useCalculationsQuery();\n  const calculationsItems = selectCalculations({\n    calculations: calculations.data,\n    currentDevice: deviceQuery,\n  });\n  const updateDeviceMutation = devicesApi.useUpdateDevice(queryClient);\n  const {mutate: mutateRemoveDevice} = devicesApi.useRemoveDevice(queryClient);\n\n  const sidebarForm = useLocalState(sidebarState);\n  const modalForm = useLocalState(modalState);\n\n  //\n  //\n  // SELECTORS\n  //\n  //\n\n  const numItems = selectNumItems({\n    calculations: calculationsItems,\n    channels: channels.data,\n    contextualParameters: deviceQuery.data?.contextMap,\n  });\n  const status = getDeviceStatus(\n    deviceQuery?.data,\n    calculations?.data,\n    props.t,\n  );\n\n  //\n  //\n  // EVENT HANDLERS\n  //\n  //\n\n  const removeDevice = () => {\n    const buttons = [\n      {\n        label: _.capitalize(props.t('common.yes')),\n        onClick: () => {\n          mutateRemoveDevice({deviceId: props.deviceId});\n          props.router.push('/devices');\n        }\n      },\n      {\n        label: _.capitalize(props.t('common.no')),\n        onClick: () => { },\n      }\n    ];\n    confirmAlert({\n      title: _.capitalize(props.t('labels.confirmation')),\n      message: props.t('phrases.deleteDeviceVerification'),\n      buttons,\n    });\n  };\n\n  //\n  //\n  // RENDERING\n  //\n  //\n\n  if (deviceQuery.isError) {\n    return <div>Failed to get device</div>;\n  }\n\n  if (deviceQuery.isLoading) {\n    return (\n      <LoadingView>\n        <Spinner color={COLORS.greenRacing} size={30} margin={'0 0 5px 0'} />\n        {props.t('phrases.fetchingDevice')}...\n      </LoadingView>\n    );\n  }\n\n  return (\n    <SidebarParent>\n      <DetailsSidebar\n        router={props.router}\n        deviceItem={deviceQuery.data}\n        deviceId={props.deviceId}\n        tabId={props.tabId}\n        isSidebarOpen={sidebarForm.isSidebarOpen}\n        closeSidebar={sidebarForm.closeSidebar}\n        openSidebar={sidebarForm.openSidebar}\n        status={status}\n        statusModal={modalForm}\n        numItems={numItems}\n        siblingWidth={SIDEBAR_SIBLING_WIDTH}\n        hasRecConnector={!_.isEmpty(recConnectorDevicesQuery.data)}\n        t={props.t}\n      />\n      <SidebarSibling isSidebarOpen={sidebarForm.isSidebarOpen}>\n        <MainContentWrapper>\n          <MainContentContainer maxWidth={SIDEBAR_SIBLING_WIDTH}>\n            <HeadingBar\n              closeSidebar={sidebarForm.closeSidebar}\n              openSidebar={sidebarForm.openSidebar}\n              isSidebarOpen={sidebarForm.isSidebarOpen}\n              tabId={props.tabId}\n              siblingWidth={SIDEBAR_SIBLING_WIDTH}\n              t={props.t}\n            />\n            <ContainerBox padding={'30px'}>\n              {{\n                [TAB_ITEMS.generalInfo.name]: (\n                  <GeneralInfo\n                    updateDeviceMutation={updateDeviceMutation}\n                    t={props.t}\n                    deviceQuery={deviceQuery}\n                    handleDeviceRemoval={removeDevice}\n                  />\n                ),\n                [TAB_ITEMS.specifications.name]: (\n                  <Specifications\n                    device={deviceQuery.data}\n                    t={props.t}\n                  />\n                ),\n                [TAB_ITEMS.position.name]: (\n                  <PositionSelector\n                    updateDevice={updateDeviceMutation}\n                    t={props.t}\n                    device={deviceQuery}\n                  />\n                ),\n                [TAB_ITEMS.channels.name]: (\n                  <Channels\n                    channels={channels?.data}\n                    deviceItem={deviceQuery.data}\n                    t={props.t}\n                    deviceId={props.deviceId}\n                  />\n                ),\n                [TAB_ITEMS.calculations.name]: (\n                  <Calculations\n                    device={deviceQuery.data}\n                    router={props.router}\n                    queryClient={queryClient}\n                    goToDeviceDetail={props.goToDeviceDetail}\n                    calculations={calculations?.data}\n                    calculationsItems={calculationsItems}\n                    handleCalculationRemoval={props.handleCalculationRemoval}\n                    updateDeviceMutation={updateDeviceMutation}\n                    deleteCalculation={props.deleteCalculation}\n                    t={props.t}\n                  />\n                ),\n                // Removed until translator tab is\n                // [TAB_ITEMS.translators.name]: (\n                //   <Translators\n                //     updateDeviceMutation={updateDeviceMutation}\n                //     t={props.t}\n                //     deviceItem={deviceQuery.data}\n                //   />\n                // ),\n                [TAB_ITEMS.accessrights.name]: (\n                  <AccessRights\n                    t={props.t}\n                    existingUsers={props.existingUsers}\n                    deviceId={props.deviceId}\n                    device={deviceQuery.data}\n                  />\n                ),\n                [LORA_TAB_ITEMS.loraControl.name]: (\n                  <LoRaControl\n                    deviceItem={deviceQuery.data}\n                    t={props.t}\n                  />\n                ),\n                [TAB_ITEMS.data.name]: (\n                  <Data\n                    deviceItem={deviceQuery.data}\n                    t={props.t}\n                  />\n                ),\n                [BOX2_TAB_ITEMS.downlink.name]: (\n                  <Box2Downlink\n                    updateDeviceMutation={updateDeviceMutation}\n                    deviceId={props.deviceId}\n                    t={props.t}\n                  />\n                ),\n                [TAB_ITEMS.contextualParameters.name]: (\n                  <ContextualParameters\n                    contextMap={props.contextMap}\n                    t={props.t}\n                    updateDeviceMutation={updateDeviceMutation}\n                    deviceId={props.deviceId}\n                    deviceItem={deviceQuery.data}\n                  />\n                ),\n                [TAB_ITEMS.charts.name]: (\n                  <Charts\n                    deviceId={props.deviceId}\n                    router={props.router}\n                  />\n                ),\n                [TAB_ITEMS.reportInterval.name]: (\n                  <ReportInterval\n                    deviceItem={deviceQuery.data}\n                  />\n                ),\n                [TAB_ITEMS.tools.name]: (\n                  <Tools\n                    deviceItem={deviceQuery.data}\n                  />\n                ),\n                [REAL_ESTATE_CORE_TAB_ITEM.name]: (\n                  <RecDeviceEditor\n                    deviceId={props.deviceId}\n                    connectors={recConnectorDevicesQuery.data}\n                  />\n                ),\n              }[props.tabId]}\n            </ContainerBox>\n          </MainContentContainer>\n        </MainContentWrapper>\n      </SidebarSibling>\n    </SidebarParent>\n  );\n};\n\nexport default compose(\n  withLanguage(),\n)(BasicDeviceDetailPane);\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\nimport {createRightsList} from './utils';\nimport {\n  DATA_FILTER_OPTIONS,\n  SPEC_SECTIONS,\n} from './constants';\nimport {generateUUID} from '../../utils';\nimport {RULES_ACTIONS, CALCULATION_NAMES} from '../../constants';\n\nconst selectAvailableCalculations = createSelector(\n  props => props.calculations,\n  props => props.device.data,\n  (calculations, currentDevice) => {\n    if (!currentDevice) {\n      return [];\n    }\n    const selectableCalculations = _.map(calculations, calculation => {\n      if (_.get(calculation, 'destination.mongoId') === currentDevice._id) {\n        return {\n          value: calculation._id,\n          label: CALCULATION_NAMES[calculation.name],\n        };\n      }\n    });\n\n    return _.compact(selectableCalculations);\n  }\n);\n\nconst selectSpecifications = createSelector(\n  props => props.device,\n  props => props.t,\n  (device, t) => {\n\n    if (!device) return;\n    const specs = {};\n\n    if (device.connector) {\n      _.set(specs, [_.capitalize(t('titles.general')), 'Connector'], device.connector.name);\n    }\n\n    if (device.devEui) {\n      _.set(specs, [SPEC_SECTIONS.lora, 'Device model name'], device.deviceModelName);\n      _.set(specs, [SPEC_SECTIONS.lora, 'Dev Eui'], device.devEui);\n      _.set(specs, [SPEC_SECTIONS.lora, 'App key'], device.appKey);\n      _.set(specs, [SPEC_SECTIONS.lora, 'App Eui'], device.appEUI);\n    }\n\n    if (device.gatewayEui) {\n      _.set(specs, [SPEC_SECTIONS.lora, 'Gateway Eui'], device.gatewayEui);\n    }\n\n    if (device.serialNumber) {\n      _.set(specs, [SPEC_SECTIONS.nibe, 'Serial'], device.serialNumber);\n    }\n\n    if (device.systemId) {\n      _.set(specs, [SPEC_SECTIONS.nibe, 'System ID'], device.systemId);\n    }\n\n    if (device.serviceProvider) {\n      _.set(specs, [SPEC_SECTIONS.netmore, 'Service Provider'], device.serviceProvider);\n      _.set(specs, [SPEC_SECTIONS.netmore, 'Username'], device.username);\n    }\n\n    if (device.nodeType === 'lora-app-server-connector') {\n      _.set(specs, [SPEC_SECTIONS.chirpstack, 'Url'], device.url);\n      _.set(specs, [SPEC_SECTIONS.chirpstack, 'Application ID'], device.applicationId);\n      _.set(specs, [SPEC_SECTIONS.chirpstack, 'Username'], device.username);\n      _.set(specs, [SPEC_SECTIONS.chirpstack, 'Organization ID'], device.organizationId);\n      _.set(specs, [SPEC_SECTIONS.chirpstack, 'Network Server ID'], device.networkServerID);\n      _.set(specs, [SPEC_SECTIONS.chirpstack, 'Device Profile IDs ABP'], device.deviceProfileIdsABP);\n      _.set(specs, [SPEC_SECTIONS.chirpstack, 'Device Profile IDs OTAA'], device.deviceProfileIdsOTAA);\n    }\n\n    return specs;\n  }\n);\n\nconst selectDataFilterOptions = createSelector(\n  props => props.device,\n  deviceItem => {\n    if (!deviceItem) return [];\n    const items = [DATA_FILTER_OPTIONS.values.value, DATA_FILTER_OPTIONS.all.value];\n    if (deviceItem.nodeType === 'lora-node') {\n      items.push(DATA_FILTER_OPTIONS.lora.value);\n    }\n    if (deviceItem.tag) {\n      items.push(DATA_FILTER_OPTIONS.box2.value);\n    }\n    return _.values(_.pick(DATA_FILTER_OPTIONS, items));\n  }\n);\n\nconst selectDeviceModelNamesOptions = createSelector(\n  props => props.deviceModelNames,\n  deviceModelNames => _.map(deviceModelNames, modelName => ({\n    value: modelName?.value,\n    label: modelName?.displayName,\n  }))\n);\n\n\nconst selectAccessRights = createSelector(\n  props => props.userId,\n  props => props.accessRights,\n  (userId, accessRights) => {\n    if (!accessRights) {\n      return [];\n    }\n    return _.find(accessRights, right => {\n      if (_.eq(right?.userId, userId)) {\n        return right;\n      }\n    });\n  }\n);\n\nconst selectAccessRightsUsers = createSelector(\n  props => props.userId,\n  props => props.accessRights,\n  props => props.users,\n  props => props.device,\n  (userId, accessRights, users, device) => {\n    if (!accessRights) {\n      return [];\n    }\n    const acl = _.map(accessRights, right => {\n      if (!_.eq(userId, right?.userId)) {\n        const user = _.find(users, user => user._id === right.userId);\n        if (!_.includes(device?.owner, user?.username) && user) {\n          return {\n            ...right,\n            name: user?.username || 'unknown',\n            scope: createRightsList(right?.scope),\n          };\n        }\n      }\n    });\n    return _.compact(acl);\n  }\n);\n\nconst selectAccessRightsUserIds = createSelector(\n  props => props.userId,\n  props => props.accessRights,\n  (userId, accessRights) => {\n    if (!accessRights) {\n      return [];\n    }\n    const acl = _.map(accessRights, right => {\n      if (!_.eq(userId, right?.userId)) {\n        return right?.userId;\n      }\n    });\n    return _.compact(acl);\n  }\n);\n\nconst selectCalculations = createSelector(\n  props => props.calculations,\n  props => props.currentDevice.data,\n  (calculations, currentDevice) => {\n    if (!currentDevice) {\n      return [];\n    }\n    return _.filter(calculations, calculation => {\n      if (_.get(calculation, 'destination.mongoId') === currentDevice._id) {\n        return calculation;\n      }\n    });\n  }\n);\n\nconst selectCalculatedValues = createSelector(\n  props => props.currentDevice.data,\n  props => props.calculations,\n  props => props.formInputs,\n  (currentDevice, calculations, formInputs) => {\n    const selectedCalculation = _.get(formInputs, 'selectedCalculation.value');\n    const currentCalculation = _.get(calculations, selectedCalculation);\n    const destinationPath = _.get(currentCalculation, 'destination.path');\n    // eslint-disable-next-line no-unused-vars\n    const [omitted, ...keys] = _.split(destinationPath, '.');\n    const calculationKey = _.join(keys);\n\n    const value = _.get(currentDevice, destinationPath);\n    if (calculationKey && value) {\n      const idKeyedValues = generateUUID({[calculationKey]: value}, {nested: true});\n      return idKeyedValues;\n    }\n\n    return null;\n  }\n);\n\nconst selectNumItems = createSelector(\n  props => props.calculations,\n  props => props.channels,\n  props => props.contextualParameters,\n  (calculations, channels, contextualParameters) => {\n    return {\n      calculations: _.size(calculations),\n      channels: _.size(channels),\n      contextualParameters: _.size(contextualParameters),\n    };\n  }\n);\n\nconst selectRules = createSelector(\n  props => _.get(props, 'rulesActions'),\n  props => props.device,\n  (rules, device) => {\n    if (device) {\n      const currentRules = _.reduce(rules, (acc, curr) => {\n        const splits = _.split(curr.name, '.');\n        const [ruleName, deviceId] = splits;\n        if (_.includes(_.keys(RULES_ACTIONS), ruleName) && deviceId === device._id) {\n          acc[curr._id] = ruleName;\n        }\n\n        return acc;\n      }, {});\n      return currentRules;\n    }\n  }\n);\n\nconst selectDeviceData = createSelector(\n  props => props.device,\n  props => props.data.formInputs.filter.value,\n  (device, filter) => {\n    if (filter === 'values') {\n      return _.get(device, 'value');\n    }\n\n    if (filter === 'lora') {\n      const loraValues = {\n        devEui: _.get(device, 'value.devEui') || _.get(device, 'devEui'),\n        appKey: _.get(device, 'value.appKey') || _.get(device, 'appKey'),\n        rssi: _.get(device, 'value.rssi'),\n        frameCount: _.get(device, 'value.frameCount'),\n        fPort: _.get(device, 'value.fPort'),\n        dataRate: _.get(device, 'value.dataRate'),\n        spreadingFactor: _.get(device, 'value.spreadingFactor')\n      };\n\n      return _.pickBy(loraValues);\n    }\n\n    if (filter === 'box2') {\n      return _.get(device, 'value.value');\n    }\n\n    return device;\n  }\n);\n\nexport {\n  selectAvailableCalculations,\n  selectSpecifications,\n  selectDeviceModelNamesOptions,\n  selectAccessRights,\n  selectAccessRightsUsers,\n  selectAccessRightsUserIds,\n  selectCalculations,\n  selectCalculatedValues,\n  selectNumItems,\n  selectRules,\n  selectDataFilterOptions,\n  selectDeviceData,\n};\n","import {generateForm, VALIDATION_VISIBILITY_TYPES, inputValidators} from '../../utils/form-wizard';\n\nconst loraFormConfig = {\n  fPort: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a fPort'),\n        {\n          validate: value => {\n            const numericPattern = /^[0-9]*$/;\n            if (!numericPattern.test(value)) return false;\n            if (value.charAt(0) === '0') return false;\n            return value >= 1 && value <= 223;\n          },\n          message: 'Must be a number between 1-223',\n        },\n      ]\n    }\n  },\n  data: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a data string'),\n        {\n          validate: value => {\n            const hexPattern = /^[A-Fa-f0-9]*$/;\n            return hexPattern.test(value);\n          },\n          message: 'Must be a hexadecimal string',\n        },\n      ]\n    }\n  },\n  reference: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  confirmed: {\n    defaultValue: false,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst calculationFormConfig = {\n  selectedCalculation: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst box2FormConfig = {\n  box2downlink: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst nameForm = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n        inputValidators.maximumLength(150),\n      ]\n    },\n  },\n  isEditing: {\n    defaultValue: false,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  }\n};\n\nconst descriptionForm = {\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.maximumLength(2000),\n      ]\n    },\n  },\n  isEditing: {\n    defaultValue: false,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  }\n};\n\nconst positionForm = {\n  latitude: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    }\n  },\n  longitude: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    }\n  },\n};\n\nconst accessRightsConfig = {\n  username: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  }\n};\n\nconst channelConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  protocol: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n\n  // protocol specifics\n  // mqtt\n  type: {\n    defaultValue: 'keycloakUser',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  recipient: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n\n  // http\n  url: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n\n  // azure iot hub\n  connectionString: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\n\nconst contextMapConfig = {\n  contextMapKey: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a key'),\n        {\n          validate: value => {\n            const alphanumericPattern = /^[a-zA-Z0-9]*$/; // only alphanumeric\n            return alphanumericPattern.test(value);\n          },\n          message: 'Key must be alphanumeric',\n        },\n      ],\n    }\n  },\n  contextMapValue: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a value'),\n      ]\n    }\n  },\n};\n\nconst chartsConfig = {\n  field: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst dataConfig = {\n  filter: {\n    defaultValue: 'values',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  display: {\n    defaultValue: 'pretty',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  }\n};\n\nconst reportIntervalConfig = {\n  hours: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  minutes: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  seconds: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst rulesFormConfig = {\n  rulesAction: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst translatorForm = {\n  translators: {\n    defaultValue: {},\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n    },\n  },\n};\n\nconst deviceModelNameForm = {\n  deviceModelName: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  isEditing: {\n    defaultValue: false,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  }\n};\n\nconst realEstateCoreForm = {\n  connector: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  realEstate: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  building: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  storey: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  room: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  project: {\n    defaultValue: 'region',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  }\n};\n\nconst rulesFormState = generateForm(rulesFormConfig);\nconst loraFormState = generateForm(loraFormConfig);\nconst box2FormState = generateForm(box2FormConfig);\nconst calculationFormState = generateForm(calculationFormConfig);\nconst accessRightsState = generateForm(accessRightsConfig);\nconst channelState = generateForm(channelConfig);\nconst contextMapState = generateForm(contextMapConfig);\nconst chartsState = generateForm(chartsConfig);\nconst dataState = generateForm(dataConfig);\nconst reportIntervalData = generateForm(reportIntervalConfig);\nconst nameFormState = generateForm(nameForm);\nconst descriptionFormState = generateForm(descriptionForm);\nconst deviceModelNameFormState = generateForm(deviceModelNameForm);\nconst positionFormState = generateForm(positionForm);\nconst translatorFormState = generateForm(translatorForm);\nconst realEstateCoreFormState = generateForm(realEstateCoreForm);\n\nexport {\n  nameFormState,\n  descriptionFormState,\n  loraFormState,\n  box2FormState,\n  calculationFormState,\n  accessRightsState,\n  channelState,\n  contextMapState,\n  chartsState,\n  dataState,\n  reportIntervalData,\n  rulesFormState,\n  deviceModelNameFormState,\n  positionFormState,\n  translatorFormState,\n  realEstateCoreFormState,\n};\n","import styled, {css} from 'styled-components';\nimport {COLORS} from '../../constants';\nimport {\n  FlexColMaxWidthWrapper,\n  FlexColWrapper,\n  FlexMaxWidthWrapper,\n  FlexWrapper\n} from '../../global/styled';\n\nconst LoadingView = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 50px 0 0 0;\n`;\n\n// SIDEBAR\n\nconst SidebarTopSection = styled.div`\n  width: 100%;\n  height: 32px;\n  margin: 0 0 20px 0;\n  border-bottom: 1px solid #e1e1e1;\n`;\n\nconst BackButton = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  color: #004799;\n  cursor: pointer;\n  text-decoration: underline;\n\n  &:hover {\n    color: #002c5e;\n  }\n`;\n\nconst BackButtonText = styled.p`\n  margin: 0 0 0 3px;\n  position: relative;\n  top: 1px;\n`;\n\nconst SidebarInfoSection = styled.div`\n  margin: 0 0 30px 0;\n`;\n\nconst SidebarDeviceNameHeading = styled.p`\n  font-size: 12px;\n  margin: 0 0 4px 0;\n  color: #333;\n`;\n\nconst SidebarDeviceName = styled.p`\n  font-size: 18px;\n  font-weight: bold;\n  margin: 0 0 20px 0;\n  overflow-wrap: break-word;\n`;\n\nconst SidebarInfoRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 13px;\n  height: 22px;\n  font-size: 12px;\n`;\n\nconst SidebarMenu = styled.div`\n  border-top: 1px solid #e1e1e1;\n`;\n\nconst SidebarMenuItem = styled.div`\n  height: 40px;\n  padding: 0 4px;\n  border-bottom: 1px solid #e1e1e1;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n  color: #333;\n  cursor: pointer;\n  background: ${({active}) => (active ? '#E7F3EC' : 'none')};\n\n  &:hover {\n    ${({active}) => !active && css`\n      background: #eee;\n    `}\n  }\n`;\n\nconst SidebarMenuItemTitle = styled.p`\n  margin: 0 0 0 6px;\n  font-weight: ${({active}) => (active ? 'bold' : 'normal')};\n  color: ${({active}) => (active ? '#00481E' : '#111')};\n`;\n\nconst SidebarMenuItemLeftSection = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SidebarMenuItemIconWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  position: relative;\n  top: ${({topPosition}) => topPosition || 0}px;\n  width: 22px;\n  color: ${({active}) => (active ? '#00481E' : '#444')};\n`;\n\nconst SidebarMenuItemNumberChip = styled.div`\n  display: ${({hidden}) => (hidden ? 'none' : 'flex')};\n  background: ${({active}) => (active ? '#C4DDCE' : '#eee')};\n  align-items: center;\n  justify-content: center;\n  font-size: 11px;\n  width: 16px;\n  height: 16px;\n  border-radius: 8px;\n`;\n\n// GENERAL\n\nconst InfoItem = styled.div`\n  margin: 0 0 15px 0;\n`;\n\nconst InfoItemTop = styled.div`\n  display: flex;\n  align-items: center;\n  height: 30px;\n`;\n\nconst InfoItemTitle = styled.div`\n  font-weight: bold;\n  font-size: 13px;\n  margin: 0 7px 0 0;\n  position: relative;\n  top: 1px;\n`;\n\nconst InfoItemMiddle = styled.div`\n  margin: 0 0 10px 0;\n  p {\n    font-size: 13px;\n    margin: 0;\n  }\n`;\n\nconst InfoItemBottom = styled.div`\n  display: flex;\n`;\n\nconst InfoItemGreyText = styled.p`\n  color: #777;\n  font-style: italic;\n`;\n\n// SPECIFICATIONS\n\nconst SpecSection = styled.div`\n  margin: 0 0 40px 0;\n`;\n\nconst SpecHeading = styled.div`\n  padding: 0 0 8px 0;\n  display: flex;\n  align-items: center;\n  color: #333;\n  border-bottom: 1px solid #ccc;\n  margin: 0 0 10px 0;\n  p {\n    margin: 0;\n  }\n`;\n\n// POSITION\n\nconst MapWrapper = styled.div`\n  margin: 5px 0 20px 0;\n  border-radius: 5px;\n  overflow: hidden;\n  width: 100%;\n  box-shadow: 0px 0px 7px rgba(0, 0, 0, .1);\n  border: 1px solid ${COLORS.greyAlt};\n`;\n\n// CHARTS\n\nconst AdvancedChartLink = styled.p`\n  margin: 0;\n  font-size: 14px;\n  color: #1850b5;\n  text-align: right;\n  cursor: pointer;\n  text-decoration: underline;\n  &:hover {\n    color: #002b78;\n  }\n`;\n\n// ACCESS RIGHTS\n\nconst AccessRightsWrapper = styled(FlexColWrapper)`\n  box-sizing: border-box;\n  width: 100%;\n  padding: 10px;\n  margin: 10px;\n`;\n\nconst AccessRightHeader = styled.div`\n  font-weight: bold;\n  font-size: 14px;\n  margin: 0 0 8px 0;\n`;\n\nconst AccessRightsTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  max-height: 600px;\n  margin: 10px 0 0 0;\n\n  @media (min-width: 1050px) {\n    width: 750px;\n  }\n`;\n\nconst AccessRightsCol = styled.div`\n  cursor: ${({clickable}) => (clickable ? 'pointer' : 'default')};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  color: ${({right}) => {\n    if (!right) {\n      return COLORS.greyDark;\n    }\n\n    return COLORS.trueWhite;\n  }};\n  background: ${({right}) => {\n    if (!right) {\n      return COLORS.greyLight;\n    }\n    return '#428FD9';\n  }};\n  min-width: 50px;\n  width: 50px;\n  margin: 2px;\n  padding: 8px 4px;\n  transition: all 0.3s;\n\n  &:hover {\n    transition: all 0.3s;\n    background: ${({right, clickable}) => {\n    if (!clickable) {\n      return COLORS.greyLight;\n    }\n    return !right ? COLORS.grey : '#2067ab';\n  }}\n  }\n\n  @media (min-width: 1050px) {\n    min-width: 100px;\n    width: 100px;\n  }\n`;\n\nconst AccessRightsRow = styled.div`\n  display: flex;\n  padding: 0 0;\n  width: 500px;\n\n  & ${AccessRightsCol}:first-child {\n    display: flex;\n    justify-content: flex-start;\n    min-width: 100px;\n    width: 100px;\n\n    @media (min-width:1050px)  {\n      min-width: 250px;\n      width: 250px;\n    }\n  }\n`;\n\nconst AccessRightsUsernameSpinner = styled.div`\n  position: relative;\n  margin: auto;\n  left: -40px;\n`;\n\nconst AccessRightsNotFoundNote = styled.p`\n  margin: 5px 0 0 0;\n  font-size: 13px;\n  color: #bd1a1a;\n`;\n\nconst AccessRightsFoundNote = styled.p`\n  margin: 5px 0 0 0;\n  font-size: 13px;\n  color: green;\n`;\n\n// CALCULATIONS\n\nconst CalculationValues = styled(FlexWrapper)`\n  width: 100%;\n  max-height: 500px;\n  justify-content: space-between;\n  flex-direction: column;\n  border-bottom: 1px solid grey;\n  margin: 5px;\n  padding: 5px;\n  overflow-y: scroll;\n`;\n\nconst CalculationValue = styled.div`\n  display: flex;\n  width: 100%;\n  font-size: 0.5em;\n  min-height: 20px;\n  justify-content: space-between;\n\n  @media (min-width:25em)  {\n    font-size: 0.7em;\n  }\n\n  @media (min-width:800px)  {\n    font-size: 0.9em;\n  }\n`;\n\nconst CalculationKey = styled.div`\n  background: ${COLORS.greyLight};\n  padding: 5px 2px 5px;\n`;\n\nconst CalculationRemovalContainer = styled.div`\n  cursor: pointer;\n  color: darkred;\n  transition: all 0.3s;\n\n  &:hover {\n    color: red;\n    transition: all 0.3s;\n  }\n`;\n\nconst StatusTag = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid ${({color}) => color || COLORS.greenMedium};\n  border-radius: 8px;\n  color: ${({color}) => color || COLORS.greenMedium};\n  font-size: 0.8em;\n  margin: 0 0 0 5px;\n  padding: 0 5px 0;\n  height: 25px;\n  transition: all 0.3s;\n\n  &:hover {\n    border: 1px solid ${COLORS.greenDark};\n    color: ${COLORS.greenDark};\n    transition: all 0.3s;\n  }\n`;\n\nconst CalculationWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\n// LORA CONTROL\n\nconst LoraControlWrapper = styled(FlexMaxWidthWrapper)`\n  flex-direction: column;\n\n  @media (min-width: 1000px) {\n    flex-direction: row;\n  }\n`;\n\nconst LoraControlSection = styled(FlexColWrapper)`\n  padding: 50px;\n  width: 50%;\n`;\n\nconst LoraQueueButtonWrapper = styled(FlexMaxWidthWrapper)`\n  justify-content: space-between;\n`;\n\nconst LoraQueueCenterer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\n\nconst LoraQueueSection = styled(FlexColMaxWidthWrapper)`\n  overflow-y: scroll;\n`;\n\nconst LoraQueueNoItemsNote = styled.p`\n  color: #777;\n  font-size: 14px;\n  margin: 0;\n`;\n\nconst LoraQueueContainer = styled.div`\n  width: 100%;\n  height: 250px;\n  background: #fafafa;\n  margin: 10px 0 0 0;\n  border: 1px solid #ccc;\n  font-size: 13px;\n`;\n\nconst LoraQueueTable = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-auto-rows: min-content;\n`;\n\nconst LoraQueueTableHeaderItem = styled.div`\n  height: 25px;\n  line-height: 25px;\n  background: #f1f1f1;\n  padding: 0 0 0 10px;\n  border-bottom: 1px solid #ccc;\n  color: #333;\n`;\n\nconst LoraQueueTableItem = styled.div`\n  background: #cadae8;\n  height: 32px;\n  line-height: 32px;\n  padding: 0 0 0 10px;\n  border-bottom: 1px solid #a1b3c4;\n  color: #111e29;\n`;\n\n// CHANNELS\n\nconst DeleteChannelButton = styled.div`\n  cursor: pointer;\n  transition: color 0.2s;\n  color: ${COLORS.red};\n\n  &:hover {\n    transition: color 0.2s;\n    color: ${COLORS.redDark};\n  }\n`;\n\n// DATA\n\nconst DataSetting = styled.div`\n  p {\n    margin: 0 0 5px 0;\n    font-size: 13px;\n  }\n`;\n\nconst DataContainer = styled.div`\n  min-height: 200px;\n  max-height: 800px;\n  overflow-y: auto;\n  margin: 20px 0 10px 0;\n  background: #fafafa;\n  padding: 15px 10px;\n`;\n\nconst NoDataBox = styled.div`\n  width: 100%;\n  height: 190px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #777;\n  font-size: 15px;\n  font-style: italic;\n`;\n\nconst NoDataText = styled.p`\n  color: #777;\n  font-size: 15px;\n  font-style: italic;\n`;\n\nconst ToolsContainer = styled.div`\n\n  h4 {\n    margin: 0 0 3px 0;\n  }\n\n  p {\n   margin: 0;\n   font-size: 13px;\n   color: ${COLORS.greyDark};\n  }\n`;\n\nconst CalculationDataContainer = styled.div`\n  max-height: 500px;\n  overflow-y: scroll;\n  border: 1px solid ${COLORS.grey};\n`;\n\nconst CalculationDataTable = styled.div`\n  display: grid;\n  grid-auto-rows: 30px;\n  grid-template-columns: ${({columnSize}) => `repeat(${columnSize || 4}, 1fr)`};\n`;\n\nconst CalculationDataSubject = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  background: ${COLORS.grey};\n  height: 30px;\n  padding-left: 5px;\n`;\n\nconst CalculationDataHeader = styled.div`\n  display: flex;\n  align-items: center;\n  background: ${COLORS.greyAlt};\n  font-weight: bold;\n  padding-left: 5px;\n`;\n\nconst CalculationDataItem = styled.div`\n  display: flex;\n  align-items: center;\n  background: ${COLORS.greyLight};\n  margin: 2px 0 0;\n  padding-left: 5px;\n`;\n\nconst CalculationDataItemLink = styled(CalculationDataItem)`\n  cursor: pointer;\n  &:hover {\n    color: ${COLORS.greenRacing};\n    text-decoration: underline;\n  }\n`;\n\nconst InlineText = styled.i`\n  font-size: ${({fontSize}) => fontSize};\n`;\n\n// TRANSLATORS\nconst SubHeading = styled.h3`\n  font-size: 13px;\n  font-weight: normal;\n  color: #666;\n  margin: 5px 0 0 0;\n`;\n\nconst TranslatorListItem = styled.div`\n  text-transform: capitalize;\n  font-size: 14px;\n  border: 1px solid #D0D0D0;\n  display: flex;\n  padding: 14px;\n  width: 30%;\n  margin-bottom: -1px;\n`;\n\nconst IndexListItem = styled.div`\n  font-size: 14px;\n  margin-right: 10px;\n`;\n\nconst TableContainer = styled.div`\n  display: grid;\n  grid-template-columns: 5% 25% 25% 20% 25%;\n  margin-bottom: -1px;\n`;\n\nconst TableItem = styled.div`\n  margin: 0px;\n  border: solid 1px #D0D0D0;\n  border-right: none;\n`;\n\nconst ItemContainer = styled.div`\n  text-transform: capitalize;\n  margin: 13px 0px 0px 10px;\n  font-size: 13px;\n`;\n\nconst LastTableItem = styled.div`\n  margin: 0px;\n  border: solid 1px #D0D0D0;\n`;\n\nconst FirstItemContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  text-transform: capitalize;\n  margin: 15px 0px 15px 0px;\n  font-size: 13px;\n`;\n\nconst TitleContainer = styled.div`\n  display: grid;\n  grid-template-columns: 30% 25% 20% 25%;\n  font-size: 13px;\n  margin-top: 15px;\n`;\n\nconst TableTitle = styled.div`\n  margin: 0 0 5px 0;\n`;\n\n// REPORT INTERVAL\nconst ReportIntervalNote = styled.p`\n  margin: 0px;\n  font-size: 14px;\n  margin: 10px 0 30px 0;\n`;\n\nexport {\n  // GENERAL INFO\n  LoadingView,\n  InfoItem,\n  InfoItemTop,\n  InfoItemTitle,\n  InfoItemMiddle,\n  InfoItemBottom,\n  InfoItemGreyText,\n  NoDataBox,\n  NoDataText,\n\n  // SIDEBAR\n  SidebarTopSection,\n  BackButton,\n  BackButtonText,\n  SidebarInfoSection,\n  SidebarDeviceNameHeading,\n  SidebarDeviceName,\n  SidebarInfoRow,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuItemLeftSection,\n  SidebarMenuItemTitle,\n  SidebarMenuItemIconWrapper,\n  SidebarMenuItemNumberChip,\n\n  // SPECIFICATIONS\n  SpecSection,\n  SpecHeading,\n\n  // POSITION\n  MapWrapper,\n\n  // CHARTS\n  AdvancedChartLink,\n\n  // ACCESS RIGHTS\n  AccessRightsWrapper,\n  AccessRightHeader,\n  AccessRightsTable,\n  AccessRightsRow,\n  AccessRightsCol,\n  AccessRightsUsernameSpinner,\n  AccessRightsNotFoundNote,\n  AccessRightsFoundNote,\n\n  // CALCUATIONS\n  CalculationValues,\n  CalculationValue,\n  CalculationKey,\n  CalculationRemovalContainer,\n  StatusTag,\n\n  // CALCULATIONS\n  CalculationWrapper,\n\n  // LORA CONTROL\n  LoraControlWrapper,\n  LoraControlSection,\n  LoraQueueButtonWrapper,\n  LoraQueueContainer,\n  LoraQueueCenterer,\n  LoraQueueSection,\n  LoraQueueNoItemsNote,\n\n  LoraQueueTable,\n  LoraQueueTableHeaderItem,\n  LoraQueueTableItem,\n\n  // CHANNELS\n  DeleteChannelButton,\n\n  // DATA\n  DataSetting,\n  DataContainer,\n\n  ToolsContainer,\n\n  CalculationDataContainer,\n  CalculationDataTable,\n  CalculationDataSubject,\n  CalculationDataHeader,\n  CalculationDataItem,\n  CalculationDataItemLink,\n  InlineText,\n\n  // TRANSLATORS\n  SubHeading,\n  TranslatorListItem,\n  IndexListItem,\n  TableContainer,\n  TableItem,\n  ItemContainer,\n  LastTableItem,\n  FirstItemContainer,\n  TitleContainer,\n  TableTitle,\n\n  // REPORT INTERVAL\n  ReportIntervalNote,\n};\n","import React from 'react';\nimport {useQueryClient} from 'react-query';\nimport _ from 'lodash';\nimport Icon from 'react-icons-kit';\nimport {check} from 'react-icons-kit/fa/check';\nimport {close} from 'react-icons-kit/fa/close';\n\nimport {\n  AccessRightHeader,\n  AccessRightsCol,\n  AccessRightsRow,\n  AccessRightsTable,\n  AccessRightsWrapper,\n  NoDataBox,\n  AccessRightsUsernameSpinner,\n  AccessRightsFoundNote,\n  AccessRightsNotFoundNote,\n} from '../styled';\nimport TextField from '../../../components/text-field';\nimport {FlexWrapper, HorizontalLine} from '../../../global/styled';\nimport {RIGHT_TYPES} from '../constants';\nimport Button from '../../../components/button';\nimport Spinner from '../../../components/spinner';\nimport Chip from '../../../components/chip';\nimport InfoBox from '../../../components/info-box';\nimport {\n  accessRightsApi,\n  usersApi,\n  getUserId,\n} from '../../../api';\nimport {\n  selectAccessRights,\n  selectAccessRightsUserIds,\n  selectAccessRightsUsers,\n} from '../selectors';\nimport {useLocalState} from '../../../hooks';\nimport {accessRightsState} from '../state';\nimport {AccessRight, Device, Scope} from '../../../types';\n\ninterface Props {\n  deviceId: string;\n  device: Device;\n  t: (key: string) => string;\n  existingUsers: object;\n}\n\nconst BaseAccessRights = (props: Props) => {\n\n  const queryClient = useQueryClient();\n\n  const accessRightsQuery = accessRightsApi.useAccessRightsResourceQuery({\n    deviceId: props.deviceId,\n  });\n  const createAccessRightMutation = accessRightsApi.useCreateAccessRight(queryClient);\n  const removeAccessRightMutation = accessRightsApi.useRemoveAccessRight(queryClient);\n\n  const userId = getUserId();\n  const accessRightsItems = selectAccessRights({\n    userId,\n    accessRights: accessRightsQuery.data,\n  }) as AccessRight;\n  const accessUserIds = selectAccessRightsUserIds({\n    userId,\n    accessRights: accessRightsQuery.data,\n  }) as string[];\n\n  const soughtUsersQuery = usersApi.useSeekUsersQuery(accessUserIds);\n  const accessRightsUsers = selectAccessRightsUsers({\n    userId,\n    accessRights: accessRightsQuery.data,\n    users: soughtUsersQuery.data,\n    device: props.device,\n  });\n\n  const accessRightsForm = useLocalState(accessRightsState);\n  const userQuery = usersApi.useGetUser({\n    username: accessRightsForm.formInputs.username.value as string,\n  });\n\n  const handleNewAccessRightUser = (accessRight: Omit<AccessRight, 'subjectType'>) => {\n    const template = {\n      ...accessRight,\n      subjectType: 'singleton'\n    };\n    createAccessRightMutation.mutate({deviceId: props.deviceId, template});\n  };\n\n  const handleAccessRight = (\n    acr: Omit<AccessRight, 'subjectType' | 'scope'> & {scope: {[K in Scope]: boolean}},\n    right: Scope,\n  ) => {\n    if (_.get(acr, `scope.${right}`)) {\n      const template = {\n        deviceId: props.deviceId,\n        scope: [right],\n        userId: acr.userId,\n        subjectType: 'singleton'\n      };\n      removeAccessRightMutation.mutate(template);\n    } else {\n      const template = {\n        userId: acr.userId,\n        scope: [right],\n        subjectType: 'singleton'\n      };\n      createAccessRightMutation.mutate({deviceId: props.deviceId, template});\n    }\n  };\n\n  if (!accessRightsItems?.scope) {\n    return <NoDataBox>{props.t('phrases.noAccessRightsAvailable')}</NoDataBox>;\n  }\n\n  return (\n    <AccessRightsWrapper>\n      <AccessRightHeader>Your access rights to this device:</AccessRightHeader>\n      <FlexWrapper>\n        {_.map(accessRightsItems?.scope, right => {\n          return (\n            <Chip key={right} text={right} margin={'0 5px 0 0'} color={'blue'} />\n          );\n        })}\n      </FlexWrapper>\n      {/* @ts-ignore - TODO: styled need typing */}\n      <HorizontalLine margin={'20px 0'} />\n      <AccessRightHeader>Other users access rights to this device:</AccessRightHeader>\n      <FlexWrapper style={{width: '500px'}}>\n        <TextField\n          width={'350px'}\n          name={'username'}\n          placeholder={'Enter the username you wish to give access rights to'}\n          value={accessRightsForm.formInputs.username.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => accessRightsForm.setInputValue('username', evt.target.value)}\n        />\n        {userQuery?.isLoading && (\n          <AccessRightsUsernameSpinner>\n            <Spinner />\n          </AccessRightsUsernameSpinner>\n        )}\n        {(userQuery?.isSuccess || !userQuery?.isLoading) && (\n          <Button\n            disabled={!userQuery?.isSuccess}\n            margin={'0 0 0 5px'}\n            width={'80px'}\n            content={'Add'}\n            color={'green'}\n            onClick={() => {\n              const user = userQuery?.data;\n              if (user) {\n                handleNewAccessRightUser({\n                  userId: user._id,\n                  scope: [RIGHT_TYPES.read]\n                });\n                accessRightsForm.resetForm();\n              }\n            }}\n          />\n        )}\n      </FlexWrapper>\n      {userQuery.isSuccess && (\n        <AccessRightsFoundNote>User found</AccessRightsFoundNote>\n      )}\n      {userQuery.isError && (\n        <AccessRightsNotFoundNote>No user found</AccessRightsNotFoundNote>\n      )}\n      {createAccessRightMutation.isError && (\n        <InfoBox\n          heading={`Could not add user: ${_.get(createAccessRightMutation, 'error.message')}`}\n          content={_.get(createAccessRightMutation, 'error.response.data') as string}\n          type={'error'}\n          margin={'20px 0 0 0'}\n        />\n      )}\n      {removeAccessRightMutation.isError && (\n        <InfoBox\n          heading={`Could not add user: ${_.get(removeAccessRightMutation, 'error.message')}`}\n          content={_.get(removeAccessRightMutation, 'error.response.data') as string}\n          type={'error'}\n          margin={'20px 0 0 0'}\n        />\n      )}\n      {_.isEmpty(accessRightsUsers) && (\n        <NoDataBox>No other users have access to this device</NoDataBox>\n      )}\n      {!_.isEmpty(accessRightsUsers) && (\n        <AccessRightsTable>\n          <AccessRightsRow>\n            <AccessRightsCol>{_.capitalize(props.t('common.user'))}</AccessRightsCol>\n            <AccessRightsCol>{props.t('labels.admin')}</AccessRightsCol>\n            <AccessRightsCol>{props.t('labels.write')}</AccessRightsCol>\n            <AccessRightsCol>{props.t('labels.read')}</AccessRightsCol>\n            <AccessRightsCol>{props.t('labels.peek')}</AccessRightsCol>\n          </AccessRightsRow>\n\n          {_.map(accessRightsUsers, (\n            acr: Omit<AccessRight, 'scope'> & {scope: {[K in Scope]: boolean}}\n          ) => {\n            return (\n              <AccessRightsRow key={acr.userId}>\n                <AccessRightsCol>{acr.name}</AccessRightsCol>\n                {_.map(acr.scope, (right, key: Scope) => {\n                  return (\n                    <AccessRightsCol\n                      // @ts-ignore - TODO: styled need typing\n                      clickable\n                      onClick={() => {\n                        handleAccessRight(acr, key);\n                      }}\n                      right={right}\n                      key={key}\n                    >\n                      <Icon icon={right ? check as object : close as object} />\n                    </AccessRightsCol>\n                  );\n                })}\n              </AccessRightsRow>\n            );\n          })}\n        </AccessRightsTable>\n      )}\n    </AccessRightsWrapper>\n  );\n};\n\nexport default BaseAccessRights;\n","import React from 'react';\nimport _ from 'lodash';\nimport {FlexColWrapper} from '../../../global/styled';\nimport TextField from '../../../components/text-field';\nimport Button from '../../../components/button';\nimport {useLocalState} from '../../../hooks';\nimport {box2FormState} from '../state';\n\nconst Box2Downlink = props => {\n  const box2Form = useLocalState(box2FormState);\n\n  const sendBox2Downlink = () => {\n    const updates = {\n      value: {\n        value: Number(box2Form.formInputs.box2downlink.value)\n      },\n    };\n    props.updateDeviceMutation.mutate({updates, deviceId: props.deviceId});\n    box2Form.resetForm();\n  };\n\n  return (\n    <FlexColWrapper\n      style={{width: '30%'}}\n    >\n      <TextField\n        name={'box2downlink'}\n        placeholder={'Value... (Number)'}\n        onChange={evt => box2Form.setInputValue('box2downlink', evt.target.value)}\n        value={_.get(box2Form.formInputs, 'box2downlink.value')}\n        margin={'0 0 10px 0'}\n      />\n      <Button\n        disabled={!_.get(box2Form.formInputs, 'box2downlink.value')}\n        ghosted\n        color={'green'}\n        onClick={sendBox2Downlink}\n        content={_.capitalize(props.t('labels.send'))}\n        width={'300px'}\n      />\n    </FlexColWrapper>\n  );\n};\n\nexport default Box2Downlink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {useQueryClient} from 'react-query';\nimport exact from 'prop-types-exact';\nimport _ from 'lodash';\nimport {\n  FlexColWrapper,\n  FlexMaxWidthCenterWrapper,\n  FlexSpaceBetweenWrapper,\n} from '../../../global/styled';\nimport TextField from '../../../components/text-field';\nimport Select from '../../../components/select';\nimport Button from '../../../components/button';\nimport {COLORS} from '../../../constants';\nimport {DeleteChannelButton, NoDataText} from '../styled';\nimport {useLocalState} from '../../../hooks';\nimport {channelState} from '../state';\nimport {channelsApi} from '../../../api';\n\nconst Channels = props => {\n  const queryClient = useQueryClient();\n\n  const {mutate: mutateCreateChannel} = channelsApi.useCreateChannel(queryClient);\n  const {mutate: mutateRemoveChannel} = channelsApi.useRemoveChannel(queryClient);\n\n  const channelForm = useLocalState(channelState);\n\n  const createNewChannel = () => {\n    const name = channelForm.formInputs.name.value;\n    const protocol = channelForm.formInputs.protocol.value;\n    const type = channelForm.formInputs.type.value;\n    const recipient = channelForm.formInputs.recipient.value;\n    const url = channelForm.formInputs.url.value;\n    const connectionString = channelForm.formInputs.connectionString.value;\n    const channel = {\n      name,\n      [protocol]: {\n        type,\n        recipient,\n        url,\n        connectionString\n      },\n      iotnode: props.deviceId,\n    };\n    mutateCreateChannel(channel);\n    channelForm.resetForm();\n  };\n\n  return (\n    <FlexColWrapper>\n      {_.isEmpty(props.channels) && <NoDataText>{props.t('phrases.noChannelsAdded')}</NoDataText>}\n      {!_.isEmpty(props.channels) && (\n        <>\n          <b>{_.capitalize(props.t('titles.topics'))}</b>\n          {_.map(props.channels, channel => (\n            <FlexSpaceBetweenWrapper key={channel._id} style={{margin: '2px', background: COLORS.greyLight}}>\n              {_.get(channel, 'readableFormat')}\n              <DeleteChannelButton onClick={() => mutateRemoveChannel(channel._id)}>\n                ✖\n              </DeleteChannelButton>\n            </FlexSpaceBetweenWrapper>\n          ))}\n        </>\n      )}\n\n      <FlexColWrapper style={{width: '500px'}}>\n        <h4>Create channel</h4>\n        <TextField\n          label={'Name'}\n          margin={'10px 0 10px'}\n          placeholder={'Name...'}\n          name={'name'}\n          value={_.get(channelForm.formInputs, 'name.value')}\n          onChange={evt => channelForm.setInputValue('name', evt.target.value)}\n        />\n\n\n        <Select\n          label={'Protocol'}\n          margin={'10px 0 10px'}\n          placeholder={_.capitalize(props.t('placeholders.select'))}\n          name={'protocol'}\n          options={[\n            {value: 'mqtt', label: 'MQTT'},\n            {value: 'http', label: 'HTTP'},\n            {value: 'azureIotHub', label: 'Azure IoT Hub'},\n          ]}\n          value={_.get(channelForm.formInputs, 'protocol.value')}\n          onChange={evt => channelForm.setInputValue('protocol', evt.target.value)}\n        />\n\n        {_.eq(_.get(channelForm.formInputs, 'protocol.value'), 'mqtt') && (\n          <>\n            <FlexMaxWidthCenterWrapper>\n              <Select\n                margin={'10px'}\n                placeholder={'...type'}\n                label={'type'}\n                name={'type'}\n                options={[\n                  {value: 'keycloakUser', label: 'keycloakUser'},\n                  {value: 'basicCredentialsSet', label: 'basicCredentialsSet'},\n                ]}\n                value={_.get(channelForm.formInputs, 'type.value')}\n                onChange={evt => channelForm.setInputValue('type', evt.target.value)}\n              />\n            </FlexMaxWidthCenterWrapper>\n            <FlexMaxWidthCenterWrapper>\n              <TextField\n                margin={'10px'}\n                placeholder={'recipient...'}\n                name={'recipient'}\n                value={_.get(channelForm.formInputs, 'recipient.value')}\n                onChange={evt => channelForm.setInputValue('recipient', evt.target.value)}\n              />\n            </FlexMaxWidthCenterWrapper>\n          </>\n        )}\n\n        {_.eq(_.get(channelForm.formInputs, 'protocol.value'), 'http') && (\n          <FlexMaxWidthCenterWrapper>\n            <TextField\n              margin={'10px'}\n              placeholder={'URL...'}\n              name={'url'}\n              value={_.get(channelForm.formInputs, 'url.value')}\n              onChange={evt => channelForm.setInputValue('url', evt.target.value)}\n            />\n          </FlexMaxWidthCenterWrapper>\n        )}\n\n        {_.eq(_.get(channelForm.formInputs, 'protocol.value'), 'azureIotHub') && (\n          <FlexMaxWidthCenterWrapper>\n            <TextField\n              margin={'10px'}\n              placeholder={'connection string...'}\n              name={'connectionString'}\n              value={_.get(channelForm.formInputs, 'connectionString.value')}\n              onChange={evt => channelForm.setInputValue('connectionString', evt.target.value)}\n            />\n          </FlexMaxWidthCenterWrapper>\n        )}\n\n        <Button\n          disabled={\n            !_.get(channelForm.formInputs, 'name.value') ||\n            !_.get(channelForm.formInputs, 'protocol.value') ||\n            (_.eq(_.get(channelForm.formInputs, 'protocol.value'), 'http') && !(_.get(channelForm.formInputs, 'url.value'))) ||\n            (_.eq(_.get(channelForm.formInputs, 'protocol.value'), 'azureIotHub') && !(_.get(channelForm.formInputs, 'connectionString.value')))\n          }\n          width={'200px'}\n          onClick={createNewChannel}\n          color={'green'}\n          content={'Create channel'}\n        />\n      </FlexColWrapper>\n    </FlexColWrapper>\n  );\n};\n\nChannels.propTypes = exact({\n  onChange: PropTypes.func,\n  t: PropTypes.func,\n  deviceId: PropTypes.string,\n  channels: PropTypes.array,\n  showAllInputValidations: PropTypes.func,\n  populateInputValues: PropTypes.func,\n  resetForm: PropTypes.func,\n  setInputValue: PropTypes.func,\n  showInputValidation: PropTypes.func,\n  hideInputValidation: PropTypes.func,\n  hideAllInputValidations: PropTypes.func,\n  createNewChannel: PropTypes.func,\n  formInputs: PropTypes.object,\n  deviceItem: PropTypes.object,\n  isPopulated: PropTypes.bool,\n});\n\nexport default Channels;\n","import React from 'react';\nimport _ from 'lodash';\nimport {useQuery} from 'react-query';\nimport {NextRouter} from 'next/router';\n\nimport {devicesRequests} from '../../../api';\nimport {chartsState} from '../state';\nimport {useLocalState} from '../../../hooks';\nimport {ChartEntry} from '../../charts-viewer/types';\n\nimport ChartsViewer from '../../charts-viewer';\nimport Select from '../../../components/select';\nimport {AdvancedChartLink} from '../styled';\n\ninterface Props {\n  deviceId: string;\n  router: NextRouter;\n}\n\nconst Charts = (props: Props) => {\n\n  const state = useLocalState(chartsState);\n\n  const chartEntry: ChartEntry = {\n    deviceId: props.deviceId,\n    deviceName: 'yeah',\n    field: state.formInputs.field.value as string,\n    axis: 'left',\n  };\n\n  const fieldsQuery = useQuery(\n    ['devices', props.deviceId, 'statistics', 'fields'],\n    async () => devicesRequests.getStatisticsFields(props.deviceId),\n    {refetchOnWindowFocus: false}\n  );\n\n  return (\n    <>\n      <AdvancedChartLink\n        onClick={async () => props.router.push(`/charts?devices=${props.deviceId}`)}\n      >\n        Go to advanced view\n      </AdvancedChartLink>\n      <Select\n        label={'Field'}\n        options={_.map(fieldsQuery.data, field => ({value: field, label: field}))}\n        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n          state.setInputValue('field', evt.target.value)\n        )}\n        value={state.formInputs.field.value as string}\n        margin={'0 0 20px 0'}\n      />\n      {!!state.formInputs.field.value && (\n        <ChartsViewer\n          chartEntries={[chartEntry]}\n          hideLegend\n        />\n      )}\n    </>\n  );\n};\n\nexport default Charts;\n","import React from 'react';\nimport _ from 'lodash';\n\nimport SegmentedControl from '../../../components/segmented-control';\nimport DataViewer from '../../../components/data-viewer';\nimport {\n  DataSetting,\n  DataContainer,\n  NoDataBox,\n} from '../styled';\nimport {FlexColWrapper, FlexWrapper} from '../../../global/styled';\nimport {DATA_DISPLAY_OPTIONS, DATA_FILTER_OPTIONS} from '../constants';\nimport {useLocalState} from '../../../hooks';\nimport {dataState} from '../state';\nimport {selectDataFilterOptions, selectDeviceData} from '../selectors';\n\nconst Data = props => {\n  const dataForm = useLocalState(dataState);\n  const dataFilterOptions = selectDataFilterOptions({\n    device: props.deviceItem,\n    t: props.t,\n  });\n\n  const deviceData = selectDeviceData({\n    device: props.deviceItem,\n    data: dataForm,\n  });\n\n  return (\n    <FlexColWrapper>\n      <FlexWrapper>\n\n        <DataSetting>\n          <p>{_.capitalize(props.t('labels.filter'))}</p>\n          <SegmentedControl\n            options={dataFilterOptions}\n            value={dataForm.formInputs.filter.value}\n            onChange={value => {\n              dataForm.setInputValue('filter', value);\n            }}\n            margin={'0 14px 0 0'}\n          />\n        </DataSetting>\n\n        <DataSetting>\n          <p>{_.capitalize(props.t('labels.display'))}</p>\n          <SegmentedControl\n            options={DATA_DISPLAY_OPTIONS}\n            value={dataForm.formInputs.display.value}\n            onChange={value => {\n              dataForm.setInputValue('display', value);\n            }}\n          />\n        </DataSetting>\n\n      </FlexWrapper>\n      <DataContainer>\n\n        {!deviceData && (\n          <NoDataBox>\n            {DATA_FILTER_OPTIONS[dataForm.formInputs.filter.value].noValuesText}\n          </NoDataBox>\n        )}\n        {deviceData && dataForm.formInputs.display.value === 'pretty' && (\n          <DataViewer data={deviceData} />\n        )}\n        {deviceData && dataForm.formInputs.display.value === 'raw' && (\n          <pre>\n            {JSON.stringify(deviceData, null, 2)}\n          </pre>\n        )}\n      </DataContainer>\n    </FlexColWrapper>\n  );\n};\n\nexport default Data;\n","import React from 'react';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport {ic_edit as editIcon} from 'react-icons-kit/md/ic_edit';\n\nimport {devicesApi} from '../../../api';\nimport {getValidationErrorMessage, isFormValid} from '../../../utils/form-wizard';\nimport {formatTimeSinceLastReported, resolveDeviceType} from '../../../utils';\nimport {\n  InfoItem,\n  InfoItemTop,\n  InfoItemTitle,\n  InfoItemMiddle,\n  InfoItemBottom,\n  InfoItemGreyText,\n} from '../styled';\nimport Button from '../../../components/button';\nimport TextField from '../../../components/text-field';\nimport TextArea from '../../../components/text-area';\nimport Select from '../../../components/select';\nimport {\n  nameFormState,\n  descriptionFormState,\n  deviceModelNameFormState,\n} from '../state';\nimport {useLocalState} from '../../../hooks';\n\nconst GeneralInfo = props => {\n\n  const nameForm = useLocalState(nameFormState);\n  const descriptionForm = useLocalState(descriptionFormState);\n  const deviceModelNameForm = useLocalState(deviceModelNameFormState);\n\n  const deviceModelNameQuery = devicesApi.useDeviceModelNames();\n  const deviceModelNameOptions = _.map(deviceModelNameQuery.data, deviceModelName => ({\n    label: deviceModelName.displayName,\n    value: deviceModelName.value,\n  }));\n\n  const device = props.deviceQuery.data;\n\n  return (\n    <>\n\n      <InfoItem>\n        <InfoItemTop>\n          <InfoItemTitle>{_.capitalize(props.t('common.name'))}</InfoItemTitle>\n          {!nameForm.formInputs.isEditing.value && (\n            <Button\n              content={<Icon icon={editIcon} />}\n              width={'22px'}\n              height={'22px'}\n              ghosted\n              onClick={() => {\n                nameForm.setInputValue('name', device.name || '');\n                nameForm.setInputValue('isEditing', true);\n              }}\n            />\n          )}\n        </InfoItemTop>\n        <InfoItemMiddle>\n          {\n            nameForm.formInputs.isEditing.value\n              ? (\n                <TextField\n                  name={'name'}\n                  value={nameForm.formInputs.name.value}\n                  onChange={evt => nameForm.setInputValue('name', evt.target.value)}\n                  validationErrorMessage={getValidationErrorMessage(nameForm.formInputs.name)}\n                />\n              ) : (\n                <>\n                  {\n                    !_.isEmpty(device.name)\n                      ? <p>{device.name}</p>\n                      : <InfoItemGreyText>{'No name set'}</InfoItemGreyText>\n                  }\n                </>\n              )\n          }\n        </InfoItemMiddle>\n        <InfoItemBottom>\n          {nameForm.formInputs.isEditing.value && (\n            <Button\n              label={_.capitalize(props.t('labels.save'))}\n              color={'green'}\n              height={'32px'}\n              width={'90px'}\n              margin={'0 5px 0 0'}\n              isLoading={props.deviceQuery.isLoading}\n              disabled={!isFormValid(nameForm.formInputs)}\n              onClick={() => {\n                props.updateDeviceMutation.mutate({\n                  updates: {name: nameForm.formInputs.name.value},\n                  deviceId: device._id,\n                });\n                nameForm.setInputValue('isEditing', false);\n              }}\n            />\n          )}\n          {nameForm.formInputs.isEditing.value && !props.deviceQuery.isLoading && (\n            <Button\n              label={_.capitalize(props.t('labels.cancel'))}\n              height={'32px'}\n              width={'90px'}\n              onClick={() => {\n                nameForm.setInputValue('isEditing', false);\n              }}\n            />\n          )}\n        </InfoItemBottom>\n      </InfoItem>\n\n      <InfoItem>\n        <InfoItemTop>\n          <InfoItemTitle>{_.capitalize(props.t('titles.description'))}</InfoItemTitle>\n          {!descriptionForm.formInputs.isEditing.value && (\n            <Button\n              content={<Icon icon={editIcon} />}\n              width={'22px'}\n              height={'22px'}\n              ghosted\n              onClick={() => {\n                descriptionForm.setInputValue('description', device.description);\n                descriptionForm.setInputValue('isEditing', true);\n              }}\n            />\n          )}\n        </InfoItemTop>\n        <InfoItemMiddle>\n          {\n            descriptionForm.formInputs.isEditing.value\n              ? (\n                <TextArea\n                  name={'description'}\n                  value={descriptionForm.formInputs.description.value}\n                  onChange={evt => descriptionForm.setInputValue('description', evt.target.value)}\n                  validationErrorMessage={\n                    getValidationErrorMessage(descriptionForm.formInputs.description)\n                  }\n                />\n              ) : (\n                <>\n                  {\n                    !_.isEmpty(device.description)\n                      ? <p>{device.description}</p>\n                      : <InfoItemGreyText>{_.capitalize(props.t('titles.noDescriptionSet'))}</InfoItemGreyText>\n                  }\n                </>\n              )\n          }\n        </InfoItemMiddle>\n        <InfoItemBottom>\n          {descriptionForm.formInputs.isEditing.value && (\n            <Button\n              label={_.capitalize(props.t('labels.save'))}\n              color={'green'}\n              height={'32px'}\n              width={'90px'}\n              margin={'0 5px 0 0'}\n              isLoading={props.deviceQuery.isLoading}\n              onClick={() => {\n                props.updateDeviceMutation.mutate({\n                  updates: {description: descriptionForm.formInputs.description.value},\n                  deviceId: device._id,\n                });\n                descriptionForm.setInputValue('isEditing', false);\n              }}\n            />\n          )}\n          {descriptionForm.formInputs.isEditing.value && !_.get(props, 'device.isLoading') && (\n            <Button\n              label={_.capitalize(props.t('labels.cancel'))}\n              height={'32px'}\n              width={'90px'}\n              onClick={() => {\n                descriptionForm.setInputValue('isEditing', false);\n              }}\n            />\n          )}\n        </InfoItemBottom>\n      </InfoItem>\n\n      <InfoItem>\n        <InfoItemTop>\n          <InfoItemTitle>{_.capitalize(props.t('labels.deviceModelName'))}</InfoItemTitle>\n          {!deviceModelNameForm.formInputs.isEditing.value && (\n            <Button\n              content={<Icon icon={editIcon} />}\n              width={'22px'}\n              height={'22px'}\n              ghosted\n              onClick={() => {\n                deviceModelNameForm.setInputValue('deviceModelName', device.deviceModelName);\n                deviceModelNameForm.setInputValue('isEditing', true);\n              }}\n            />\n          )}\n        </InfoItemTop>\n        <InfoItemMiddle>\n          {\n            deviceModelNameForm.formInputs.isEditing.value\n              ? (\n                <Select\n                  name={'deviceModelName'}\n                  placeholder={_.capitalize(props.t('placeholders.select'))}\n                  options={deviceModelNameOptions}\n                  value={deviceModelNameForm.formInputs.deviceModelName.value}\n                  onChange={evt => deviceModelNameForm.setInputValue('deviceModelName', evt.target.value || '')}\n                  isClearable\n                  margin={'0 0 10px 0'}\n                />\n              ) : (\n                <>\n                  {\n                    device.deviceModelName\n                      ? <p>{device.deviceModelName}</p>\n                      : <InfoItemGreyText>{_.capitalize(props.t('titles.noDeviceModelName'))}</InfoItemGreyText>\n                  }\n                </>\n              )\n          }\n        </InfoItemMiddle>\n        <InfoItemBottom>\n          {deviceModelNameForm.formInputs.isEditing.value && (\n            <Button\n              label={_.capitalize(props.t('labels.save'))}\n              color={'green'}\n              height={'32px'}\n              width={'90px'}\n              margin={'0 5px 0 0'}\n              isLoading={props.deviceQuery.isLoading}\n              onClick={() => {\n                props.updateDeviceMutation.mutate({\n                  updates: {deviceModelName: deviceModelNameForm.formInputs.deviceModelName.value}\n                });\n                deviceModelNameForm.setInputValue('isEditing', false);\n              }}\n            />\n          )}\n          {deviceModelNameForm.formInputs.isEditing.value && !props.deviceQuery.isLoading && (\n            <Button\n              label={_.capitalize(props.t('labels.cancel'))}\n              height={'32px'}\n              width={'90px'}\n              onClick={() => {\n                deviceModelNameForm.setInputValue('isEditing', false);\n              }}\n            />\n          )}\n        </InfoItemBottom>\n      </InfoItem>\n\n      <InfoItem>\n        <InfoItemTop>\n          <InfoItemTitle>{_.capitalize(props.t('titles.deviceType'))}</InfoItemTitle>\n        </InfoItemTop>\n        <InfoItemMiddle>\n          <p>{resolveDeviceType(device)}</p>\n        </InfoItemMiddle>\n      </InfoItem>\n\n      <InfoItem>\n        <InfoItemTop>\n          <InfoItemTitle>{_.toUpper(props.t('common.id'))}</InfoItemTitle>\n        </InfoItemTop>\n        <InfoItemMiddle>\n          <p>{device._id}</p>\n        </InfoItemMiddle>\n      </InfoItem>\n\n      <InfoItem>\n        <InfoItemTop>\n          <InfoItemTitle>{_.capitalize(props.t('common.lastReported'))}</InfoItemTitle>\n        </InfoItemTop>\n        <InfoItemMiddle>\n          <p>{formatTimeSinceLastReported(device.reportedAt)}</p>\n        </InfoItemMiddle>\n      </InfoItem>\n\n      <Button\n        content={_.capitalize(props.t('labels.deleteDevice'))}\n        color={'red'}\n        ghosted\n        onClick={props.handleDeviceRemoval}\n        margin={'30px 0 0 0'}\n      />\n    </>\n  );\n};\n\nexport default GeneralInfo;\n","import React from 'react';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport {ic_dehaze as SidebarIcon} from 'react-icons-kit/md/ic_dehaze';\n\nimport {\n  HeadingBarContainer,\n  HeadingBarLeftSection,\n  HeadingBarMiddleSection,\n  ToggleSidebarButton,\n} from '../../../global/styled';\n\nconst HeadingBar = props => {\n  return (\n    <HeadingBarContainer>\n      <HeadingBarLeftSection siblingWidth={props.siblingWidth}>\n        <ToggleSidebarButton\n          onClick={() => {\n            if (props.isSidebarOpen) {\n              props.closeSidebar();\n            } else {\n              props.openSidebar();\n            }\n          }}\n        >\n          <Icon icon={SidebarIcon} size={17} />\n        </ToggleSidebarButton>\n      </HeadingBarLeftSection>\n      <HeadingBarMiddleSection>\n        <p>{_.capitalize(props.t(`titles.${props.tabId}`))}</p>\n      </HeadingBarMiddleSection>\n    </HeadingBarContainer>\n  );\n};\n\nexport default HeadingBar;\n","import dynamic from 'next/dynamic';\nimport AccessRights from './access-rights';\nimport Specifications from './specifications';\nimport LoRaControl from './lora-control';\nimport Channels from './channels';\nimport Box2Downlink from './box2-downlink';\nimport GeneralInfo from './general-info';\nimport Data from './data';\nimport ReportInterval from './report-interval';\nimport Charts from './charts';\nimport Tools from './tools';\nimport Translators from './translators';\nimport PositionSelector from './position-selector';\n\n\nconst ContextualParameters = dynamic(() => import('./contextual-parameters'), {ssr: false});\n\nexport {\n  AccessRights,\n  LoRaControl,\n  Channels,\n  Specifications,\n  Box2Downlink,\n  GeneralInfo,\n  ContextualParameters,\n  Data,\n  ReportInterval,\n  Charts,\n  Tools,\n  Translators,\n  PositionSelector\n};\n","import React, {useEffect} from 'react';\nimport _ from 'lodash';\nimport {useQueryClient, useMutation, UseMutationResult} from 'react-query';\nimport toast from 'react-hot-toast';\n\n// Logic\nimport {getRequestErrorMessage} from '../../../utils';\nimport {createRulesActionsOptions, createRuleTemplate} from '../utils';\nimport {useLocalState} from '../../../hooks';\nimport {loraFormState, rulesFormState} from '../state';\nimport {rulesApi, devicesRequests} from '../../../api';\nimport {selectRules} from '../selectors';\nimport {getUserId} from '../../../api/token';\nimport {CHIRP_STACK, CHIRP_STACK_COMMANDS} from '../constants';\nimport {getFormValues, isFormValid, getValidationErrorMessage} from '../../../utils/form-wizard';\nimport {Device, IdKeyedRules} from '../../../types';\n\n// UI\nimport {FlexWrapper, HorizontalLine} from '../../../global/styled';\nimport {Heading} from '../../../global/components';\nimport TextField from '../../../components/text-field';\nimport SegmentedControl from '../../../components/segmented-control';\nimport Select from '../../../components/select';\nimport Button from '../../../components/button';\nimport Spinner from '../../../components/spinner';\nimport {\n  LoraQueueContainer,\n  LoraQueueCenterer,\n  LoraQueueNoItemsNote,\n  LoraQueueTable,\n  LoraQueueTableHeaderItem,\n  LoraQueueTableItem,\n} from '../styled';\n\nconst RULES_ACTIONS = {\n  turnOn: 'turnOn',\n  turnOff: 'turnOff',\n};\n\ninterface Props {\n  deviceItem: Device;\n  t: (key: string) => string;\n}\n\ninterface GetQueueResponse {\n  items: {\n    devEUI: string;\n    confirmed: boolean;\n    fCnt: string;\n    fPort: string;\n    data: string;\n  }[]\n}\n\n// NOTE: This tab is only for Chirpstack devices now.\n// Support for other connectors needs to be implemented.\n\nconst LoRaControl = (props: Props) => {\n\n  const loraForm = useLocalState(loraFormState);\n  const ruleForm = useLocalState(rulesFormState);\n\n  const queryClient = useQueryClient();\n\n  const rulesQuery = rulesApi.useRulesQuery();\n\n  const createRuleMutation = rulesApi.useCreateRule(queryClient);\n  const removeRuleMutation = rulesApi.useRemoveRule(queryClient);\n  const activateRuleMutation = rulesApi.useActivateRule();\n\n  const sendLoraDownlinkMutation = useMutation(\n    async () => devicesRequests.sendCommand({\n      command: CHIRP_STACK_COMMANDS.loraAppServerQueueDownlink,\n      integrationName: CHIRP_STACK,\n      iotnodeId: props.deviceItem._id,\n      data: getFormValues(loraForm.formInputs),\n    }),\n    {\n      onError: error => {\n        toast.error(getRequestErrorMessage(error));\n      },\n      onSuccess: () => {\n        toast.success('Successfully sent downlink.');\n        getQueueMutation.mutate();\n        loraForm.resetForm();\n      },\n    }\n  );\n\n  const getQueueMutation = useMutation(\n    async () => devicesRequests.sendCommand<GetQueueResponse>({\n      command: CHIRP_STACK_COMMANDS.loraAppServerGetDeviceQueue,\n      integrationName: CHIRP_STACK,\n      iotnodeId: props.deviceItem._id,\n    }),\n    {\n      onError: error => {\n        toast.error(getRequestErrorMessage(error));\n      }\n    }\n  );\n\n  const flushQueueMutation = useMutation(\n    async () => devicesRequests.sendCommand({\n      command: CHIRP_STACK_COMMANDS.loraAppServerFlushQueue,\n      integrationName: CHIRP_STACK,\n      iotnodeId: props.deviceItem._id,\n    }),\n    {\n      onError: error => {\n        toast.error(getRequestErrorMessage(error));\n      },\n      onSuccess: () => {\n        toast.success('Successfully flushed downlink queue.');\n        getQueueMutation.mutate();\n      },\n    }\n  );\n\n  useEffect(() => {\n    getQueueMutation.mutate();\n  }, []);\n\n  const setupRuleAction = () => {\n    const template = createRuleTemplate({\n      formInputs: ruleForm.formInputs,\n      userId: getUserId(),\n      deviceId: props.deviceItem._id,\n      deviceItem: props.deviceItem,\n    });\n    createRuleMutation.mutate(template);\n    ruleForm.resetForm();\n  };\n\n  const queueItems = getQueueMutation.data?.items;\n\n  return (\n    <>\n      <div>\n        <Heading\n          heading='Send downlink'\n          subHeading='Send downlink messages to the device'\n          margin='0 0 30px 0'\n        />\n        <TextField\n          label={'Data'}\n          additionalInfo={'Hex data to be sent'}\n          name={'data'}\n          isRequired\n          value={loraForm.formInputs.data.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n            loraForm.setInputValue('data', evt.target.value);\n            loraForm.showInputValidation('data');\n          }}\n          validationErrorMessage={\n            loraForm.formInputs.data.value\n              ? getValidationErrorMessage(loraForm.formInputs.data)\n              : null\n          }\n          margin={'0 0 10px 0'}\n        />\n        <TextField\n          label={'FPort'}\n          additionalInfo={'Port field to be used. Must be between 1-223.'}\n          name={'fPort'}\n          isRequired\n          value={loraForm.formInputs.fPort.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n            loraForm.setInputValue('fPort', evt.target.value);\n            loraForm.showInputValidation('fPort');\n          }}\n          validationErrorMessage={\n            loraForm.formInputs.fPort.value\n              ? getValidationErrorMessage(loraForm.formInputs.fPort)\n              : null\n          }\n          margin={'0 0 10px 0'}\n        />\n        <TextField\n          label={'Reference'}\n          additionalInfo='Random reference (used on ack notification)'\n          name={'reference'}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            loraForm.setInputValue('reference', evt.target.value)\n          )}\n          value={loraForm.formInputs.reference.value as string}\n          margin={'0 0 10px 0'}\n        />\n        <SegmentedControl\n          label={'Confirmed'}\n          additionalInfo={'Whether an ACK is required from the node. Default is No.'}\n          options={[\n            {value: true, label: 'Yes'},\n            {value: false, label: 'No'},\n          ]}\n          value={loraForm.formInputs.confirmed.value as string}\n          onChange={(value: boolean) => loraForm.setInputValue('confirmed', value)}\n          height={'30px'}\n          margin={'0 0 30px 0'}\n        />\n        <Button\n          label={'Send downlink'}\n          disabled={!isFormValid(loraForm.formInputs)}\n          onClick={() => sendLoraDownlinkMutation.mutate()}\n          isLoading={sendLoraDownlinkMutation.isLoading}\n          color={'green'}\n          width={'130px'}\n          margin={'0 0 30px 0'}\n        />\n      </div>\n\n      <HorizontalLine />\n\n      <div>\n        <Heading\n          heading='Downlink queue'\n          subHeading='See the queued downlink messages for this device'\n          margin='30px 0 30px 0'\n        />\n        <FlexWrapper>\n          <Button\n            label={'Refresh queue'}\n            onClick={() => getQueueMutation.mutate()}\n            disabled={getQueueMutation.isLoading}\n            ghosted\n            width={'110px'}\n            color={'blue'}\n            margin={'0 8px 0 0'}\n          />\n          <Button\n            label={_.capitalize(props.t('labels.clearQueue'))}\n            onClick={() => flushQueueMutation.mutate()}\n            isLoading={flushQueueMutation.isLoading}\n            ghosted\n            color={'red'}\n          />\n        </FlexWrapper>\n\n        <LoraQueueContainer>\n          {getQueueMutation.isLoading && (\n            <LoraQueueCenterer>\n              <Spinner size={25} color={'#555'} />\n            </LoraQueueCenterer>\n          )}\n          {_.isEmpty(queueItems) && !getQueueMutation.isLoading && (\n            <LoraQueueCenterer>\n              <LoraQueueNoItemsNote>Queue is empty</LoraQueueNoItemsNote>\n            </LoraQueueCenterer>\n          )}\n          {!_.isEmpty(queueItems) && (\n            <LoraQueueTable>\n              <LoraQueueTableHeaderItem>Data</LoraQueueTableHeaderItem>\n              <LoraQueueTableHeaderItem>fPort</LoraQueueTableHeaderItem>\n              <LoraQueueTableHeaderItem>fCount</LoraQueueTableHeaderItem>\n              <LoraQueueTableHeaderItem>Confirmed</LoraQueueTableHeaderItem>\n              {_.map(queueItems, item => (\n                <React.Fragment key={item.fCnt}>\n                  <LoraQueueTableItem>{item.data}</LoraQueueTableItem>\n                  <LoraQueueTableItem>{item.fPort}</LoraQueueTableItem>\n                  <LoraQueueTableItem>{item.fCnt}</LoraQueueTableItem>\n                  <LoraQueueTableItem>{item.confirmed ? 'Yes' : 'No'}</LoraQueueTableItem>\n                </React.Fragment>\n              ))}\n            </LoraQueueTable>\n          )}\n        </LoraQueueContainer>\n\n      </div>\n\n      {/* @ts-ignore not yet typed */}\n      <HorizontalLine margin={'30px 0 20px 0'} />\n\n      <Heading\n        heading='Custom downlink button'\n        subHeading='Once a button has been created, go to the rule engine\n        and edit your downlink'\n        margin='30px 0 30px 0'\n      />\n      <FlexWrapper>\n        <Select\n          width={'250px'}\n          placeholder={_.capitalize(props.t('placeholders.select'))}\n          name={'rulesAction'}\n          options={createRulesActionsOptions(props)}\n          value={ruleForm.formInputs.rulesAction.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            ruleForm.setInputValue('rulesAction', evt.target.value)\n          )}\n        />\n        <Button\n          label={'Create'}\n          disabled={!_.get(ruleForm.formInputs, 'rulesAction.value')}\n          color={'green'}\n          height={'38px'}\n          ghosted\n          width={'80px'}\n          margin={'0 0 0 8px'}\n          onClick={setupRuleAction}\n        />\n      </FlexWrapper>\n      <Rule\n        activateRuleMutation={activateRuleMutation}\n        rules={rulesQuery.data}\n        removeRuleMutation={removeRuleMutation}\n        deviceItem={props.deviceItem}\n      />\n\n    </>\n  );\n};\n\ntype RemoveRule = UseMutationResult<string, unknown, {ruleId: string; actionId: string}, unknown>;\n\ninterface RuleProps {\n  deviceItem: Device;\n  rules?: IdKeyedRules;\n  activateRuleMutation: UseMutationResult<void, unknown, string, unknown>;\n  removeRuleMutation: RemoveRule;\n}\n\nconst Rule = (props: RuleProps) => {\n  const deviceRules = selectRules({rulesActions: props.rules, device: props.deviceItem});\n  const rules = _.map(deviceRules, (rule, ruleId) => {\n    const [event] = props.rules![ruleId].events!;\n    return (\n      <FlexWrapper key={ruleId}>\n        <Button\n          color={'green'}\n          margin={'10px 0 10px'}\n          height={'30px'}\n          width={'150px'}\n          content={RULES_ACTIONS[rule]}\n          onClick={() => {\n            props.activateRuleMutation.mutate(ruleId);\n          }}\n        />\n        <Button\n          color={'red'}\n          ghosted\n          margin={'10px'}\n          height={'30px'}\n          width={'30px'}\n          content={'✖'}\n          onClick={() => {\n            props.removeRuleMutation.mutate({ruleId, actionId: event.action._id});\n          }}\n        />\n      </FlexWrapper>\n    );\n  });\n  return <>{rules}</>;\n};\n\nexport default LoRaControl;\n","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\nimport dynamic from 'next/dynamic';\n\nimport {MAX_COORDINATE_LENGTH} from '../constants';\nimport {\n  MapWrapper,\n} from '../styled';\nimport {positionFormState} from '../state';\nimport {useLocalState} from '../../../hooks';\nimport {FlexWrapper} from '../../../global/styled';\nimport TextField from '../../../components/text-field';\nimport Button from '../../../components/button';\nimport InfoBox from '../../../components/info-box';\n\nconst Map = dynamic(async () => import('../../../components/map'), {ssr: false});\n\nconst PositionSelector = props => {\n  const positionState = useLocalState(positionFormState);\n  const entity = props.device.data;\n\n  const getCoordinates = aEntity => {\n    if (aEntity.latlng) return aEntity.latlng;\n\n    return (\n      (aEntity.lat && aEntity.lng)\n        ? [aEntity.lat, aEntity.lng]\n        : [\n          positionState.formInputs.latitude.value,\n          positionState.formInputs.longitude.value,\n        ]\n    );\n  };\n\n  useEffect(() => {\n    const position = getCoordinates(entity);\n    positionState.populateInputValues({\n      latitude: position[0].toString(), longitude: position[1].toString()\n    });\n  }, []);\n\n  const saveChanges = async () => {\n    const newPosition = [\n      Number(positionState.formInputs.latitude.value),\n      Number(positionState.formInputs.longitude.value),\n    ];\n\n    await props.updateDevice({updates: {latlng: newPosition}});\n    props.device.refetch();\n  };\n\n  const onPositionInputChanged = (key, value) => {\n    const isValidNumber = !Number.isNaN(Number(value)) && value.length <= MAX_COORDINATE_LENGTH;\n    if (value.length === 0 || isValidNumber) {\n      positionState.setInputValue(key, value);\n    }\n  };\n\n  const onCancelClick = () => {\n    positionState.populateInputValues({\n      latitude: entity.latlng[0].toString(), longitude: entity.latlng[1].toString()\n    });\n  };\n\n  return (\n    <>\n      <h4>Set Position</h4>\n      {\n        !positionState.formInputs.latitude.value && !positionState.formInputs.longitude.value &&\n          <InfoBox\n            heading='Info'\n            content=\"Click on the Map to set Device Position\"\n            type='info'\n            width='305px'\n          />\n      }\n      <FlexWrapper style={{width: '500px'}}>\n        <TextField\n          label={'Latitude'}\n          margin={'10px 5px 10px'}\n          width='200px'\n          placeholder={'Latitude...'}\n          name={'latitude'}\n          value={positionState.formInputs.latitude.value}\n          onChange={evt => onPositionInputChanged('latitude', evt.target.value)}\n        />\n        <TextField\n          label={'Longitude'}\n          margin={'10px 5px 10px'}\n          width='200px'\n          placeholder={'Longitude...'}\n          name={'longitude'}\n          value={positionState.formInputs.longitude.value}\n          onChange={evt => onPositionInputChanged('longitude', evt.target.value)}\n        />\n      </FlexWrapper>\n      <MapWrapper>\n        <Map\n          // @ts-ignore - seem to bug the ts-compiler for some unknown reason\n          viewOnly\n          showGetLocation\n          router={props.router}\n          height={'50vh'}\n          width={'100%'}\n          mapLayers={{\n            devices: {\n              _id: 'devices',\n              items: [{\n                latlng: [\n                  Number(positionState.formInputs.latitude.value),\n                  Number(positionState.formInputs.longitude.value)\n                ],\n                alone: true\n              }],\n              URI: 'devices',\n              markerShape: 'round',\n            }\n          }}\n          onClick={evt => positionState.populateInputValues({\n            latitude: evt.latlng.lat.toString(), longitude: evt.latlng.lng.toString()\n          })}\n        />\n      </MapWrapper>\n      <FlexWrapper style={{width: '500px'}}>\n        <Button\n          color={'green'}\n          content={'Set'}\n          onClick={saveChanges}\n        />\n        <Button\n          color={'grey'}\n          margin={'0px 10px'}\n          content={'Cancel'}\n          onClick={onCancelClick}\n          disabled={!entity.latlng}\n        />\n      </FlexWrapper>\n    </>\n\n  );\n};\n\nPositionSelector.propTypes = exact({\n  device: PropTypes.object,\n  t: PropTypes.func,\n  updateDevice: PropTypes.func,\n});\n\nexport default PositionSelector;\n","import React, {useState} from 'react';\nimport {useQueryClient, useMutation} from 'react-query';\nimport {Icon} from 'react-icons-kit';\nimport {ic_info_outline as infoIcon} from 'react-icons-kit/md/ic_info_outline';\nimport toast from 'react-hot-toast';\n\n// Logic\nimport {isFormValid} from '../../../utils/form-wizard';\nimport {devicesRequests} from '../../../api';\nimport {Device} from '../../../types';\nimport {getRequestErrorMessage} from '../../../utils';\n\n// UI\nimport NumberField from '../../../components/number-field';\nimport Button from '../../../components/button';\nimport {FlexWrapper} from '../../../global/styled';\nimport {useLocalState} from '../../../hooks';\nimport {reportIntervalData} from '../state';\nimport {convertMillisecondsToHoursMinutesSeconds} from '../utils';\nimport {ReportIntervalNote} from '../styled';\n\ninterface Props {\n  deviceItem: Device;\n}\n\nconst ReportInterval = (props: Props) => {\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  const updateDeviceMutation = useMutation(\n    async (expectedReportInterval: number) => devicesRequests.update({\n      deviceId: props.deviceItem._id,\n      updates: {expectedReportInterval}\n    }),\n    {\n      onSuccess: async () => {\n        await queryClient.invalidateQueries('devices');\n        await queryClient.invalidateQueries('device');\n        toast.success('Report interval successfully set');\n      },\n      onError: error => {\n        toast.error(getRequestErrorMessage(error), {duration: 7000});\n      },\n      onSettled: () => {\n        setIsEditing(false);\n      }\n    }\n  );\n\n  const form = useLocalState(reportIntervalData);\n\n  const setReportInterval = () => {\n    const {formInputs} = form;\n    const seconds = formInputs.seconds.value as number;\n    const minutes = formInputs.minutes.value as number;\n    const hours = formInputs.hours.value as number;\n    const expectedReportInterval = (seconds * 1000) + (minutes * 60000) + (hours * 3600000);\n    updateDeviceMutation.mutate(expectedReportInterval);\n  };\n\n  const {hours, minutes, seconds} = convertMillisecondsToHoursMinutesSeconds(\n    props.deviceItem.expectedReportInterval\n  );\n\n  return (\n    <>\n      <FlexWrapper>\n        <Icon icon={infoIcon as object} size={19} style={{margin: '7px 5px 0 0'}} />\n        <ReportIntervalNote>\n          Set how often you expect this device to send a report.&nbsp;\n          You can use the rule engine to set up rules that trigger when&nbsp;\n          adevice has been silent for to long.\n        </ReportIntervalNote>\n      </FlexWrapper>\n\n      <FlexWrapper>\n        <NumberField\n          name={'hours'}\n          label={'Hours'}\n          value={isEditing ? form.formInputs.hours.value as number : hours}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => form.setInputValue('hours', evt.target.value)}\n          width={'100px'}\n          margin={'0 10px 0 0'}\n          isDisabled={!isEditing}\n        />\n        <NumberField\n          name={'minutes'}\n          min={'0'}\n          max={'59'}\n          label='Minutes'\n          value={isEditing ? form.formInputs.minutes.value as number : minutes}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => form.setInputValue('minutes', evt.target.value)}\n          width={'100px'}\n          margin={'0 10px 0 0'}\n          isDisabled={!isEditing}\n        />\n        <NumberField\n          name={'seconds'}\n          label={'Seconds'}\n          min={'0'}\n          max={'59'}\n          value={isEditing ? form.formInputs.seconds.value as number : seconds}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => form.setInputValue('seconds', evt.target.value)}\n          width={'100px'}\n          isDisabled={!isEditing}\n        />\n      </FlexWrapper>\n\n      {!isEditing && (\n        <FlexWrapper>\n          <Button\n            label={'Edit'}\n            color={'blue'}\n            ghosted\n            width={'80px'}\n            margin={'14px 8px 10px 0'}\n            onClick={() => {\n              form.setInputValue('hours', hours);\n              form.setInputValue('minutes', minutes);\n              form.setInputValue('seconds', seconds);\n              setIsEditing(true);\n            }}\n          />\n        </FlexWrapper>\n      )}\n\n      {isEditing && (\n        <FlexWrapper>\n          <Button\n            label={'Cancel'}\n            width={'90px'}\n            margin={'14px 8px 10px 0'}\n            onClick={() => {\n              setIsEditing(false);\n            }}\n          />\n          <Button\n            label={'Set'}\n            color={'green'}\n            width={'90px'}\n            margin={'14px 0 0 0'}\n            isLoading={updateDeviceMutation.isLoading}\n            disabled={!isFormValid(form.formInputs)}\n            onClick={() => {\n              setReportInterval();\n            }}\n          />\n        </FlexWrapper>\n      )}\n\n    </>\n  );\n};\n\nexport default ReportInterval;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\nimport _ from 'lodash';\nimport {Icon} from 'react-icons-kit';\nimport {ic_arrow_back as backIcon} from 'react-icons-kit/md/ic_arrow_back';\n\nimport {\n  SidebarTopSection,\n  BackButton,\n  BackButtonText,\n  SidebarInfoSection,\n  SidebarDeviceNameHeading,\n  SidebarDeviceName,\n  SidebarInfoRow,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuItemLeftSection,\n  SidebarMenuItemTitle,\n  SidebarMenuItemIconWrapper,\n  SidebarMenuItemNumberChip,\n} from '../styled';\nimport {Modal} from '../../../components/modal';\nimport {StatusPopup} from '../../../yggio-managers/device-manager/sub-components';\nimport {SmallStatusChip, StatusChipIcon} from '../../../yggio-managers/device-manager/styled';\nimport {getTabItems} from '../utils';\nimport {Sidebar as SidebarContainer} from '../../../components/sidebar-components';\nimport {resolveDeviceType, formatTimeSinceLastReported} from '../../../utils';\n\nconst DetailsSidebar = props => {\n\n  const tabItems = getTabItems(props.deviceItem, props.hasRecConnector);\n\n  return (\n    <SidebarContainer\n      isSidebarOpen={props.isSidebarOpen}\n      closeSidebar={props.closeSidebar}\n      openSidebar={props.openSidebar}\n      siblingWidth={900}\n      isUsingNavbar\n    >\n      <SidebarTopSection>\n        <BackButton onClick={() => props.router.push('/devices')}>\n          <Icon icon={backIcon} size={14} />\n          <BackButtonText>\n            {_.capitalize(props.t('labels.backToDeviceList'))}\n          </BackButtonText>\n        </BackButton>\n      </SidebarTopSection>\n\n      <SidebarInfoSection>\n        <SidebarDeviceNameHeading>\n          {_.capitalize(props.t('common.device'))}:\n        </SidebarDeviceNameHeading>\n        <SidebarDeviceName>\n          {_.get(props, 'deviceItem.name') || 'no-name'}\n        </SidebarDeviceName>\n        <SidebarInfoRow>\n          <div>{_.capitalize(props.t('common.type'))}:</div>\n          <div>{resolveDeviceType(props.deviceItem)}</div>\n        </SidebarInfoRow>\n        <SidebarInfoRow>\n          <div>{_.capitalize(props.t('common.lastReported'))}:</div>\n          <div>\n            {formatTimeSinceLastReported(_.get(props, 'deviceItem.reportedAt'))}\n          </div>\n        </SidebarInfoRow>\n        <SidebarInfoRow>\n          <div>{_.capitalize(props.t('common.status'))}:</div>\n          {\n            _.size(props.status.items)\n              ? (\n                <SmallStatusChip\n                  type={props.status.worstStatusType}\n                  onClick={() => props.statusModal.open()}\n                >\n                  <StatusChipIcon type={props.status.worstStatusType} />\n                  {_.size(props.status.items)}\n                </SmallStatusChip>\n              ) : <p>-</p>\n          }\n        </SidebarInfoRow>\n        <Modal\n          isOpen={props.statusModal.isOpen}\n          close={props.statusModal.close}\n          padding={'25px'}\n        >\n          <StatusPopup\n            title={'Device status'}\n            items={props.status.items}\n            onClose={props.statusModal.close}\n          />\n        </Modal>\n      </SidebarInfoSection>\n\n      <SidebarMenu>\n        {_.map(tabItems, item => (\n          <SidebarMenuItem\n            active={item.name === props.tabId}\n            onClick={() => props.router.push(`/devices/${props.deviceId}/${item.name}`)}\n            key={item.name}\n          >\n            <SidebarMenuItemLeftSection>\n              <SidebarMenuItemIconWrapper\n                topPosition={item.icon.topPosition}\n                active={item.name === props.tabId}\n              >\n                <Icon icon={item.icon.file} size={item.icon.size} />\n              </SidebarMenuItemIconWrapper>\n              <SidebarMenuItemTitle active={item.name === props.tabId}>\n                {_.capitalize(props.t(`titles.${item.name}`))}\n              </SidebarMenuItemTitle>\n            </SidebarMenuItemLeftSection>\n            <SidebarMenuItemNumberChip\n              hidden={_.isNil(props.numItems[item.name])}\n              active={item.name === props.tabId}\n            >\n              {props.numItems[item.name]}\n            </SidebarMenuItemNumberChip>\n          </SidebarMenuItem>\n        ))}\n      </SidebarMenu>\n\n    </SidebarContainer>\n  );\n};\n\nDetailsSidebar.propTypes = exact({\n  router: PropTypes.object.isRequired,\n  deviceItem: PropTypes.object,\n  handleDeviceRemoval: PropTypes.func,\n  tabId: PropTypes.string,\n  isSidebarOpen: PropTypes.bool,\n  closeSidebar: PropTypes.func,\n  openSidebar: PropTypes.func,\n  numItems: PropTypes.object,\n  siblingWidth: PropTypes.number,\n  deviceId: PropTypes.string,\n  t: PropTypes.func,\n  status: PropTypes.object,\n  statusModal: PropTypes.object,\n  hasRecConnector: PropTypes.bool,\n});\n\nexport default DetailsSidebar;\n","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\n\nimport {\n  InfoItem,\n  InfoItemTop,\n  InfoItemTitle,\n  InfoItemMiddle,\n  SpecSection,\n  SpecHeading,\n  NoDataBox,\n} from '../styled';\nimport {selectSpecifications} from '../selectors';\n\nconst Specifications = props => {\n  const specifications = selectSpecifications({device: props.device, t: props.t});\n\n  if (_.size(specifications) === 0) {\n    return (\n      <NoDataBox>The device has no specifications</NoDataBox>\n    );\n  }\n  return (\n    <>\n      {_.map(specifications, (items, sectionName) => (\n        <SpecSection key={sectionName}>\n          <SpecHeading><p>{sectionName}</p></SpecHeading>\n          {_.map(items, (itemValue, itemKey) => (\n            <InfoItem key={itemKey}>\n              <InfoItemTop>\n                <InfoItemTitle>{itemKey}</InfoItemTitle>\n              </InfoItemTop>\n              <InfoItemMiddle>\n                <p>{itemValue || '-'}</p>\n              </InfoItemMiddle>\n            </InfoItem>\n          ))}\n        </SpecSection>\n      ))}\n    </>\n  );\n};\n\nSpecifications.propTypes = exact({\n  device: PropTypes.object,\n  t: PropTypes.func,\n});\n\nexport default Specifications;\n","import React from 'react';\nimport {formatDistance, parseISO} from 'date-fns';\nimport {useQueryClient, useMutation} from 'react-query';\nimport toast from 'react-hot-toast';\n\nimport {Device} from '../../../types';\nimport Button from '../../../components/button';\nimport {ToolsContainer, NoDataBox} from '../styled';\nimport {getRequestErrorMessage} from '../../../utils';\nimport {canBeSynchronized} from '../utils';\nimport {devicesRequests} from '../../../api';\n\ninterface Props {\n  deviceItem: Device;\n}\n\nconst Tools = (props: Props) => {\n\n  const queryClient = useQueryClient();\n\n  const commandDeviceMutation = useMutation(\n    async () => devicesRequests.sendCommand({\n      command: 'synchronize',\n      iotnodeId: props.deviceItem._id,\n    }),\n    {\n      onSuccess: async () => {\n        await queryClient.invalidateQueries('devices');\n        await queryClient.invalidateQueries('device');\n        toast.success('Device syncronized successfully');\n      },\n      onError: error => {\n        toast.error(getRequestErrorMessage(error), {duration: 7000});\n      },\n    }\n  );\n\n  if (!canBeSynchronized(props.deviceItem)) {\n    return <NoDataBox>No tools available</NoDataBox>;\n  }\n\n  return (\n    <ToolsContainer>\n      <h4>Synchronization</h4>\n      <p>Synchronize device to force contact with its integration</p>\n\n      <Button\n        color={'blue'}\n        margin={'20px 0 8px'}\n        height={'30px'}\n        content={'Synchronize'}\n        onClick={() => {\n          commandDeviceMutation.mutate();\n        }}\n        isLoading={commandDeviceMutation.isLoading}\n      />\n      <p>\n        Last synchronization:\n        <b>\n          {props.deviceItem.synchronizedAt\n            ? ` ${formatDistance(new Date(), parseISO(props.deviceItem.synchronizedAt))} ago`\n            : ' never'}\n        </b>\n      </p>\n    </ToolsContainer>\n  );\n};\n\nexport default Tools;\n","import React, {useState} from 'react';\nimport _ from 'lodash';\n\nimport {\n  InfoItem,\n  InfoItemTop,\n  InfoItemTitle,\n  InfoItemMiddle,\n  TableContainer,\n  TableItem,\n  ItemContainer,\n  LastTableItem,\n  FirstItemContainer,\n  TitleContainer,\n  TableTitle,\n} from '../styled';\nimport InfoBox from '../../../components/info-box';\nimport TranslatorSelector from '../../../components/translator-selector';\nimport Button from '../../../components/button';\nimport {useLocalState} from '../../../hooks';\nimport {translatorsApi} from '../../../api';\nimport {translatorFormState} from '../state';\n\nconst Translators = props => {\n  const translators = translatorsApi.useTranslatorsQuery();\n  const translatorForm = useLocalState(translatorFormState);\n  const [isSelectorOpen, setSelectorOpen] = useState(false);\n\n  const IsTableOpen = isSelectorOpen ? 'none' : 'block';\n  const IsTransSelectorOpen = !isSelectorOpen ? 'none' : 'block';\n\n  return (\n    <>\n      <InfoItem>\n        <div>{props.t('phrases.translatorSelectorExplanation')}</div>\n      </InfoItem>\n      {!props.deviceItem.deviceModelName && (\n        <InfoBox\n          heading={'No device model name selected'}\n          type={'info'}\n        />\n      )}\n      {props.deviceItem.deviceModelName && (\n        <>\n          {(translators.isSuccess && _.isEmpty(translators.data)) && (\n            <InfoItem>\n              <InfoItemTop>\n                <InfoItemTitle>{_.capitalize(props.t('titles.translators'))}</InfoItemTitle>\n              </InfoItemTop>\n              <InfoItemMiddle>\n                <InfoBox\n                  heading={'No translator available for selected device model'}\n                  type='neutral'\n                />\n              </InfoItemMiddle>\n            </InfoItem>\n          )}\n          {(translators.isSuccess && !_.isEmpty(translators.data)) && (\n            <>\n              <div style={{display: IsTableOpen}}>\n                {\n                  props.deviceItem.addedTranslators &&\n                    props.deviceItem.addedTranslators.length === 0 && (\n                      <InfoItem>\n                        <InfoItemMiddle>\n                          <InfoBox\n                            heading={'No translator selected'}\n                            type='neutral'\n                          />\n                        </InfoItemMiddle>\n                      </InfoItem>\n                  )\n                }\n                {\n                  props.deviceItem.addedTranslators &&\n                    props.deviceItem.addedTranslators.length >= 1 && (\n                      <TitleContainer>\n                        <TableTitle>\n                          Translator name:\n                        </TableTitle>\n                        <TableTitle>\n                          Author:\n                        </TableTitle>\n                        <TableTitle>\n                          Version:\n                        </TableTitle>\n                        <TableTitle>\n                          Update Interval:\n                        </TableTitle>\n                      </TitleContainer>\n                  )\n                }\n                {_.map(props.deviceItem.addedTranslators, (translator, index) => (\n                  <TableContainer key={index}>\n                    <TableItem>\n                      <FirstItemContainer>\n                        {index + 1}\n                      </FirstItemContainer>\n                    </TableItem>\n                    <TableItem>\n                      <ItemContainer>\n                        {translator.name}\n                      </ItemContainer>\n                    </TableItem>\n                    <TableItem>\n                      <ItemContainer>\n                        {translator.username}\n                      </ItemContainer>\n                    </TableItem>\n                    <TableItem>\n                      <ItemContainer>\n                        {translator.selectedVersion}\n                      </ItemContainer>\n                    </TableItem>\n                    <LastTableItem>\n                      <ItemContainer>\n                        {translator.updateOption}\n                      </ItemContainer>\n                    </LastTableItem>\n                  </TableContainer>\n                ))}\n                <Button\n                  label={_.capitalize(props.t('labels.edit'))}\n                  color={'green'}\n                  height={'32px'}\n                  width={'90px'}\n                  margin={'10px 5px 0 0'}\n                  onClick={() => {\n                    setSelectorOpen(true);\n                  }}\n                />\n              </div>\n              <div style={{display: IsTransSelectorOpen}}>\n                <TitleContainer>\n                  <TableTitle>\n                    Translator name:\n                  </TableTitle>\n                  <TableTitle>\n                    Author:\n                  </TableTitle>\n                  <TableTitle>\n                    Version:\n                  </TableTitle>\n                  <TableTitle>\n                    Update Interval:\n                  </TableTitle>\n                </TitleContainer>\n                <TranslatorSelector\n                  initialTranslators={props.deviceItem.addedTranslators}\n                  shouldAddDefaultTranslator={false}\n                  style={{marginBottom: '50px'}}\n                  availableTranslators={translators.data}\n                  onChange={addedTranslators => {\n                    translatorForm.setInputValue('translators', addedTranslators);\n                  }}\n                />\n                <div style={{display: 'flex', marginTop: '20px'}}>\n                  <Button\n                    label={_.capitalize(props.t('labels.save'))}\n                    color={'green'}\n                    height={'32px'}\n                    width={'90px'}\n                    margin={'0 5px 0 0'}\n                    isLoading={translators.isLoading}\n                    onClick={() => {\n                      props.updateDeviceMutation.mutate({\n                        updates: {addedTranslators: translatorForm.formInputs.translators.value},\n                        deviceId: props.deviceItem._id,\n                      });\n                      setSelectorOpen(false);\n                    }}\n                  />\n                  <Button\n                    label={_.capitalize(props.t('labels.cancel'))}\n                    height={'32px'}\n                    width={'90px'}\n                    onClick={() => {\n                      setSelectorOpen(false);\n                    }}\n                  />\n                </div>\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Translators;\n","import _ from 'lodash';\n\nimport {\n  formatDistance,\n  parseISO,\n  isValid,\n  millisecondsToHours,\n  millisecondsToMinutes,\n  millisecondsToSeconds,\n  hoursToMilliseconds,\n  minutesToMilliseconds,\n} from 'date-fns';\nimport {\n  RIGHT_TYPES,\n  SPECIFIC_TAB_ITEMS,\n  TAB_ITEMS,\n  RULES_ACTIONS_OPTIONS,\n  SPECIFIC_TAB_KEYS,\n  REAL_ESTATE_CORE_TAB_ITEM,\n} from './constants';\nimport {resolveDeviceType} from '../../utils';\nimport {DEVICE_TYPES, CALCULATIONS_TYPES} from '../../constants';\n\n// TODO: This is wierd and needs a refactor\nconst getTabItems = (device, hasRecConnector) => {\n  const general = _.values(TAB_ITEMS);\n\n  const deviceType = resolveDeviceType(device);\n  const types = deviceType.split(',');\n  const currentType = _.pick(SPECIFIC_TAB_KEYS, types);\n  const [specificType] = _.values(currentType);\n  const specific = _.values(SPECIFIC_TAB_ITEMS[specificType] || []);\n\n  const realEstateCore = hasRecConnector ? [REAL_ESTATE_CORE_TAB_ITEM] : [];\n\n  const tabItems = _.concat(general, specific, realEstateCore);\n  return tabItems;\n};\n\nconst createRightsList = rights => {\n  return _.reduce(RIGHT_TYPES, (acc, type) => {\n    const right = _.find(rights, right => _.eq(right, type));\n    acc[type] = !!right;\n    return acc;\n  }, {});\n};\n\nconst createValidDate = date => {\n  const validDate = parseISO(date);\n  if (isValid(validDate)) {\n    return formatDistance(new Date(), validDate);\n  }\n  return date;\n};\n\nconst getNumDecimals = deviceStats => {\n  let maxValue = -Infinity;\n  _.forEach(deviceStats, device => {\n    if (_.isNull(device.value)) return;\n    if (Math.abs(device.value) > maxValue) maxValue = Math.abs(device.value);\n  });\n  if (maxValue === 0) return 2;\n  // ex: ..., 1000 => 0, 100 => 0, 10 => 1, 1 => 2, 0.1 => 3, 0.01 => 4, ...\n  return Math.max(0, 2 - Math.floor(Math.log10(Math.abs(maxValue))));\n};\n\nconst convertMillisecondsToHoursMinutesSeconds = milliseconds => {\n  const hours = millisecondsToHours(milliseconds);\n  const hoursInMilliseconds = hoursToMilliseconds(hours);\n\n  const minutes = millisecondsToMinutes(milliseconds - hoursInMilliseconds);\n  const minutesInMilliseconds = minutesToMilliseconds(minutes);\n\n  const seconds = millisecondsToSeconds(milliseconds - hoursInMilliseconds - minutesInMilliseconds);\n\n  return {\n    hours,\n    minutes,\n    seconds,\n  };\n};\n\nconst canBeSynchronized = device => {\n  const hasConnector = !!device.connector;\n  const isConnector = !!device.downlinkQueue;\n  return hasConnector || isConnector;\n};\n\nconst determineActionType = props => {\n  const deviceType = resolveDeviceType(props.deviceItem);\n  const deviceTypes = _.split(deviceType, ',');\n  if (_.includes(deviceTypes, DEVICE_TYPES.lora)) {\n    return 'LoraDeviceAction';\n  }\n\n  // TODO: In the future we will add Z-wave support\n  // if (_.includes(deviceTypes, DEVICE_TYPES.zWave)) {\n  //   return 'ZWaveDeviceAction';\n  // }\n};\nconst determineGroupName = props => {\n  const deviceType = resolveDeviceType(props.deviceItem);\n  const deviceTypes = _.split(deviceType, ',');\n  if (_.includes(deviceTypes, DEVICE_TYPES.lora)) {\n    return 'LoRa Enhet';\n  }\n\n  // TODO: In the future we will add Z-wave support\n  // if (_.includes(deviceTypes, DEVICE_TYPES.zWave)) {\n  //   return 'ZWave Enhet';\n  // }\n};\n\nconst determineMessageTemplate = props => {\n  const deviceType = resolveDeviceType(props.deviceItem);\n  const deviceTypes = _.split(deviceType, ',');\n  if (_.includes(deviceTypes, DEVICE_TYPES.lora)) {\n    return {\n      confirmed: false,\n      fPort: '123',\n      data: '123',\n      reference: '',\n    };\n  }\n\n  // TODO: In the future we will add Z-wave support\n  // if (_.includes(deviceTypes, DEVICE_TYPES.zWave)) {\n  //   return {\n  //     act: \"set\",\n  //     cc: \"bswitch\",\n  //     value: 0,\n  //   };\n  // }\n};\n\nconst createRuleTemplate = props => {\n  const {formInputs} = props;\n  const template = {\n    rule: {\n      name: `${_.get(formInputs, 'rulesAction.value')}.${props.deviceId}.${props.deviceItem.name}`,\n      triggers: [],\n      owner: props.userId,\n    },\n    action: {\n      name: `${_.get(formInputs, 'rulesAction.value')}.${props.deviceId}.${props.deviceItem.name}`,\n      owner: props.userId,\n      groupName: determineGroupName(props),\n      message: determineMessageTemplate(props),\n      actionType: determineActionType(props),\n    },\n  };\n  return template;\n};\n\nconst createRulesActionsOptions = props => {\n  const options = _.filter(RULES_ACTIONS_OPTIONS, option => {\n    if (!_.includes(_.values(props.rules), option.value)) {\n      return option;\n    }\n  });\n  return options;\n};\n\nconst createSeekCalculationDevices = ({\n  calculations,\n  selectedCalculation,\n  calculatedValues,\n}) => {\n  const currentCalculation = _.get(calculations, selectedCalculation);\n  const calculationTypes = [\n    CALCULATIONS_TYPES.monthlyDiffFromTotalEachNode,\n    CALCULATIONS_TYPES.monthlySumPerEachNode,\n    CALCULATIONS_TYPES.sumEachNode,\n    CALCULATIONS_TYPES.averageEachNode,\n    CALCULATIONS_TYPES.monthlyDiffFromTotal,\n  ];\n  const isValidCalculationType = _.includes(calculationTypes, _.get(currentCalculation, 'type'));\n  if (isValidCalculationType) {\n    const values = _.omit(calculatedValues, 'id');\n    const idOmittedValues = _.omit(values.data, 'id');\n    const deviceItems = _.flow([\n      _.keys,\n      _.flatten,\n    ])(idOmittedValues);\n    if (_.size(deviceItems)) {\n      return deviceItems;\n    }\n  }\n  return [];\n};\n\nexport {\n  getTabItems,\n  createRightsList,\n  createValidDate,\n  getNumDecimals,\n  convertMillisecondsToHoursMinutesSeconds,\n  canBeSynchronized,\n  createRuleTemplate,\n  createRulesActionsOptions,\n  createSeekCalculationDevices,\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"// image-uploader.stories.js\\n\\nimport React from 'react';\\nimport {storiesOf} from '@storybook/react';\\n\\nimport ImageUploader, {BasicImageUploader} from './index';\\n\\nstoriesOf('Yggio/Image Uploader/Basic Image Uploader', module)\\n\\n  .add('default', () => {\\n    const props = {\\n      // from top\\n      nameSpace: 'blueprints',\\n      // from yggio\\n      uploadImage: image => console.info('uploadImage', {image}),\\n      // from state\\n      imageItems: [],\\n      errorItems: [],\\n      addImageFiles: files => console.info('addImageFiles', {files}),\\n      addFileErrors: errors => console.info('addFileErrors', {errors}),\\n      removeImageItem: imageItem => console.info('removeImageItem', {imageItem}),\\n    };\\n    return (\\n      <BasicImageUploader {...props} />\\n    );\\n  });\\n\\nstoriesOf('Yggio/Image Uploader/Main Export', module)\\n\\n  .add('default', () => {\\n    const props = {\\n      // from top\\n      nameSpace: 'blueprints',\\n      // from yggio\\n      uploadImage: image => console.info('uploadImage', {image}),\\n    };\\n    return (\\n      <ImageUploader {...props} />\\n    );\\n  });\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"default\":{\"startLoc\":{\"col\":7,\"line\":30},\"endLoc\":{\"col\":3,\"line\":40},\"startBody\":{\"col\":18,\"line\":30},\"endBody\":{\"col\":3,\"line\":40}}};\n    \n// image-uploader.stories.js\n\nimport React from 'react';\nimport {storiesOf} from '@storybook/react';\n\nimport ImageUploader, {BasicImageUploader} from './index';\n\nstoriesOf('Yggio/Image Uploader/Basic Image Uploader', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n\n  .add('default', () => {\n    const props = {\n      // from top\n      nameSpace: 'blueprints',\n      // from yggio\n      uploadImage: image => console.info('uploadImage', {image}),\n      // from state\n      imageItems: [],\n      errorItems: [],\n      addImageFiles: files => console.info('addImageFiles', {files}),\n      addFileErrors: errors => console.info('addFileErrors', {errors}),\n      removeImageItem: imageItem => console.info('removeImageItem', {imageItem}),\n    };\n    return (\n      <BasicImageUploader {...props} />\n    );\n  });\n\nstoriesOf('Yggio/Image Uploader/Main Export', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n\n  .add('default', () => {\n    const props = {\n      // from top\n      nameSpace: 'blueprints',\n      // from yggio\n      uploadImage: image => console.info('uploadImage', {image}),\n    };\n    return (\n      <ImageUploader {...props} />\n    );\n  });\n","// image-uploader/index.ts\n\nimport React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport {compose} from 'lodash/fp';\n\nimport {withYggio} from '../../yggio-context';\nimport {withState} from '../../hocs';\nimport state from './state';\n\nimport {IMAGE_NAME_SPACES} from '../../constants';\n\nimport {\n  Dropzone,\n  ImageItem,\n} from './sub-components';\n\nimport {FlexColMaxWidthWrapper} from '../../global/styled';\nimport {ImageUploaderWrapper} from './styled';\n\n\n// ////\n// BasicImageUploader\n// ////\n\nconst BasicImageUploader = props => {\n  // console.log('BasicImageUploader', {props});\n  return (\n    <ImageUploaderWrapper>\n\n      <FlexColMaxWidthWrapper>\n        <Dropzone\n          onDropAccepted={props.addImageFiles}\n          onDropRejected={props.addFileErrors}\n        />\n      </FlexColMaxWidthWrapper>\n\n      <div style={{\n        display: 'flex',\n        width: '100%',\n      }}\n      >\n        {_.map(props.imageItems, imageItem => {\n          return (\n            <ImageItem\n              key={imageItem.url || imageItem.file.name}\n              nameSpace={props.nameSpace}\n              imageItem={imageItem}\n              removeImageItem={props.removeImageItem}\n              uploadImage={props.uploadImage}\n            />\n          );\n        })}\n      </div>\n\n    </ImageUploaderWrapper>\n  );\n};\n\n\nBasicImageUploader.propTypes = {\n  // from top\n  nameSpace: PropTypes.oneOf(_.values(IMAGE_NAME_SPACES)).isRequired,\n  // from yggio\n  uploadImage: PropTypes.func.isRequired,\n  // from state\n  imageItems: PropTypes.array.isRequired,\n  errorItems: PropTypes.array.isRequired,\n  addImageFiles: PropTypes.func.isRequired,\n  addFileErrors: PropTypes.func.isRequired,\n  removeImageItem: PropTypes.func.isRequired,\n};\n\n\n// ////\n// RawImageUploader - state & processing\n// ////\n\nconst RawImageUploader = compose(\n  withState(state),\n)(BasicImageUploader);\n\nRawImageUploader.propTypes = {\n  // from top\n  nameSpace: PropTypes.oneOf(_.values(IMAGE_NAME_SPACES)).isRequired,\n  // from yggio\n  uploadImage: PropTypes.func.isRequired,\n};\n\n\n// ////\n// ImageUploader - fully yggio connected\n// ////\n\nconst yggio = {\n  mapYggioActionsToProps: yggioActions => ({\n    uploadImage: yggioActions.database.images.uploadImage,\n  }),\n};\n\nconst ImageUploader = compose(\n  withYggio(yggio),\n)(RawImageUploader);\n\nImageUploader.propTypes = {\n  // from top\n  nameSpace: PropTypes.oneOf(_.values(IMAGE_NAME_SPACES)).isRequired,\n};\n\n// ////\n// exports\n// ////\n\nexport default ImageUploader;\nexport {\n  BasicImageUploader,\n};\n","// image-uploader/state.js\n\nimport _ from 'lodash';\n\nconst ACTION_TYPES = {\n  imageItemsAdd: 'imageItemsAdd',\n  imageItemRemove: 'imageItemRemove',\n  imageErrorsAdd: 'imageErrorsAdd',\n  imageErrorsRemove: 'imageErrorsRemove',\n  // imageSelect: 'imageSelect',\n  // imageReset: 'imageReset',\n  // imagePreview: 'imagePreview',\n  // imageSetUploading: 'imageSetUploading',\n  // imageSetName: 'imageSetName',\n};\n\n\nconst internalActions = {\n\n  addImageItems: imageItems => ({\n    type: ACTION_TYPES.imageItemsAdd,\n    payload: {imageItems},\n  }),\n\n  removeImageItem: imageItem => ({\n    type: ACTION_TYPES.imageItemRemove,\n    payload: {imageItem},\n  }),\n\n  addErrorItems: errorItems => ({\n    type: ACTION_TYPES.imageErrorsAdd,\n    payload: {errorItems},\n  }),\n\n  removeErrorItems: numErrorItems => ({\n    type: ACTION_TYPES.imageErrorsRemove,\n    payload: {numErrorItems},\n  }),\n\n};\n\nconst actions = {\n\n  addImageFiles: files => dispatch => {\n    const imageItems = _.map(files, file => {\n      const imageItem = {\n        file,\n        // URL is part official WebAPI specification\n        url: URL.createObjectURL(file),\n      };\n      return imageItem;\n    });\n    dispatch(internalActions.addImageItems(imageItems));\n  },\n\n  removeImageItem: internalActions.removeImageItem,\n\n  addFileErrors: fileErrors => dispatch => {\n    const errorItems = _.map(fileErrors, fileError => {\n      return _.get(fileError, 'message', 'No message found');\n    });\n    dispatch(internalActions.addErrorItems(errorItems));\n    setTimeout(() => {\n      dispatch(internalActions.removeErrorItems(errorItems.length));\n    }, 2000);\n  },\n\n};\n\n\n// const dummyImageItem = {\n//   file: {\n//     lastModified: 1604841409927,\n//     lastModifiedDate: new Date('Sun Nov 08 2020 14:16:49 GMT+0100'),\n//     name: \"apple.png\",\n//     path: \"apple.png\",\n//     size: 5129,\n//     type: \"image/png\",\n//     webkitRelativePath: \"\",\n//   },\n//   url: \"blob:http://localhost:3001/b52344ba-de2c-48f5-ba08-06b9515f6290\",\n// };\n\nconst defaultState = {\n  imageItems: [],\n  errorItems: [],\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.imageItemsAdd: {\n      const {imageItems} = payload;\n      const nextState = {\n        ...state,\n        imageItems: _.concat(state.imageItems, imageItems),\n      };\n      return nextState;\n    }\n\n    case ACTION_TYPES.imageItemRemove: {\n      const {imageItem} = payload;\n      const nextState = {\n        ...state,\n        imageItems: _.without(state.imageItems, imageItem),\n      };\n      return nextState;\n    }\n\n    case ACTION_TYPES.imageErrorsAdd: {\n      const {errorItems} = payload;\n      const nextState = {\n        ...state,\n        errorItems: _.concat(state.errorItems, errorItems),\n      };\n      return nextState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","// image-uploader/styled.js\n\nimport styled from 'styled-components';\n\nconst ImageUploaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport {\n  ImageUploaderWrapper,\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"// dropzone.stories.js\\n\\nimport React from 'react';\\nimport {storiesOf} from '@storybook/react';\\n\\nimport Dropzone, {BasicDropzone} from './index';\\n\\nstoriesOf('Yggio/Image Uploader/Basic Dropzone', module)\\n\\n  .add('default', () => {\\n    const props = {\\n      // from top\\n      onDropAccepted: files => console.info('onDropAccepted', {files}),\\n      onDropRejected: fileErrors => console.info('onDropRejected', {fileErrors}),\\n      // from state\\n      isDragging: false,\\n      setDragging: isDragging => console.info('setDragging', {isDragging}),\\n    };\\n    return (\\n      <BasicDropzone {...props} />\\n    );\\n  });\\n\\nstoriesOf('Yggio/Image Uploader/Dropzone', module)\\n\\n  .add('default', () => {\\n    const props = {\\n      // from top\\n      onDropAccepted: files => console.info('onDropAccepted', {files}),\\n      onDropRejected: fileErrors => console.info('onDropRejected', {fileErrors}),\\n    };\\n    return (\\n      <Dropzone {...props} />\\n    );\\n  });\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"default\":{\"startLoc\":{\"col\":7,\"line\":26},\"endLoc\":{\"col\":3,\"line\":35},\"startBody\":{\"col\":18,\"line\":26},\"endBody\":{\"col\":3,\"line\":35}}};\n    \n// dropzone.stories.js\n\nimport React from 'react';\nimport {storiesOf} from '@storybook/react';\n\nimport Dropzone, {BasicDropzone} from './index';\n\nstoriesOf('Yggio/Image Uploader/Basic Dropzone', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n\n  .add('default', () => {\n    const props = {\n      // from top\n      onDropAccepted: files => console.info('onDropAccepted', {files}),\n      onDropRejected: fileErrors => console.info('onDropRejected', {fileErrors}),\n      // from state\n      isDragging: false,\n      setDragging: isDragging => console.info('setDragging', {isDragging}),\n    };\n    return (\n      <BasicDropzone {...props} />\n    );\n  });\n\nstoriesOf('Yggio/Image Uploader/Dropzone', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n\n  .add('default', () => {\n    const props = {\n      // from top\n      onDropAccepted: files => console.info('onDropAccepted', {files}),\n      onDropRejected: fileErrors => console.info('onDropRejected', {fileErrors}),\n    };\n    return (\n      <Dropzone {...props} />\n    );\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {compose, includes} from 'lodash/fp';\n\n\nimport ReactDropzone from 'react-dropzone';\nimport {Icon} from 'react-icons-kit';\nimport {cloudUpload} from 'react-icons-kit/fa/cloudUpload';\nimport state from './state';\nimport {withState} from '../../../../hocs';\n\nimport {DropzoneDecorations} from './styled';\nimport {IMAGES} from '../../../../constants';\n\n// ////\n// local utils\n// ////\n/* eslint-disable no-unused-vars */\nconst determineFileErrorMessage = file => {\n  if (file.size > IMAGES.maxSize) {\n    return 'File size too large (MAX: 2MB)';\n  }\n  if (!includes(file.type, IMAGES.allowedTypes)) {\n    return 'File type not supported';\n  }\n  return 'Unknown error';\n};\n/* eslint-enable no-unused-vars */\n\n// ////\n// main component\n// ////\n\nconst BasicDropzone = props => (\n  <ReactDropzone\n    accept={IMAGES.allowedTypes}\n    maxSize={IMAGES.maxSize}\n    onDragEnter={() => {\n      props.setDragging(true);\n    }}\n    onDragLeave={() => {\n      props.setDragging(false);\n    }}\n    onDropAccepted={files => {\n      props.onDropAccepted(files);\n      props.setDragging(false);\n    }}\n    onDropRejected={fileErrors => {\n      props.onDropRejected(fileErrors);\n      props.setDragging(false);\n    }}\n  >\n    {({getRootProps, getInputProps}) => (\n      <DropzoneDecorations\n        isDragging={props.isDragging}\n        width={props.width}\n        heigth={props.height}\n        {...getRootProps()}\n      >\n        <input {...getInputProps()} />\n        <Icon\n          icon={cloudUpload}\n          size={80}\n        />\n        <p>\n          {'Drag & drop your files here, or click to select files.'}\n        </p>\n      </DropzoneDecorations>\n    )}\n  </ReactDropzone>\n);\n\nBasicDropzone.propTypes = {\n  // from top\n  width: PropTypes.string,\n  height: PropTypes.string,\n  onDropAccepted: PropTypes.func.isRequired,\n  onDropRejected: PropTypes.func.isRequired,\n  // from state\n  isDragging: PropTypes.bool.isRequired,\n  setDragging: PropTypes.func.isRequired,\n};\n\n// ////\n// some tiny local state (keep track of dragging for css)\n// ////\n\nconst Dropzone = compose(\n  withState(state),\n)(BasicDropzone);\n\n\nDropzone.propTypes = {\n  // from top\n  width: PropTypes.string,\n  height: PropTypes.string,\n  onDropAccepted: PropTypes.func.isRequired,\n  onDropRejected: PropTypes.func.isRequired,\n};\n\n// ////\n// exports\n// ////\n\nexport default Dropzone;\nexport {\n  BasicDropzone,\n};\n","// dropzone/state.js\n\n\nconst ACTION_TYPES = {\n  dropzoneSetDragging: 'dropzoneSetDragging',\n};\n\nconst actions = {\n  setDragging: isDragging => ({\n    type: ACTION_TYPES.dropzoneSetDragging,\n    payload: {isDragging},\n  })\n};\n\nconst defaultState = {\n  isDragging: false,\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.dropzoneSetDragging: {\n      const {isDragging} = payload;\n      const nextState = {\n        ...state,\n        isDragging,\n      };\n      return nextState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","// styled.js\n\nimport styled from 'styled-components';\nimport {COLORS} from '../../../../constants';\n\nconst DropzoneDecorations = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: ${props => (props.width || '100%')};\n  height: ${props => (props.height || '20vh')};\n  border: 2px dashed ${COLORS.grey};\n  color: ${props => (props.isDragging ? COLORS.white : COLORS.blueLight)};\n  background: ${props => (props.isDragging && COLORS.grey)};\n  transition: all 0.3s;\n  cursor: pointer;\n  border-radius: 5px;\n\n  &:hover {\n    color: ${COLORS.greyDark};\n    border: 2px dashed ${COLORS.greyDark};\n    transition: all 0.3s;\n  }\n\n  @media screen and (max-width: 900px) {\n    width: 70%;\n  }\n`;\n\nexport {\n  DropzoneDecorations,\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"// image-item.stories.js\\n\\nimport React from 'react';\\nimport {storiesOf} from '@storybook/react';\\n\\nimport {BasicImageItem} from './index';\\n\\n// lastModified: 1535033906785\\n// lastModifiedDate: Thu Aug 23 2018 16:18:26 GMT+0200 (Central European Summer Time) {}\\n// name: \\\"i3_bindings.png\\\"\\n// path: \\\"i3_bindings.png\\\"\\n// size: 78176\\n// type: \\\"image/png\\\"\\n// webkitRelativePath: \\\"\\\"\\n// _constructor-name_: \\\"File\\\"\\n\\nstoriesOf('Yggio/Image Uploader/BasicImageItem', module)\\n\\n  .add('default', () => {\\n    const props = {\\n      // from top\\n      nameSpace: 'blueprints',\\n      imageItem: {\\n        file: {\\n          name: 'MyImage.png',\\n          size: 1234234\\n        },\\n        url: 'https://camo.githubusercontent.com/2f498f158e6853ae709ad687d5fd91dee3610d26/68747470733a2f2f692e6962622e636f2f784a4b357747592f53637265656e73686f742d66726f6d2d323031392d31322d30312d32332d31342d31322e706e67',\\n      },\\n      uploadImage: file => console.info('uploadImage', {file}),\\n      removeImageItem: imageItem => console.info('removeImageItem', {imageItem}),\\n      // from state\\n      isEditing: false,\\n      setEditing: isEditing => console.info('setEditing', {isEditing}),\\n    };\\n    return (\\n      <BasicImageItem {...props} />\\n    );\\n  });\\n\\n// storiesOf('Connected/ImageUploader/Dropzone', module)\\n//\\n//   .add('default', () => {\\n//     // const props = {\\n//     //   // from top\\n//     //   onDropAccepted: (files) => console.info('onDropAccepted', {files}),\\n//     //   onDropRejected: (fileErrors) => console.info('onDropRejected', {fileErrors}),\\n//     };\\n//     return (\\n//       <Dropzone {...props} />\\n//     );\\n//   })\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"default\":{\"startLoc\":{\"col\":7,\"line\":19},\"endLoc\":{\"col\":3,\"line\":39},\"startBody\":{\"col\":18,\"line\":19},\"endBody\":{\"col\":3,\"line\":39}}};\n    \n// image-item.stories.js\n\nimport React from 'react';\nimport {storiesOf} from '@storybook/react';\n\nimport {BasicImageItem} from './index';\n\n// lastModified: 1535033906785\n// lastModifiedDate: Thu Aug 23 2018 16:18:26 GMT+0200 (Central European Summer Time) {}\n// name: \"i3_bindings.png\"\n// path: \"i3_bindings.png\"\n// size: 78176\n// type: \"image/png\"\n// webkitRelativePath: \"\"\n// _constructor-name_: \"File\"\n\nstoriesOf('Yggio/Image Uploader/BasicImageItem', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n\n  .add('default', () => {\n    const props = {\n      // from top\n      nameSpace: 'blueprints',\n      imageItem: {\n        file: {\n          name: 'MyImage.png',\n          size: 1234234\n        },\n        url: 'https://camo.githubusercontent.com/2f498f158e6853ae709ad687d5fd91dee3610d26/68747470733a2f2f692e6962622e636f2f784a4b357747592f53637265656e73686f742d66726f6d2d323031392d31322d30312d32332d31342d31322e706e67',\n      },\n      uploadImage: file => console.info('uploadImage', {file}),\n      removeImageItem: imageItem => console.info('removeImageItem', {imageItem}),\n      // from state\n      isEditing: false,\n      setEditing: isEditing => console.info('setEditing', {isEditing}),\n    };\n    return (\n      <BasicImageItem {...props} />\n    );\n  });\n\n// storiesOf('Connected/ImageUploader/Dropzone', module)\n//\n//   .add('default', () => {\n//     // const props = {\n//     //   // from top\n//     //   onDropAccepted: (files) => console.info('onDropAccepted', {files}),\n//     //   onDropRejected: (fileErrors) => console.info('onDropRejected', {fileErrors}),\n//     };\n//     return (\n//       <Dropzone {...props} />\n//     );\n//   })\n","// image-item/index.ts\n\nimport _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {compose} from 'lodash/fp';\n\nimport {withState} from '../../../../hocs';\nimport state from './state';\n\nimport {IMAGE_NAME_SPACES} from '../../../../constants';\nimport Button from '../../../../components/button';\n\nimport {\n  ItemWrapper,\n  ThumbImage,\n  NameLabel,\n} from './styled';\n\n// ////\n// utils & constants\n// ////\n\nconst fileShape = PropTypes.shape({\n  type: PropTypes.string,\n  name: PropTypes.string,\n  lastModified: PropTypes.number,\n  size: PropTypes.number,\n});\n\n// ////\n// main component\n// ////\n\nconst BasicImageItem = props => (\n  <ItemWrapper>\n    <ThumbImage\n      img={props.imageItem.url}\n      src={props.imageItem.url}\n      alt={`upload image item ${props.imageItem.file.name}`}\n    />\n\n    <div style={{display: 'flex', flexDirection: 'column', marginLeft: 10}}>\n      <NameLabel>\n        {props.imageItem.file.name}\n      </NameLabel>\n      <NameLabel style={{fontSize: '12px'}}>\n        {`${props.imageItem.file.size} bytes`}\n      </NameLabel>\n    </div>\n\n    <div style={{display: 'flex', flexDirection: 'column', marginLeft: 10}}>\n      <Button\n        label={'Upload'}\n        style={{\n          marginBottom: 4,\n        }}\n        onClick={async () => {\n          try {\n            await props.uploadImage({\n              nameSpace: props.nameSpace,\n              file: props.imageItem.file,\n            });\n          } catch (err) {\n            // toaster should already have been done\n            // not sure if additional stuff is needed here\n          }\n          props.removeImageItem(props.imageItem);\n        }}\n      />\n      <Button\n        label={'Remove'}\n        onClick={() => props.removeImageItem(props.imageItem)}\n      />\n    </div>\n\n  </ItemWrapper>\n);\n\n\nBasicImageItem.propTypes = {\n  // from top\n  nameSpace: PropTypes.oneOf(_.values(IMAGE_NAME_SPACES)).isRequired,\n  imageItem: PropTypes.shape({\n    file: fileShape,\n    url: PropTypes.string,\n    // customName: PropTypes.string,\n  }).isRequired,\n  uploadImage: PropTypes.func.isRequired,\n  removeImageItem: PropTypes.func.isRequired,\n  // setCustomName: PropTypes.func.isRequired,\n  // from state\n  isEditing: PropTypes.bool.isRequired,\n  setEditing: PropTypes.func.isRequired,\n};\n\n// ////\n// some tiny local state (keep track of dragging for css)\n// ////\n\nconst ImageItem = compose(\n  withState(state),\n)(BasicImageItem);\n\n\nImageItem.propTypes = {\n  // from top\n  nameSpace: PropTypes.oneOf(_.values(IMAGE_NAME_SPACES)).isRequired,\n  imageItem: PropTypes.shape({\n    file: fileShape,\n    url: PropTypes.string,\n    // customName: PropTypes.string,\n  }).isRequired,\n  uploadImage: PropTypes.func.isRequired,\n  removeImageItem: PropTypes.func.isRequired,\n  // setCustomName: PropTypes.func.isRequired,\n};\n\n// ////\n// exports\n// ////\n\nexport default ImageItem;\nexport {\n  BasicImageItem,\n};\n","// dropzone/state.js\n\n\nconst ACTION_TYPES = {\n  imageItemSetEditing: 'imageItemSetEditing',\n};\n\nconst actions = {\n  setEditing: isEditing => ({\n    type: ACTION_TYPES.imageItemSetEditing,\n    payload: {isEditing},\n  })\n};\n\nconst defaultState = {\n  isEditing: false,\n};\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.imageItemSetEditing: {\n      const {isEditing} = payload;\n      const nextState = {\n        ...state,\n        isEditing,\n      };\n      return nextState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst ItemWrapper = styled.div`\n  width: 100%;\n  background-color: blue;\n  display: flex;\n  align-items: center;\n`;\n\nconst ThumbImage = styled.img`\n  margin-top: 4px;\n  margin-left: 4px;\n  margin-bottom: 4px;\n  width: 120px;\n  height: 120px;\n  object-fit: contain;\n`;\n\nconst NameLabel = styled.div`\n  color: white;\n`;\n\n\nexport {\n  ItemWrapper,\n  ThumbImage,\n  NameLabel,\n};\n","// containers/index.ts\n\nimport Dropzone from './dropzone';\nimport ImageItem from './image-item';\n\nexport {\n  Dropzone,\n  ImageItem,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {useQueryClient} from 'react-query';\n\nimport {NextRouter} from 'next/router';\nimport {\n  withLanguage,\n} from '../../hocs';\nimport Navbar from '../../yggio-components/navbar';\nimport {\n  NavbarParent,\n  NavbarSibling,\n} from './styled';\nimport {authApi, removeYggioToken, userApi} from '../../api';\nimport {objectToQueryString} from '../../utils';\nimport * as cookies from './utils';\n\nconst links = [\n  {name: 'Dashboard', url: '/'},\n  {name: 'Devices', url: '/devices'},\n  // {name: 'Locations', url: '/locations'},\n  {name: 'Organizations', url: '/organizations'},\n  {name: 'Apps', url: '/apps'},\n];\n\ninterface NavbarProps {\n  router: NextRouter;\n  title: string;\n  centered: string;\n  contentWidth: string;\n  currentLanguage: string;\n  children: React.FC;\n  t(key: string): string;\n  changeLanguage(lang: string): void;\n}\n\nconst BasicNavbarPane = (props: NavbarProps) => {\n  const queryClient = useQueryClient();\n\n  const authInfo = authApi.useGetAuthInfo();\n  const user = userApi.useTokenUser();\n  const {mutate: mutateUpdateUser} = userApi.useUpdateUser(queryClient);\n\n  const signOut = () => {\n    removeYggioToken();\n\n    cookies.removeAllCookies();\n    const [, pathname] = window.location.pathname.split('/');\n    const queryParams = {\n      redirect_uri: `${window.location.protocol}//${window.location.hostname}/${pathname}`,\n    };\n    const queryParamsString = objectToQueryString(queryParams);\n    window.location.href = `${authInfo.data?.signoutEndpoint}${queryParamsString}`;\n  };\n\n  return (\n    <NavbarParent>\n      <Navbar\n        links={links}\n        activeLink={`/${_.split(props.router.route, '/')[1]}`}\n        router={props.router}\n        user={user.data}\n        title={props.title}\n        centered={props.centered}\n        contentWidth={props.contentWidth}\n        signOut={signOut}\n        t={props.t}\n        changeLanguage={props.changeLanguage}\n        currentLanguage={props.currentLanguage}\n        updateUser={mutateUpdateUser}\n      />\n      <NavbarSibling>\n        {props.children}\n      </NavbarSibling>\n    </NavbarParent>\n  );\n};\n\nexport default withLanguage({\n  withTranslation: true,\n  withChangeLanguage: true,\n  withCurrentLanguage: true,\n})(BasicNavbarPane);\n\nexport {\n  // basic\n  BasicNavbarPane,\n  // other relevant subcomponents\n  NavbarParent,\n  NavbarSibling,\n};\n","import styled from 'styled-components';\n\nconst NavbarParent = styled.div`\n  width: 100%;\n`;\n\nconst NavbarSibling = styled.div`\n  width: 100%;\n  padding: 45px 0 0;\n`;\n\nexport {\n  NavbarParent,\n  NavbarSibling,\n};\n","import cookie from 'js-cookie';\nimport _ from 'lodash';\n\nconst removeAllCookies = () => {\n  // @ts-ignore - Seemingly some kind of hack that ts don't like, but it works\n  _(cookie.get(null))\n    .keys()\n    .map(cookie.remove)\n    .value();\n};\n\nexport {\n  removeAllCookies,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {useQueryClient} from 'react-query';\n\n// Logic\nimport {usePersistentState} from '../../hooks';\nimport {realEstateCoreFormState} from './state';\nimport {devicesApi} from '../../api';\nimport {Device, Form} from '../../types';\nimport {selectRealEstateCoreOptions, selectRealEstateCorePopulateData} from './selectors';\n\n// UI\nimport Select from '../../components/select';\nimport ProvisioningSection from './sub-components/provisioning-section';\nimport MountedSection from './sub-components/mounted-section';\nimport MountingSection from './sub-components/mounting-section';\n\ninterface Props {\n  deviceId: string;\n  connectors: Device[];\n}\n\nconst RecDeviceEditor = (props: Props) => {\n\n  const queryClient = useQueryClient();\n\n  const form = usePersistentState(realEstateCoreFormState, 'real-estate-core') as Form;\n\n  const selectedConnectorId = form.formInputs.connector.value as string;\n\n  const deviceRecDataQuery = devicesApi.useRecDataQuery(selectedConnectorId, props.deviceId);\n\n  const recDeviceId = deviceRecDataQuery.data?.deviceId;\n\n  const provisionRecDeviceMutation = devicesApi.useProvisionRecDevice(\n    queryClient,\n    selectedConnectorId,\n    props.deviceId,\n  );\n  const mountRecDeviceMutation = devicesApi.useMountRecDevice(\n    queryClient,\n    selectedConnectorId,\n    props.deviceId,\n    recDeviceId,\n  );\n  const dismountRecDeviceMutation = devicesApi.useDismountRecDevice(\n    queryClient,\n    selectedConnectorId,\n    props.deviceId,\n  );\n\n  const isProvisioned = !!deviceRecDataQuery.data;\n  const mountedRoomId = _.get(deviceRecDataQuery, 'data.isMountedInBuildingComponent[\"@id\"]') as string;\n  const isMounted = !!mountedRoomId;\n\n  const realEstatesQuery = devicesApi.useRecRealEstatesQuery(selectedConnectorId);\n  const buildingsQuery = devicesApi.useRecBuildingsQuery(selectedConnectorId);\n  const storeysQuery = devicesApi.useRecStoreysQuery(selectedConnectorId);\n  const roomsQuery = devicesApi.useRecRoomsQuery(selectedConnectorId);\n\n  const options = selectRealEstateCoreOptions(\n    form.formInputs,\n    realEstatesQuery.data,\n    buildingsQuery.data,\n    storeysQuery.data,\n    roomsQuery.data\n  );\n\n  const mountedData = selectRealEstateCorePopulateData(\n    mountedRoomId,\n    realEstatesQuery.data,\n    buildingsQuery.data,\n    storeysQuery.data,\n    roomsQuery.data\n  );\n\n  return (\n    <>\n\n      <Select\n        label={'Connector'}\n        options={_.map(props.connectors, connector => ({\n          value: connector._id,\n          label: connector.name,\n        }))}\n        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n          form.setInputValue('connector', evt.target.value);\n        }}\n        value={selectedConnectorId}\n        isClearable\n        margin={'15px 0 15px 0'}\n      />\n\n      {!!selectedConnectorId && (\n        <ProvisioningSection\n          isProvisioned={isProvisioned}\n          provisionRecDeviceMutation={provisionRecDeviceMutation}\n          deviceRecDataQueryIsLoading={deviceRecDataQuery.isLoading}\n        />\n      )}\n\n      {!!selectedConnectorId && !!isMounted && (\n        <MountedSection\n          mountedData={mountedData}\n          dismountRecDeviceMutation={dismountRecDeviceMutation}\n        />\n      )}\n\n      {!!selectedConnectorId && isProvisioned && !isMounted && (\n        <MountingSection\n          form={form}\n          options={options}\n          realEstatesQueryIsLoading={realEstatesQuery.isLoading}\n          buildingsQueryIsLoading={buildingsQuery.isLoading}\n          storeysQueryIsLoading={storeysQuery.isLoading}\n          roomsQueryIsLoading={roomsQuery.isLoading}\n          mountRecDeviceMutation={mountRecDeviceMutation}\n        />\n      )}\n\n    </>\n  );\n};\n\nexport default RecDeviceEditor;\n","import _ from 'lodash';\nimport {RealEstateCoreResponse, FormInputs, InputOptions} from '../../types';\n\nconst MEMBER = 'http://www.w3.org/ns/hydra/core#member';\nconst HAS_POPULAR_NAME = 'https://w3id.org/rec/core/hasPopularName';\nconst VALUE = '@value';\nconst ID = '@id';\n\nconst selectRealEstateCoreOptions =\n  (\n    formInputs: FormInputs,\n    realEstatesResponse?: RealEstateCoreResponse,\n    buildingsResponse?: RealEstateCoreResponse,\n    storeysResponse?: RealEstateCoreResponse,\n    roomsResponse?: RealEstateCoreResponse,\n  ) => {\n\n    if (!realEstatesResponse || !buildingsResponse || !storeysResponse || !roomsResponse) {\n      return undefined;\n    }\n\n    // Real estates\n    const realEstateMembers = realEstatesResponse[0][MEMBER];\n    const realEstateOptions = _.map(realEstateMembers, member => ({\n      value: member[ID],\n      label: member[HAS_POPULAR_NAME]?.[0][VALUE] || 'NO NAME',\n    }));\n\n    // Buildings\n    const buildingMembers = buildingsResponse[0][MEMBER];\n    const buildingAcc: InputOptions = [];\n    const buildingOptions = _.reduce(buildingMembers, (result, member) => {\n      const parent = member['https://w3id.org/rec/core/isPartOfRealEstate']?.[0][VALUE];\n      if (parent === formInputs.realEstate.value) {\n        result.push({\n          value: member['@id'],\n          label: member[HAS_POPULAR_NAME]?.[0][VALUE] || 'NO NAME',\n        });\n      }\n      return result;\n    }, buildingAcc);\n\n    // Storeys\n    const storeyMembers = storeysResponse[0][MEMBER];\n    const storeyAcc: InputOptions = [];\n    const storeyOptions = _.reduce(storeyMembers, (result, member) => {\n      const parent = member['https://w3id.org/rec/core/isPartOfBuilding']?.[0][VALUE];\n      if (parent === formInputs.building.value) {\n        result.push({\n          value: member['@id'],\n          label: member[HAS_POPULAR_NAME]?.[0][VALUE] || 'NO NAME',\n        });\n      }\n      return result;\n    }, storeyAcc);\n\n    // Rooms\n    const roomMembers = roomsResponse[0][MEMBER];\n    const roomAcc: InputOptions = [];\n    const roomOptions = _.reduce(roomMembers, (result, member) => {\n      const parent = member['https://w3id.org/rec/core/hasSuperBuildingComponent']?.[0][VALUE];\n      if (parent === formInputs.storey.value) {\n        result.push({\n          value: member['@id'],\n          label: member[HAS_POPULAR_NAME]?.[0][VALUE] || 'NO NAME',\n        });\n      }\n      return result;\n    }, roomAcc);\n\n    return {\n      realEstate: realEstateOptions,\n      building: buildingOptions,\n      storey: storeyOptions,\n      room: roomOptions,\n    };\n\n  };\n\nconst selectRealEstateCorePopulateData = (\n  roomId?: string,\n  realEstatesResponse?: RealEstateCoreResponse,\n  buildingsResponse?: RealEstateCoreResponse,\n  storeysResponse?: RealEstateCoreResponse,\n  roomsResponse?: RealEstateCoreResponse,\n) => {\n\n  // Room\n  const roomMembers = _.get(roomsResponse, ['0', 'http://www.w3.org/ns/hydra/core#member']) as string;\n  const room = _.find(roomMembers, ['@id', roomId]) as string;\n  const roomName = _.get(room, ['https://w3id.org/rec/core/hasPopularName', '0', '@value']) as string;\n  const storeyId = _.get(room, ['https://w3id.org/rec/core/hasSuperBuildingComponent', '0', '@value']) as string;\n\n  // Storey\n  const storeyMembers = _.get(storeysResponse, ['0', 'http://www.w3.org/ns/hydra/core#member']) as string;\n  const storey = _.find(storeyMembers, ['@id', storeyId]) as string;\n  const storeyName = _.get(storey, ['https://w3id.org/rec/core/hasPopularName', '0', '@value']) as string;\n  const buildingId = _.get(storey, ['https://w3id.org/rec/core/isPartOfBuilding', '0', '@value']) as string;\n\n  // Building\n  const buildingMembers = _.get(buildingsResponse, ['0', 'http://www.w3.org/ns/hydra/core#member']) as string;\n  const building = _.find(buildingMembers, ['@id', buildingId]);\n  const buildingName = _.get(building, ['https://w3id.org/rec/core/hasPopularName', '0', '@value']) as string;\n  const realEstateId = _.get(building, ['https://w3id.org/rec/core/isPartOfRealEstate', '0', '@value']) as string;\n\n  // Real estate\n  const realEstateMembers = _.get(realEstatesResponse, ['0', 'http://www.w3.org/ns/hydra/core#member']) as string;\n  const realEstate = _.find(realEstateMembers, ['@id', realEstateId]) as string;\n  const realEstateName = _.get(realEstate, ['https://w3id.org/rec/core/hasPopularName', '0', '@value']) as string;\n\n  return {\n    roomName,\n    storeyName,\n    buildingName,\n    realEstateName,\n  };\n\n};\n\nexport {\n  selectRealEstateCoreOptions,\n  selectRealEstateCorePopulateData,\n};\n","import {VALIDATION_VISIBILITY_TYPES, generateForm} from '../../utils/form-wizard';\n\nconst realEstateCoreForm = {\n  connector: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  realEstate: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  building: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  storey: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  room: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n  project: {\n    defaultValue: 'region',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  }\n};\n\nconst realEstateCoreFormState = generateForm(realEstateCoreForm);\n\nexport {\n  realEstateCoreFormState,\n};\n","import styled from 'styled-components';\n\nconst RecHeading = styled.p`\n  margin: 0 0 15px 0;\n  font-size: 13px;\n  font-weight: bold;\n  color: #555;\n`;\n\nconst RecItem = styled.div`\n  display: flex;\n  margin: 0 0 15px 0;\n`;\n\nconst RecItemTitle = styled.p`\n  margin: 0 8px 0 0;\n  font-size: 13px;\n  font-weight: bold;\n`;\n\nconst RecItemText = styled.p`\n  margin: 0;\n  font-size: 13px;\n`;\n\nconst ProvisionLoadingWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  p {\n    font-size: 13px;\n    margin: 0 0 0 7px;\n    color: #333;\n  }\n`;\n\nexport {\n  RecHeading,\n  RecItem,\n  RecItemTitle,\n  RecItemText,\n  ProvisionLoadingWrapper,\n};\n","import React from 'react';\nimport {UseMutationResult} from 'react-query';\n\nimport Button from '../../../components/button';\nimport {HorizontalLine} from '../../../global/styled';\nimport {\n  RecHeading,\n  RecItem,\n  RecItemTitle,\n  RecItemText,\n} from '../styled';\n\ninterface Props {\n  mountedData: {\n    roomName: string;\n    storeyName: string;\n    buildingName: string;\n    realEstateName: string;\n  };\n  dismountRecDeviceMutation: UseMutationResult<unknown, unknown, void, unknown>;\n}\n\nconst MountedSection = (props: Props) => {\n  return (\n    <>\n      {/* @ts-ignore - component not typescripted yet */}\n      <HorizontalLine margin={'25px 0'} />\n\n      <RecHeading>Device is mounted in:</RecHeading>\n\n      <RecItem>\n        <RecItemTitle>Real estate:</RecItemTitle>\n        <RecItemText>{props.mountedData.realEstateName}</RecItemText>\n      </RecItem>\n\n      <RecItem>\n        <RecItemTitle>Building:</RecItemTitle>\n        <RecItemText>{props.mountedData.buildingName}</RecItemText>\n      </RecItem>\n\n      <RecItem>\n        <RecItemTitle>Storey:</RecItemTitle>\n        <RecItemText>{props.mountedData.storeyName}</RecItemText>\n      </RecItem>\n\n      <RecItem>\n        <RecItemTitle>Room:</RecItemTitle>\n        <RecItemText>{props.mountedData.roomName}</RecItemText>\n      </RecItem>\n\n      <Button\n        label={'Dismount device'}\n        width={'130px'}\n        color={'grey'}\n        onClick={() => props.dismountRecDeviceMutation.mutate()}\n        isLoading={props.dismountRecDeviceMutation.isLoading}\n        disabled={props.dismountRecDeviceMutation.isLoading}\n        margin={'20px 0 0 0'}\n      />\n\n    </>\n  );\n};\n\nexport default MountedSection;\n","import React from 'react';\nimport {UseMutationResult} from 'react-query';\n\nimport {InputOptions, Form, MountRecDeviceParams} from '../../../types';\n\nimport Button from '../../../components/button';\nimport Select from '../../../components/select';\nimport SegmentedControl from '../../../components/segmented-control';\nimport {HorizontalLine} from '../../../global/styled';\nimport {RecHeading} from '../styled';\n\ninterface Props {\n  form: Form;\n  options?: {\n    realEstate: InputOptions;\n    building: InputOptions;\n    storey: InputOptions;\n    room: InputOptions;\n  }\n  realEstatesQueryIsLoading: boolean;\n  buildingsQueryIsLoading: boolean;\n  storeysQueryIsLoading: boolean;\n  roomsQueryIsLoading: boolean;\n  mountRecDeviceMutation: UseMutationResult<unknown, unknown, MountRecDeviceParams, unknown>;\n}\n\nconst MountedSection = (props: Props) => {\n  return (\n    <>\n      {/* @ts-ignore - component not typescripted yet */}\n      <HorizontalLine margin={'25px 0'} />\n\n      <RecHeading>Mounting</RecHeading>\n      <Select\n        label={'Real estate'}\n        options={props.options?.realEstate || []}\n        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n          props.form.setInputValue('realEstate', evt.target.value);\n          props.form.setInputValue('building', '');\n          props.form.setInputValue('storey', '');\n          props.form.setInputValue('room', '');\n        }}\n        value={props.form.formInputs.realEstate.value as string}\n        isClearable\n        isSearchable\n        isLoading={props.realEstatesQueryIsLoading}\n        isDisabled={props.realEstatesQueryIsLoading}\n        margin={'15px 0 15px 0'}\n      />\n      {!!props.form.formInputs.realEstate.value && (\n        <Select\n          label={'Building'}\n          options={props.options?.building || []}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n            props.form.setInputValue('building', evt.target.value);\n            props.form.setInputValue('storey', '');\n            props.form.setInputValue('room', '');\n          }}\n          value={props.form.formInputs.building.value as string}\n          isClearable\n          isSearchable\n          isLoading={props.buildingsQueryIsLoading}\n          isDisabled={props.buildingsQueryIsLoading}\n          margin={'0 0 15px 0'}\n        />\n      )}\n      {!!props.form.formInputs.building.value && (\n        <Select\n          label={'Storey'}\n          options={props.options?.storey || []}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n            props.form.setInputValue('storey', evt.target.value);\n            props.form.setInputValue('room', '');\n          }}\n          value={props.form.formInputs.storey.value as string}\n          isClearable\n          isSearchable\n          isLoading={props.storeysQueryIsLoading}\n          isDisabled={props.storeysQueryIsLoading}\n          margin={'0 0 15px 0'}\n        />\n      )}\n      {!!props.form.formInputs.storey.value && (\n        <Select\n          label={'Room'}\n          options={props.options?.room || []}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => props.form.setInputValue('room', evt.target.value)}\n          value={props.form.formInputs.room.value as string}\n          isClearable\n          isSearchable\n          isLoading={props.roomsQueryIsLoading}\n          isDisabled={props.roomsQueryIsLoading}\n          margin={'0 0 20px 0'}\n        />\n      )}\n      {!!props.form.formInputs.room.value && (\n        <>\n          <SegmentedControl\n            label={'Project'}\n            options={[\n              {value: 'region', label: 'Region'},\n              {value: 'matilda', label: 'Matilda'},\n            ]}\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => props.form.setInputValue('project', evt)}\n            value={props.form.formInputs.project.value as string}\n            margin={'0 0 40px 0'}\n            additionalInfo={'TBA'}\n          />\n          <Button\n            label={'Mount device'}\n            width={'110px'}\n            color={'green'}\n            onClick={() => props.mountRecDeviceMutation.mutate({\n              realEstateId: (props.form.formInputs.realEstate.value as string),\n              roomId: (props.form.formInputs.room.value as string),\n              isCastellumMatilda: props.form.formInputs.project.value === 'matilda'\n            })}\n            isLoading={props.mountRecDeviceMutation.isLoading}\n            disabled={props.mountRecDeviceMutation.isLoading}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MountedSection;\n","import React from 'react';\nimport {UseMutationResult} from 'react-query';\n\nimport Button from '../../../components/button';\nimport InfoBox from '../../../components/info-box';\nimport Spinner from '../../../components/spinner';\nimport {RecHeading, ProvisionLoadingWrapper} from '../styled';\nimport {HorizontalLine} from '../../../global/styled';\n\ninterface Props {\n  isProvisioned: boolean;\n  provisionRecDeviceMutation: UseMutationResult<unknown, unknown, void, unknown>;\n  deviceRecDataQueryIsLoading: boolean;\n}\n\nconst ProvisioningSection = (props: Props) => {\n  return (\n    <>\n      {/* @ts-ignore - component not typescripted yet */}\n      <HorizontalLine margin={'25px 0'} />\n      <RecHeading>Provisioning</RecHeading>\n      {props.deviceRecDataQueryIsLoading && (\n        <ProvisionLoadingWrapper>\n          <Spinner size={18} color={'#333'} />\n          <p>Checking if device is provisioned...</p>\n        </ProvisionLoadingWrapper>\n      )}\n      {!props.deviceRecDataQueryIsLoading && !props.isProvisioned && (\n        <Button\n          label={'Provision device'}\n          width={'130px'}\n          color={'green'}\n          isLoading={props.provisionRecDeviceMutation.isLoading}\n          disabled={\n            props.provisionRecDeviceMutation.isLoading || props.provisionRecDeviceMutation.isSuccess\n          }\n          onClick={() => props.provisionRecDeviceMutation.mutate()}\n        />\n      )}\n      {!props.deviceRecDataQueryIsLoading && props.isProvisioned && (\n        <InfoBox\n          heading='Device is provisioned'\n          type={'success'}\n          margin={'0 0 20px 0'}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ProvisioningSection;\n","import _ from 'lodash';\nimport {toast} from 'react-hot-toast';\nimport {compose} from 'lodash/fp';\nimport React from 'react';\nimport cookie from 'js-cookie';\nimport {NextRouter} from 'next/router';\n\nimport {\n  withLanguage,\n} from '../../hocs';\nimport LogoSpinner from '../../components/logo-spinner';\nimport {\n  Box,\n  LoginContent,\n} from './styled';\nimport {authApi, getYggioToken, setYggioToken} from '../../api';\nimport {objectToQueryString} from '../../utils';\nimport {COOKIE_OAUTH_STATE_KEY} from '../../constants';\n\nconst OAuthStateCookie = cookie.get(COOKIE_OAUTH_STATE_KEY);\n\ninterface UnauthenticatedUserPaneProps {\n  children: React.FC;\n  router: NextRouter;\n  t(key: string): string;\n}\n\ninterface OAuthStateProps {\n  clientId: string;\n  redirectionEndpoint: string;\n}\n\nconst RawUnauthenticatedUserPane = (props: UnauthenticatedUserPaneProps) => {\n  let yggioToken = getYggioToken();\n  const queryParams = props.router.query;\n  const oAuthState = JSON.parse(OAuthStateCookie || '{}') as OAuthStateProps;\n\n  const authCode = authApi.useGetAuthCode({\n    redirectionEndpoint: oAuthState?.redirectionEndpoint,\n    clientId: oAuthState?.clientId,\n    code: queryParams.code,\n    yggioToken,\n  });\n\n  const authInfo = authApi.useGetAuthInfo();\n\n  const fetchedToken = authCode.data?.token;\n\n  if (fetchedToken) {\n    yggioToken = fetchedToken;\n  }\n\n  React.useEffect(() => {\n    if (fetchedToken) {\n      setYggioToken(fetchedToken);\n    }\n  }, [fetchedToken]);\n\n  const redirectUser = () => {\n    if (authInfo.data) {\n\n      const {\n        authorizationEndpoint,\n        clientId,\n        redirectURIs,\n        scope\n      } = authInfo.data;\n\n      const redirectionEndpoint = _.find(redirectURIs, _.method('includes', 'control-panel-v2'));\n      const state = _(24).times(() => _.sample('abcdefghijklmnoprstuvwxyzABCDEFGHIJKLMNOPRSTUVWXYZ1234567890½!\"#¤%&/()=?¶¡@£$€¥{[]}-.,_:;¨^*~<>|')).join('');\n      const stateData = {\n        authorizationEndpoint,\n        clientId,\n        failUrl: `${window.location.origin}${window.location.pathname}`,\n        redirectionEndpoint,\n        scope,\n        state,\n        successUrl: `${window.location.origin}${window.location.pathname}`,\n      };\n      cookie.set(COOKIE_OAUTH_STATE_KEY, stateData);\n\n      const queryParams = {\n        client_id: clientId,\n        redirect_uri: redirectionEndpoint,\n        scope,\n        state,\n        response_type: 'code'\n      };\n\n      const queryParamsString = objectToQueryString(queryParams);\n\n      // Clear persistent states\n      localStorage.removeItem('yggio-devices-list-filter');\n      localStorage.removeItem('yggio-devices-list-ui');\n\n      window.location.replace(`${authorizationEndpoint}${queryParamsString}`);\n    } else {\n      toast.error('Error attempting authentication');\n    }\n  };\n\n  if (yggioToken) {\n    return props.children;\n  }\n\n  if (!authCode.isLoading && !authInfo.isLoading) {\n    redirectUser();\n  }\n\n  return (\n    <Box>\n      <LoginContent>\n        {(authCode.isLoading || authInfo.isLoading) &&\n          <>\n            <LogoSpinner />\n            {!authCode.isSuccess &&\n              <p>{props.t('phrases.connectingToYggio')}</p>}\n            {authCode.isSuccess &&\n              <p>{props.t('phrases.checkingCredentials')}</p>}\n          </>}\n      </LoginContent>\n    </Box>\n  );\n};\n\nexport default compose(\n  withLanguage(),\n)(RawUnauthenticatedUserPane);\n","import styled from 'styled-components';\n\nconst Box = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 10% 0 0 0;\n`;\n\nconst LoginContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nconst LogoContainer = styled.div`\n  padding: 5px;\n`;\n\nexport {\n  Box,\n  LoginContent,\n  LogoContainer,\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\nimport {storiesOf} from '@storybook/react';\\n\\nimport RawUnauthenticatedUserPane from '.';\\nimport t from '../../utils/translation-prop';\\n\\nconst getAuthInfo = () => console.info('getAuthCode');\\nconst getAuthCode = () => console.info('getAuthCode');\\nconst redirectUser = () => console.info('redirectUser');\\n\\nstoriesOf('Yggio/Unauthenticated User Pane/Raw', module)\\n\\n  .add('raw default', () => {\\n    const props = {\\n      token: null,\\n      connectivityState: 'connected',\\n      getAuthInfoRequest: {\\n        isLoading: false\\n      },\\n      getAuthCodeRequest: {\\n        isLoading: false\\n      },\\n      appName: 'test-app',\\n      t,\\n      getAuthInfo,\\n      getAuthCode,\\n      redirectUser,\\n    };\\n    return <RawUnauthenticatedUserPane {...props} />;\\n  })\\n\\n  .add('raw waiting for auth info or Yggio connection', () => {\\n    const props = {\\n      token: null,\\n      connectivityState: 'offline',\\n      getAuthCodeRequest: {\\n        isLoading: false\\n      },\\n      getAuthInfoRequest: {\\n        isLoading: true\\n      },\\n      appName: 'test-app',\\n      getAuthInfo,\\n      getAuthCode,\\n      redirectUser,\\n      t,\\n    };\\n    return <RawUnauthenticatedUserPane {...props} />;\\n  })\\n\\n  .add('raw waiting for auth code', () => {\\n    const props = {\\n      token: null,\\n      connectivityState: 'connected',\\n      getAuthInfoRequest: {\\n        isLoading: false\\n      },\\n      getAuthCodeRequest: {\\n        isLoading: true\\n      },\\n      appName: 'test-app',\\n      getAuthInfo,\\n      getAuthCode,\\n      redirectUser,\\n      t,\\n    };\\n    return <RawUnauthenticatedUserPane {...props} />;\\n  });\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"raw-waiting-for-auth-code\":{\"startLoc\":{\"col\":7,\"line\":51},\"endLoc\":{\"col\":3,\"line\":68},\"startBody\":{\"col\":36,\"line\":51},\"endBody\":{\"col\":3,\"line\":68}},\"raw-waiting-for-auth-info-or-yggio-connection\":{\"startLoc\":{\"col\":7,\"line\":32},\"endLoc\":{\"col\":3,\"line\":49},\"startBody\":{\"col\":56,\"line\":32},\"endBody\":{\"col\":3,\"line\":49}},\"raw-default\":{\"startLoc\":{\"col\":7,\"line\":13},\"endLoc\":{\"col\":3,\"line\":30},\"startBody\":{\"col\":22,\"line\":13},\"endBody\":{\"col\":3,\"line\":30}}};\n    \nimport React from 'react';\nimport {storiesOf} from '@storybook/react';\n\nimport RawUnauthenticatedUserPane from '.';\nimport t from '../../utils/translation-prop';\n\nconst getAuthInfo = () => console.info('getAuthCode');\nconst getAuthCode = () => console.info('getAuthCode');\nconst redirectUser = () => console.info('redirectUser');\n\nstoriesOf('Yggio/Unauthenticated User Pane/Raw', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n\n  .add('raw default', () => {\n    const props = {\n      token: null,\n      connectivityState: 'connected',\n      getAuthInfoRequest: {\n        isLoading: false\n      },\n      getAuthCodeRequest: {\n        isLoading: false\n      },\n      appName: 'test-app',\n      t,\n      getAuthInfo,\n      getAuthCode,\n      redirectUser,\n    };\n    return <RawUnauthenticatedUserPane {...props} />;\n  })\n\n  .add('raw waiting for auth info or Yggio connection', () => {\n    const props = {\n      token: null,\n      connectivityState: 'offline',\n      getAuthCodeRequest: {\n        isLoading: false\n      },\n      getAuthInfoRequest: {\n        isLoading: true\n      },\n      appName: 'test-app',\n      getAuthInfo,\n      getAuthCode,\n      redirectUser,\n      t,\n    };\n    return <RawUnauthenticatedUserPane {...props} />;\n  })\n\n  .add('raw waiting for auth code', () => {\n    const props = {\n      token: null,\n      connectivityState: 'connected',\n      getAuthInfoRequest: {\n        isLoading: false\n      },\n      getAuthCodeRequest: {\n        isLoading: true\n      },\n      appName: 'test-app',\n      getAuthInfo,\n      getAuthCode,\n      redirectUser,\n      t,\n    };\n    return <RawUnauthenticatedUserPane {...props} />;\n  });\n","// connectivity-engine.js\n\n// This one is deliberately kept stand-alone, as it generates its own effective\n// external context, and MUST be initialized with the store at startup\n\nimport _ from 'lodash';\nimport delay from 'delay';\n\nimport {CONNECTIVITY_STATES} from '../constants';\n\nimport {actions as yggioActions} from './yggio-state'; // THIS IS SPECIAL\n\nconst NETWORK_CHECK_PERIOD = 1000; // ms\n\nlet store;\nconst initialize = injectedStore => {\n  store = injectedStore;\n  manageConnectivity();\n};\n\nconst manageConnectivity = async () => {\n  // check the connectivity\n  if (typeof window !== 'undefined') {\n    const {navigator} = window;\n    const isOnline = navigator.onLine;\n    const {isActive} = store.getState().connectivity;\n    const {connectivityState} = store.getState().connectivity;\n\n    if (isOnline && isActive && connectivityState === CONNECTIVITY_STATES.offline) {\n      store.dispatch(yggioActions.connectivity.setOnline());\n    }\n    if ((!isOnline || !isActive) && connectivityState !== CONNECTIVITY_STATES.offline) {\n      store.dispatch(yggioActions.connectivity.setOffline());\n    }\n\n    // TO_BE_CONSIDERED: a more elaborate delay generating algorithm (generator)\n    const delayPeriod = NETWORK_CHECK_PERIOD;\n    await delay(delayPeriod);\n\n    // recurse\n    manageConnectivity();\n  }\n};\n\n\nexport {\n  initialize,\n};\n","const NETWORK_ERROR_MESSAGE = 'Network Error';\nconst CONNECTIVITY_ERROR_MESSAGE = 'Is not connected to Yggio';\nconst CONNECTIVITY_ERROR = new Error(CONNECTIVITY_ERROR_MESSAGE);\n\nexport {\n  NETWORK_ERROR_MESSAGE,\n  CONNECTIVITY_ERROR_MESSAGE,\n  CONNECTIVITY_ERROR,\n};\n","import withYggio from './with-yggio';\nimport YggioTokenMonitor from './yggio-token-monitor';\nimport YggioMessageToaster from './yggio-message-toaster';\n\n// things that should not have to be imported. Use is discouraged\nimport {\n  removeYggioToken,\n} from './network/yggio-token';\n\nconst thisIsNotAGoodIdea = {\n  removeYggioToken,\n};\n\nexport {\n\n  // keepers\n  withYggio,\n  YggioTokenMonitor,\n  YggioMessageToaster,\n\n  // deprecated\n  thisIsNotAGoodIdea,\n};\n","// access-rights.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst fetchResource = token => ({deviceId}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/${RESOURCE_TYPES.access}`,\n});\n\nconst fetchSubject = token => ({subjectId}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${RESOURCE_TYPES.access}/${subjectId}`,\n});\n\nconst create = token => ({deviceId, template}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/${RESOURCE_TYPES.access}`,\n  data: template,\n});\n\nconst remove = token => ({deviceId, scope, subjectId, subjectType}) => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/${RESOURCE_TYPES.access}`,\n  params: {scope, subjectId, subjectType},\n});\n\nexport {\n  fetchResource,\n  fetchSubject,\n  create,\n  remove,\n};\n","import request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst fetch = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.coreApps}`,\n});\n\nconst get = token => appId => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.coreApps}/${appId}`,\n  params: {appId}\n});\n\nexport {\n  fetch,\n  get,\n};\n","// auth.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst info = () => () => {\n  const requestConfig = {\n    method: REQUEST_METHODS.get,\n    URI: `${RESOURCE_TYPES.auth}/info`,\n  };\n  return request(requestConfig, {isNonApiRoute: true});\n};\n\nconst code = () => ({\n  code,\n  clientId,\n  redirectionEndpoint,\n}) => {\n  const requestConfig = {\n    method: REQUEST_METHODS.get,\n    URI: `${RESOURCE_TYPES.auth}/code`,\n    params: {\n      code,\n      client_id: clientId,\n      redirect_uri: redirectionEndpoint,\n    }\n  };\n  return request(requestConfig, {isNonApiRoute: true});\n};\n\nconst localLogin = () => ({username, password}) => {\n  const requestConfig = {\n    method: REQUEST_METHODS.post,\n    URI: `${RESOURCE_TYPES.auth}/local`,\n    data: {username, password},\n  };\n  return request(requestConfig, {isNonApiRoute: true});\n};\n\nconst getTokenUser = token => () => {\n  const requestConfig = {\n    token,\n    method: REQUEST_METHODS.get,\n    URI: `${RESOURCE_TYPES.users}/me`,\n  };\n  return request(requestConfig);\n};\n\nexport {\n  info,\n  code,\n  localLogin,\n  getTokenUser,\n};\n","import request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\n// ////\n// basic functionality\n// ////\n\nconst create = token => calculation => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.calculations}`,\n  data: calculation,\n});\n\nconst fetch = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: RESOURCE_TYPES.calculations\n});\n\nconst get = token => calculationId => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.calculations}/${calculationId}`,\n});\n\nconst update = token => updates => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.calculations}/${updates._id}`,\n  data: updates\n});\n\nconst remove = token => calculationId => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.calculations}/${calculationId}`,\n});\n\nconst perform = token => (calculationId, calcType, interval) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.calculations}/${calculationId}/perform`,\n  params: {calcType, interval},\n});\n\n\n// ////\n//  exports\n// ////\n\nexport {\n  fetch,\n  get,\n  update,\n  create,\n  remove,\n  perform,\n};\n","// channels.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst create = token => channel => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.channels}`,\n  data: channel,\n});\n\n\nconst get = token => iotnode => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.channels}`,\n  params: {\n    iotnode,\n    formatReadable: true,\n  }\n});\n\n\nconst remove = token => channelId => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.channels}/${channelId}`,\n});\n\n\n// ////\n//  exports\n// ////\n\nexport {\n  get,\n  create,\n  remove,\n};\n","// devices.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst fetch = token => (\n  limit,\n  offset = 0,\n  orderBy = 'name',\n  filter,\n) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: RESOURCE_TYPES.iotnodes,\n  params: {\n    limit,\n    offset,\n    orderBy,\n    ...filter,\n    options: 'count',\n  }\n});\n\nconst peek = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.iotnodes}/peek`,\n});\n\nconst seek = token => ({deviceItems}) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.iotnodes}/seek`,\n  data: deviceItems,\n});\n\nconst create = token => ({template}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.iotnodes}`,\n  data: template,\n});\n\nconst batchCreate = token => ({template}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.iotnodes}/batch`,\n  data: template,\n});\n\nconst get = token => ({deviceId}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}`,\n});\n\nconst update = token => ({deviceId, updates}) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}`,\n  data: updates,\n});\n\nconst remove = token => ({deviceId}) => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}`,\n});\n\nconst removeMany = token => async deviceIds => {\n  const removeMany = _.map(deviceIds, id => (\n    request({\n      token,\n      method: REQUEST_METHODS.delete,\n      URI: `${RESOURCE_TYPES.iotnodes}/${id}`,\n    })\n  ));\n  await Promise.all(removeMany);\n};\n\nconst sendCommand = token => ({command, data}) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.iotnodes}/command`,\n  data: {\n    command,\n    ...data,\n  },\n});\n\nconst getModelNames = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.iotnodes}/models`,\n});\n\n// dirty from here down\n\nconst getStatistics = token => (deviceId, measurement, start, end, distance) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/stats`,\n  params: {measurement, start, end, distance},\n});\n\nconst getStatisticsFields = token => deviceId => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.iotnodes}/${deviceId}/stats/fields`,\n});\n\nexport {\n  create,\n  batchCreate,\n  fetch,\n  peek,\n  seek,\n  get,\n  update,\n  remove,\n  removeMany,\n  sendCommand,\n  getModelNames,\n  getStatistics,\n  getStatisticsFields,\n};\n","// images.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\n\n// ////\n// image handling\n// ////\n\nconst getImages = token => ({nameSpace}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.images}/${nameSpace}`,\n});\n\nconst uploadImage = token => ({file, nameSpace}) => {\n  const files = new FormData();\n  files.append('image', file, file.name);\n  return request({\n    token,\n    method: REQUEST_METHODS.post,\n    URI: `${RESOURCE_TYPES.images}/${nameSpace}`,\n    data: files,\n  });\n};\n\nconst editImage = token => ({oldImageName, newImageName, namespace}) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.images}/${namespace}`,\n  data: {oldImageName, newImageName},\n});\n\nconst deleteImage = token => ({image, nameSpace}) => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.images}/${nameSpace}`,\n  data: {image},\n});\n\n\n// ////\n//  exports\n// ////\n\nexport {\n  getImages,\n  uploadImage,\n  deleteImage,\n  editImage,\n};\n","import * as auth from './auth';\nimport * as apps from './apps';\nimport * as providers from './providers';\nimport * as accessRights from './access-rights';\nimport * as users from './users';\nimport * as devices from './devices';\nimport * as locations from './locations';\nimport * as organizations from './organizations';\nimport * as version from './version';\nimport * as requestBodySizeLimit from './request-body-size-limit';\nimport * as calculations from './calculations';\nimport * as jobs from './jobs';\nimport * as images from './images';\nimport * as channels from './channels';\nimport * as translators from './translators';\nimport * as rulesActions from './rules';\n\nexport {\n  auth,\n  apps,\n  providers,\n  accessRights,\n  users,\n  devices,\n  locations,\n  organizations,\n  version,\n  requestBodySizeLimit,\n  calculations,\n  jobs,\n  images,\n  channels,\n  translators,\n  rulesActions,\n};\n","import request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst get = token => ({jobId}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.jobs}/${jobId}`,\n});\n\nexport {\n  get,\n};\n","// locations.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\n// ////\n// basic functionality\n// ////\n\nconst create = token => location => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.locations}`,\n  data: location,\n});\n\nconst fetch = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: RESOURCE_TYPES.locations\n});\n\nconst get = token => locationId => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.locations}/${locationId}`,\n});\n\nconst update = token => updates => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.locations}/${updates._id}`,\n  data: updates\n});\n\nconst remove = token => locationId => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.locations}/${locationId}`,\n});\n\n\n// ////\n//  exports\n// ////\n\nexport {\n  // locations\n  fetch,\n  get,\n  update,\n  create,\n  remove,\n};\n","// organizations.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst fetchOrganizations = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.organizations}`,\n});\n\nconst createOrganization = token => ({template}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.organizations}`,\n  data: template,\n});\n\nconst getOrganization = token => ({orgId}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}`,\n});\n\nconst updateOrganization = token => ({orgId, template}) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}`,\n  data: template,\n});\n\nconst createUnit = token => ({orgId, parentUnitId, template}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/units/${parentUnitId}`,\n  data: template,\n});\n\nconst deleteUnit = token => ({orgId, unitId}) => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/units/${unitId}`,\n});\n\nconst updateUnit = token => ({orgId, unitId, template}) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/units/${unitId}`,\n  data: template,\n});\n\nconst createMember = token => ({orgId, template}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members`,\n  data: template,\n});\n\nconst fetchMembers = token => ({orgId}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members`,\n});\n\nconst moveMember = token => ({orgId, memberId, unitId}) => request({\n  token,\n  method: REQUEST_METHODS.put,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}`,\n});\n\nconst fetchDeviceDetails = token => async ({orgId}) => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/deviceDetails`,\n});\n\nconst assignManagerAccess = token => ({orgId, memberId, unitId}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/managers`,\n});\n\nconst revokeManagerAccess = token => ({orgId, memberId, unitId}) => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/managers`,\n});\n\nconst assignDeviceAccess = token => ({orgId, memberId, unitId, accessType}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/deviceTokens`,\n  data: {accessType},\n});\n\nconst revokeDeviceAccess = token => ({orgId, memberId, unitId, accessType}) => request({\n  token,\n  method: REQUEST_METHODS.delete,\n  URI: `${RESOURCE_TYPES.organizations}/${orgId}/members/${memberId}/units/${unitId}/deviceTokens`,\n  data: {accessType},\n});\n\nexport {\n  getOrganization,\n  fetchOrganizations,\n  createOrganization,\n  updateOrganization,\n  createUnit,\n  deleteUnit,\n  updateUnit,\n  createMember,\n  fetchMembers,\n  moveMember,\n  fetchDeviceDetails,\n  assignManagerAccess,\n  revokeManagerAccess,\n  assignDeviceAccess,\n  revokeDeviceAccess,\n};\n","import request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst fetch = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.providers}`,\n  params: {\n    filtered: true,\n  }\n});\n\nexport {\n  fetch,\n};\n","import request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst get = () => () => {\n  const requestConfig = {\n    method: REQUEST_METHODS.get,\n    URI: RESOURCE_TYPES.requestBodySizeLimit,\n  };\n  return request(requestConfig, {isNonApiRoute: false});\n};\n\nexport {\n  get,\n};\n","// rules.js\n\nimport {toast} from 'react-hot-toast';\n\nimport request from '../http-request';\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst create = token => async template => {\n  const {rule, action} = template;\n\n  const actionResult = await request({\n    token,\n    method: REQUEST_METHODS.post,\n    URI: `${RESOURCE_TYPES.rulesActions}`,\n    data: action,\n  });\n\n  const ruleResult = await request({\n    token,\n    method: REQUEST_METHODS.post,\n    URI: `${RESOURCE_TYPES.rules}`,\n    data: {\n      ...rule,\n      events: [{action: actionResult._id}],\n    },\n  });\n  return ruleResult;\n};\n\n\nconst fetch = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: `${RESOURCE_TYPES.rules}`,\n});\n\n\nconst remove = token => async (ruleId, actionId) => {\n  await request({\n    token,\n    method: REQUEST_METHODS.delete,\n    URI: `${RESOURCE_TYPES.rulesActions}/${actionId}`,\n  });\n  await request({\n    token,\n    method: REQUEST_METHODS.delete,\n    URI: `${RESOURCE_TYPES.rules}/${ruleId}`,\n  });\n  return ruleId;\n};\n\nconst activate = token => async ruleId => {\n  const res = await request({\n    token,\n    method: REQUEST_METHODS.put,\n    URI: `${RESOURCE_TYPES.rules}/activate/${ruleId}`,\n    data: {ok: true},\n  });\n\n  // Kinda dirty hack for special toaster trigger\n  if (res.ok) {\n    const successMessage = 'Action triggered successfully';\n    toast.success(successMessage);\n  }\n};\n\n// ////\n//  exports\n// ////\n\nexport {\n  fetch,\n  create,\n  remove,\n  activate,\n};\n","import request from '../http-request';\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst fetch = token => deviceModelName => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: RESOURCE_TYPES.translators,\n  params: {\n    deviceModelName,\n  }\n});\n\nexport {\n  fetch,\n};\n","// users.js\n\nimport _ from 'lodash';\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\n// the routes that should be in auth\n\nconst fetch = token => () => request({\n  token,\n  method: REQUEST_METHODS.get,\n  URI: RESOURCE_TYPES.users,\n});\n\nconst create = token => ({username, email, password}) => request({\n  token,\n  method: REQUEST_METHODS.post,\n  URI: RESOURCE_TYPES.users,\n  data: {username, email, password},\n});\n\nconst update = token => ({data}) => {\n  return request({\n    token,\n    method: REQUEST_METHODS.put,\n    URI: RESOURCE_TYPES.users,\n    data: _.omit(data, '_id'),\n  });\n};\n\nexport {\n  fetch,\n  create,\n  update,\n};\n","// version.js\n\nimport request from '../http-request';\n\nimport {\n  REQUEST_METHODS,\n  RESOURCE_TYPES,\n} from '../../../constants';\n\nconst getVersion = () => () => {\n  const requestConfig = {\n    method: REQUEST_METHODS.get,\n    URI: RESOURCE_TYPES.version,\n  };\n  return request(requestConfig, {isNonApiRoute: true});\n};\n\nexport {\n  getVersion,\n};\n","import axios from 'axios';\nimport {getConfig} from '../../yggio-config';\n\nconst Bottleneck = require('bottleneck');\n\nconst limiter = new Bottleneck({\n  minTime: 100\n});\n\nconst request = ({token, method, URI, data, params}, options) => {\n  const isNonApiRoute = _.get(options, 'isNonApiRoute');\n  const headers = token ? {Authorization: `Bearer ${token}`} : {};\n  const requestConfig = {\n    headers,\n    timeout: 15000,\n    withCredentials: true,\n    responseType: 'text', // Note: 'json' resulted in text responses not working\n    url: `${getConfig().baseRequestUrl}/${URI}`,\n    method,\n    data,\n    params,\n  };\n  return limiter.schedule(() => axios(requestConfig)\n    .then(res => {\n      if (_.eq(_.get(params, 'options'), 'count')) {\n        return {data: res.data, headers: res.headers};\n      }\n      return res.data;\n    }));\n};\n\nexport default request;\n","import socketio from 'socket.io-client';\nimport {Server} from 'mock-socket';\nimport {getYggioToken} from './yggio-token';\nimport {store} from '../with-yggio';\nimport {internalActions} from '../yggio-state/database.redux/devices.redux';\nimport {actions as subscriptionsActions} from '../yggio-state/database.redux/device-subscriptions.redux';\n\nconst MESSAGE = 'message';\nconst LISTEN = 'listen';\nconst ERROR = 'error';\nconst DISCONNECT = 'disconnect';\nconst CONNECT = 'connect';\n\nconst state = {\n  connected: false,\n};\n\nconst socket = null;\n\nconst subscribe = deviceIds => {\n  return null;\n};\n\nconst getSocket = () => socket;\n\nexport {\n  getSocket,\n  subscribe,\n};\n","import cookie from 'js-cookie';\n\nimport {getConfig} from '../../yggio-config';\nimport {COOKIE_TOKEN_KEY} from '../../constants';\n\nconst getYggioToken = () => {\n  const cookieToken = cookie.getJSON(COOKIE_TOKEN_KEY, {domain: getConfig().domain});\n  return cookieToken;\n};\n\nconst setYggioToken = token => {\n  cookie.set(COOKIE_TOKEN_KEY, token, {domain: getConfig().domain});\n  const next = cookie.get(COOKIE_TOKEN_KEY, {domain: getConfig().domain});\n};\n\nconst removeYggioToken = () => {\n  cookie.remove(COOKIE_TOKEN_KEY, {domain: getConfig().domain});\n};\n\nexport {\n  getYggioToken,\n  setYggioToken,\n  removeYggioToken,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider, connect} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\n\nimport {\n  reducer as yggioReducer,\n  actions as yggioActions,\n} from './yggio-state';\nimport {\n  initialize as initializeConnectivityEngine,\n} from './connectivity-engine';\nimport {getConfig} from '../yggio-config';\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nconst middlewares = getConfig().nodeEnv === 'development' ? [thunk, logger] : [thunk];\nconst appliedMiddlewares = compose(applyMiddleware(...middlewares));\n\n// mutable!!\nlet store = null;\n\n// /////\n//  The main guy\n// ////\n\nconst withYggio = yggioMappings => Component => {\n\n  // these should be validated\n  const {\n    mapYggioStateToProps,\n    mapYggioActionsToProps,\n    // mapYggioActionsToEffects,\n  } = yggioMappings;\n  if (!store) {\n    store = createStore(yggioReducer, appliedMiddlewares);\n    initializeConnectivityEngine(store);\n  }\n\n  const WrappedComponent = props => {\n\n    const mapStateToProps = state => {\n      // empty if mapYggioActionsToProps not specified\n      if (!_.isFunction(mapYggioStateToProps)) {\n        return {};\n      }\n      // this one is trivial (at least for now)\n      // this might change if we mutate redux-state\n      // compared to what is visible. probably not though\n      const yggioStateProps = mapYggioStateToProps(state);\n      return yggioStateProps;\n    };\n    const mapDispatchToProps = (dispatch, getState) => {\n      // empty if mapYggioActionsToProps not specified\n      if (!_.isFunction(mapYggioActionsToProps)) {\n        return {};\n      }\n      // otherwise extract the projection\n      const actionProps = mapYggioActionsToProps(yggioActions);\n      // ///////\n      // distribute the dispatch\n      const recursiveDispatcher = (actionItem, itemKey) => {\n        if (_.isFunction(actionItem)) {\n          // wrap it up -- this works for both sync & async actions\n          return (...args) => actionItem(...args)(dispatch, getState);\n        }\n        if (_.isObject(actionItem)) {\n          // nested objects get recursed\n          return _.mapValues(actionItem, (subItem, key) => recursiveDispatcher(subItem, key));\n        }\n        // if we got here then there is a mistake\n        throw new Error(`DevErr: Invalid yggio actionItem: ${itemKey}`);\n      };\n      const yggioDispatchActions = recursiveDispatcher(actionProps);\n\n      // and return the fully processed actions to the implementing component\n      return yggioDispatchActions;\n    };\n\n    // and connect to redux - wrap again for effects\n    // Would it be better to do this with subclassing?\n    const ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(Component);\n    return (\n      <Provider store={store}>\n        <ConnectedComponent {...props} />\n      </Provider>\n    );\n  };\n  // and done\n  return WrappedComponent;\n};\n\n\nexport default withYggio;\nexport {\n  store,\n};\n","import _ from 'lodash';\nimport React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport toast, {Toaster} from 'react-hot-toast';\nimport withYggio from '../with-yggio';\nimport {TOAST_TYPES} from '../../constants';\n\n// /////\n// The raw unconnected component - unconnected from yggio\n// /////\n\n\nconst BasicYggioMessageToaster = props => {\n\n\n  useEffect(() => {\n    if (props.messageItems.length) {\n      _.each(props.messageItems, messageItem => {\n        if (_.isError(messageItem) && messageItem.isAxiosError && messageItem.response) {\n          const {response} = messageItem;\n\n          const missingDesc = 'Error description is missing.';\n          const description = _.get(response, 'data.description') ||\n            _.get(response, 'data') ||\n            _.get(messageItem, 'body') ||\n            missingDesc;\n          const message = `${description} (${response.statusText} - ${response.status})`;\n          toast.error(message);\n          if (description === missingDesc) {\n            console.warn('DevWarn: error isAxiosError but does not have description nor body.', {messageItem});\n          }\n        } else if (_.isError(messageItem)) {\n          if (messageItem.message) {\n            toast.error(messageItem.message);\n          } else {\n            console.warn('DevWarn: messageItem is error but does not have .message', {messageItem});\n          }\n        } else if (_.isString(messageItem)) {\n          if (!toast.isActive(messageItem)) {\n            toast.error(messageItem);\n          }\n        } else if (_.isObject(messageItem)) {\n          const toastType = TOAST_TYPES[messageItem.toastType] || TOAST_TYPES.default;\n          switch (toastType) {\n            case TOAST_TYPES.default: {\n              toast.error(messageItem.message);\n              break;\n            }\n            default: {\n              toast[toastType](messageItem.message);\n              break;\n            }\n          }\n        } else {\n          throw new Error('DevErr: Invalid toast type', {messageItem});\n        }\n\n      });\n\n      // still inside the if - wipe all messages (will trigger another effect)\n      props.wipeMessages();\n    }\n\n  });\n\n  return (\n    <Toaster position={'bottom-left'} />\n  );\n};\n\nBasicYggioMessageToaster.propTypes = {\n  // from yggio\n  messageItems: PropTypes.arrayOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      toastType: PropTypes.oneOf(_.values(TOAST_TYPES)), // NOT required!\n    }),\n  ])).isRequired,\n  wipeMessages: PropTypes.func.isRequired,\n};\n\n// /////\n// The exposed yggio-connected component\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    messageItems: yggioState.messageStack.messageItems,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    wipeMessages: yggioActions.messageStack.wipeMessages,\n  }),\n};\n\nconst YggioMessageToaster = withYggio(yggio)(BasicYggioMessageToaster);\n\nYggioMessageToaster.propTypes = {}; // no props from up top\n\n\n// /////\n// exports\n// /////\n\nexport default YggioMessageToaster;\nexport {BasicYggioMessageToaster};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\nimport {storiesOf} from '@storybook/react';\\n\\nimport {BasicYggioMessageToaster} from './index';\\n\\nstoriesOf('Yggio/Yggio Message Toaster/Basic', module)\\n\\n  .add('simple string (default)', () => {\\n    const props = {\\n      messageItems: ['simple string'],\\n      wipeMessages: () => console.info('wipeMessages executed'),\\n    };\\n    return (\\n      <BasicYggioMessageToaster {...props} />\\n    );\\n  })\\n\\n  .add('error object', () => {\\n    const props = {\\n      messageItems: [new Error('error object')],\\n      wipeMessages: () => console.info('wipeMessages executed'),\\n    };\\n    return (\\n      <BasicYggioMessageToaster {...props} />\\n    );\\n  })\\n\\n  .add('no type (default)', () => {\\n    const props = {\\n      messageItems: [{message: 'no assigned type'}],\\n      wipeMessages: () => console.info('wipeMessages executed'),\\n    };\\n    return (\\n      <BasicYggioMessageToaster {...props} />\\n    );\\n  })\\n\\n  .add('default type', () => {\\n    const props = {\\n      messageItems: [{message: 'default type (explicit)', toastType: 'default'}],\\n      wipeMessages: () => console.info('wipeMessages executed'),\\n    };\\n    return (\\n      <BasicYggioMessageToaster {...props} />\\n    );\\n  })\\n\\n  .add('info type', () => {\\n    const props = {\\n      messageItems: [{message: 'info type', toastType: 'info'}],\\n      wipeMessages: () => console.info('wipeMessages executed'),\\n    };\\n    return (\\n      <BasicYggioMessageToaster {...props} />\\n    );\\n  })\\n\\n  .add('warn type', () => {\\n    const props = {\\n      messageItems: [{message: 'warn type', toastType: 'warn'}],\\n      wipeMessages: () => console.info('wipeMessages executed'),\\n    };\\n    return (\\n      <BasicYggioMessageToaster {...props} />\\n    );\\n  })\\n\\n  .add('error type', () => {\\n    const props = {\\n      messageItems: [{message: 'error type', toastType: 'error'}],\\n      wipeMessages: () => console.info('wipeMessages executed'),\\n    };\\n    return (\\n      <BasicYggioMessageToaster {...props} />\\n    );\\n  });\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"error-type\":{\"startLoc\":{\"col\":7,\"line\":68},\"endLoc\":{\"col\":3,\"line\":76},\"startBody\":{\"col\":21,\"line\":68},\"endBody\":{\"col\":3,\"line\":76}},\"warn-type\":{\"startLoc\":{\"col\":7,\"line\":58},\"endLoc\":{\"col\":3,\"line\":66},\"startBody\":{\"col\":20,\"line\":58},\"endBody\":{\"col\":3,\"line\":66}},\"info-type\":{\"startLoc\":{\"col\":7,\"line\":48},\"endLoc\":{\"col\":3,\"line\":56},\"startBody\":{\"col\":20,\"line\":48},\"endBody\":{\"col\":3,\"line\":56}},\"default-type\":{\"startLoc\":{\"col\":7,\"line\":38},\"endLoc\":{\"col\":3,\"line\":46},\"startBody\":{\"col\":23,\"line\":38},\"endBody\":{\"col\":3,\"line\":46}},\"no-type-default\":{\"startLoc\":{\"col\":7,\"line\":28},\"endLoc\":{\"col\":3,\"line\":36},\"startBody\":{\"col\":28,\"line\":28},\"endBody\":{\"col\":3,\"line\":36}},\"error-object\":{\"startLoc\":{\"col\":7,\"line\":18},\"endLoc\":{\"col\":3,\"line\":26},\"startBody\":{\"col\":23,\"line\":18},\"endBody\":{\"col\":3,\"line\":26}},\"simple-string-default\":{\"startLoc\":{\"col\":7,\"line\":8},\"endLoc\":{\"col\":3,\"line\":16},\"startBody\":{\"col\":34,\"line\":8},\"endBody\":{\"col\":3,\"line\":16}}};\n    \nimport React from 'react';\nimport {storiesOf} from '@storybook/react';\n\nimport {BasicYggioMessageToaster} from './index';\n\nstoriesOf('Yggio/Yggio Message Toaster/Basic', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n\n  .add('simple string (default)', () => {\n    const props = {\n      messageItems: ['simple string'],\n      wipeMessages: () => console.info('wipeMessages executed'),\n    };\n    return (\n      <BasicYggioMessageToaster {...props} />\n    );\n  })\n\n  .add('error object', () => {\n    const props = {\n      messageItems: [new Error('error object')],\n      wipeMessages: () => console.info('wipeMessages executed'),\n    };\n    return (\n      <BasicYggioMessageToaster {...props} />\n    );\n  })\n\n  .add('no type (default)', () => {\n    const props = {\n      messageItems: [{message: 'no assigned type'}],\n      wipeMessages: () => console.info('wipeMessages executed'),\n    };\n    return (\n      <BasicYggioMessageToaster {...props} />\n    );\n  })\n\n  .add('default type', () => {\n    const props = {\n      messageItems: [{message: 'default type (explicit)', toastType: 'default'}],\n      wipeMessages: () => console.info('wipeMessages executed'),\n    };\n    return (\n      <BasicYggioMessageToaster {...props} />\n    );\n  })\n\n  .add('info type', () => {\n    const props = {\n      messageItems: [{message: 'info type', toastType: 'info'}],\n      wipeMessages: () => console.info('wipeMessages executed'),\n    };\n    return (\n      <BasicYggioMessageToaster {...props} />\n    );\n  })\n\n  .add('warn type', () => {\n    const props = {\n      messageItems: [{message: 'warn type', toastType: 'warn'}],\n      wipeMessages: () => console.info('wipeMessages executed'),\n    };\n    return (\n      <BasicYggioMessageToaster {...props} />\n    );\n  })\n\n  .add('error type', () => {\n    const props = {\n      messageItems: [{message: 'error type', toastType: 'error'}],\n      wipeMessages: () => console.info('wipeMessages executed'),\n    };\n    return (\n      <BasicYggioMessageToaster {...props} />\n    );\n  });\n","// api-state.redux.js\n\nimport _ from 'lodash';\nimport * as api from '../network/http-api';\n\nimport {getYggioToken, removeYggioToken} from '../network/yggio-token';\n\nimport {NETWORK_ERROR_MESSAGE} from '../constants';\n\n// Hooking up the connectivity logic is a bit dirty, but is a necessary evil\nimport {actions as connectivityActions} from './connectivity.redux';\nimport {actions as messageStackActions} from './message-stack.redux';\n\nconst ACTION_TYPES = {\n  httpRequest: 'httpRequest',\n  httpSuccess: 'httpSuccess',\n  httpFailure: 'httpFailure',\n};\n\nconst actions = _.mapValues(api, (resource, resourceType) => {\n  // each resource has a set of routes\n  const routes = _.mapValues(resource, (route, routeName) => {\n    // each route gets an action\n    const action = (...args) => (dispatch, getState) => {\n\n      // NOTE: This caused errors and things seems to be working fine without it\n      // WARNING: getState should be generally avoided (double-dipping)\n      // This (ensuring connection) should be one of very few exceptions\n      // const connectivityState = _.isFunction(getState) && getState().connectivity.connectivityState;\n      // MAYBE this should not be done, or be opt-in/out (?)\n      // if (connectivityState && connectivityState !== CONNECTIVITY_STATES.connected) {\n      // give the calling action/component to handle error (so success cannot be inferred)\n      // return Promise.reject(CONNECTIVITY_ERROR);\n      // }\n\n      // OTHERWISE: after pre-check, perform the api call\n      const token = getYggioToken();\n      dispatch({\n        type: ACTION_TYPES.httpRequest,\n        payload: {resourceType, routeName},\n      });\n      return route(token)(...args)\n        .then(res => {\n          dispatch({\n            type: ACTION_TYPES.httpSuccess,\n            payload: {resourceType, routeName, res},\n          });\n\n          return res;\n        })\n        .catch(async err => {\n          const responseStatus = _.get(err, 'response.status');\n          // if not authorized --> wipe local identity\n          if (responseStatus === 401) {\n            removeYggioToken();\n          }\n          // if connection not found --> notify connectivity management\n          if (err.message === NETWORK_ERROR_MESSAGE) { // check for network error\n            dispatch(connectivityActions.setOffline());\n          }\n          // all other general system-wide error-handling\n          dispatch({\n            type: ACTION_TYPES.httpFailure,\n            payload: {resourceType, routeName, err},\n          });\n          // raise an error toast\n          dispatch(messageStackActions.pushMessage(err));\n          // and throw for possible custom handling down the line\n          throw err;\n        });\n    };\n    return action;\n  });\n  return routes;\n});\n\n\nconst defaultState = _.mapValues(api, resource => _.mapValues(resource, () => ({\n  res: null,\n  err: null,\n  isLoading: false,\n})));\n\nconst reducer = (state = defaultState, action) => {\n  const {type, payload} = action;\n  switch (type) {\n\n    case ACTION_TYPES.httpRequest: {\n      const {resourceType, routeName} = payload;\n      const nextState = {\n        ...state,\n        [resourceType]: {\n          ...(state[resourceType]),\n          [routeName]: {\n            ...(state[resourceType][routeName]),\n            isLoading: true,\n          },\n        },\n      };\n      return nextState;\n    }\n\n    case ACTION_TYPES.httpSuccess: {\n      const {resourceType, routeName, res} = payload;\n      const nextState = {\n        ...state,\n        [resourceType]: {\n          ...(state[resourceType]),\n          [routeName]: {\n            res,\n            err: null,\n            isLoading: false,\n          },\n        },\n      };\n      return nextState;\n    }\n\n    case ACTION_TYPES.httpFailure: {\n      const {resourceType, routeName, err} = payload;\n      const nextState = {\n        ...state,\n        [resourceType]: {\n          ...(state[resourceType]),\n          [routeName]: {\n            res: null,\n            err,\n            isLoading: false,\n          },\n        },\n      };\n      return nextState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// app-history.redux.js\n\n// modules\n// import _ from 'lodash';\n\nconst MESSAGE_STACK_DEFAULT_LIMIT = 1;\n\nconst ACTION_TYPES = {\n  setAppHistoryAddress: 'setAppHistoryAddress',\n  removeAppHistoryAddress: 'removeAppHistoryAddress',\n};\n\n\nconst actions = {\n\n  setAppHistory: address => dispatch => dispatch({\n    type: ACTION_TYPES.setAppHistoryAddress,\n    payload: {address},\n  }),\n  removeAppHistory: () => dispatch => dispatch({\n    type: ACTION_TYPES.removeAppHistoryAddress,\n  }),\n\n};\n\nconst defaultState = {\n  address: null,\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.setAppHistoryAddress: {\n      const {address} = action.payload;\n      const next = {\n        ...state,\n        address: address || null,\n      };\n      return next;\n    }\n\n    case ACTION_TYPES.removeAppHistoryAddress: {\n      const next = {\n        ...state,\n        address: null,\n      };\n      return next;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// connectivity.redux.js\n\nimport _ from 'lodash';\nimport delay from 'delay';\nimport {version as versionApi} from '../network/http-api';\n\nimport {CONNECTIVITY_STATES} from '../../constants';\n\nconst CONNECTION_ATTEMPT_PERIOD = 1000; // ms\n\nconst ACTION_TYPES = {\n  connectivitySetState: 'connectivitySetState',\n  activateConnectivity: 'activateConnectivity',\n  deactivateConnectivity: 'deactivateConnectivity',\n};\n\nconst internalActions = {\n  setConnectivityState: connectivityState => {\n    // perform a perfunctory sanity check\n    if (!_.includes(CONNECTIVITY_STATES, connectivityState)) {\n      throw new Error(`DevErr: Invalid connectivity state: ${connectivityState}`);\n    }\n    return {\n      type: ACTION_TYPES.connectivitySetState,\n      payload: {connectivityState},\n    };\n  },\n  activateConnectivity: () => ({\n    type: ACTION_TYPES.activateConnectivity,\n  }),\n  deactivateConnectivity: () => ({\n    type: ACTION_TYPES.deactivateConnectivity,\n  }),\n};\n\n// local state - tries to reconnect\nlet isConnecting = false; // STATEFUL!!\nconst recursiveAttemptReconnect = async dispatch => {\n  if (!isConnecting) {\n    return; // done - do nothing\n  }\n  // getVersion - simple api call that should work if connection is possible\n  let err;\n  try {\n    const res = await versionApi.getVersion()();\n  } catch (e) {\n    err = e;\n  }\n  // if we do not have an error, then we are done\n  // and either record or recurse\n  if (!err) {\n    // check to make sure connection attempt was not externally cancelled during await\n    if (isConnecting) {\n      dispatch(internalActions.setConnectivityState(CONNECTIVITY_STATES.connected));\n    }\n    isConnecting = false;\n    return; // done\n  }\n  // otherwise we have an error and need to try again\n  await delay(CONNECTION_ATTEMPT_PERIOD);\n  recursiveAttemptReconnect(dispatch);\n};\nconst attemptReconnect = async dispatch => {\n  // top level check\n  if (isConnecting) {\n    throw new Error('DevErr: by construction, isConnecting should ALWAYS be false when attemptReconnect is called');\n  }\n  isConnecting = true;\n  recursiveAttemptReconnect(dispatch);\n};\n\nconst actions = {\n  setOffline: () => dispatch => {\n    dispatch(internalActions.setConnectivityState(CONNECTIVITY_STATES.offline));\n    // cancel all and any attemptReconnect until we are back online\n    isConnecting = false;\n  },\n  setOnline: () => async dispatch => {\n    dispatch(internalActions.setConnectivityState(CONNECTIVITY_STATES.online));\n    // run ONLY when not already running, and do NOT await for the result of attemptReconnect!!!!!\n    if (!isConnecting) {\n      attemptReconnect(dispatch);\n    }\n  },\n  activate: () => async dispatch => {\n    dispatch(internalActions.activateConnectivity());\n  },\n  deactivate: () => async dispatch => {\n    dispatch(internalActions.deactivateConnectivity());\n  },\n};\n\nconst defaultState = {\n  connectivityState: CONNECTIVITY_STATES.offline,\n  isActive: false,\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.connectivitySetState: {\n      const {connectivityState} = action.payload;\n      const next = {\n        ...state,\n        connectivityState,\n      };\n      return next;\n    }\n\n    case ACTION_TYPES.activateConnectivity: {\n      const next = {\n        ...state,\n        isActive: true,\n      };\n      return next;\n    }\n\n    case ACTION_TYPES.deactivateConnectivity: {\n      const next = {\n        ...state,\n        isActive: false,\n      };\n      return next;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// core-settings.redux.js\n\n// modules\n// import _ from 'lodash';\n\nimport {getSocket} from '../network/socketio';\n\nconst ACTION_TYPES = {\n  // more needs to happen here\n  coreSettingsStartSocket: 'coreSettingsStartSocket',\n  coreSettingsStopSocket: 'coreSettingsStopSocket',\n};\n\nconst internalActions = {\n  startSocket: () => ({\n    type: ACTION_TYPES.coreSettingsStartSocket,\n  }),\n  stopSocket: () => ({\n    type: ACTION_TYPES.coreSettingsStopSocket,\n  }),\n};\n\n// this is DELIBERATELY being kept out of the state\n// and is ONLY modified by actions, NOT internalActions\nlet socketConnection = null;\n\nconst actions = {\n\n  openSocket: () => dispatch => {\n    if (socketConnection) {\n      return;\n    }\n    // add listeners?\n    socketConnection = getSocket();\n    dispatch(internalActions.startSocket());\n  },\n  closeSocket: () => dispatch => {\n    // remove listeners?\n    socketConnection.close();\n    socketConnection = null;\n    dispatch(internalActions.stopSocket());\n  },\n};\n\nconst defaultState = {\n  useSocket: false,\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.coreSettingsStartSocket: {\n      const next = {\n        ...state,\n        useSocket: true,\n      };\n      return next;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// access-rights.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbAccessRightsReplaceOne: 'dbAccessRightsReplaceOne',\n  dbAccessRightsRemoveOne: 'dbAccessRightsRemoveOne',\n  dbAccessRightsReplaceMany: 'dbAccessRightsReplaceMany',\n  dbAccessRightsReset: 'dbAccessRightsReset',\n};\n\n\nconst internalActions = {\n  replaceAccessRight: accessRight => ({\n    type: ACTION_TYPES.dbAccessRightsReplaceOne,\n    payload: {accessRight},\n  }),\n  removeAccessRight: accessRight => ({\n    type: ACTION_TYPES.dbAccessRightsRemoveOne,\n    payload: {accessRight},\n  }),\n  replaceAccessRights: accessRights => ({\n    type: ACTION_TYPES.dbAccessRightsReplaceMany,\n    payload: {accessRights},\n  }),\n  resetAccessRights: () => ({\n    type: ACTION_TYPES.dbAccessRightsReset,\n  }),\n};\n\nconst actions = {\n  fetchAccessRightResource: ({deviceId}) => async dispatch => {\n    const getAccessRightAction = apiActions.accessRights.fetchResource({deviceId});\n    const accessRights = await dispatch(getAccessRightAction);\n    dispatch(internalActions.replaceAccessRights(accessRights));\n  },\n  fetchAccessRightSubject: ({subjectId}) => async dispatch => {\n    const getAccessRightAction = apiActions.accessRights.fetchSubject({subjectId});\n    const accessRights = await dispatch(getAccessRightAction);\n    dispatch(internalActions.replaceAccessRights(accessRights));\n  },\n  removeAccessRight: ({deviceId, scope, subjectId, subjectType}) => async dispatch => {\n    const accessRight = {\n      scope,\n      subjectId,\n      subjectType,\n      resourceId: deviceId,\n    };\n    const template = {\n      deviceId,\n      scope,\n      subjectId,\n      subjectType,\n    };\n    const removeAccessRightAction = apiActions.accessRights.remove(template);\n    await dispatch(removeAccessRightAction);\n    dispatch(internalActions.removeAccessRight(accessRight));\n  },\n  createAccessRight: ({deviceId, template}) => async dispatch => {\n    const createAccessRightAction = apiActions.accessRights.create({deviceId, template});\n    await dispatch(createAccessRightAction);\n    dispatch(internalActions.replaceAccessRight(template));\n  },\n  resetAccessRights: () => dispatch => {\n    dispatch(internalActions.resetAccessRights());\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case ACTION_TYPES.dbAccessRightsReplaceOne: {\n      const {accessRight} = action.payload;\n      const right = _.find(state, right => _.eq(right.subjectId, accessRight.subjectId));\n      const scope = _.get(right, 'scope') || [];\n      if (accessRight.subjectId) {\n        return {\n          ...state,\n          [accessRight.subjectId]: {\n            ...accessRight,\n            scope: _.uniq([...scope, ...accessRight.scope]),\n          },\n        };\n      }\n\n      if (accessRight.resourceId) {\n        return {\n          ...state,\n          [accessRight.resourceId]: {\n            ...accessRight,\n            scope: _.uniq([...scope, ...accessRight.scope]),\n          },\n        };\n      }\n    }\n\n    case ACTION_TYPES.dbAccessRightsRemoveOne: {\n      const {accessRight} = action.payload;\n      const currentAccessRight = _.find(state, right => _.eq(right.subjectId, accessRight.subjectId));\n      const [right] = accessRight.scope;\n      if (_.isEmpty(_.without(currentAccessRight.scope, right))) {\n        return _.omit(state, accessRight.subjectId);\n      }\n\n      return {\n        ...state,\n        [accessRight.subjectId]: {\n          ...currentAccessRight,\n          scope: _.without(currentAccessRight.scope, right)\n        }\n      };\n    }\n\n    case ACTION_TYPES.dbAccessRightsReplaceMany: {\n      const {accessRights} = action.payload;\n      return {\n        ...state,\n        ..._.reduce(accessRights, (acc, curr) => {\n          if (curr.subjectId) {\n            acc[curr.subjectId] = curr;\n          }\n          if (curr.resourceId) {\n            acc[curr.resourceId] = curr;\n          }\n          return acc;\n        }, {}),\n      };\n    }\n\n    case ACTION_TYPES.dbAccessRightsReset: {\n      return defaultState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","import _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbAppsReplaceOne: 'dbAppsReplaceOne',\n  dbAppsReplaceMany: 'dbAppsReplaceMany',\n};\n\nconst internalActions = {\n  replaceApp: app => ({\n    type: ACTION_TYPES.dbAppsReplaceOne,\n    payload: {app},\n  }),\n\n  replaceApps: apps => ({\n    type: ACTION_TYPES.dbAppsReplaceMany,\n    payload: {apps},\n  }),\n};\n\nconst actions = {\n  getApp: appId => async dispatch => {\n    const getAppAction = apiActions.apps.get(appId);\n    const app = await dispatch(getAppAction);\n    dispatch(internalActions.replaceApp(app));\n  },\n\n  fetchApps: () => async dispatch => {\n    const fetchAppsAction = apiActions.apps.fetch();\n    const apps = await dispatch(fetchAppsAction);\n    dispatch(internalActions.replaceApps(apps));\n  },\n\n};\n\nconst defaultState = [];\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbAppsReplaceOne: {\n      const {app} = action.payload;\n      return {...state, [app._id]: app};\n    }\n\n    case ACTION_TYPES.dbAppsReplaceMany: {\n      const {apps} = action.payload;\n      const replacements = [];\n      _.each(apps, app => {\n        replacements.push(app);\n      });\n      return replacements;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// auth.redux.js\n\n// import _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\nimport {\n  setYggioToken as setCookieToken,\n  removeYggioToken as removeCookieToken,\n} from '../../network/yggio-token';\n\nconst AUTH_SET_INFO = 'AUTH_SET_INFO';\nconst AUTH_SET_CODE = 'AUTH_SET_CODE';\nconst AUTH_SET_YGGIO_TOKEN = 'AUTH_SET_YGGIO_TOKEN';\nconst AUTH_SET_YGGIO_USER = 'AUTH_SET_YGGIO_USER';\n\nconst internalActions = {\n\n  setInfo: info => ({\n    type: AUTH_SET_INFO,\n    payload: {info},\n  }),\n\n  setCode: code => ({\n    type: AUTH_SET_CODE,\n    payload: {code},\n  }),\n\n  setToken: token => ({\n    type: AUTH_SET_YGGIO_TOKEN,\n    payload: {token},\n  }),\n\n  setUser: user => ({\n    type: AUTH_SET_YGGIO_USER,\n    payload: {user},\n  }),\n\n};\n\nconst storeYggioToken = token => dispatch => {\n  dispatch(internalActions.setToken(token));\n  dispatch(internalActions.setUser(null));\n  if (token) {\n    const retrieveUserAction = apiActions.auth.getTokenUser();\n    return dispatch(retrieveUserAction)\n      .then(user => {\n        dispatch(internalActions.setUser(user));\n      })\n      .catch(err => undefined);\n  }\n};\n\nconst actions = {\n  updateCurrentUser: ({data}) => async dispatch => {\n    const updateUserAction = apiActions.users.update({data});\n    await dispatch(updateUserAction);\n    dispatch(internalActions.setUser(data));\n  },\n\n  storeYggioToken, // needs to be exported individually for the monitor\n\n  info: () => async dispatch => {\n    const infoAction = apiActions.auth.info();\n    const authInfo = await dispatch(infoAction);\n    dispatch(internalActions.setInfo(authInfo));\n  },\n\n  code: params => async dispatch => {\n    const codeAction = apiActions.auth.code(params);\n    const {token} = await dispatch(codeAction);\n    setCookieToken(token);\n    return storeYggioToken(token)(dispatch);\n  },\n\n  signout: () => dispatch => {\n    removeCookieToken();\n    dispatch(internalActions.setToken(null));\n    dispatch(internalActions.setUser(null));\n  },\n\n  localLogin: ({username, password}) => dispatch => {\n    const loginAction = apiActions.auth.localLogin({username, password});\n    return dispatch(loginAction)\n      .then(({token}) => {\n        setCookieToken(token);\n        return storeYggioToken(token)(dispatch);\n      })\n      .catch(err => undefined); // should these really be caught? hmm..\n  },\n\n  signup: ({username, password, email}) => dispatch => {\n    const signupAction = apiActions.users.create({\n      username, password, email,\n    });\n    return dispatch(signupAction)\n      .catch(err => undefined); // should these really be caught? hmm..\n  },\n\n};\n\nconst defaultState = {\n  info: null,\n  code: null,\n  token: null,\n  user: null,\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case AUTH_SET_INFO: {\n      const {info} = action.payload;\n      if (!info) {\n        return {\n          ...state,\n          info: null,\n        };\n      }\n      return {\n        ...state,\n        info,\n      };\n    }\n\n    case AUTH_SET_CODE: {\n      const {code} = action.payload;\n      if (!code) {\n        return {\n          ...state,\n          code: null,\n        };\n      }\n      return {\n        ...state,\n        code,\n      };\n    }\n\n    case AUTH_SET_YGGIO_TOKEN: {\n      const {token} = action.payload;\n      if (!token) {\n        return {\n          ...state,\n          token: null,\n        };\n      }\n      return {\n        ...state,\n        token,\n      };\n    }\n\n    case AUTH_SET_YGGIO_USER: {\n      const {user} = action.payload;\n      if (!user) {\n        return {\n          ...state,\n          user: null,\n        };\n      }\n      return {\n        ...state,\n        user,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// calculations.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\nimport {internalActions as internalDeviceActions} from './devices.redux';\n\nconst ACTION_TYPES = {\n  dbCalculationsReplaceOne: 'dbCalculationsReplaceOne',\n  dbCalculationsRemoveOne: 'dbCalculationsRemoveOne',\n  dbCalculationsReplaceMany: 'dbCalculationsReplaceMany',\n};\n\n\nconst internalActions = {\n  replaceCalculation: calculation => ({\n    type: ACTION_TYPES.dbCalculationsReplaceOne,\n    payload: {calculation},\n  }),\n\n  removeCalculation: calculationId => ({\n    type: ACTION_TYPES.dbCalculationsRemoveOne,\n    payload: {calculationId},\n  }),\n\n  replaceCalculations: calculations => ({\n    type: ACTION_TYPES.dbCalculationsReplaceMany,\n    payload: {calculations},\n  }),\n};\n\nconst actions = {\n  createCalculation: (calculationTemplate, {template, type, automaticUpdate}) => async dispatch => {\n    if (type === 'createNewDevice') {\n      const createDeviceAction = apiActions.devices.create({template});\n      const created = await dispatch(createDeviceAction);\n      const findDeviceAction = apiActions.devices.get({deviceId: created._id});\n      const device = await dispatch(findDeviceAction);\n      calculationTemplate.destination.mongoId = device._id;\n      dispatch(internalDeviceActions.replaceDevice(device));\n    }\n    if (automaticUpdate) {\n      const deviceItems = _.map(calculationTemplate.sources, 'sourceId');\n      const seekDevicesAction = apiActions.devices.seek({deviceItems});\n      const devices = await dispatch(seekDevicesAction);\n      const updatedSources = _.map(calculationTemplate.sources, async source => {\n        const device = _.find(devices, device => device._id === source.sourceId);\n        const updates = {\n          rabbitRouting: {\n            value: _.uniq([\n              ...device.rabbitRouting.value,\n              'calculator',\n              'receiver',\n            ]),\n          }\n        };\n        const updateDeviceAction = apiActions.devices.update({updates, deviceId: source.sourceId});\n        const result = await dispatch(updateDeviceAction);\n        return result;\n      });\n      await Promise.all(updatedSources);\n    }\n\n    const createCalculationAction = apiActions.calculations.create(calculationTemplate);\n    const calculation = await dispatch(createCalculationAction);\n    dispatch(internalActions.replaceCalculation(calculation));\n  },\n\n  fetchCalculations: () => async dispatch => {\n    const fetchCalculationsAction = apiActions.calculations.fetch();\n    const calculations = await dispatch(fetchCalculationsAction);\n    dispatch(internalActions.replaceCalculations(calculations));\n  },\n\n  getCalculation: calculationId => async dispatch => {\n    const getCalculationAction = apiActions.calculations.get(calculationId);\n    const calculation = await dispatch(getCalculationAction);\n    dispatch(internalActions.replaceCalculation(calculation));\n  },\n\n  updateCalculation: updates => async dispatch => {\n    const updateCalculationAction = apiActions.calculations.update(updates);\n    const calculation = await dispatch(updateCalculationAction);\n    dispatch(internalActions.replaceCalculation(calculation));\n  },\n\n  deleteCalculation: calculationId => async dispatch => {\n    const deleteCalculationAction = apiActions.calculations.remove(calculationId);\n    await dispatch(deleteCalculationAction);\n    dispatch(internalActions.removeCalculation(calculationId));\n  },\n  performCalculation: ({calculation, device}) => async dispatch => {\n    const {calculation: {calcType, interval}} = calculation;\n    const performCalculationAction = apiActions.calculations.perform(calculation._id, calcType, interval);\n    const calculationResult = await dispatch(performCalculationAction);\n    const updates = {\n      [calculation.destination.path]: calculationResult.result,\n    };\n    const updateDeviceAction = apiActions.devices.update({deviceId: device._id, updates});\n    dispatch(updateDeviceAction);\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbCalculationsReplaceOne: {\n      const {calculation} = action.payload;\n      return {...state, [calculation._id]: calculation};\n    }\n\n    case ACTION_TYPES.dbCalculationsRemoveOne: {\n      const {calculationId} = action.payload;\n      return _.omit(state, calculationId);\n    }\n\n    case ACTION_TYPES.dbCalculationsReplaceMany: {\n      const {calculations} = action.payload;\n      const replacements = {};\n      _.each(calculations, calculation => {\n        replacements[calculation._id] = calculation;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// channels.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbChannelsReplaceOne: 'dbChannelsReplaceOne',\n  dbChannelsRemoveOne: 'dbChannelsRemoveOne',\n  dbChannelsReplaceMany: 'dbChannelsReplaceMany',\n};\n\nconst internalActions = {\n  replaceChannel: channel => ({\n    type: ACTION_TYPES.dbChannelsReplaceOne,\n    payload: {channel},\n  }),\n\n  removeChannel: channelId => ({\n    type: ACTION_TYPES.dbChannelsRemoveOne,\n    payload: {channelId},\n  }),\n\n  replaceChannels: channels => ({\n    type: ACTION_TYPES.dbChannelsReplaceMany,\n    payload: {channels},\n  }),\n};\n\nconst actions = {\n  createChannel: channelTemplate => async dispatch => {\n    const createChannelAction = apiActions.channels.create(channelTemplate);\n    const channel = await dispatch(createChannelAction);\n    dispatch(internalActions.replaceChannel(channel));\n  },\n\n  fetchChannels: deviceId => async dispatch => {\n    const fetchChannelsAction = apiActions.channels.get(deviceId);\n    const channels = await dispatch(fetchChannelsAction);\n    dispatch(internalActions.replaceChannels(channels));\n  },\n\n  removeChannel: channelId => async dispatch => {\n    const deleteChannelAction = apiActions.channels.remove(channelId);\n    await dispatch(deleteChannelAction);\n    dispatch(internalActions.removeChannel(channelId));\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbChannelsReplaceOne: {\n      const {channel} = action.payload;\n      return {...state, [channel._id]: channel};\n    }\n\n    case ACTION_TYPES.dbChannelsRemoveOne: {\n      const {channelId} = action.payload;\n      return _.omit(state, channelId);\n    }\n\n    case ACTION_TYPES.dbChannelsReplaceMany: {\n      const {channels} = action.payload;\n      const replacements = {};\n      _.each(channels, channel => {\n        replacements[channel._id] = channel;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// device-commands.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbDeviceCommandsReplaceOne: 'dbDeviceCommandsReplaceOne',\n  dbDeviceCommandsRemoveOne: 'dbDeviceCommandsRemoveOne',\n  dbDeviceCommandsReplaceMany: 'dbDeviceCommandsReplaceMany',\n};\n\nconst internalActions = {\n  replaceDeviceCommand: ({command, deviceId}) => ({\n    type: ACTION_TYPES.dbDeviceCommandsReplaceOne,\n    payload: {command, deviceId},\n  }),\n  removeDeviceCommand: deviceId => ({\n    type: ACTION_TYPES.dbDeviceCommandsRemoveOne,\n    payload: {deviceId},\n  }),\n  replaceDeviceCommands: deviceCommands => ({\n    type: ACTION_TYPES.dbDeviceCommandsReplaceMany,\n    payload: {deviceCommands},\n  }),\n};\n\nconst actions = {\n  sendCommand: ({command, data, deviceId}) => async dispatch => {\n    const sendCommandAction = apiActions.devices.sendCommand({command, data});\n    const commandResponse = await dispatch(sendCommandAction);\n    dispatch(internalActions.replaceDeviceCommand({command: commandResponse, deviceId}));\n  },\n  deleteCommand: deviceId => async dispatch => {\n    dispatch(internalActions.removeDeviceCommand(deviceId));\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.dbDeviceCommandsReplaceOne: {\n      const {command, deviceId} = action.payload;\n      return {...state, [deviceId]: command};\n    }\n\n    case ACTION_TYPES.dbDeviceCommandsRemoveOne: {\n      const {deviceId} = action.payload;\n      return _.omit(state, deviceId);\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  internalActions,\n  actions,\n  reducer,\n};\n","// device-details.redux.js\n\n// This is a composite object -- uses deviceId as primary index\n\nimport _ from 'lodash';\n\nconst ACTION_TYPES = {\n  dbDeviceDetailsRemoveAll: 'dbDeviceDetailsRemoveAll',\n  dbDeviceDetailsReplaceMany: 'dbDeviceDetailsReplaceMany',\n  dbDeviceDetailsReplaceOne: 'dbDeviceDetailsReplaceOne',\n};\n\n\nconst internalActions = {\n\n  removeAllDeviceDetails: () => ({\n    type: ACTION_TYPES.dbDeviceDetailsRemoveAll,\n  }),\n\n  replaceDeviceDetails: deviceDetails => ({\n    type: ACTION_TYPES.dbDeviceDetailsReplaceMany,\n    payload: {deviceDetails},\n  }),\n\n  replaceUser: deviceDetail => ({\n    type: ACTION_TYPES.dbDeviceDetailsReplaceOne,\n    payload: {deviceDetail},\n  }),\n\n};\n\n\nconst actions = {};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbDeviceDetailsRemoveAll: {\n      return defaultState;\n    }\n\n    case ACTION_TYPES.dbDeviceDetailsReplaceMany: {\n      const {deviceDetails} = action.payload;\n      const replacements = {};\n      _.each(deviceDetails, deviceDetail => {\n        replacements[deviceDetail.resourceId] = deviceDetail;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    case ACTION_TYPES.dbDeviceDetailsReplaceOne: {\n      const {deviceDetail} = action.payload;\n      return {\n        ...state,\n        [deviceDetail.resourceId]: deviceDetail,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  internalActions,\n  actions,\n  reducer,\n};\n","// subscriptions.redux.js\n\nimport _ from 'lodash';\nimport {subscribe} from '../../network/socketio';\n\nconst ACTION_TYPES = {\n  dbSubscriptionsRemove: 'dbSubscriptionsRemove',\n  dbSubscriptionsCreate: 'dbSubscriptionsCreate',\n};\n\nconst actions = {\n  removeSubscriptions: deviceIds => dispatch => dispatch({\n    type: ACTION_TYPES.dbSubscriptionsRemove,\n    payload: {deviceIds},\n  }),\n  createSubscriptions: deviceIds => dispatch => {\n    subscribe(deviceIds);\n    dispatch({\n      type: ACTION_TYPES.dbSubscriptionsCreate,\n      payload: {deviceIds},\n    });\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbSubscriptionsRemove: {\n      const {deviceIds} = action.payload;\n      return _.omit(state, deviceIds);\n    }\n\n    case ACTION_TYPES.dbSubscriptionsCreate: {\n      const {deviceIds} = action.payload;\n      const subscriptions = _.reduce(deviceIds, (acc, deviceId) => {\n        acc[deviceId] = true;\n        return acc;\n      }, {});\n      return {...state, ...subscriptions};\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// device-total-count.redux.js\n\nconst ACTION_TYPES = {\n  setDeviceTotalCount: 'setDeviceTotalCount',\n};\n\nconst actions = {\n  setDeviceTotalCount: deviceTotalCount => ({\n    type: ACTION_TYPES.setDeviceTotalCount,\n    payload: {deviceTotalCount},\n  }),\n};\n\nconst defaultState = null;\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.setDeviceTotalCount: {\n      const {deviceTotalCount} = action.payload;\n      return deviceTotalCount || null;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// devices.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\nimport {actions as deviceTotalCountActions} from './device-total-count.redux';\n\nconst ACTION_TYPES = {\n  dbDevicesReplaceOne: 'dbDevicesReplaceOne',\n  dbDevicesRemoveOne: 'dbDevicesRemoveOne',\n  dbDevicesReplaceMany: 'dbDevicesReplaceMany',\n  dbDevicesRemoveMany: 'dbDevicesRemoveMany',\n};\n\n\nconst internalActions = {\n  replaceDevice: device => ({\n    type: ACTION_TYPES.dbDevicesReplaceOne,\n    payload: {device},\n  }),\n  removeDevice: deviceId => ({\n    type: ACTION_TYPES.dbDevicesRemoveOne,\n    payload: {deviceId},\n  }),\n  removeDevices: deviceIds => ({\n    type: ACTION_TYPES.dbDevicesRemoveOne,\n    payload: {deviceIds},\n  }),\n  replaceDevices: devices => ({\n    type: ACTION_TYPES.dbDevicesReplaceMany,\n    payload: {devices},\n  }),\n};\n\nconst actions = {\n  getDevice: ({deviceId}) => async dispatch => {\n    const getDeviceAction = apiActions.devices.get({deviceId});\n    const device = await dispatch(getDeviceAction);\n    dispatch(internalActions.replaceDevice(device));\n  },\n  deleteDevice: ({deviceId}) => async dispatch => {\n    const deleteDeviceAction = apiActions.devices.remove({deviceId});\n    await dispatch(deleteDeviceAction);\n    dispatch(internalActions.removeDevice(deviceId));\n  },\n  deleteDevices: deviceIds => async dispatch => {\n    const deleteDeviceAction = apiActions.devices.removeMany(deviceIds);\n    await dispatch(deleteDeviceAction);\n    dispatch(internalActions.removeDevices(deviceIds));\n  },\n  fetchDevices: (limit, offset, orderBy, filter) => async dispatch => {\n    const fetchDevicesAction = apiActions.devices.fetch(limit, offset, orderBy, filter);\n    const {data: devices, headers} = await dispatch(fetchDevicesAction);\n    dispatch(deviceTotalCountActions.setDeviceTotalCount(headers['fiware-total-count']));\n    dispatch(internalActions.replaceDevices(devices));\n  },\n  peekDevices: () => async dispatch => {\n    const peekDevicesAction = apiActions.devices.peek();\n    const devices = await dispatch(peekDevicesAction);\n    dispatch(internalActions.replaceDevices(devices));\n  },\n  seekDevices: ({deviceItems}) => async dispatch => {\n    const seekDevicesAction = apiActions.devices.seek({deviceItems});\n    const devices = await dispatch(seekDevicesAction);\n    // NOTE: if a device has not been updated it is returned as \"{_id}\"\n    const updatedDevices = _.filter(devices, device => _.size(device) > 1);\n    dispatch(internalActions.replaceDevices(updatedDevices)); // NEEDS WORK\n  },\n  createDevice: ({template}) => async dispatch => {\n    const createDeviceAction = apiActions.devices.create({template});\n    const device = await dispatch(createDeviceAction);\n    dispatch(internalActions.replaceDevice(device));\n  },\n  updateDevice: ({deviceId, updates}) => async dispatch => {\n    const updateDeviceAction = apiActions.devices.update({deviceId, updates});\n    const {iotnode} = await dispatch(updateDeviceAction);\n    dispatch(internalActions.replaceDevice(iotnode));\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case ACTION_TYPES.dbDevicesReplaceOne: {\n      const {device} = action.payload;\n      return {...state, [device._id]: device};\n    }\n\n    case ACTION_TYPES.dbDevicesRemoveOne: {\n      const {deviceId} = action.payload;\n      return _.omit(state, deviceId);\n    }\n\n    case ACTION_TYPES.dbDevicesRemoveMany: {\n      const {deviceIds} = action.payload;\n      return _.omit(state, deviceIds);\n    }\n\n    case ACTION_TYPES.dbDevicesReplaceMany: {\n      const {devices} = action.payload;\n      const replacements = {};\n      _.each(devices, device => {\n        replacements[device._id] = device;\n      });\n      return {\n        ...replacements,\n      };\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport {\n  internalActions,\n  actions,\n  reducer,\n};\n","// images.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbImagesReplaceNameSpace: 'dbImagesReplaceNameSpace',\n  dbImagesAppendToNameSpace: 'dbImagesAppendToNameSpace',\n  dbImagesRemoveNameSpace: 'dbImagesRemoveNameSpace',\n  dbImagesDeleteImage: 'dbImagesDeleteImage',\n};\n\n\nconst internalActions = {\n  replaceNameSpace: (nameSpace, images) => ({\n    type: ACTION_TYPES.dbImagesReplaceNameSpace,\n    payload: {nameSpace, images},\n  }),\n  appendToNameSpace: (nameSpace, images) => ({\n    type: ACTION_TYPES.dbImagesAppendToNameSpace,\n    payload: {nameSpace, images},\n  }),\n  removeNameSpace: nameSpace => ({\n    type: ACTION_TYPES.dbImagesRemoveNameSpace,\n    payload: {nameSpace},\n  }),\n  deleteImage: (nameSpace, image) => ({\n    type: ACTION_TYPES.dbImagesDeleteImage,\n    payload: {nameSpace, image},\n  }),\n};\n\nconst actions = {\n  getImages: ({nameSpace}) => async dispatch => {\n    const getImagesAction = apiActions.images.getImages({nameSpace});\n    const images = await dispatch(getImagesAction);\n    dispatch(internalActions.replaceNameSpace(nameSpace, images));\n  },\n  uploadImage: ({file, nameSpace}) => async dispatch => {\n    const uploadImageAction = apiActions.images.uploadImage({file, nameSpace});\n    const image = await dispatch(uploadImageAction);\n    dispatch(internalActions.appendToNameSpace(nameSpace, [image]));\n  },\n  deleteImage: ({image, nameSpace}) => async dispatch => {\n    const deleteImageAction = apiActions.images.deleteImage({image, nameSpace});\n    await dispatch(deleteImageAction);\n    dispatch(internalActions.deleteImage(nameSpace, image));\n  },\n  editImage: ({oldImageName, newImageName, nameSpace}) => async dispatch => {\n    const editImageAction = apiActions.images.editImage({oldImageName, newImageName, nameSpace});\n    await dispatch(editImageAction);\n    // NOTE: not entirely sure what should happen here (depends on what type of string image is)\n    dispatch(internalActions.deleteImage(nameSpace, oldImageName));\n    dispatch(internalActions.appendToNameSpace(nameSpace, [newImageName]));\n  },\n\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case ACTION_TYPES.dbImagesReplaceNameSpace: {\n      const {nameSpace, images} = action.payload;\n      const nextState = {\n        ...state,\n        [nameSpace]: _.sortBy(images),\n      };\n      return nextState;\n    }\n\n    case ACTION_TYPES.dbImagesAppendToNameSpace: {\n      const {nameSpace, images} = action.payload;\n      const oldImages = _.get(state, nameSpace, []);\n      const allImages = _.uniq(_.concat(oldImages, images));\n      const nextState = {\n        ...state,\n        [nameSpace]: _.sortBy(allImages),\n      };\n      return nextState;\n    }\n\n    case ACTION_TYPES.dbImagesRemoveNameSpace: {\n      const {nameSpace} = action.payload;\n      return _.omit(state, nameSpace);\n    }\n\n    case ACTION_TYPES.dbImagesDeleteImage: {\n      const {nameSpace, image} = action.payload;\n      const oldImages = _.get(state, nameSpace, []);\n      const updatedImages = _.without(oldImages, image);\n      const nextState = {\n        ...state,\n        [nameSpace]: _.sortBy(updatedImages),\n      };\n      return nextState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","import {combineReducers} from 'redux';\n\nimport {actions as authActions, reducer as authReducer} from './auth.redux';\nimport {actions as appsActions, reducer as appsReducer} from './apps.redux';\nimport {actions as providersActions, reducer as providersReducer} from './providers.redux';\nimport {actions as usersActions, reducer as usersReducer} from './users.redux';\nimport {actions as devicesActions, reducer as devicesReducer} from './devices.redux';\nimport {actions as locationsActions, reducer as locationsReducer} from './locations.redux';\nimport {actions as organizationsActions, reducer as organizationsReducer} from './organizations.redux';\nimport {actions as deviceDetailsActions, reducer as deviceDetailsReducer} from './device-details.redux';\nimport {actions as accessRightsActions, reducer as accessRightsReducer} from './access-rights.redux';\nimport {actions as imagesActions, reducer as imagesReducer} from './images.redux';\nimport {actions as deviceSubscriptionsActions, reducer as deviceSubscriptionsReducer} from './device-subscriptions.redux';\nimport {actions as jobsActions, reducer as jobsReducer} from './jobs.redux';\nimport {actions as calculationsActions, reducer as calculationsReducer} from './calculations.redux';\nimport {actions as channelActions, reducer as channelReducer} from './channels.redux';\nimport {actions as deviceCommandsActions, reducer as deviceCommandsReducer} from './device-commands.redux';\nimport {actions as translatorsActions, reducer as translatorsReducer} from './translators.redux';\nimport {actions as rulesActionsActions, reducer as rulesActionsReducer} from './rules.redux';\n\nimport {reducer as deviceTotalCountReducer} from './device-total-count.redux';\n\nconst actions = {\n  auth: authActions,\n  apps: appsActions,\n  providers: providersActions,\n  accessRights: accessRightsActions,\n  users: usersActions,\n  devices: devicesActions,\n  locations: locationsActions,\n  organizations: organizationsActions,\n  deviceDetails: deviceDetailsActions,\n  images: imagesActions,\n  deviceSubscriptions: deviceSubscriptionsActions,\n  jobs: jobsActions,\n  calculations: calculationsActions,\n  channels: channelActions,\n  deviceCommands: deviceCommandsActions,\n  translators: translatorsActions,\n  rulesActions: rulesActionsActions,\n};\n\nconst reducer = combineReducers({\n  auth: authReducer,\n  apps: appsReducer,\n  providers: providersReducer,\n  accessRights: accessRightsReducer,\n  users: usersReducer,\n  devices: devicesReducer,\n  locations: locationsReducer,\n  organizations: organizationsReducer,\n  deviceDetails: deviceDetailsReducer,\n  images: imagesReducer,\n  deviceSubscriptions: deviceSubscriptionsReducer,\n  jobs: jobsReducer,\n  calculations: calculationsReducer,\n  channels: channelReducer,\n  deviceCommands: deviceCommandsReducer,\n  deviceTotalCount: deviceTotalCountReducer,\n  translators: translatorsReducer,\n  rulesActions: rulesActionsReducer,\n});\n\nexport {\n  actions,\n  reducer,\n};\n","import {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbJobsReplaceOne: 'dbJobsReplaceOne',\n  dbJobsReset: 'dbJobsReset',\n};\n\nconst internalActions = {\n  replaceJob: job => ({\n    type: ACTION_TYPES.dbJobsReplaceOne,\n    payload: {job},\n  }),\n  resetJobs: () => ({\n    type: ACTION_TYPES.dbJobsReset,\n  }),\n};\n\nconst actions = {\n  getJob: ({jobId}) => async dispatch => {\n    const getJobAction = apiActions.jobs.get({jobId});\n    const job = await dispatch(getJobAction);\n    dispatch(internalActions.replaceJob(job));\n  },\n  batchCreateDevices: ({template}) => async dispatch => {\n    const batchCreateDevicesAction = apiActions.devices.batchCreate({template});\n    const job = await dispatch(batchCreateDevicesAction);\n    dispatch(internalActions.replaceJob(job));\n  },\n  resetJobs: () => async dispatch => {\n    dispatch(internalActions.resetJobs());\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbJobsReplaceOne: {\n      const {job} = action.payload;\n      return {...state, [job._id]: job};\n    }\n\n    case ACTION_TYPES.dbJobsReset: {\n      return defaultState;\n    }\n\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport {\n  internalActions,\n  actions,\n  reducer,\n};\n","// locations.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbLocationsReplaceOne: 'dbLocationsReplaceOne',\n  dbLocationsRemoveOne: 'dbLocationsRemoveOne',\n  dbLocationsReplaceMany: 'dbLocationsReplaceMany',\n};\n\n\nconst internalActions = {\n\n  replaceLocation: location => ({\n    type: ACTION_TYPES.dbLocationsReplaceOne,\n    payload: {location},\n  }),\n\n  removeLocation: locationId => ({\n    type: ACTION_TYPES.dbLocationsRemoveOne,\n    payload: {locationId},\n  }),\n\n  replaceLocations: locations => ({\n    type: ACTION_TYPES.dbLocationsReplaceMany,\n    payload: {locations},\n  }),\n\n};\n\nconst actions = {\n\n  createLocation: locationTemplate => async dispatch => {\n    const createLocationAction = apiActions.locations.create(locationTemplate);\n    const location = await dispatch(createLocationAction);\n    dispatch(internalActions.replaceLocation(location));\n  },\n\n  fetchLocations: () => async dispatch => {\n    const fetchLocationsAction = apiActions.locations.fetch();\n    const locations = await dispatch(fetchLocationsAction);\n    dispatch(internalActions.replaceLocations(locations));\n  },\n\n  getLocation: locationId => async dispatch => {\n    const getLocationAction = apiActions.locations.get({locationId});\n    const location = await dispatch(getLocationAction);\n    dispatch(internalActions.replaceLocation(location));\n  },\n\n  updateLocation: updates => async dispatch => {\n    const updateLocationAction = apiActions.locations.update(updates);\n    const location = await dispatch(updateLocationAction);\n    dispatch(internalActions.replaceLocation(location));\n  },\n\n  deleteLocation: locationId => async dispatch => {\n    const deleteLocationAction = apiActions.locations.remove(locationId);\n    await dispatch(deleteLocationAction);\n    dispatch(internalActions.removeLocation(locationId));\n  },\n\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbLocationsReplaceOne: {\n      const {location} = action.payload;\n      return {...state, [location._id]: location};\n    }\n\n    case ACTION_TYPES.dbLocationsRemoveOne: {\n      const {locationId} = action.payload;\n      return _.omit(state, locationId);\n    }\n\n    case ACTION_TYPES.dbLocationsReplaceMany: {\n      const {locations} = action.payload;\n      const replacements = {};\n      _.each(locations, location => {\n        replacements[location._id] = location;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// organizations.redux.js\n\nimport _ from 'lodash';\nimport {organizationUtils} from '../../../utils';\nimport {actions as apiActions} from '../api-state.redux';\n\nimport {internalActions as usersInternalActions} from './users.redux';\nimport {internalActions as deviceDetailsInteralActions} from './device-details.redux';\n\nconst ACTION_TYPES = {\n  dbOrganizationsReplaceMany: 'dbOrganizationsReplaceMany',\n  dbOrganizationsReplaceOne: 'dbOrganizationsReplaceOne',\n  dbOrganizationsUpdateOne: 'dbOrganizationsUpdateOne',\n  dbOrganizationsReplaceMembers: 'dbOrganizationsReplaceMembers',\n  dbOrganizationsReplaceRootUnit: 'dbOrganizationsReplaceRootUnit',\n  dbOrganizationsDeleteUnit: 'dbOrganizationsDeleteUnit',\n  dbOrganizationsReplaceAccessTokens: 'dbOrganizationsReplaceAccessTokens',\n};\n\n\nconst internalActions = {\n\n  replaceOrganizations: organizations => ({\n    type: ACTION_TYPES.dbOrganizationsReplaceMany,\n    payload: {organizations},\n  }),\n\n  replaceOrganization: organization => ({\n    type: ACTION_TYPES.dbOrganizationsReplaceOne,\n    payload: {organization},\n  }),\n\n  updateOrganization: (orgId, updates) => ({\n    type: ACTION_TYPES.dbOrganizationsUpdateOne,\n    payload: ({orgId, updates}),\n  }),\n\n  replaceMembers: (orgId, members) => ({\n    type: ACTION_TYPES.dbOrganizationsReplaceMembers,\n    payload: ({orgId, members}),\n  }),\n\n  replaceRootUnit: (orgId, rootUnit) => ({\n    type: ACTION_TYPES.dbOrganizationsReplaceRootUnit,\n    payload: ({orgId, rootUnit}),\n  }),\n\n  deleteUnit: (orgId, unitId) => ({\n    type: ACTION_TYPES.dbOrganizationsDeleteUnit,\n    payload: ({orgId, unitId}),\n  }),\n\n  replaceAccessTokens: (orgId, accessTokens) => ({\n    type: ACTION_TYPES.dbOrganizationsReplaceAccessTokens,\n    payload: ({orgId, accessTokens}),\n  }),\n\n};\n\n\nconst actions = {\n\n  fetchOrganizations: () => async dispatch => {\n    const fetchOrganizationsAction = apiActions.organizations.fetchOrganizations();\n    const organizations = await dispatch(fetchOrganizationsAction);\n    dispatch(internalActions.replaceOrganizations(organizations));\n  },\n\n  createOrganization: ({template}) => async dispatch => {\n    const createOrganizationAction = apiActions.organizations.createOrganization({template});\n    const organization = await dispatch(createOrganizationAction);\n    dispatch(internalActions.replaceOrganization(organization));\n  },\n\n  getOrganization: ({orgId}) => async dispatch => {\n    const getOrganizationAction = apiActions.organizations.getOrganization({orgId});\n    const organization = await dispatch(getOrganizationAction);\n    dispatch(internalActions.replaceOrganization(organization));\n  },\n\n  updateOrganization: ({orgId, template}) => async dispatch => {\n    const updateOrganizationAction = apiActions.organizations.updateOrganization({orgId, template});\n    const organization = await dispatch(updateOrganizationAction);\n    dispatch(internalActions.updateOrganization(orgId, organization));\n  },\n\n  createUnit: ({orgId, parentUnitId, template}) => async dispatch => {\n    const createUnitAction = apiActions.organizations.createUnit({orgId, parentUnitId, template});\n    const {rootUnit} = await dispatch(createUnitAction);\n    dispatch(internalActions.replaceRootUnit(orgId, rootUnit));\n  },\n\n  deleteUnit: ({orgId, unitId}) => async dispatch => {\n    const deleteUnitAction = apiActions.organizations.deleteUnit({orgId, unitId});\n    await dispatch(deleteUnitAction);\n    dispatch(internalActions.deleteUnit(orgId, unitId));\n  },\n\n  updateUnit: ({orgId, unitId, template}) => async dispatch => {\n    const updateUnitAction = apiActions.organizations.updateUnit({orgId, unitId, template});\n    const {rootUnit} = await dispatch(updateUnitAction);\n    dispatch(internalActions.replaceRootUnit(orgId, rootUnit));\n  },\n\n  createMember: ({orgId, template}) => async dispatch => {\n    const createMemberAction = apiActions.organizations.createMember({orgId, template});\n    const res = await dispatch(createMemberAction);\n    dispatch(internalActions.replaceMembers(orgId, res.members));\n    dispatch(usersInternalActions.replaceUser(res.member));\n  },\n\n  fetchMembers: ({orgId}) => async dispatch => {\n    const fetchMembersAction = apiActions.organizations.fetchMembers({orgId});\n    const res = await dispatch(fetchMembersAction);\n    dispatch(usersInternalActions.replaceUsers(res.members));\n  },\n\n  moveMember: ({orgId, memberId, unitId}) => async dispatch => {\n    const moveMemberAction = apiActions.organizations.moveMember({orgId, memberId, unitId});\n    const {accessTokens} = await dispatch(moveMemberAction);\n    dispatch(internalActions.replaceAccessTokens(orgId, accessTokens));\n  },\n\n  fetchDeviceDetails: ({orgId}) => async dispatch => {\n    const fetchDeviceDetailsAction = apiActions.organizations.fetchDeviceDetails({orgId});\n    const res = await dispatch(fetchDeviceDetailsAction);\n    dispatch(deviceDetailsInteralActions.replaceDeviceDetails(res.deviceDetails));\n  },\n\n  assignManagerAccess: ({orgId, memberId, unitId}) => async dispatch => {\n    const assignManagerAccessAction = apiActions.organizations.assignManagerAccess({\n      orgId,\n      memberId,\n      unitId,\n    });\n    const {accessTokens} = await dispatch(assignManagerAccessAction);\n    dispatch(internalActions.replaceAccessTokens(orgId, accessTokens));\n  },\n\n  revokeManagerAccess: ({orgId, memberId, unitId}) => async dispatch => {\n    const revokeManagerAccessAction = apiActions.organizations.revokeManagerAccess({\n      orgId,\n      memberId,\n      unitId,\n    });\n    const {accessTokens} = await dispatch(revokeManagerAccessAction);\n    dispatch(internalActions.replaceAccessTokens(orgId, accessTokens));\n  },\n\n  assignDeviceAccess: ({orgId, memberId, unitId, accessType}) => async dispatch => {\n    const assignDeviceAccessAction = apiActions.organizations.assignDeviceAccess({\n      orgId,\n      memberId,\n      unitId,\n      accessType,\n    });\n    const {accessTokens} = await dispatch(assignDeviceAccessAction);\n    dispatch(internalActions.replaceAccessTokens(orgId, accessTokens));\n  },\n\n  // {orgId, memberId, unitId, accessType}\n  revokeDeviceAccess: ({orgId, memberId, unitId, accessType}) => async dispatch => {\n    const revokeDeviceAccessAction = apiActions.organizations.revokeDeviceAccess({\n      orgId,\n      memberId,\n      unitId,\n      accessType,\n    });\n    const {accessTokens} = await dispatch(revokeDeviceAccessAction);\n    dispatch(internalActions.replaceAccessTokens(orgId, accessTokens));\n  },\n\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbOrganizationsReplaceMany: {\n      const {organizations} = action.payload;\n      const replacements = {};\n      _.each(organizations, organization => {\n        replacements[organization._id] = organization;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    case ACTION_TYPES.dbOrganizationsReplaceOne: {\n      const {organization} = action.payload;\n      return {\n        ...state,\n        [organization._id]: organization,\n      };\n    }\n\n    case ACTION_TYPES.dbOrganizationsUpdateOne: {\n      const {orgId, updates} = action.payload;\n      const prev = _.get(state, orgId, {});\n      return {\n        ...state,\n        [orgId]: {\n          ...prev,\n          ...updates,\n        },\n      };\n    }\n\n    case ACTION_TYPES.dbOrganizationsReplaceMembers: {\n      const {orgId, members} = action.payload;\n      const prev = _.get(state, orgId, {});\n      return {\n        ...state,\n        [orgId]: {\n          ...prev,\n          members,\n        },\n      };\n    }\n\n    case ACTION_TYPES.dbOrganizationsReplaceRootUnit: {\n      const {orgId, rootUnit} = action.payload;\n      const prev = _.get(state, orgId, {});\n      return {\n        ...state,\n        [orgId]: {\n          ...prev,\n          rootUnit,\n        },\n      };\n    }\n\n    case ACTION_TYPES.dbOrganizationsReplaceAccessTokens: {\n      const {orgId, accessTokens} = action.payload;\n      const prev = _.get(state, orgId, {});\n      return {\n        ...state,\n        [orgId]: {\n          ...prev,\n          accessTokens,\n        },\n      };\n    }\n\n    // this one is kind of heavy since delete route does not return data\n    case ACTION_TYPES.dbOrganizationsDeleteUnit: {\n      const {orgId, unitId} = action.payload;\n      const prevOrg = _.get(state, orgId);\n      if (!prevOrg) {\n        return state;\n      }\n      const {unit, unitPath, descendants} = organizationUtils.decomposeUnit(prevOrg, unitId);\n      if (!unit) {\n        return state;\n      }\n      const removedUnitIds = _.concat(_.map(descendants, descendant => descendant._id), unitId);\n      const accessTokens = _.filter(prevOrg.accessTokens, accessToken => {\n        const isKept = !_.includes(removedUnitIds, accessToken.unitId);\n        return isKept;\n      });\n      const {rootUnit} = organizationUtils.replaceUnit(prevOrg, unitPath, null);\n      return {\n        ...state,\n        [orgId]: {\n          ...prevOrg,\n          accessTokens,\n          rootUnit,\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","import _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbProvidersSetMany: 'dbProvidersSetMany',\n};\n\nconst internalActions = {\n  setProviders: providers => ({\n    type: ACTION_TYPES.dbProvidersSetMany,\n    payload: {providers},\n  }),\n};\n\nconst actions = {\n  fetchProviders: () => async dispatch => {\n    const fetchProvidersAction = apiActions.providers.fetch();\n    const Providers = await dispatch(fetchProvidersAction);\n    dispatch(internalActions.setProviders(Providers));\n  },\n};\n\nconst defaultState = [];\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbProvidersSetMany: {\n      const {providers} = action.payload;\n      const replacements = [];\n      _.each(providers, app => {\n        replacements.push(app);\n      });\n      return replacements;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// rules.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbRulesActionsReplaceOne: 'dbRulesActionsReplaceOne',\n  dbRulesActionsRemoveOne: 'dbRulesActionsRemoveOne',\n  dbRulesActionsReplaceMany: 'dbRulesActionsReplaceMany',\n};\n\nconst internalActions = {\n  replaceRulesAction: rulesAction => ({\n    type: ACTION_TYPES.dbRulesActionsReplaceOne,\n    payload: {rulesAction},\n  }),\n\n  removeRulesAction: rulesActionId => ({\n    type: ACTION_TYPES.dbRulesActionsRemoveOne,\n    payload: {rulesActionId},\n  }),\n\n  replaceRulesActions: rulesActions => ({\n    type: ACTION_TYPES.dbRulesActionsReplaceMany,\n    payload: {rulesActions},\n  }),\n};\n\nconst actions = {\n  createRulesAction: rulesActionTemplate => async dispatch => {\n    const createRulesActionAction = apiActions.rulesActions.create(rulesActionTemplate);\n    const rulesAction = await dispatch(createRulesActionAction);\n    dispatch(internalActions.replaceRulesAction(rulesAction));\n  },\n\n  fetchRulesActions: () => async dispatch => {\n    const fetchRulesActionsAction = apiActions.rulesActions.fetch();\n    const rulesActions = await dispatch(fetchRulesActionsAction);\n    dispatch(internalActions.replaceRulesActions(rulesActions));\n  },\n\n  removeRulesAction: (ruleId, actionId) => async dispatch => {\n    const deleteRulesActionAction = apiActions.rulesActions.remove(ruleId, actionId);\n    await dispatch(deleteRulesActionAction);\n    dispatch(internalActions.removeRulesAction(ruleId));\n  },\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbRulesActionsReplaceOne: {\n      const {rulesAction} = action.payload;\n      return {...state, [rulesAction._id]: rulesAction};\n    }\n\n    case ACTION_TYPES.dbRulesActionsRemoveOne: {\n      const {rulesActionId} = action.payload;\n      return _.omit(state, rulesActionId);\n    }\n\n    case ACTION_TYPES.dbRulesActionsReplaceMany: {\n      const {rulesActions} = action.payload;\n      const replacements = {};\n      _.each(rulesActions, rulesAction => {\n        replacements[rulesAction._id] = rulesAction;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","import _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\nconst ACTION_TYPES = {\n  dbTranslatorsReplaceOne: 'dbTranslatorsReplaceOne',\n  dbTranslatorsRemoveOne: 'dbTranslatorsRemoveOne',\n  dbTranslatorsReplaceMany: 'dbTranslatorsReplaceMany',\n};\n\n\nconst internalActions = {\n\n  replaceTranslators: translators => ({\n    type: ACTION_TYPES.dbTranslatorsReplaceMany,\n    payload: {translators},\n  }),\n\n};\n\nconst actions = {\n\n  fetchTranslators: deviceModelName => async dispatch => {\n    const fetchTranslatorsAction = apiActions.translators.fetch(deviceModelName);\n    const translators = await dispatch(fetchTranslatorsAction);\n    dispatch(internalActions.replaceTranslators(translators));\n  }\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbTranslatorsReplaceMany: {\n      const {translators} = action.payload;\n      const replacements = {};\n      _.each(translators, translator => {\n        replacements[translator._id] = translator;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","// users.redux.js\n\nimport _ from 'lodash';\nimport {actions as apiActions} from '../api-state.redux';\n\n\nconst ACTION_TYPES = {\n  dbUsersRemoveAll: 'dbUsersRemoveAll',\n  dbUsersReplaceMany: 'dbUsersReplaceMany',\n  dbUsersReplaceOne: 'dbUsersReplaceOne',\n};\n\n\nconst internalActions = {\n  removeAllUsers: () => ({\n    type: ACTION_TYPES.dbUsersRemoveAll,\n  }),\n  replaceUsers: users => ({\n    type: ACTION_TYPES.dbUsersReplaceMany,\n    payload: {users},\n  }),\n  replaceUser: user => ({\n    type: ACTION_TYPES.dbUsersReplaceOne,\n    payload: {user},\n  }),\n};\n\n// only the internalActions are used so far (by organizations.redux)\nconst actions = {\n  fetchUsers: () => async dispatch => {\n    const fetchUsersAction = apiActions.users.fetch();\n    const users = await dispatch(fetchUsersAction);\n    dispatch(internalActions.replaceUsers(users));\n  },\n  resetUsers: () => async dispatch => {\n    dispatch(internalActions.removeAllUsers());\n  }\n};\n\nconst defaultState = {};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.dbUsersRemoveAll: {\n      return defaultState;\n    }\n\n    case ACTION_TYPES.dbUsersReplaceMany: {\n      const {users} = action.payload;\n      const replacements = {};\n      _.each(users, user => {\n        replacements[user._id] = user;\n      });\n      return {\n        ...state,\n        ...replacements,\n      };\n    }\n\n    case ACTION_TYPES.dbUsersReplaceOne: {\n      const {user} = action.payload;\n      return {\n        ...state,\n        [user._id]: user,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  internalActions,\n  actions,\n  reducer,\n};\n","import {combineReducers} from 'redux';\n\nimport {\n  reducer as coreSettingsReducer, actions as coreSettingsActions,\n} from './core-settings.redux';\n\nimport {\n  reducer as apiStateReducer, actions as apiStateActions,\n} from './api-state.redux';\n\nimport {\n  reducer as databaseReducer, actions as databaseActions,\n} from './database.redux';\n\nimport {\n  reducer as connectivityReducer, actions as connectivityActions,\n} from './connectivity.redux';\n\nimport {\n  reducer as messageStackReducer, actions as messageStackActions,\n} from './message-stack.redux';\n\nimport {\n  reducer as appHistoryReducer, actions as appHistoryActions,\n} from './app-history.redux';\n\nconst actions = {\n  coreSettings: coreSettingsActions,\n  apiState: apiStateActions,\n  database: databaseActions,\n  connectivity: connectivityActions,\n  messageStack: messageStackActions,\n  appHistory: appHistoryActions,\n};\n\nconst reducer = combineReducers({\n  coreSettings: coreSettingsReducer,\n  apiState: apiStateReducer,\n  database: databaseReducer,\n  connectivity: connectivityReducer,\n  messageStack: messageStackReducer,\n  appHistory: appHistoryReducer,\n});\n\nexport {\n  actions,\n  reducer,\n};\n","// message-stack.redux.js\n\n// modules\n// import _ from 'lodash';\n\nconst MESSAGE_STACK_DEFAULT_LIMIT = 10;\n\nconst ACTION_TYPES = {\n  // more needs to happen here\n  messageStackStackLimit: 'messageStackStackLimit',\n  messageStackPushMessage: 'messageStackPushMessage',\n  messageStackWipeMessages: 'messageStackWipeMessages',\n};\n\n\nconst actions = {\n\n  setMessageStackLimit: limit => dispatch => dispatch({\n    type: ACTION_TYPES.messageStackStackLimit,\n    payload: {limit},\n  }),\n\n  pushMessage: messageItem => dispatch => dispatch({\n    type: ACTION_TYPES.messageStackPushMessage,\n    payload: {messageItem},\n  }),\n\n  wipeMessages: () => dispatch => dispatch({\n    type: ACTION_TYPES.messageStackWipeMessages,\n  }),\n\n};\n\nconst defaultState = {\n  limit: MESSAGE_STACK_DEFAULT_LIMIT,\n  messageItems: [],\n};\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n\n    case ACTION_TYPES.messageStackStackLimit: {\n      const {limit} = action.payload;\n      const next = {\n        ...state,\n        limit,\n      };\n      return next;\n    }\n\n    case ACTION_TYPES.messageStackPushMessage: {\n      const {messageItem} = action.payload;\n      // take care of message limit violations\n      const {limit} = state;\n      const currNum = state.messageItems.length + 1;\n      const excess = Math.max(0, limit - currNum);\n      const nextMessageItems = state.messageItems.slice(excess);\n      nextMessageItems.push(messageItem);\n      // and the state\n      const next = {\n        ...state,\n        messageItems: nextMessageItems,\n      };\n      return next;\n    }\n\n    case ACTION_TYPES.messageStackWipeMessages: {\n      const next = {\n        ...state,\n        messageItems: [],\n      };\n      return next;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport {\n  actions,\n  reducer,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport withYggio from './with-yggio';\nimport {getYggioToken} from './network/yggio-token';\n\nimport {CONNECTIVITY_STATES} from '../constants';\n\n// /////\n// The raw unconnected component - unconnected from yggio\n//\n// NOTE: this component was made inte Class since props\n// were not updating between renders for the event listeners\n// since \"this\" does not get bound properly (or adequately anyway)\n// /////\n\nclass BasicYggioTokenMonitor extends React.Component {\n  constructor (props) {\n    super(props);\n    this.checkYggioToken = this.checkYggioToken.bind(this);\n  }\n\n  componentDidMount () {\n    window.addEventListener('focus', this.checkYggioToken);\n    window.addEventListener('blur', this.checkYggioToken);\n    document.addEventListener('focus', this.checkYggioToken);\n    document.addEventListener('blur', this.checkYggioToken);\n    document.addEventListener('visibilitychange', this.checkYggioToken);\n    this.checkYggioToken();\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('focus', this.checkYggioToken);\n    window.removeEventListener('blur', this.checkYggioToken);\n    document.removeEventListener('focus', this.checkYggioToken);\n    document.removeEventListener('blur', this.checkYggioToken);\n    document.removeEventListener('visibilitychange', this.checkYggioToken);\n  }\n\n  componentDidUpdate () {\n    this.checkYggioToken();\n  }\n\n  checkYggioToken () {\n    // if not active, then activate and wait for next go\n    if (!this.props.isActive) {\n      this.props.activate();\n      return;\n    }\n    // parse the cookie\n    const token = getYggioToken();\n    const isConnected = this.props.connectivityState === CONNECTIVITY_STATES.connected;\n    if (isConnected && !_.isEqual(token, this.props.yggioToken)) {\n      if (!token) {\n        this.props.signout();\n      } else {\n        this.props.storeYggioToken(token);\n      }\n    }\n  }\n\n  render () {\n    return (\n      <>\n        {this.props.children || null}\n      </>\n    );\n  }\n}\n\n\nBasicYggioTokenMonitor.propTypes = {\n  children: PropTypes.object,\n  yggioToken: PropTypes.string,\n  connectivityState: PropTypes.string.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  signout: PropTypes.func.isRequired,\n  storeYggioToken: PropTypes.func.isRequired,\n  activate: PropTypes.func.isRequired,\n};\n\n\n// /////\n// The exposed yggio-connected component\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    yggioToken: yggioState.database.auth.token,\n    connectivityState: yggioState.connectivity.connectivityState,\n    isActive: yggioState.connectivity.isActive,\n    // yggioState: yggioState,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    signout: yggioActions.database.auth.signout,\n    storeYggioToken: yggioActions.database.auth.storeYggioToken,\n    activate: yggioActions.connectivity.activate,\n  }),\n};\n\nconst YggioTokenMonitor = withYggio(yggio)(BasicYggioTokenMonitor);\n\nYggioTokenMonitor.propTypes = {\n  children: PropTypes.object,\n};\n\n// /////\n// exports\n// /////\n\nexport default YggioTokenMonitor;\n","const STEPS = {\n  uploadFile: {\n    name: 'uploadFile',\n    progressBarTitle: 'UPLOAD FILE',\n  },\n  startInstallation: {\n    name: 'startInstallation',\n    progressBarTitle: 'INSTALL',\n  },\n  result: {\n    name: 'result',\n    progressBarTitle: 'RESULT',\n  },\n};\n\nexport {\n  STEPS,\n};\n","import React, {useState} from 'react';\nimport _ from 'lodash';\nimport {NextRouter} from 'next/router';\n\nimport {STEP_NOT_FOUND} from '../constants';\nimport {STEPS} from './constants';\nimport {useLocalState} from '../../../hooks';\nimport navigationState from '../state';\nimport {Navigation} from '../types';\nimport {Job} from '../../../types';\n\nimport StepProgressBar from '../../../components/step-progress-bar';\n\nimport UploadFilePane from './upload-file-pane';\nimport InstallationPane from './installation-pane';\nimport ResultPane from './result-pane';\nimport {CenteredPage} from '../../../global/components';\n\nconst steps = _.values(STEPS);\n\ninterface Props {\n  router: NextRouter;\n  navigation: Navigation;\n}\n\nconst BatchModeRoute = (props: Props) => {\n\n  const navigation = useLocalState(navigationState);\n\n  const [result, setResult] = useState<Job>();\n  const [uploadItems, setUploadItems] = useState<Record<string, string>[] | undefined>();\n\n  return (\n    <CenteredPage>\n      <StepProgressBar\n        title={'Install devices'}\n        steps={_.map(steps, 'progressBarTitle')}\n        currentStep={navigation.currentStep + 1}\n        margin={'0 0 9px 0'}\n      />\n      {{\n        [STEPS.uploadFile.name]: (\n          <UploadFilePane\n            router={props.router}\n            goToNextStep={navigation.incrementCurrentStep}\n            uploadItems={uploadItems}\n            setUploadItems={setUploadItems}\n          />\n        ),\n        [STEPS.startInstallation.name]: (\n          <InstallationPane\n            goToPreviousStep={navigation.decrementCurrentStep}\n            goToNextStep={navigation.incrementCurrentStep}\n            uploadItems={uploadItems!}\n            setResult={setResult}\n          />\n        ),\n        [STEPS.result.name]: (\n          <ResultPane\n            router={props.router}\n            uploadItems={uploadItems!}\n            result={result!}\n          />\n        ),\n        [STEP_NOT_FOUND]: (\n          <h1>{'No batch step found'}</h1>\n        ),\n      }[steps[navigation.currentStep].name || STEP_NOT_FOUND]}\n    </CenteredPage>\n  );\n};\n\nexport default BatchModeRoute;\n","import React, {useEffect} from 'react';\nimport _ from 'lodash';\n\nimport {devicesApi, jobApi} from '../../../../api';\nimport {StyledContainerBox} from '../../sub-components';\nimport {Job} from '../../../../types';\nimport Button from '../../../../components/button';\nimport InfoBox from '../../../../components/info-box';\nimport ProgressBar from '../../../../components/progress-bar';\nimport {\n  Container,\n  Note,\n  BoldText,\n  ProgressInfoContainer,\n} from './styled';\nimport {\n  ContentContainer,\n  Heading,\n  NavButtonsContainer,\n} from '../../styled';\n\ninterface Props {\n  uploadItems: Record<string, string>[];\n  goToPreviousStep: () => void;\n  goToNextStep: () => void;\n  setResult: (job: Job) => void;\n}\n\nconst InstallationPane = (props: Props) => {\n\n  const batchCreateDevicesMutation = devicesApi.useBatchCreateDevices();\n\n  const jobId = batchCreateDevicesMutation.data?._id;\n\n  const jobsQuery = jobApi.useJob(jobId);\n\n  useEffect(() => {\n    if (jobsQuery.data?.isFinished) {\n      props.setResult(jobsQuery.data);\n      props.goToNextStep();\n    }\n  }, [jobsQuery.data]);\n\n  return (\n    <StyledContainerBox>\n      {!jobsQuery.data && (\n        <>\n          <ContentContainer>\n            <Container>\n              <Note>\n                <BoldText>{props.uploadItems.length} devices</BoldText> will be installed.\n              </Note>\n              <Note>Note that you cannot stop the installation once it has started.</Note>\n              <Button\n                color={'green'}\n                label={'Start installation'}\n                onClick={() => batchCreateDevicesMutation.mutate(props.uploadItems)}\n                isLoading={batchCreateDevicesMutation.isLoading}\n                disabled={batchCreateDevicesMutation.isLoading}\n                width={'180px'}\n                margin={'20px 0 0 0'}\n              />\n              {batchCreateDevicesMutation.isError && (\n                <InfoBox\n                  type={'error'}\n                  heading={'Error: Could not start installation'}\n                  content={'TODO: get error from response'}\n                  margin={'30px 0 0 0'}\n                />\n              )}\n            </Container>\n          </ContentContainer>\n          <NavButtonsContainer>\n            <Button\n              content={'Back'}\n              ghosted\n              onClick={props.goToPreviousStep}\n            />\n          </NavButtonsContainer>\n        </>\n      )}\n      {jobsQuery.data && (\n        <>\n          <Heading>Installing devices...</Heading>\n          <ContentContainer>\n            <ProgressBar\n              progress={jobsQuery.data.progressPercentage}\n              margin={'50px 0 0 0'}\n            />\n            <ProgressInfoContainer>\n              <p>\n                <BoldText>\n                  {jobsQuery.data.numItemsDone}\n                </BoldText> of {jobsQuery.data.numItems} devices done\n              </p>\n              {!_.isNil(jobsQuery.data.expectedTimeLeftText) && (\n                <p>\n                  Estimated time left: <BoldText>{jobsQuery.data.expectedTimeLeftText}</BoldText>\n                </p>\n              )}\n            </ProgressInfoContainer>\n          </ContentContainer>\n        </>\n      )}\n    </StyledContainerBox>\n  );\n};\n\nexport default InstallationPane;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  margin: 30px 0 0 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Note = styled.p`\n  margin: 0 0 10px 0;\n  font-size: 13px;\n  text-align: center;\n`;\n\nconst BoldText = styled.span`\n  font-weight: 500;\n`;\n\nconst ProgressInfoContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport {\n  Container,\n  Note,\n  BoldText,\n  ProgressInfoContainer,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {CSVLink} from 'react-csv';\nimport {NextRouter} from 'next/router';\nimport SuccessIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Warning';\n\nimport {Job} from '../../../../types';\nimport {installationErrorsSelector, topInstallationErrorsSelector} from './selectors';\n\nimport Button from '../../../../components/button';\nimport COLORS from '../../../../constants/colors';\nimport {StyledContainerBox} from '../../sub-components';\nimport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n  CsvLinkWrapper,\n} from '../../styled';\nimport {\n  Section,\n  NumItem,\n  TopError,\n} from './styled';\n\ninterface Props {\n  router: NextRouter;\n  result: Job;\n  uploadItems: Record<string, string>[];\n}\n\nconst ResultPane = (props: Props) => {\n\n  const installationErrors = installationErrorsSelector({\n    job: props.result,\n    uploadItems: props.uploadItems,\n  });\n\n  const topInstallationErrors = topInstallationErrorsSelector({installationErrors});\n\n  return (\n    <StyledContainerBox>\n      <Heading>Result</Heading>\n      <SubHeading>The installation finished with the following result</SubHeading>\n      <ContentContainer>\n        <Section>\n          {props.result.numSuccesses > 0 && (\n            <NumItem>\n              <SuccessIcon style={{fontSize: 20, color: COLORS.greenAlt}} />\n              <p>{props.result.numSuccesses} devices was successfully installed</p>\n            </NumItem>\n          )}\n          {props.result.numFailures > 0 && (\n            <NumItem>\n              <ErrorIcon style={{fontSize: 20, color: COLORS.redDark}} />\n              <p>{props.result.numFailures} devices failed to install</p>\n            </NumItem>\n          )}\n        </Section>\n        {installationErrors.length > 0 && (\n          <>\n            <Section>\n              <p>The most common errors that occured was:</p>\n              <ul>\n                {_.map(topInstallationErrors, err => (\n                  <TopError key={err.error}>\n                    {err.error} <i>({err.occurences} occurences)</i>\n                  </TopError>\n                ))}\n              </ul>\n            </Section>\n            <Section>\n              <p>To see the full list of errors:</p>\n              <CsvLinkWrapper>\n                <CSVLink\n                  data={installationErrors}\n                  filename={'errors.csv'}\n                  target={'_blank'}\n                  enclosingCharacter={''}\n                >\n                  Download errors file\n                </CSVLink>\n              </CsvLinkWrapper>\n            </Section>\n          </>\n        )}\n      </ContentContainer>\n      <NavButtonsContainer flexDirection={'row-reverse'}>\n        <Button\n          content={'Done'}\n          onClick={async () => props.router.push('/devices')}\n          ghosted\n        />\n      </NavButtonsContainer>\n    </StyledContainerBox>\n  );\n};\n\nexport default ResultPane;\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\n\nimport {Job} from '../../../../types';\n\nconst installationErrorsSelector = createSelector(\n  (props: {job: Job}) => props.job,\n  (props: {uploadItems: Record<string, string>[]}) => props.uploadItems,\n  (job, uploadItems) => {\n    const acc: Record<string, string>[] = [];\n    const errors = _.reduce(uploadItems, (result, item, index) => {\n      const jobItem = job.items[index];\n      if (jobItem.status === 'failed') {\n        result.push({...item, error: jobItem.errorMessage!});\n      }\n      return result;\n    }, acc);\n    return errors;\n  }\n);\n\nconst topInstallationErrorsSelector = createSelector(\n  (props: {installationErrors: Record<string, string>[]}) => props.installationErrors,\n  errors => {\n    if (!errors) return [];\n    const acc: Record<string, number> = {};\n    const errorTypes = _.reduce(errors, (result, err) => ({\n      ...result,\n      [err.error]: (result[err.error] || 0) + 1\n    }), acc);\n    const sortable = Object.entries(errorTypes);\n    sortable.sort((a, b) => b[1] - a[1]);\n    const topErrorsArray = sortable.slice(0, 3);\n    const topErrors = _.map(topErrorsArray, err => ({\n      error: err[0],\n      occurences: err[1],\n    }));\n    return topErrors;\n  }\n);\n\nexport {\n  installationErrorsSelector,\n  topInstallationErrorsSelector,\n};\n","import styled from 'styled-components';\n\nconst Section = styled.div`\n  margin: 0 0 30px 0;\n`;\n\nconst NumItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0 0 7px 0;\n  p {\n    margin: 0 0 0 8px;\n    font-size: 13px;\n    font-weight: 500;\n  }\n`;\n\nconst TopError = styled.li`\n  margin: 5px 0;\n`;\n\nexport {\n  Section,\n  NumItem,\n  TopError,\n};\n","const FIELDS = {\n  General: [\n    {name: 'name', description: ''},\n    {name: 'description', description: ''},\n    {name: 'deviceModelName', description: 'Used for identifying translator'},\n    {name: 'connector', description: 'The id of the desired connector. You can use the tool below.'},\n    {name: 'contextMap', description: 'Used for adding contextual parameters. See example below.'},\n  ],\n  LoRa: [\n    {name: 'activationType', description: 'OTAA or ABP'},\n    {name: 'devEui', description: ''},\n    {name: 'appKey', description: ''},\n    {name: 'devAddr', description: ''},\n    {name: 'appEUI', description: ''},\n    {name: 'nwkSKey', description: ''},\n    {name: 'appSKey', description: ''},\n  ],\n  Netmore: [\n    {name: 'classType', description: 'A or C'},\n    {name: 'priceModelMessagesCountTypesCompositeCode', description: 'Use the connector helper tool below'},\n    {name: 'externalJoinServer', description: 'true or false'},\n  ],\n  'Actility Thingpark': [\n    {name: 'connectivityPlan', description: 'Use the connector helper tool below'},\n    {name: 'deviceProfileId', description: 'LORA/GenericA.1.0.2a_ETSI_Rx2-SF12 or LORA/GenericC.1.0.2a_ETSI_Rx2-SF12'},\n  ],\n  Generic: [\n    {name: 'secret', description: ''},\n  ],\n};\n\nexport {\n  FIELDS,\n};\n","import React, {useState} from 'react';\nimport {NextRouter} from 'next/router';\n\nimport Button from '../../../../components/button';\nimport {StyledContainerBox} from '../../sub-components';\n\nimport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n  Link,\n} from '../../styled';\nimport FileUploader from './sub-components/file-uploader';\nimport SuccessInfoBox from './sub-components/success-info-box';\nimport ErrorInfoBox from './sub-components/error-info-box';\nimport Instructions from './sub-components/instructions';\nimport {InstructionsLinkContainer} from './styled';\n\ninterface Props {\n  uploadItems?: Record<string, string>[];\n  router: NextRouter;\n  goToNextStep: () => void;\n  setUploadItems: (items: Record<string, string>[] | undefined) => void;\n}\n\nconst UploadPane = (props: Props) => {\n\n  const [shouldShowInstructions, setShouldShowInstructions] = useState(false);\n  const [selectedFile, setSelectedFile] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <StyledContainerBox>\n      {!shouldShowInstructions && (\n        <>\n          <Heading>Upload file</Heading>\n          <SubHeading>Please upload a CSV installation file</SubHeading>\n          <ContentContainer>\n            <InstructionsLinkContainer>\n              <Link onClick={() => setShouldShowInstructions(true)}>\n                What should I put in the file?\n              </Link>\n            </InstructionsLinkContainer>\n            {!props.uploadItems && (\n              <FileUploader\n                setSelectedFile={setSelectedFile}\n                setErrorMessage={setErrorMessage}\n                setUploadItems={props.setUploadItems}\n              />\n            )}\n            {props.uploadItems && !errorMessage && (\n              <SuccessInfoBox\n                uploadItems={props.uploadItems}\n                selectedFile={selectedFile}\n                setSelectedFile={setSelectedFile}\n                setUploadItems={props.setUploadItems}\n              />\n            )}\n            {props.uploadItems && !!errorMessage && (\n              <ErrorInfoBox\n                selectedFile={selectedFile}\n                errorMessage={errorMessage}\n                setSelectedFile={setSelectedFile}\n                setErrorMessage={setErrorMessage}\n              />\n            )}\n          </ContentContainer>\n          <NavButtonsContainer>\n            <Button\n              content={'Back'}\n              ghosted\n              onClick={async () => props.router.push('/devices/new')}\n            />\n            <Button\n              color={'green'}\n              disabled={!!errorMessage}\n              content={'Continue'}\n              onClick={props.goToNextStep}\n            />\n          </NavButtonsContainer>\n        </>\n      )}\n      {shouldShowInstructions && (\n        <>\n          <Heading>Installation file instructions</Heading>\n          <ContentContainer>\n            <Instructions />\n          </ContentContainer>\n          <NavButtonsContainer>\n            <Button\n              content={'Back'}\n              ghosted\n              onClick={() => setShouldShowInstructions(false)}\n            />\n          </NavButtonsContainer>\n        </>\n      )}\n    </StyledContainerBox>\n  );\n};\n\nexport default UploadPane;\n","import {createSelector} from 'reselect';\nimport _ from 'lodash';\n\nimport {LORA_CONNECTOR_TYPES} from '../../constants';\nimport {CommandData} from './types';\n\nconst selectConnectorItems = createSelector(\n  (props: {commandData: CommandData}) => props.commandData,\n  (props: {connectorName?: string}) => props.connectorName,\n  (commandData, connectorName) => {\n    if (!commandData) return null;\n    if (connectorName === LORA_CONNECTOR_TYPES.Netmore) {\n      return {\n        title: 'Price models',\n        items: _.map(commandData, command => ({name: command.name, value: command.compositeCode})),\n      };\n    }\n    if (connectorName === LORA_CONNECTOR_TYPES.ActilityThingpark) {\n      return {\n        title: 'Connectivity plans',\n        items: _.map(commandData, command => ({name: command.name, value: command.id})),\n      };\n    }\n  }\n);\n\nexport {\n  selectConnectorItems,\n};\n","import styled from 'styled-components';\n\nconst InstructionsLinkContainer = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  margin: 0 0 10px 0;\n`;\n\ninterface DropzoneContainerProps {\n  isDragAccept: boolean,\n  isDragReject: boolean,\n  isDragActive: boolean,\n}\n\nconst getColor = (props: DropzoneContainerProps) => {\n  if (props.isDragAccept) {\n    return 'green';\n  }\n  if (props.isDragReject) {\n    return 'red';\n  }\n  if (props.isDragActive) {\n    return 'black';\n  }\n  return '#bbb';\n};\n\n\nconst DropzoneContainer = styled.div<DropzoneContainerProps>`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  height: 120px;\n  border-width: 1px;\n  border-radius: 1px;\n  border-color: ${props => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #999;\n  outline: none;\n  transition: border .24s, background-color 0.24s;\n  margin: 0 0 13px 0;\n  cursor: pointer;\n  &:hover{\n    background: #f3f3f3;\n  }\n`;\n\nconst InfoBoxContentContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: top;\n  margin: 10px 0 0 0;\n`;\n\nconst InfoBoxLeftContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst InfoBoxParagraph = styled.p`\n  margin: 0 0 5px 0;\n  font-size: 13px;\n`;\n\nconst InstructionsContainer = styled.div`\n  margin: 0 0 20px 0;\n`;\n\nconst Paragraph = styled.p`\n  margin: 0 0 15px 0;\n  line-height: 1.5;\n`;\n\nconst CodeBox = styled.div`\n  width: 100%;\n  background: #555;\n  border-radius: 5px;\n  color: white;\n  padding: 14px;\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  p {\n    line-height: 1;\n    margin: 0 0 4px 0;\n  }\n`;\n\nconst FieldsTableHeading = styled.div`\n  font-weight: bold;\n  margin: 25px 0 7px 0;\n`;\n\nconst FieldsTable = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  border-bottom: solid #bbb 1px;\n`;\n\nconst FieldsTableItem = styled.div`\n  padding: 5px 0 5px 5px;\n  border: solid #bbb 0px;\n  border-top-width: 1px;\n  border-left-width: 1px;\n  &:nth-child(2n) {\n    border-right-width: 1px;\n  }\n`;\n\nconst HelperToolContainer = styled.div`\n  padding: 0 20px 30px 20px;\n  margin: 40px 0 0 0;\n  background: #f1f1f1;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n`;\n\nconst InstructionHeading = styled.h1`\n  font-size: 14px;\n  font-weight: bold;\n  margin: 30px 0 10px 0;\n`;\n\nconst ConnectorItemsTable = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  p {\n    margin: 0;\n    height: 22px;\n  }\n`;\n\nconst ConnectorItemsTitle = styled.p`\n  background: #ccc;\n  padding: 5px 10px;\n  margin: 20px 0 10px 0;\n`;\n\nexport {\n  InstructionsLinkContainer,\n  DropzoneContainer,\n  InfoBoxContentContainer,\n  InfoBoxLeftContent,\n  InfoBoxParagraph,\n  InstructionsContainer,\n  InstructionHeading,\n  Paragraph,\n  CodeBox,\n  FieldsTableHeading,\n  FieldsTable,\n  FieldsTableItem,\n  HelperToolContainer,\n  ConnectorItemsTable,\n  ConnectorItemsTitle,\n};\n","import React from 'react';\n\nimport InfoBox from '../../../../../components/info-box';\nimport Button from '../../../../../components/button';\nimport {\n  InfoBoxContentContainer,\n  InfoBoxLeftContent,\n  InfoBoxParagraph,\n} from '../styled';\n\ninterface Props {\n  selectedFile: string;\n  errorMessage?: string;\n  setSelectedFile: (file: string) => void;\n  setErrorMessage: (errorMessage: string) => void;\n}\n\nconst Content = (props: Props) => {\n  const onRemoveFile = () => {\n    props.setSelectedFile('');\n    props.setErrorMessage('');\n  };\n  return (\n    <InfoBoxContentContainer>\n      <InfoBoxLeftContent>\n        <InfoBoxParagraph>Selected file: {props.selectedFile}</InfoBoxParagraph>\n        <InfoBoxParagraph>{props.errorMessage}</InfoBoxParagraph>\n      </InfoBoxLeftContent>\n      <Button\n        content={'Remove file'}\n        onClick={onRemoveFile}\n        ghosted\n      />\n    </InfoBoxContentContainer>\n  );\n};\n\nconst ErrorInfoBox = (props: Props) => (\n  <InfoBox\n    heading={'Error uploading file'}\n    type={'error'}\n    content={<Content {...props} />}\n  />\n);\n\nexport default ErrorInfoBox;\n","import React from 'react';\nimport Dropzone from 'react-dropzone';\n\nimport {requestBodySizeLimitApi} from '../../../../../api';\nimport {DropzoneContainer} from '../styled';\nimport {assertDataIsNotTooLarge} from '../../utils';\nimport {parseCsvFileToJson} from '../../../../../utils';\n\ninterface Props {\n  requestBodySizeLimit?: number;\n  setSelectedFile: (file: string) => void;\n  setErrorMessage: (errorMessage: string) => void;\n  setUploadItems: (items: Record<string, string>[]) => void;\n}\n\ntype ExtendedFile = File & {path: string};\n\nconst FileUploader = (props: Props) => {\n\n  const requestBodySizeLimitQuery = requestBodySizeLimitApi.useRequestBodySizeLimitQuery();\n\n  const onDrop = async (acceptedFiles: unknown) => {\n    const selectedFile = (acceptedFiles as ExtendedFile[])[0];\n    try {\n      const items = await parseCsvFileToJson(selectedFile) as Record<string, string>[];\n      if (requestBodySizeLimitQuery.data) {\n        assertDataIsNotTooLarge(items, requestBodySizeLimitQuery.data);\n      }\n      props.setSelectedFile(selectedFile.path);\n      props.setUploadItems(items);\n    } catch (err) {\n      if (err instanceof Error) {\n        props.setSelectedFile(selectedFile.path);\n        props.setErrorMessage(err.message);\n      }\n    }\n  };\n\n  return (\n    <Dropzone\n      multiple={false}\n      onDrop={onDrop}\n    >\n      {({\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject,\n      }) => (\n        <DropzoneContainer {...getRootProps({isDragActive, isDragAccept, isDragReject})}>\n          <input {...getInputProps()} />\n          <p>Drop your CSV file here, or click to select a file</p>\n        </DropzoneContainer>\n      )}\n    </Dropzone>\n  );\n};\n\nexport default FileUploader;\n","import React, {useState} from 'react';\nimport {useQueryClient} from 'react-query';\nimport _ from 'lodash';\n\n// Logic\nimport {FIELDS} from '../constants';\nimport {devicesApi} from '../../../../../api';\nimport {LORA_CONNECTOR_TYPES} from '../../../constants';\nimport {resolveConnectorName} from '../../utils';\nimport {selectConnectorItems} from '../selectors';\nimport {CommandData} from '../types';\n\n\n// UI\nimport Spinner from '../../../../../components/spinner';\nimport Select from '../../../../../components/select';\nimport {\n  InstructionsContainer,\n  InstructionHeading,\n  Paragraph,\n  CodeBox,\n  FieldsTableHeading,\n  FieldsTable,\n  FieldsTableItem,\n  HelperToolContainer,\n  ConnectorItemsTable,\n  ConnectorItemsTitle,\n} from '../styled';\n\nconst Instructions = () => {\n\n  const connectorDevices = devicesApi.useConnectorsDevicesQuery();\n  const connectorOptions = _.map(connectorDevices, d => ({label: `${d.name} (${d.downlinkQueue})`, value: d._id}));\n\n  const [selectedConnectorId, setSelectedConnectorId] = useState('');\n\n  const queryClient = useQueryClient();\n\n  const useCommandDeviceMutation = devicesApi.useCommandDevice(queryClient);\n\n  const connectorName = resolveConnectorName(connectorDevices, selectedConnectorId);\n\n  const connectorItems = selectConnectorItems({\n    commandData: useCommandDeviceMutation.data as CommandData,\n    connectorName,\n  });\n\n  const onChangeConnector = (evt: React.ChangeEvent<HTMLInputElement>) => {\n\n    const connectorId = evt.target.value;\n    const connectorName = resolveConnectorName(connectorDevices, connectorId);\n\n    if (connectorName === LORA_CONNECTOR_TYPES.Netmore) {\n      const payload = {\n        command: 'apiCall',\n        deviceId: 'priceModels',\n        iotnodeId: connectorId,\n        data: {\n          callName: 'fetchPriceModels',\n        },\n      };\n      useCommandDeviceMutation.mutate(payload);\n    }\n\n    if (connectorName === LORA_CONNECTOR_TYPES.ActilityThingpark) {\n      const payload = {\n        command: 'apiCall',\n        deviceId: 'connectivityPlans',\n        iotnodeId: connectorId,\n        data: {\n          callName: 'fetchConnectivityPlans',\n        },\n      };\n      useCommandDeviceMutation.mutate(payload);\n    }\n\n    setSelectedConnectorId(evt.target.value);\n\n  };\n\n  return (\n    <InstructionsContainer>\n      <Paragraph>\n        The installation file should contain information of the devices you want to install. <br />\n        The file must be a correctly formatted CSV-file.\n      </Paragraph>\n      <p>Here is a basic example of an installation file containing three devices:</p>\n      <CodeBox>\n        <p>name,description</p>\n        <p>MyDevice1,This is a description of the device</p>\n        <p>MyDevice2,This is a description of the device</p>\n        <p>MyDevice3,This is a description of the device</p>\n      </CodeBox>\n      <Paragraph>\n        Different kinds of devices require different sets of data.&nbsp;\n        To know which fields to include you can look in the tables&nbsp;\n        below and in the Yggio documentation.\n      </Paragraph>\n      <Paragraph>\n        Note that it is important that you spell the name of the fields (top row)&nbsp;\n        correctly. It's case-sensitive.\n      </Paragraph>\n      <Paragraph>\n        If you are unsure whether your data is valid it can be a good idea to&nbsp;\n        first run a batch installation for a small number of devices, before doing a large amount.\n      </Paragraph>\n\n      <InstructionHeading>Common fields</InstructionHeading>\n\n      {_.map(FIELDS, (items, heading) => (\n        <React.Fragment key={heading}>\n          <FieldsTableHeading>{heading}</FieldsTableHeading>\n          <FieldsTable>\n            {_.map(items, item => (\n              <React.Fragment key={item.name}>\n                <FieldsTableItem>{item.name}</FieldsTableItem>\n                <FieldsTableItem>{item.description}</FieldsTableItem>\n              </React.Fragment>\n            ))}\n          </FieldsTable>\n        </React.Fragment>\n      ))}\n\n      <br />\n\n      <InstructionHeading>How to add contextual parameters</InstructionHeading>\n      <Paragraph>\n        Use contextMap to add contextual parameters.&nbsp;\n        Write in dot notation. See example below:\n      </Paragraph>\n      <CodeBox>\n        <p>name,contextMap.placement,contextMap.installedBy</p>\n        <p>MyDevice1,floor,Markus</p>\n        <p>MyDevice2,roof,Sofia</p>\n        <p>MyDevice3,wall,Johan</p>\n      </CodeBox>\n\n      <HelperToolContainer>\n        <InstructionHeading>Connector helper tool</InstructionHeading>\n        <Select\n          label={'Select connector'}\n          options={connectorOptions}\n          value={selectedConnectorId}\n          onChange={onChangeConnector}\n        />\n        {selectedConnectorId && (\n          <p>ID of selected connector: <b>{selectedConnectorId}</b></p>\n        )}\n        {connectorItems && (\n          <>\n            <ConnectorItemsTitle>{connectorItems.title}</ConnectorItemsTitle>\n            {connectorItems.items.length === 0 && (\n              <p>None found</p>\n            )}\n            {connectorItems.items.length > 0 && (\n              <ConnectorItemsTable>\n                <p><b>Name</b></p>\n                <p><b>Id (use this value in the file)</b></p>\n                {_.map(connectorItems.items, item => (\n                  <React.Fragment key={item.value}>\n                    <p>{item.name}</p>\n                    <p>{item.value}</p>\n                  </React.Fragment>\n                ))}\n              </ConnectorItemsTable>\n            )}\n          </>\n        )}\n        {useCommandDeviceMutation.isLoading && !connectorItems && (\n          <Spinner />\n        )}\n        {useCommandDeviceMutation.isError && (\n          (\n            connectorName === LORA_CONNECTOR_TYPES.Netmore ||\n            connectorName === LORA_CONNECTOR_TYPES.ActilityThingpark\n          ) && (\n            <p>- Failed to fetch price models or connectivity plans from server -</p>\n          )\n        )}\n      </HelperToolContainer>\n\n    </InstructionsContainer>\n  );\n};\n\nexport default Instructions;\n","import React from 'react';\n\nimport InfoBox from '../../../../../components/info-box';\nimport Button from '../../../../../components/button';\nimport {\n  InfoBoxContentContainer,\n  InfoBoxLeftContent,\n  InfoBoxParagraph,\n} from '../styled';\n\ninterface Props {\n  selectedFile: string;\n  uploadItems: Record<string, string>[];\n  setSelectedFile: (file: string) => void;\n  setUploadItems: (items: Record<string, string>[] | undefined) => void;\n}\n\nconst Content = (props: Props) => (\n  <InfoBoxContentContainer>\n    <InfoBoxLeftContent>\n      <InfoBoxParagraph>Selected file: {props.selectedFile}</InfoBoxParagraph>\n      <InfoBoxParagraph>{props.uploadItems.length} devices found</InfoBoxParagraph>\n    </InfoBoxLeftContent>\n    <Button\n      content={'Remove file'}\n      onClick={() => {\n        props.setSelectedFile('');\n        props.setUploadItems(undefined);\n      }}\n      ghosted\n    />\n  </InfoBoxContentContainer>\n);\n\nconst SuccessInfoBox = (props: Props) => (\n  <InfoBox\n    heading={'Valid installation file'}\n    type={'success'}\n    content={<Content {...props} />}\n  />\n);\n\nexport default SuccessInfoBox;\n","import _ from 'lodash';\n\nimport {Device} from '../../../types';\n\nconst assertDataIsNotTooLarge = (items: Record<string, string>[], requestBodySizeLimit: number) => {\n  const fileNumBytes = new TextEncoder().encode(JSON.stringify(items)).length;\n  if (fileNumBytes <= requestBodySizeLimit) return;\n  const limitInKBRounded = Math.round(requestBodySizeLimit / (1024 * 100)) / 100;\n  const fileNumKiloBytesRounded = Math.round(fileNumBytes / (1024 * 100)) / 100;\n  throw Error(`Uploaded file contains too much data. It results in ${fileNumKiloBytesRounded} KB and can max be ${limitInKBRounded} KB.`);\n};\n\nconst resolveConnectorName = (loraConnectorDevices: Device[], connector: string) => {\n  if (connector === 'none') {\n    return 'None';\n  }\n  return _.find(loraConnectorDevices, {_id: connector})?.downlinkQueue;\n};\n\nexport {\n  assertDataIsNotTooLarge,\n  resolveConnectorName,\n};\n","const STEP_NOT_FOUND = 'STEP_NOT_FOUND';\n\n// Note: must be kept PascalCase\nenum LORA_CONNECTOR_TYPES {\n  None = 'None',\n  ChirpStack = 'ChirpStack',\n  Netmore = 'Netmore',\n  ActilityThingpark = 'ActilityThingpark',\n}\n\n// Note: must be kept capitalized\nenum LORA_ACTIVATION_TYPES {\n  OTAA = 'OTAA',\n  ABP = 'ABP',\n}\n\nexport {\n  STEP_NOT_FOUND,\n  LORA_CONNECTOR_TYPES,\n  LORA_ACTIVATION_TYPES,\n};\n","import React from 'react';\nimport {NextRouter} from 'next/router';\n\nimport Button from '../../../components/button';\nimport {StyledContainerBox} from '../sub-components';\nimport {\n  HeadingContainer,\n  ButtonsContainer,\n  ButtonContainer,\n} from './styled';\nimport {CenteredPage} from '../../../global/components';\n\ninterface ModeSelectionPaneProps {\n  router: NextRouter;\n}\n\nconst BasicModeSelectionPane = (props: ModeSelectionPaneProps) => (\n  <CenteredPage>\n    <StyledContainerBox>\n      <Button\n        content={'Back'}\n        ghosted\n        onClick={async () => props.router.push('/devices')}\n      />\n      <HeadingContainer>\n        <h1>Select installation mode</h1>\n      </HeadingContainer>\n      <ButtonsContainer>\n        <ButtonContainer>\n          <Button\n            color={'green'}\n            onClick={async () => props.router.push('/devices/new/single')}\n            content={'Single mode'}\n            width={'140px'}\n          />\n          <p>Install one device at a time</p>\n        </ButtonContainer>\n        <ButtonContainer>\n          <Button\n            color={'green'}\n            onClick={async () => props.router.push('/devices/new/batch')}\n            content={'Batch mode'}\n            width={'140px'}\n          />\n          <p>Install multiple devices in one go</p>\n        </ButtonContainer>\n      </ButtonsContainer>\n    </StyledContainerBox>\n  </CenteredPage>\n);\n\nexport default BasicModeSelectionPane;\n","import styled from 'styled-components';\n\nconst HeadingContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 30px 0 20px 0;\n  h1 {\n    font-size: 17px;\n    font-weight: 400;\n    margin: 0;\n  }\n  @media (min-width:500px)  {\n    flex-direction: row;\n    margin-bottom: 50px;\n  }\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  margin: 50px 0 10px 0;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  @media (min-width:500px)  {\n    flex-direction: row;\n    margin-bottom: 50px;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 250px;\n  margin: 0 0 30px 0;\n  p {\n    color: #555;\n    font-size: 13px;\n    margin: 8px 0 0 0;\n  }\n  @media (min-width:500px)  {\n    margin: 0;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\n  margin: 40px 0 0 0;\n  width: 800px;\n`;\n\nexport {\n  HeadingContainer,\n  ButtonsContainer,\n  ButtonContainer,\n  Wrapper,\n  Container,\n};\n","import {LORA_CONNECTOR_TYPES, LORA_ACTIVATION_TYPES} from '../constants';\n\nenum DEVICE_TYPES {\n  generic = 1,\n  lora,\n}\n\nenum STEPS {\n  deviceType = 1,\n  translator,\n  details,\n  result,\n  generic,\n  lora,\n}\n\nconst PROGRESS_BAR_TITLES = {\n  [STEPS.deviceType]: 'DEVICE TYPE',\n  [STEPS.translator]: 'TRANSLATOR',\n  [STEPS.details]: 'DETAILS',\n  [STEPS.result]: 'RESULT',\n  [STEPS.generic]: 'GENERIC',\n  [STEPS.lora]: 'LORA INFO',\n};\n\nconst LORA_INPUTS = {\n  connector: {\n    name: 'connector',\n    label: 'Connector',\n    info: 'Used for connecting to the appropriate LoRa-server. A connector can be created in the Yggio control panel.',\n  },\n  activationType: {\n    name: 'activationType',\n    label: 'Activation Type',\n    info: 'The way the device connects to the network.',\n  },\n  devEui: {\n    name: 'devEui',\n    label: 'DevEUI',\n    info: 'A unique ID for the device.',\n  },\n  appKey: {\n    name: 'appKey',\n    label: 'AppKey',\n    info: 'Root key for OTAA activationType.',\n  },\n  devAddr: {\n    name: 'devAddr',\n    label: 'DevAddr',\n    info: 'Identifies the device on a particular network.',\n  },\n  appEui: {\n    name: 'appEUI',\n    label: 'AppEUI/JoinEUI',\n    info: 'Identifies the join server during the over the air activation.',\n  },\n  classType: {\n    name: 'classType',\n    label: 'Class type',\n    info: 'Determines what LoRa class the device is.',\n  },\n  priceModel: {\n    name: 'priceModelMessagesCountTypesCompositeCode',\n    label: 'Price model',\n    info: 'Determines how many messages can be sent per day.',\n  },\n  externalJoinServer: {\n    name: 'externalJoinServer',\n    label: 'Use external join server',\n    info: 'Indicates to the Network Server the device should join with an external joinserver.',\n  },\n  nwkSKey: {\n    name: 'nwkSKey',\n    label: 'NwkSKey',\n    info: 'Used for encryptning the packet metadata.',\n  },\n  appSKey: {\n    name: 'appSKey',\n    label: 'AppSKey',\n    info: 'Used for encryptning the packet payload.',\n  },\n  connectivityPlan: {\n    name: 'connectivityPlanId',\n    label: 'Connectity plan',\n    info: 'TBA',\n  },\n  deviceProfileId: {\n    name: 'deviceProfileId',\n    label: 'Device Profile',\n    info: 'TBA',\n  }\n};\n\nconst LORA_INPUTS_STRUCTURE = {\n  [LORA_CONNECTOR_TYPES.ChirpStack]: {\n    [LORA_ACTIVATION_TYPES.OTAA]: [\n      LORA_INPUTS.devEui.name,\n      LORA_INPUTS.appKey.name,\n    ],\n    [LORA_ACTIVATION_TYPES.ABP]: [\n      LORA_INPUTS.devEui.name,\n      LORA_INPUTS.devAddr.name,\n      LORA_INPUTS.nwkSKey.name,\n      LORA_INPUTS.appSKey.name,\n    ],\n  },\n  [LORA_CONNECTOR_TYPES.Netmore]: {\n    [LORA_ACTIVATION_TYPES.OTAA]: [\n      LORA_INPUTS.devEui.name,\n      LORA_INPUTS.appKey.name,\n      LORA_INPUTS.appEui.name,\n      LORA_INPUTS.classType.name,\n      LORA_INPUTS.priceModel.name,\n      LORA_INPUTS.externalJoinServer.name,\n    ],\n    [LORA_ACTIVATION_TYPES.ABP]: [\n      LORA_INPUTS.devEui.name,\n      LORA_INPUTS.devAddr.name,\n      LORA_INPUTS.nwkSKey.name,\n      LORA_INPUTS.appSKey.name,\n      LORA_INPUTS.priceModel.name,\n    ],\n  },\n  [LORA_CONNECTOR_TYPES.ActilityThingpark]: {\n    [LORA_ACTIVATION_TYPES.OTAA]: [\n      LORA_INPUTS.devEui.name,\n      LORA_INPUTS.appKey.name,\n      LORA_INPUTS.appEui.name,\n      LORA_INPUTS.connectivityPlan.name,\n      LORA_INPUTS.deviceProfileId.name,\n    ],\n    [LORA_ACTIVATION_TYPES.ABP]: [\n      LORA_INPUTS.devEui.name,\n      LORA_INPUTS.devAddr.name,\n      LORA_INPUTS.nwkSKey.name,\n      LORA_INPUTS.appSKey.name,\n      LORA_INPUTS.connectivityPlan.name,\n      LORA_INPUTS.deviceProfileId.name,\n    ]\n  }\n};\n\nexport {\n  DEVICE_TYPES,\n  STEPS,\n  PROGRESS_BAR_TITLES,\n  LORA_INPUTS,\n  LORA_INPUTS_STRUCTURE,\n  LORA_ACTIVATION_TYPES,\n};\n","import {Form} from '../../../../types';\n\nconst onChangeLocation = (\n  setInputValue: Form['setInputValue'],\n  showInputValidation: Form['showInputValidation'],\n  evt: React.ChangeEvent<HTMLInputElement>\n) => {\n  const {target: {value, name}} = evt;\n  setInputValue(name, value);\n  showInputValidation(name);\n  setInputValue('blueprint', '');\n};\n\nexport {\n  onChangeLocation,\n};\n","import React from 'react';\nimport _ from 'lodash';\n\nimport {getValidationErrorMessage} from '../../../../utils/form-wizard';\nimport {\n  useFetchLocationsQuery,\n  useFetchDeviceModelNamesQuery,\n  useCreateDeviceMutation,\n} from './queries';\nimport {\n  selectBlueprintOptions,\n  selectDeviceModelNameOptions,\n  selectLocationOptions,\n} from './selectors';\nimport {onChangeLocation} from './events';\nimport {onInputChange, onInputBlur} from '../events';\nimport {Forms, UpdateLocationMutation} from '../types';\n\nimport TextField from '../../../../components/text-field';\nimport TextArea from '../../../../components/text-area';\nimport Select from '../../../../components/select';\nimport Button from '../../../../components/button';\nimport InfoBox from '../../../../components/info-box';\nimport InputDecorator from '../../../../components/input-decorator';\nimport ContextualParametersEditor from '../../../../yggio-components/contexutal-parameters-editor';\nimport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n} from '../../styled';\nimport {StyledContainerBox} from '../../sub-components';\nimport {HeadingContainer} from './styled';\n\ninterface DetailsPaneProps {\n  forms: Forms;\n  onBack: () => void;\n  incrementCurrentStep: () => void;\n  updateLocationMutation: UpdateLocationMutation;\n}\n\nconst ADDITIONAL_INFO = 'Contextual parameters are user-defined data that let you save any information you want to the device.';\n\nconst DetailsPane = (props: DetailsPaneProps) => {\n\n  const fetchLocationsResult = useFetchLocationsQuery();\n  const locationOptions = selectLocationOptions(fetchLocationsResult.data);\n  const blueprintOptions = selectBlueprintOptions(\n    props.forms.details.formInputs.location.value as string,\n    fetchLocationsResult.data,\n  );\n\n  const fetchDeviceModelNamesResult = useFetchDeviceModelNamesQuery();\n  const deviceModelNamesOptions = selectDeviceModelNameOptions(fetchDeviceModelNamesResult.data);\n\n  const createDeviceMutation = useCreateDeviceMutation(\n    props.incrementCurrentStep,\n    props.updateLocationMutation,\n  );\n\n  return (\n    <StyledContainerBox>\n      <HeadingContainer>\n        <div>\n          <Heading>Device details</Heading>\n          <SubHeading>Please enter device details information</SubHeading>\n        </div>\n      </HeadingContainer>\n      <ContentContainer padding={'40px 0 55px 0'}>\n        <TextField\n          label={'Name'}\n          name={'name'}\n          isRequired\n          value={props.forms.details.formInputs.name.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChange(props.forms.details, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputBlur(props.forms.details, evt)\n          )}\n          validationErrorMessage={getValidationErrorMessage(props.forms.details.formInputs.name)}\n          fullHeight\n          margin={'0 0 10px 0'}\n        />\n        <TextArea\n          label={'Description'}\n          name={'description'}\n          value={props.forms.details.formInputs.description.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChange(props.forms.details, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputBlur(props.forms.details, evt)\n          )}\n          validationErrorMessage={getValidationErrorMessage(\n            props.forms.details.formInputs.description\n          )}\n          fullHeight\n          margin={'0 0 10px 0'}\n        />\n        <Select\n          label={'Model name'}\n          name={'deviceModelName'}\n          placeholder={'Select model name...'}\n          additionalInfo={'Specify the model name of the device in order to get translated data'}\n          options={deviceModelNamesOptions}\n          value={props.forms.details.formInputs.deviceModelName.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChange(props.forms.details, evt)\n          )}\n          margin={'0 0 30px 0'}\n          isClearable\n          isSearchable\n        />\n        <Select\n          label={'Location'}\n          name={'location'}\n          placeholder={'Select location...'}\n          options={locationOptions}\n          value={props.forms.details.formInputs.location.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onChangeLocation(\n              props.forms.details.setInputValue,\n              props.forms.details.showInputValidation,\n              evt\n            )\n          )}\n          margin={'0 0 5px 0'}\n        />\n        {!!_.size(blueprintOptions) && (\n          <Select\n            isDisabled={!blueprintOptions}\n            name={'blueprint'}\n            placeholder={'Select blueprint...'}\n            options={blueprintOptions}\n            value={props.forms.details.formInputs.blueprint.value as string}\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n              onInputChange(props.forms.details, evt)\n            )}\n            validationErrorMessage={getValidationErrorMessage(\n              props.forms.details.formInputs.blueprint\n            )}\n            margin={'0 0 15px 0'}\n          />\n        )}\n        {createDeviceMutation.isError && (\n          <InfoBox\n            type={'error'}\n            heading={'Error: Could not add device'}\n            content={\n              `${_.get(createDeviceMutation, 'error.message')}\n              : ${_.get(createDeviceMutation, 'error.response.data')}`\n            }\n            margin={'30px 0 0 0'}\n          />\n        )}\n        <InputDecorator\n          label={'Contextual parameters'}\n          additionalInfo={ADDITIONAL_INFO}\n          margin={'25px 0 3px 0'}\n        />\n        <ContextualParametersEditor\n          onChange={(parameters: Record<string, string>) => {\n            const parametersObject = _.chain(parameters)\n              .keyBy('name')\n              .mapValues('value')\n              .value();\n            props.forms.details.setInputValue('contextMap', parametersObject);\n          }}\n          value={_.map(\n            props.forms.details.formInputs.contextMap.value as object,\n            (value, name) => ({name, value})\n          )}\n        />\n      </ContentContainer>\n      <NavButtonsContainer>\n        <Button\n          content={'Back'}\n          ghosted\n          onClick={props.onBack}\n        />\n        <Button\n          color={'green'}\n          isLoading={createDeviceMutation.isLoading || props.updateLocationMutation.isLoading}\n          disabled={createDeviceMutation.isLoading || props.updateLocationMutation.isLoading}\n          content={'Add device'}\n          onClick={() => createDeviceMutation.mutate({\n            forms: props.forms,\n            locations: fetchLocationsResult.data,\n          })}\n          width={'130px'}\n        />\n      </NavButtonsContainer>\n    </StyledContainerBox>\n  );\n};\n\nexport default DetailsPane;\n","import {useQuery, useMutation} from 'react-query';\n\nimport {\n  locationsRequests,\n  devicesRequests,\n} from '../../../../api';\nimport {selectCreateDeviceData, selectLocationWithInsertedDevice} from './selectors';\nimport {Forms, UpdateLocationMutation} from '../types';\nimport {Locations} from '../../../../types';\n\nconst useFetchLocationsQuery = () => (\n  useQuery(\n    ['locations'],\n    async () => locationsRequests.fetch(),\n  )\n);\n\nconst useFetchDeviceModelNamesQuery = () => (\n  useQuery(\n    ['deviceModelNames'],\n    async () => devicesRequests.getModelNames(),\n  )\n);\n\nconst useCreateDeviceMutation = (\n  incrementCurrentStep: () => void,\n  updateLocationMutation: UpdateLocationMutation,\n) => (\n  useMutation(async (variables: {forms: Forms, locations?: Locations}) => {\n\n    const deviceData = selectCreateDeviceData(variables.forms);\n\n    return devicesRequests.create(deviceData);\n  }, {\n    onSuccess: (data, variables) => {\n      // Update location if one was selected\n      if (variables.forms.details.formInputs.blueprint.value && variables.locations) {\n        const deviceId = data._id;\n        const location = selectLocationWithInsertedDevice(\n          deviceId,\n          variables.locations,\n          variables.forms.details.formInputs.location.value as string,\n          variables.forms.details.formInputs.blueprint.value as string\n        );\n        updateLocationMutation.mutate(location);\n      } else {\n        incrementCurrentStep();\n      }\n    },\n  })\n);\n\nexport {\n  useFetchLocationsQuery,\n  useFetchDeviceModelNamesQuery,\n  useCreateDeviceMutation,\n};\n","import _ from 'lodash';\n\nimport {Forms, ConnectorInputValue} from '../types';\nimport {LORA_CONNECTOR_TYPES} from '../../constants';\nimport {DEVICE_TYPES} from '../constants';\nimport {selectActiveLoraInputs} from '../selectors';\nimport {DeviceCreateData, Locations, DeviceModelName} from '../../../../types';\nimport {getFormValues} from '../../../../utils/form-wizard';\n\nconst selectLocationOptions = (locations?: Locations) => {\n  return _.map(locations, location => ({\n    value: location._id,\n    label: location.name,\n  }));\n};\n\nconst selectBlueprintOptions = (selectedLocationId: string, locations?: Locations) => {\n  if (!locations || !selectedLocationId) return [];\n  const location = _.find(locations, {_id: selectedLocationId});\n  if (!location) return [];\n  const bluepints = [location.defaultLayer, ...location.layers];\n  return _.map(bluepints, blueprint => ({\n    value: blueprint._id,\n    label: blueprint.name || 'Your Blueprint',\n  }));\n};\n\nconst selectDeviceModelNameOptions = (deviceModelNames?: DeviceModelName[]) => {\n  return _.map(deviceModelNames, deviceModelName => ({\n    value: deviceModelName.value,\n    label: deviceModelName.displayName,\n  }));\n};\n\nconst selectCreateDeviceData = (forms: Forms) => {\n\n  const data: DeviceCreateData = {\n    name: forms.details.formInputs.name.value as string,\n  };\n\n  const deviceType = forms.deviceType.formInputs.deviceType.value as DEVICE_TYPES;\n\n  // Secret\n  if (deviceType === DEVICE_TYPES.generic) {\n    data.secret = forms.generic.formInputs.secret.value as string;\n  }\n\n  // Lora\n  if (deviceType === DEVICE_TYPES.lora) {\n    const formValues = getFormValues(forms.lora.formInputs);\n    const activeLoraInputs = selectActiveLoraInputs(forms.lora.formInputs);\n    const loraValues = _.pick(formValues, activeLoraInputs);\n    const connector = loraValues.connector as ConnectorInputValue;\n    if (connector.type === LORA_CONNECTOR_TYPES.None) {\n      _.unset(loraValues, 'connector');\n    } else {\n      loraValues.connector = connector.deviceId;\n    }\n    _.assign(data, loraValues);\n  }\n\n  // Description\n  if (forms.details.formInputs.description.value) {\n    data.description = forms.details.formInputs.description.value as string;\n  }\n\n  // Device model name\n  if (forms.details.formInputs.deviceModelName.value) {\n    data.deviceModelName = forms.details.formInputs.deviceModelName.value as string;\n  }\n\n  // Contextual parameters\n  if (_.size(forms.details.formInputs.contextMap.value as object)) {\n    data.contextMap = forms.details.formInputs.contextMap.value as Record<string, string>;\n  }\n\n  return data;\n};\n\nconst selectLocationWithInsertedDevice = (\n  deviceId: string,\n  locations: Locations,\n  locationId: string,\n  blueprintId: string,\n) => {\n  const newItem = {\n    deviceId,\n    type: 'default',\n    size: 'default',\n  };\n  const location = _.find(locations, {_id: locationId});\n  if (!location) throw Error('DevErr: location not found');\n  if (location.defaultLayer._id === blueprintId) {\n    location.defaultLayer.items.push(newItem);\n  } else {\n    location.layers = _.map(location.layers, layer => {\n      if (layer._id === blueprintId) {\n        layer.items.push(newItem);\n      }\n      return layer;\n    });\n  }\n  return location;\n};\n\nexport {\n  selectLocationOptions,\n  selectBlueprintOptions,\n  selectDeviceModelNameOptions,\n  selectCreateDeviceData,\n  selectLocationWithInsertedDevice,\n};\n","import styled from 'styled-components';\n\nconst HeadingContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n`;\n\nexport {\n  HeadingContainer,\n};\n","import React from 'react';\nimport {NextRouter} from 'next/router';\n\nimport {DEVICE_TYPES} from '../constants';\nimport {onInputChange} from '../events';\nimport {Form} from '../../../../types';\n\nimport Select from '../../../../components/select';\nimport Button from '../../../../components/button';\nimport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n} from '../../styled';\nimport {StyledContainerBox} from '../../sub-components';\n\ninterface DeviceTypeSelectionPaneProps {\n  router: NextRouter;\n  incrementCurrentStep: () => void;\n  form: Form,\n}\n\nconst DeviceTypeSelectionPane = (props: DeviceTypeSelectionPaneProps) => {\n  return (\n    <StyledContainerBox>\n      <Heading>Select device type</Heading>\n      <SubHeading>Please select the type of device you want to install</SubHeading>\n      <ContentContainer>\n        <Select\n          options={[\n            {value: DEVICE_TYPES.generic, label: 'Generic'},\n            {value: DEVICE_TYPES.lora, label: 'LoRa'},\n          ]}\n          name={'deviceType'}\n          placeholder={'Select device type...'}\n          value={props.form.formInputs.deviceType.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => onInputChange(props.form, evt)}\n        />\n      </ContentContainer>\n      <NavButtonsContainer>\n        <Button\n          content={'Back'}\n          ghosted\n          onClick={async () => props.router.push('/devices/new')}\n        />\n        <Button\n          color={'green'}\n          content={'Continue'}\n          onClick={props.incrementCurrentStep}\n          disabled={!props.form.formInputs.deviceType.value}\n        />\n      </NavButtonsContainer>\n    </StyledContainerBox>\n  );\n};\n\nexport default DeviceTypeSelectionPane;\n","import _ from 'lodash';\nimport {Form} from '../../../types';\n\nconst onInputChange = (form: Form, evt: React.ChangeEvent<HTMLInputElement>) => {\n  const {target: {value, name}} = evt;\n  form.setInputValue(name, value);\n  form.showInputValidation(name);\n};\n\nconst onInputBlur = (form: Form, evt: React.ChangeEvent<HTMLInputElement>) => {\n  const {target: {name}} = evt;\n  form.showInputValidation(name);\n};\n\nconst onInputChangeUpperCase = (form: Form, evt: React.ChangeEvent<HTMLInputElement>) => {\n  const {target: {value, name}} = evt;\n  const val = _.isString(value) ? value.toUpperCase() : value;\n  form.setInputValue(name, val);\n  form.showInputValidation(name);\n};\n\nexport {\n  onInputChange,\n  onInputChangeUpperCase,\n  onInputBlur,\n};\n","import {isFormValid} from '../../../../utils/form-wizard';\nimport {FormInputs, Form} from '../../../../types';\n\nconst onContinue = (\n  formInputs: FormInputs,\n  showAllInputValidations: Form['showAllInputValidations'],\n  incrementCurrentStep: () => void\n) => {\n  if (isFormValid(formInputs)) {\n    incrementCurrentStep();\n  } else {\n    showAllInputValidations();\n  }\n};\n\nexport {\n  onContinue,\n};\n","import React from 'react';\n\nimport {getValidationErrorMessage} from '../../../../utils/form-wizard';\nimport {onContinue} from './events';\nimport {onInputChange} from '../events';\nimport {Form} from '../../../../types';\n\nimport Button from '../../../../components/button';\nimport TextField from '../../../../components/text-field';\nimport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n} from '../../styled';\nimport {StyledContainerBox} from '../../sub-components';\n\ninterface GenericPaneProps {\n  incrementCurrentStep: () => void;\n  onBack: () => void;\n  form: Form;\n}\n\nconst GenericPane = (props: GenericPaneProps) => {\n  return (\n    <StyledContainerBox>\n      <Heading>Generic info</Heading>\n      <SubHeading>Please enter Generic specific information</SubHeading>\n      <ContentContainer>\n        <TextField\n          label={'Secret'}\n          value={props.form.formInputs.secret.value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => onInputChange(props.form, evt)}\n          name={'secret'}\n          fullHeight\n          margin={'0 0 10px 0'}\n          additionalInfo={'A unique identifier'}\n          validationErrorMessage={getValidationErrorMessage(props.form.formInputs.secret)}\n        />\n      </ContentContainer>\n      <NavButtonsContainer>\n        <Button\n          content={'Back'}\n          ghosted\n          onClick={props.onBack}\n        />\n        <Button\n          color={'green'}\n          content={'Continue'}\n          onClick={() => (\n            onContinue(\n              props.form.formInputs,\n              props.form.showAllInputValidations,\n              props.incrementCurrentStep,\n            )\n          )}\n        />\n      </NavButtonsContainer>\n    </StyledContainerBox>\n  );\n};\n\nexport default GenericPane;\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport React from 'react';\nimport {NextRouter} from 'next/router';\n\nimport {STEP_NOT_FOUND} from '../constants';\nimport {STEPS, DEVICE_TYPES, PROGRESS_BAR_TITLES} from './constants';\nimport {selectSteps} from './selectors';\nimport {withState} from '../../../hocs';\nimport {\n  navigationState,\n  deviceTypeFormState,\n  loraFormState,\n  genericFormState,\n  detailsFormState,\n  translatorFormState,\n} from './state';\nimport {Forms} from './types';\nimport {useUpdateLocationMutation} from './queries';\nimport {Navigation} from '../types';\n\nimport StepProgressBar from '../../../components/step-progress-bar';\nimport {CenteredPage} from '../../../global/components';\n\nimport DeviceTypeSelectionPane from './device-type-selection-pane';\nimport LoraPane from './lora-pane';\nimport GenericPane from './generic-pane';\nimport DetailsPane from './details-pane';\nimport ResultPane from './result-pane';\nimport TranslatorPane from './translator-pane';\n\ninterface BasicSingleModeStepsProps {\n  router: NextRouter;\n  navigation: Navigation;\n  forms: Forms;\n  steps: string[];\n}\n\nconst BasicSingleModeSteps = (props: BasicSingleModeStepsProps) => {\n  const updateLocationMutation = useUpdateLocationMutation(props.navigation.incrementCurrentStep);\n  const steps = selectSteps(props.forms.deviceType.formInputs.deviceType.value as DEVICE_TYPES);\n  return (\n    <CenteredPage>\n      <StepProgressBar\n        title={'Install device'}\n        steps={_.map(steps, step => PROGRESS_BAR_TITLES[step])}\n        currentStep={props.navigation.currentStep + 1}\n        margin={'0 0 9px 0'}\n      />\n      {{\n        [STEPS.deviceType]: (\n          <DeviceTypeSelectionPane\n            router={props.router}\n            incrementCurrentStep={props.navigation.incrementCurrentStep}\n            form={props.forms.deviceType}\n          />\n        ),\n        [STEPS.lora]: (\n          <LoraPane\n            onBack={() => {\n              props.forms.deviceType.resetForm();\n              props.forms.lora.resetForm();\n              props.navigation.decrementCurrentStep();\n            }}\n            incrementCurrentStep={props.navigation.incrementCurrentStep}\n            form={props.forms.lora}\n          />\n        ),\n        [STEPS.generic]: (\n          <GenericPane\n            onBack={() => {\n              props.forms.deviceType.resetForm();\n              props.forms.generic.resetForm();\n              props.navigation.decrementCurrentStep();\n            }}\n            incrementCurrentStep={props.navigation.incrementCurrentStep}\n            form={props.forms.generic}\n          />\n        ),\n        [STEPS.translator]: (\n          <TranslatorPane\n            onBack={() => {\n              props.forms.translator.resetForm();\n              props.navigation.decrementCurrentStep();\n            }}\n            incrementCurrentStep={props.navigation.incrementCurrentStep}\n            {...props.forms.translator}\n          />\n        ),\n        [STEPS.details]: (\n          <DetailsPane\n            forms={props.forms}\n            onBack={() => {\n              props.forms.details.resetForm();\n              props.navigation.decrementCurrentStep();\n            }}\n            incrementCurrentStep={props.navigation.incrementCurrentStep}\n            updateLocationMutation={updateLocationMutation}\n          />\n        ),\n        [STEPS.result]: (\n          <ResultPane\n            router={props.router}\n            detailsFormInputs={props.forms.details.formInputs}\n            updateLocationMutation={updateLocationMutation}\n          />\n        ),\n        [STEP_NOT_FOUND]: (\n          <h1>{'No single step found'}</h1>\n        ),\n      }[steps[props.navigation.currentStep]]}\n    </CenteredPage>\n  );\n};\n\nconst SingleModePane = compose(\n  withState(navigationState, 'navigation'),\n  withState(deviceTypeFormState, 'forms.deviceType'),\n  withState(loraFormState, 'forms.lora'),\n  withState(genericFormState, 'forms.generic'),\n  withState(translatorFormState, 'forms.translator'),\n  withState(detailsFormState, 'forms.details'),\n)(BasicSingleModeSteps);\n\nexport default SingleModePane;\n","import {InputOptions} from '../../../../types';\n\nimport {LORA_ACTIVATION_TYPES} from '../constants';\n\nconst ACTIVATION_TYPE_OPTIONS: InputOptions = [\n  {\n    label: LORA_ACTIVATION_TYPES.OTAA,\n    value: LORA_ACTIVATION_TYPES.OTAA,\n  }, {\n    label: LORA_ACTIVATION_TYPES.ABP,\n    value: LORA_ACTIVATION_TYPES.ABP,\n  },\n];\n\nconst CLASS_TYPE_OPTIONS: InputOptions = [\n  {\n    value: 'A',\n    label: 'A',\n  },\n  {\n    value: 'C',\n    label: 'C',\n  },\n];\n\nconst EXTERNAL_JOIN_SERVER_OPTIONS: InputOptions = [\n  {\n    value: 'yes',\n    label: 'Yes',\n  },\n  {\n    value: 'no',\n    label: 'No',\n  },\n];\n\nconst DEVICE_PROFILES_OPTIONS: InputOptions = [\n  {\n    value: 'LORA/GenericA.1.0.2a_ETSI_Rx2-SF12',\n    label: 'Class A',\n  },\n  {\n    value: 'LORA/GenericC.1.0.2a_ETSI_Rx2-SF12',\n    label: 'Class C',\n  },\n];\n\nexport {\n  ACTIVATION_TYPE_OPTIONS,\n  CLASS_TYPE_OPTIONS,\n  EXTERNAL_JOIN_SERVER_OPTIONS,\n  DEVICE_PROFILES_OPTIONS,\n};\n","import _ from 'lodash';\nimport React from 'react';\n\nimport {isFormValid} from '../../../../utils/form-wizard';\nimport {Form, FormInputs} from '../../../../types';\nimport {ConnectorOption} from './types';\n\nconst onConnectorChange = (\n  connectorOptions: ConnectorOption[],\n  evt: React.ChangeEvent<HTMLInputElement>,\n  setInputValue: Form['setInputValue']\n) => {\n  const selectedOption = _.find(connectorOptions, {value: evt.target.value});\n  if (!selectedOption) throw new Error('DevErr: connector not found');\n  const connector = {\n    deviceId: selectedOption.value,\n    type: selectedOption.type,\n  };\n  setInputValue(evt.target.name, connector);\n};\n\nconst onContinue = (\n  formInputs: FormInputs,\n  activeLoraInputs: string[],\n  incrementCurrentStep: () => void,\n  showAllInputValidations:\n  Form['showAllInputValidations']\n) => {\n  const inputsToValidate = _.pick(formInputs, activeLoraInputs);\n  if (isFormValid(inputsToValidate)) {\n    incrementCurrentStep();\n  } else {\n    showAllInputValidations();\n  }\n};\n\nexport {\n  onConnectorChange,\n  onContinue,\n};\n","import React from 'react';\n\nimport {selectActiveLoraInputs} from '../selectors';\nimport {selectConnectorOptions} from './selectors';\nimport {onContinue} from './events';\nimport {\n  useFetchConnectorDevicesQuery,\n  useFetchPriceModelsQuery,\n  useFetchConnectivityPlansQuery,\n} from './queries';\nimport {Form} from '../../../../types';\nimport {ConnectorInputValue} from '../types';\n\nimport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n} from '../../styled';\nimport Button from '../../../../components/button';\nimport {StyledContainerBox} from '../../sub-components';\nimport {Inputs} from './sub-components';\n\ninterface LoraPaneProps {\n  onBack: () => void,\n  incrementCurrentStep: () => void,\n  form: Form;\n}\n\nconst LoraPane = (props: LoraPaneProps) => {\n\n  const fetchConnectorDevicesResult = useFetchConnectorDevicesQuery();\n  const fetchPriceModelsResult = useFetchPriceModelsQuery(\n    props.form.formInputs.connector.value as ConnectorInputValue\n  );\n  const fetchConnectivityPlansResult = useFetchConnectivityPlansQuery(\n    props.form.formInputs.connector.value as ConnectorInputValue\n  );\n\n  const connectorOptions = selectConnectorOptions(fetchConnectorDevicesResult);\n  const activeLoraInputs = selectActiveLoraInputs(props.form.formInputs);\n\n  return (\n    <StyledContainerBox>\n      <Heading>LoRa info</Heading>\n      <SubHeading>Please enter LoRa specific information</SubHeading>\n      <ContentContainer>\n        <Inputs\n          form={props.form}\n          connectorOptions={connectorOptions}\n          activeLoraInputs={activeLoraInputs}\n          fetchPriceModelsResult={fetchPriceModelsResult}\n          fetchConnectivityPlansResult={fetchConnectivityPlansResult}\n        />\n      </ContentContainer>\n      <NavButtonsContainer>\n        <Button\n          content={'Back'}\n          ghosted\n          onClick={props.onBack}\n        />\n        <Button\n          color={'green'}\n          content={'Continue'}\n          onClick={() => (\n            onContinue(\n              props.form.formInputs,\n              activeLoraInputs,\n              props.incrementCurrentStep,\n              props.form.showAllInputValidations,\n            )\n          )}\n        />\n      </NavButtonsContainer>\n    </StyledContainerBox>\n  );\n};\n\nexport default LoraPane;\n","import {useQuery} from 'react-query';\n\nimport {devicesApi, devicesRequests} from '../../../../api';\nimport {selectLoraConnectors} from './selectors';\nimport {NetmorePriceModel, ActilityThingParkConnectivityPlan} from '../../../../types';\nimport {ConnectorInputValue} from '../types';\nimport {LORA_CONNECTOR_TYPES} from '../../constants';\n\nconst useFetchConnectorDevicesQuery = () => {\n  const devices = devicesApi.useConnectorsDevicesQuery();\n  const loraConnectors = selectLoraConnectors({devices});\n  return loraConnectors;\n};\n\nconst useFetchPriceModelsQuery = (connector: ConnectorInputValue) => (\n  useQuery(\n    ['devices', 'deviceCommands', 'priceModels'],\n    async () => devicesRequests.sendCommand<NetmorePriceModel[]>({\n      command: 'apiCall',\n      iotnodeId: connector.deviceId,\n      data: {\n        callName: 'fetchPriceModels',\n      },\n    }),\n    {\n      enabled: connector.type === LORA_CONNECTOR_TYPES.Netmore,\n    }\n  )\n);\n\nconst useFetchConnectivityPlansQuery = (connector: ConnectorInputValue) => (\n  useQuery(\n    ['devices', 'deviceCommands', 'connectivityPlans'],\n    async () => devicesRequests.sendCommand<ActilityThingParkConnectivityPlan[]>({\n      command: 'apiCall',\n      iotnodeId: connector.deviceId,\n      data: {\n        callName: 'fetchConnectivityPlans',\n      },\n    }),\n    {\n      enabled: connector.type === LORA_CONNECTOR_TYPES.ActilityThingpark,\n    }\n  )\n);\n\nexport {\n  useFetchConnectorDevicesQuery,\n  useFetchPriceModelsQuery,\n  useFetchConnectivityPlansQuery,\n};\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\nimport {Devices} from '../../../../types';\nimport {LORA_CONNECTOR_TYPES} from '../../constants';\nimport {ConnectorOption} from './types';\n\nconst selectConnectorOptions = (connectorDevices?: Devices): ConnectorOption[] => {\n  const deviceConnectorOptions = _.map(connectorDevices, device => ({\n    label: `${device.name} (${device.downlinkQueue})`,\n    value: device._id,\n    type: device.downlinkQueue as LORA_CONNECTOR_TYPES,\n  }));\n  const noConnectorOption = {\n    label: LORA_CONNECTOR_TYPES.None,\n    value: LORA_CONNECTOR_TYPES.None,\n    type: LORA_CONNECTOR_TYPES.None,\n  };\n  return _.concat(deviceConnectorOptions, [noConnectorOption]);\n};\n\nconst selectLoraConnectors = createSelector(\n  ({devices}: {devices: Devices}) => devices,\n  devices => {\n    return _.filter(devices, device => {\n      if (!device.downlinkQueue) return false;\n      if (device.downlinkQueue === LORA_CONNECTOR_TYPES.None) return false;\n      return device.downlinkQueue in LORA_CONNECTOR_TYPES;\n    });\n  }\n);\n\nexport {\n  selectConnectorOptions,\n  selectLoraConnectors,\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport {UseQueryResult} from 'react-query';\n\nimport {\n  getValidationErrorMessage,\n  getValidationSuccessMessage,\n} from '../../../../utils/form-wizard';\nimport {\n  ACTIVATION_TYPE_OPTIONS,\n  CLASS_TYPE_OPTIONS,\n  EXTERNAL_JOIN_SERVER_OPTIONS,\n  DEVICE_PROFILES_OPTIONS,\n} from './constants';\nimport {LORA_INPUTS} from '../constants';\nimport {onInputChange, onInputChangeUpperCase, onInputBlur} from '../events';\nimport {onConnectorChange} from './events';\nimport {Form, NetmorePriceModel, ActilityThingParkConnectivityPlan} from '../../../../types';\nimport {ConnectorOption} from './types';\nimport {ConnectorInputValue} from '../types';\n\nimport Select from '../../../../components/select';\nimport TextField from '../../../../components/text-field';\nimport SegmentedControl from '../../../../components/segmented-control';\n\ninterface InputsProps {\n  form: Form,\n  connectorOptions: ConnectorOption[];\n  activeLoraInputs: string[];\n  fetchPriceModelsResult: UseQueryResult<NetmorePriceModel[], unknown>;\n  fetchConnectivityPlansResult: UseQueryResult<ActilityThingParkConnectivityPlan[], unknown>;\n}\n\nconst Inputs = (props: InputsProps) => {\n  return (\n    <>\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.connector.name) && (\n        <Select\n          label={LORA_INPUTS.connector.label}\n          options={props.connectorOptions}\n          isDisabled={!props.connectorOptions.length}\n          value={(props.form.formInputs.connector.value as ConnectorInputValue).deviceId}\n          fullHeight\n          name={LORA_INPUTS.connector.name}\n          margin={'0 0 15px 0'}\n          additionalInfo={LORA_INPUTS.connector.info}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onConnectorChange(props.connectorOptions, evt, props.form.setInputValue)\n          )}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.connector.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.activationType.name) && (\n        <Select\n          label={LORA_INPUTS.activationType.label}\n          options={ACTIVATION_TYPE_OPTIONS}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => onInputChange(props.form, evt)}\n          fullHeight\n          name={LORA_INPUTS.activationType.name}\n          margin={'0 0 15px 0'}\n          additionalInfo={LORA_INPUTS.activationType.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.activationType.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.devEui.name) && (\n        <TextField\n          label={LORA_INPUTS.devEui.label}\n          value={props.form.formInputs[LORA_INPUTS.devEui.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChangeUpperCase(props.form, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => onInputBlur(props.form, evt)}\n          name={LORA_INPUTS.devEui.name}\n          fullHeight\n          maxLength={16}\n          margin={'0 0 15px 0'}\n          additionalInfo={LORA_INPUTS.devEui.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.devEui.name]\n          )}\n          validationSuccessMessage={getValidationSuccessMessage(\n            props.form.formInputs[LORA_INPUTS.devEui.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.appKey.name) && (\n        <TextField\n          label={LORA_INPUTS.appKey.label}\n          value={props.form.formInputs[LORA_INPUTS.appKey.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChangeUpperCase(props.form, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => onInputBlur(props.form, evt)}\n          name={LORA_INPUTS.appKey.name}\n          margin={'0 0 15px 0'}\n          fullHeight\n          maxLength={32}\n          additionalInfo={LORA_INPUTS.appKey.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.appKey.name]\n          )}\n          validationSuccessMessage={getValidationSuccessMessage(\n            props.form.formInputs[LORA_INPUTS.appKey.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.appEui.name) && (\n        <TextField\n          label={LORA_INPUTS.appEui.label}\n          value={props.form.formInputs[LORA_INPUTS.appEui.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChangeUpperCase(props.form, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => onInputBlur(props.form, evt)}\n          name={LORA_INPUTS.appEui.name}\n          margin={'0 0 15px 0'}\n          fullHeight\n          maxLength={16}\n          additionalInfo={LORA_INPUTS.appEui.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.appEui.name]\n          )}\n          validationSuccessMessage={getValidationSuccessMessage(\n            props.form.formInputs[LORA_INPUTS.appEui.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.classType.name) && (\n        <Select\n          label={LORA_INPUTS.classType.label}\n          options={CLASS_TYPE_OPTIONS}\n          value={props.form.formInputs[LORA_INPUTS.classType.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => onInputChange(props.form, evt)}\n          fullHeight\n          name={LORA_INPUTS.classType.name}\n          margin={'0 0 15px 0'}\n          additionalInfo={LORA_INPUTS.classType.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.classType.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.priceModel.name) && (\n        <Select\n          label={LORA_INPUTS.priceModel.label}\n          options={_.map(props.fetchPriceModelsResult.data, model => ({\n            value: model.compositeCode,\n            label: model.name,\n          }))}\n          value={props.form.formInputs[LORA_INPUTS.priceModel.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => onInputChange(props.form, evt)}\n          fullHeight\n          placeholder={(() => {\n            if (props.fetchPriceModelsResult.isLoading) return 'Fetching price models...';\n            if (props.fetchPriceModelsResult.isError) return 'Failed to fetch price models';\n            return 'Select...';\n          })()}\n          name={LORA_INPUTS.priceModel.name}\n          isDisabled={!props.fetchPriceModelsResult.isSuccess}\n          margin={'0 0 15px 0'}\n          additionalInfo={LORA_INPUTS.priceModel.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.priceModel.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.externalJoinServer.name) && (\n        <SegmentedControl\n          options={EXTERNAL_JOIN_SERVER_OPTIONS}\n          onChange={(value: string) => props.form.setInputValue('externalJoinServer', value)}\n          value={props.form.formInputs[LORA_INPUTS.externalJoinServer.name].value as string}\n          segmentWidth={100}\n          height={'30px'}\n          label={LORA_INPUTS.externalJoinServer.label}\n          additionalInfo={LORA_INPUTS.externalJoinServer.info}\n          fullHeight\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.devAddr.name) && (\n        <TextField\n          label={LORA_INPUTS.devAddr.label}\n          value={props.form.formInputs[LORA_INPUTS.devAddr.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChangeUpperCase(props.form, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputBlur(props.form, evt)\n          )}\n          name={LORA_INPUTS.devAddr.name}\n          margin={'0 0 15px 0'}\n          fullHeight\n          maxLength={8}\n          additionalInfo={LORA_INPUTS.devAddr.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.devAddr.name]\n          )}\n          validationSuccessMessage={getValidationSuccessMessage(\n            props.form.formInputs[LORA_INPUTS.devAddr.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.nwkSKey.name) && (\n        <TextField\n          label={LORA_INPUTS.nwkSKey.label}\n          value={props.form.formInputs[LORA_INPUTS.nwkSKey.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChangeUpperCase(props.form, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => onInputBlur(props.form, evt)}\n          name={LORA_INPUTS.nwkSKey.name}\n          margin={'0 0 15px 0'}\n          fullHeight\n          maxLength={32}\n          additionalInfo={LORA_INPUTS.nwkSKey.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.nwkSKey.name]\n          )}\n          validationSuccessMessage={getValidationSuccessMessage(\n            props.form.formInputs[LORA_INPUTS.nwkSKey.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.appSKey.name) && (\n        <TextField\n          label={LORA_INPUTS.appSKey.label}\n          value={props.form.formInputs[LORA_INPUTS.appSKey.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => (\n            onInputChangeUpperCase(props.form, evt)\n          )}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => onInputBlur(props.form, evt)}\n          name={LORA_INPUTS.appSKey.name}\n          margin={'0 0 15px 0'}\n          fullHeight\n          maxLength={32}\n          additionalInfo={LORA_INPUTS.appSKey.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.appSKey.name]\n          )}\n          validationSuccessMessage={getValidationSuccessMessage(\n            props.form.formInputs[LORA_INPUTS.appSKey.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.connectivityPlan.name) && (\n        <Select\n          label={LORA_INPUTS.connectivityPlan.label}\n          options={_.map(props.fetchConnectivityPlansResult.data, plan => ({\n            value: plan.id,\n            label: plan.name,\n          }))}\n          value={props.form.formInputs[LORA_INPUTS.connectivityPlan.name].value as string}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) => onInputChange(props.form, evt)}\n          onBlur={(evt: React.ChangeEvent<HTMLInputElement>) => onInputBlur(props.form, evt)}\n          name={LORA_INPUTS.connectivityPlan.name}\n          margin={'0 0 15px 0'}\n          fullHeight\n          placeholder={(() => {\n            if (props.fetchConnectivityPlansResult.isLoading) {\n              return 'Fetching connectivity plans...';\n            }\n            if (props.fetchConnectivityPlansResult.isError) {\n              return 'Failed to fetch connectivity plans';\n            }\n            return 'Select...';\n          })()}\n          isDisabled={!props.fetchConnectivityPlansResult.isSuccess}\n          additionalInfo={LORA_INPUTS.connectivityPlan.info}\n          validationErrorMessage={getValidationErrorMessage(\n            props.form.formInputs[LORA_INPUTS.connectivityPlan.name]\n          )}\n        />\n      )}\n      {_.includes(props.activeLoraInputs, LORA_INPUTS.deviceProfileId.name) && (\n        <SegmentedControl\n          options={DEVICE_PROFILES_OPTIONS}\n          onChange={(value: string) => props.form.setInputValue('deviceProfileId', value)}\n          value={props.form.formInputs[LORA_INPUTS.deviceProfileId.name].value as string}\n          segmentWidth={140}\n          height={'30px'}\n          label={LORA_INPUTS.deviceProfileId.label}\n          additionalInfo={LORA_INPUTS.deviceProfileId.info}\n          margin={'0 0 25px 0'}\n        />\n      )}\n    </>\n  );\n};\n\nexport {\n  Inputs,\n};\n","import {useMutation} from 'react-query';\n\nimport {locationsRequests} from '../../../api';\nimport {Location} from '../../../types';\n\nconst useUpdateLocationMutation = (incrementCurrentStep: () => void) => (\n  useMutation(async (location: Location) => {\n    return locationsRequests.update(location);\n  }, {\n    onSettled: () => {\n      incrementCurrentStep();\n    },\n  })\n);\n\nexport {\n  useUpdateLocationMutation,\n};\n","import React from 'react';\nimport {NextRouter} from 'next/router';\nimport CheckIcon from '@material-ui/icons/CheckCircleOutlineRounded';\nimport Button from '../../../../components/button';\nimport InfoBox from '../../../../components/info-box';\nimport {\n  ContentContainer,\n  SuccessMessage,\n} from './styled';\nimport {UpdateLocationMutation} from '../types';\nimport {FormInputs} from '../../../../types';\nimport {NavButtonsContainer} from '../../styled';\nimport {StyledContainerBox} from '../../sub-components';\nimport COLORS from '../../../../constants/colors';\n\ninterface ResultPaneProps {\n  router: NextRouter;\n  detailsFormInputs: FormInputs;\n  updateLocationMutation: UpdateLocationMutation;\n}\n\nconst ResultPane = (props: ResultPaneProps) => {\n  return (\n    <StyledContainerBox>\n      <ContentContainer>\n        <CheckIcon\n          style={{fontSize: 90, color: COLORS.greenAlt}}\n        />\n        <SuccessMessage>Device was added successfully</SuccessMessage>\n        {props.updateLocationMutation.isError && (\n          <InfoBox\n            type={'warning'}\n            heading={'Device was created but could not be added to location'}\n            content={`Error: ${props.updateLocationMutation.error}`}\n            margin={'30px 0 0 0'}\n          />\n        )}\n      </ContentContainer>\n      <NavButtonsContainer flexDirection={'row-reverse'}>\n        <Button\n          content={'Done'}\n          ghosted\n          onClick={async () => props.router.push('/devices')}\n        />\n      </NavButtonsContainer>\n    </StyledContainerBox>\n  );\n};\n\nexport default ResultPane;\n","import styled from 'styled-components';\n\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 50px 0;\n  font-size: 13px;\n`;\n\nconst SuccessMessage = styled.p`\n  color: #333;\n  font-size: 15px;\n  font-weight: 500;\n`;\n\nexport {\n  ContentContainer,\n  SuccessMessage,\n};\n","import _ from 'lodash';\n\nimport {ConnectorInputValue} from './types';\nimport {LORA_CONNECTOR_TYPES} from '../constants';\nimport {FormInputs} from '../../../types';\nimport {getFormValues} from '../../../utils/form-wizard';\nimport {\n  LORA_INPUTS,\n  LORA_ACTIVATION_TYPES,\n  LORA_INPUTS_STRUCTURE,\n  STEPS,\n  DEVICE_TYPES\n} from './constants';\n\nconst selectActiveLoraInputs = (loraFormInputs: FormInputs) => {\n  const activeInputs = [];\n\n  activeInputs.push(LORA_INPUTS.connector.name);\n\n  const formValues = getFormValues(loraFormInputs);\n\n  const connector = formValues.connector as ConnectorInputValue;\n  const activationType = formValues.activationType as LORA_ACTIVATION_TYPES;\n\n  if (!connector.deviceId) {\n    return activeInputs;\n  }\n\n  if (connector.type === LORA_CONNECTOR_TYPES.None) {\n    return _.concat(activeInputs, LORA_INPUTS.devEui.name);\n  }\n\n  activeInputs.push(LORA_INPUTS.activationType.name);\n\n  if (!activationType) {\n    return activeInputs;\n  }\n\n  return _.concat(\n    activeInputs,\n    LORA_INPUTS_STRUCTURE[connector.type][activationType]\n  );\n};\n\nconst selectSteps = (selectedDeviceType: DEVICE_TYPES) => {\n  const steps = [STEPS.deviceType];\n  if (selectedDeviceType === DEVICE_TYPES.generic) {\n    steps.push(STEPS.generic);\n  }\n  if (selectedDeviceType === DEVICE_TYPES.lora) {\n    steps.push(STEPS.lora);\n  }\n  steps.push(STEPS.details);\n  steps.push(STEPS.result);\n  return steps;\n};\n\nexport {\n  selectActiveLoraInputs,\n  selectSteps,\n};\n","import {\n  generateForm,\n  inputValidators,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nimport {FormConfig} from '../../../../../types';\n\nconst formConfig: FormConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validMessage: `Valid`,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n        inputValidators.maximumLength(150),\n      ]\n    }\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validMessage: `Valid`,\n      validators: [\n        inputValidators.maximumLength(2000),\n      ]\n    }\n  },\n  deviceModelName: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  location: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  blueprint: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: (value, formInputs) => {\n          return !formInputs ||\n            (!formInputs.location.value && !value) ||\n            (!!formInputs.location.value && !!value);\n        },\n        message: 'Please select a blueprint',\n      }],\n    }\n  },\n  contextMap: {\n    defaultValue: [],\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","import {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nconst formConfig = {\n  deviceType: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.never,\n    },\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","import {\n  generateForm,\n  inputValidators,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\nimport {InputValue} from '../../../../../types';\n\nconst formConfig = {\n  secret: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a secret'),\n        inputValidators.minimumLength(8),\n        inputValidators.maximumLength(128),\n        {\n          validate: (value: InputValue) => {\n            const pattern = /^[a-zA-Z0-9\\-_/.]+$/;\n            return pattern.test(value as string);\n          },\n          message: 'Can only include letters, numbers, dash, slashes, underline, dot',\n        }\n      ],\n    }\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","import {\n  generateForm,\n  inputValidators,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\nimport {LORA_INPUTS} from '../../constants';\nimport {DEVICE_PROFILES_OPTIONS} from '../../lora-pane/constants';\nimport {InputValue} from '../../../../../types';\nimport {ConnectorInputValue} from '../../types';\n\nconst patterns = {\n  hex8: {\n    pattern: /^[A-F0-9]{8}$/,\n    message: 'Must be 8 characters, numbers and A-F letters only',\n  },\n  hex16: {\n    pattern: /^[A-F0-9]{16}$/,\n    message: 'Must be 16 characters, numbers and A-F letters only',\n  },\n  hex32: {\n    pattern: /^[A-F0-9]{32}$/,\n    message: 'Must be 32 characters, numbers and A-F letters only',\n  },\n};\n\nconst formConfig = {\n  [LORA_INPUTS.connector.name]: {\n    defaultValue: {\n      deviceId: null,\n      type: null,\n    },\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        {\n          validate: (value: InputValue) => {\n            const val = value as ConnectorInputValue;\n            return !!val.deviceId;\n          },\n          message: 'Please select a connector',\n        }\n      ],\n    }\n  },\n  [LORA_INPUTS.activationType.name]: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please select an activation type.'),\n      ],\n    }\n  },\n  [LORA_INPUTS.devEui.name]: {\n    defaultValue: '',\n    validation: {\n      validMessage: `Valid`,\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please enter a DevEUI'),\n        {\n          validate: (value: InputValue) => patterns.hex16.pattern.test(value as string),\n          message: patterns.hex16.message,\n        }\n      ],\n    }\n  },\n  [LORA_INPUTS.appKey.name]: {\n    defaultValue: '',\n    validation: {\n      validMessage: `Valid`,\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please enter a AppKey'),\n        {\n          validate: (value: InputValue) => patterns.hex32.pattern.test(value as string),\n          message: patterns.hex32.message,\n        }\n      ],\n    }\n  },\n  [LORA_INPUTS.devAddr.name]: {\n    defaultValue: '',\n    validation: {\n      validMessage: `Valid`,\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please enter a DevAddr'),\n        {\n          validate: (value: InputValue) => patterns.hex8.pattern.test(value as string),\n          message: patterns.hex8.message,\n        }\n      ],\n    }\n  },\n  [LORA_INPUTS.appEui.name]: {\n    defaultValue: '',\n    validation: {\n      validMessage: `Valid`,\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please enter a AppEUI'),\n        {\n          validate: (value: InputValue) => patterns.hex16.pattern.test(value as string),\n          message: patterns.hex16.message,\n        }\n      ],\n    }\n  },\n  [LORA_INPUTS.classType.name]: {\n    defaultValue: 'A',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please select a class type'),\n      ],\n    }\n  },\n  [LORA_INPUTS.priceModel.name]: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please select a price model'),\n      ],\n    }\n  },\n  [LORA_INPUTS.externalJoinServer.name]: {\n    defaultValue: 'no',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please select an option'),\n      ],\n    }\n  },\n  [LORA_INPUTS.nwkSKey.name]: {\n    defaultValue: '',\n    validation: {\n      validMessage: `Valid`,\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please enter a nwkSKey'),\n        {\n          validate: (value: InputValue) => patterns.hex32.pattern.test(value as string),\n          message: patterns.hex32.message,\n        }\n      ],\n    }\n  },\n  [LORA_INPUTS.appSKey.name]: {\n    defaultValue: '',\n    validation: {\n      validMessage: `Valid`,\n      visibilityType: VALIDATION_VISIBILITY_TYPES.always,\n      validators: [\n        inputValidators.inputRequired('Please enter a appSKey'),\n        {\n          validate: (value: InputValue) => patterns.hex32.pattern.test(value as string),\n          message: patterns.hex32.message,\n        }\n      ],\n    }\n  },\n  [LORA_INPUTS.connectivityPlan.name]: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a connectivity plan'),\n      ],\n    }\n  },\n  [LORA_INPUTS.deviceProfileId.name]: {\n    defaultValue: DEVICE_PROFILES_OPTIONS[0].value, // = class A\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [],\n    }\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","import {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nconst formConfig = {\n  deviceModelName: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  availableTranslator: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  isTranslatorSelectorShown: {\n    defaultValue: false,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n  addedTranslators: {\n    defaultValue: [],\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n};\n","import navigationState from '../../state';\n\nimport deviceTypeFormState from './forms/device-type';\nimport loraFormState from './forms/lora';\nimport genericFormState from './forms/generic';\nimport detailsFormState from './forms/details';\nimport translatorFormState from './forms/translator';\n\nexport {\n  navigationState,\n  deviceTypeFormState,\n  loraFormState,\n  genericFormState,\n  detailsFormState,\n  translatorFormState,\n};\n","import React from 'react';\n\nconst withFetchDeviceModelNames = Component => props => {\n  React.useEffect(() => {\n    props.getDeviceModelNames();\n  }, []);\n  return <Component {...props} />;\n};\n\nconst withOnDeviceModelNameSelected = Component => props => {\n  React.useEffect(() => {\n    if (props.formInputs.deviceModelName.value) {\n      props.fetchTranslators(props.formInputs.deviceModelName.value);\n    }\n  }, [props.formInputs.deviceModelName.value]);\n\n  return <Component {...props} />;\n};\n\nexport {\n  withFetchDeviceModelNames,\n  withOnDeviceModelNameSelected,\n};\n","import {isFormValid} from '../../../../utils/form-wizard';\n\nconst onContinue = props => () => {\n  if (isFormValid(props.formInputs)) {\n    props.incrementCurrentStep();\n  } else {\n    props.showAllInputValidations();\n  }\n};\n\nconst handleValueChange = props => evt => {\n  const {target: {value, name}} = evt;\n  props.setInputValue(name, value);\n  props.setCurrentPage(1);\n};\n\nexport default {\n  onContinue,\n  handleValueChange,\n};\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport exact from 'prop-types-exact';\nimport {compose} from 'lodash/fp';\nimport {arrow_down as arrowDown} from 'react-icons-kit/ikons/arrow_down';\nimport {arrow_up as arrowUp} from 'react-icons-kit/ikons/arrow_up';\nimport {Icon} from 'react-icons-kit';\n\nimport {\n  getFormShape,\n} from '../../../../utils/form-wizard';\nimport {withEvents, withReselect} from '../../../../hocs';\nimport events from './events';\nimport {onInputChange} from '../events';\nimport selectors from './selectors';\n\nimport Button from '../../../../components/button';\nimport Select from '../../../../components/select';\nimport Spinner from '../../../../components/spinner';\nimport InfoBox from '../../../../components/info-box';\nimport Collapsible from '../../../../components/collapsible';\nimport TranslatorSelector from '../../../../components/translator-selector';\nimport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n} from '../../styled';\nimport {StyledContainerBox} from '../../sub-components';\nimport {\n  FetchTranslatorLoadingContainer,\n  CollapsableButtonIconWrapper,\n  CollapsableButton,\n  SubLink,\n  CurrentlyUsing,\n  TitleContainer,\n  InfoItem,\n} from './styled';\nimport {\n  withFetchDeviceModelNames,\n  withOnDeviceModelNameSelected,\n} from './effects';\n\n/*\n  NOTE: This pane needs to be converted to the new way\n  */\n\nconst BasicTranslatorPane = props => {\n  const [isCollapsibleOpen, setCollapsibleOpen] = useState(false);\n  const [isAddedTranslatorsEmpty, setAddedTranslatorsEmpty] = useState(false);\n  const [CurrentlyUsingTranslator, setCurrentlyUsingTranslator] = useState('none');\n  const DefaultTranslatorInformation = isAddedTranslatorsEmpty ? 'none' : 'block';\n  const NoTranslatorInformation = !isAddedTranslatorsEmpty ? 'none' : 'block';\n\n  const CollapseButton = () => (\n    <CollapsableButton>\n      Edit translators\n      <CollapsableButtonIconWrapper>\n        {\n          isCollapsibleOpen\n            ? <Icon icon={arrowUp} size={14} />\n            : <Icon icon={arrowDown} size={14} />\n        }\n      </CollapsableButtonIconWrapper>\n    </CollapsableButton>\n  );\n  return (\n    <>\n      <StyledContainerBox>\n        <Heading>Specify device and translator(s)</Heading>\n        <SubHeading>Please enter device model name</SubHeading>\n        <ContentContainer>\n          <Select\n            label={'Model name'}\n            name={'deviceModelName'}\n            placeholder={'Select model name...'}\n            additionalInfo={'Enter device model name to get a default translator based on device'}\n            options={props.deviceModelOptions || []}\n            isOptional\n            value={props.formInputs.deviceModelName.value}\n            onChange={props.onInputChange}\n            margin={'0 0 25px 0'}\n          />\n          {props.fetchTranslatorsRequest.isLoading && (\n            <FetchTranslatorLoadingContainer>\n              <Spinner margin={'0 10px 0 0'} />\n              <SubHeading>Fetching translators...</SubHeading>\n            </FetchTranslatorLoadingContainer>\n          )}\n          {\n            props.fetchTranslatorsRequest.res &&\n              props.fetchTranslatorsRequest.res.length === 0 &&\n              props.formInputs.deviceModelName.value &&\n              !props.fetchTranslatorsRequest.isLoading && (\n                <InfoBox\n                  heading={'No translator found for this device.'}\n                />\n            )\n          }\n\n          {\n            props.fetchTranslatorsRequest.res &&\n              props.fetchTranslatorsRequest.res.length === 1 &&\n              !props.formInputs.isTranslatorSelectorShown.value &&\n              props.formInputs.deviceModelName.value &&\n              !props.fetchTranslatorsRequest.isLoading && (\n                <>\n                  <CurrentlyUsing>One translator found!</CurrentlyUsing>\n                  <SubHeading>advanced settings unavailable</SubHeading>\n                </>\n            )\n          }\n\n          {\n            props.fetchTranslatorsRequest.res &&\n              props.fetchTranslatorsRequest.res.length > 1 &&\n              !props.formInputs.isTranslatorSelectorShown.value &&\n              props.formInputs.deviceModelName.value &&\n              !props.fetchTranslatorsRequest.isLoading &&\n              props.formInputs.addedTranslators.value && (\n                <>\n                  <div style={{display: DefaultTranslatorInformation}}>\n                    <CurrentlyUsing>\n                      \"{CurrentlyUsingTranslator}\" set as first translator\n                    </CurrentlyUsing>\n                  </div>\n                  <div style={{display: NoTranslatorInformation}}>\n                    <CurrentlyUsing>No translator in use </CurrentlyUsing>\n                  </div>\n                  <Collapsible\n                    openedHeight={`${props.formInputs.addedTranslators.length * 50}px`}\n                    open={isCollapsibleOpen}\n                    onClick={() => setCollapsibleOpen(!isCollapsibleOpen)}\n                    label={<CollapseButton filterName='type' {...props} />}\n                  >\n                    <div style={{display: 'block', width: '100%'}}>\n                      <div style={{display: DefaultTranslatorInformation}}>\n                        <TitleContainer>\n                          <InfoItem>\n                            Translator name:\n                          </InfoItem>\n                          <InfoItem>\n                            Author:\n                          </InfoItem>\n                          <InfoItem>\n                            Version:\n                          </InfoItem>\n                          <InfoItem>\n                            Update Interval:\n                          </InfoItem>\n                        </TitleContainer>\n                      </div>\n                      <TranslatorSelector\n                        shouldAddDefaultTranslator\n                        availableTranslators={props.fetchTranslatorsRequest.res}\n                        onChange={addedTranslators => {\n                          if (addedTranslators.length === 0) {\n                            setAddedTranslatorsEmpty(true);\n                            setCurrentlyUsingTranslator('none');\n                          } else {\n                            setAddedTranslatorsEmpty(false);\n                            setCurrentlyUsingTranslator(addedTranslators[0].name);\n                          }\n                          props.setInputValue('addedTranslators', addedTranslators);\n                        }}\n                      />\n                    </div>\n                  </Collapsible>\n                </>\n            )\n          }\n\n          {props.formInputs.isTranslatorSelectorShown.value && (\n            <>\n              <TranslatorSelector\n                availableTranslators={props.fetchTranslatorsRequest.res}\n                onChange={addedTranslators => {\n                  props.setInputValue('addedTranslators', addedTranslators);\n                }}\n              />\n              <SubLink\n                style={{marginTop: '15px'}}\n                onClick={() => (props.formInputs.isTranslatorSelectorShown.value\n                  ? props.setInputValue('isTranslatorSelectorShown', false)\n                  : props.setInputValue('isTranslatorSelectorShown', true)\n                )}\n                disabled={!props.formInputs.deviceModelName.value}\n              >\n                hide edit translators\n                <Icon\n                  style={{display: 'inline-block', marginLeft: '2px', color: 'black'}}\n                  icon={arrowUp}\n                  size={10}\n                />\n              </SubLink>\n            </>\n          )}\n        </ContentContainer>\n        <NavButtonsContainer>\n          <Button\n            content={'Back'}\n            ghosted\n            onClick={() => props.onBack()}\n          />\n          <Button\n            color={'green'}\n            content={'Continue'}\n            onClick={props.onContinue}\n          />\n        </NavButtonsContainer>\n      </StyledContainerBox>\n    </>\n  );\n};\n\nBasicTranslatorPane.propTypes = exact({\n  // from selectors\n  deviceModelOptions: PropTypes.array,\n  translatorOptions: PropTypes.array,\n  // from events\n  onInputChange: PropTypes.func,\n  onContinue: PropTypes.func,\n  // from top\n  fetchTranslators: PropTypes.func,\n  translators: PropTypes.object,\n  fetchTranslatorsRequest: PropTypes.object,\n  getDeviceModelNamesRequest: PropTypes.object,\n  getDeviceModelNames: PropTypes.func,\n  setFilterCollapsed: PropTypes.func,\n  filterCollapsed: PropTypes.object,\n  handleValueChange: PropTypes.func,\n  onBack: PropTypes.func,\n  incrementCurrentStep: PropTypes.func,\n  ...getFormShape({\n    secret: PropTypes.string,\n  }),\n});\n\nconst TranslatorPane = compose(\n  withFetchDeviceModelNames,\n  withOnDeviceModelNameSelected,\n  withReselect(selectors),\n  withEvents({...events, onInputChange}),\n)(BasicTranslatorPane);\n\nTranslatorPane.propTypes = exact({\n  fetchTranslators: PropTypes.func,\n  translators: PropTypes.object,\n  fetchTranslatorsRequest: PropTypes.object,\n  createDeviceRequest: PropTypes.object,\n  getDeviceModelNamesRequest: PropTypes.object,\n  getDeviceModelNames: PropTypes.func,\n  onBack: PropTypes.func,\n  incrementCurrentStep: PropTypes.func,\n  ...getFormShape({\n    secret: PropTypes.string,\n  }),\n});\n\nexport default TranslatorPane;\n","import {map} from 'lodash/fp';\nimport {createSelector} from 'reselect';\n\nconst deviceModelNameOptionsSelector = createSelector(\n  props => props.getDeviceModelNamesRequest,\n  request => map(modelName => ({\n    value: modelName.value,\n    label: modelName.displayName,\n  }), request.res)\n);\n\nconst translatorOptionsSelector = createSelector(\n  props => props.translators,\n  translators => map(trans => ({\n    value: trans._id,\n    label: trans.name,\n  }), translators)\n);\n\nexport default {\n  deviceModelOptions: deviceModelNameOptionsSelector,\n  translatorOptions: translatorOptionsSelector,\n};\n","import styled from 'styled-components';\nimport COLORS from '../../../../constants/colors';\n\nconst FetchTranslatorLoadingContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CollapsableButtonIconWrapper = styled.div`\n  display: inline-block;\n  color: ${COLORS.black};\n`;\n\nconst CollapsableButton = styled.div`\n  justify-content: center;\n  cursor: pointer;\n  display: inline-block;\n  color: ${COLORS.greenDark};\n  display: flex;\n  font-size: 13px;\n  align-items: center;\n  margin-top: 10px;\n`;\n\nconst SubLink = styled.p`\n  display: inline-block;\n  color: ${COLORS.greenDark};\n  text-decoration: underline;\n  margin: 0 0 5px 0;\n  cursor: pointer;\n`;\n\nconst CurrentlyUsing = styled.p`\n  margin: 0;\n  text-align: center;\n`;\n\nconst TitleContainer = styled.div`\n  display: grid;\n  grid-template-columns: 30% 25% 20% 25%;\n  font-size: 13px;\n  margin-top: 15px;\n`;\n\nconst InfoItem = styled.div`\n  margin: 0 0 5px 0;\n`;\n\nexport {\n  FetchTranslatorLoadingContainer,\n  CollapsableButtonIconWrapper,\n  CollapsableButton,\n  SubLink,\n  CurrentlyUsing,\n  TitleContainer,\n  InfoItem,\n};\n","const ACTION_TYPES = {\n  incrementCurrentStep: 'incrementCurrentStep',\n  decrementCurrentStep: 'decrementCurrentStep',\n};\n\nconst actions = {\n  incrementCurrentStep: () => ({\n    type: ACTION_TYPES.incrementCurrentStep,\n  }),\n  decrementCurrentStep: () => ({\n    type: ACTION_TYPES.decrementCurrentStep,\n  }),\n};\n\nconst defaultState = {\n  currentStep: 0,\n};\n\nconst reducer = (state = defaultState, action: {type: string}) => {\n  if (!action) {\n    return state;\n  }\n  const {type} = action;\n\n  switch (type) {\n\n    case ACTION_TYPES.incrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      };\n    }\n    case ACTION_TYPES.decrementCurrentStep: {\n      return {\n        ...state,\n        currentStep: state.currentStep - 1,\n      };\n    }\n    default: {\n      return state;\n    }\n\n  }\n};\n\nexport default {\n  actions,\n  reducer,\n};\n","import styled from 'styled-components';\n\nconst Heading = styled.h2`\n  font-size: 15px;\n  font-weight: 500;\n  color: #333;\n  margin: 0;\n`;\n\nconst SubHeading = styled.h3`\n  font-size: 13px;\n  font-weight: normal;\n  color: #666;\n  margin: 5px 0 0 0;\n`;\n\nconst ContentContainer = styled.div<{\n  padding?: string\n}>`\n  min-height: 200px;\n  padding: ${({padding}) => padding || '40px 0 35px 0'};\n  font-size: 13px;\n`;\n\nconst NavButtonsContainer = styled.div<{\n  flexDirection?: string\n}>`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  flex-direction: ${props => props.flexDirection || 'row'};\n`;\n\nconst Link = styled.p`\n  color: #125AC7;\n  text-decoration: underline;\n  margin: 0;\n  cursor: pointer;\n`;\n\nconst CsvLinkWrapper = styled.div`\n  a {\n    color: #125AC7;\n    text-decoration: underline;\n    margin: 0;\n    cursor: pointer;\n  }\n`;\n\nexport {\n  Heading,\n  SubHeading,\n  ContentContainer,\n  NavButtonsContainer,\n  Link,\n  CsvLinkWrapper,\n};\n","import React from 'react';\n\nimport ContainerBox from '../../components/container-box';\n\nconst StyledContainerBox = (props: {children: React.ReactNode}) => (\n  <ContainerBox padding={'30px'} margin={'0 0 5% 0'}>\n    {props.children}\n  </ContainerBox>\n);\n\nexport {\n  StyledContainerBox,\n};\n","import styled from 'styled-components';\nimport Icon from 'react-icons-kit';\nimport {check as checkIcon} from 'react-icons-kit/entypo/check';\nimport {ic_warning as warningIcon} from 'react-icons-kit/md/ic_warning';\nimport {info as infoIcon} from 'react-icons-kit/entypo/info';\n\nimport {STATUS_TYPES} from '../../constants';\n\nconst DeviceManagerContainer = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nconst MainContentWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst MainContentContainer = styled.div`\n  width: 100%;\n  max-width: ${({maxWidth}) => maxWidth}px;\n  padding: 30px 20px 60px;\n  box-sizing: border-box;\n\n  @media (max-width: 700px) {\n    padding: 10px 10px 60px;\n  };\n`;\n\nconst InputWrapper = styled.div`\n  width: 100%;\n  margin: 5px;\n`;\n\nconst ErrorMessageContainer = styled.p`\n  color: 'black';\n`;\n\nconst StatusChip = styled.div`\n  display: flex;\n  align-items: center;\n  height: 20px;\n  border-radius: 15px;\n  color: white;\n  font-size: 12px;\n  white-space: nowrap;\n  background: ${({type}) => {\n    if (type === STATUS_TYPES.ok.name) { return '#75A47B'; }\n    if (type === STATUS_TYPES.warning.name) { return '#CCC159'; }\n    if (type === STATUS_TYPES.error.name) { return '#CA6F6F'; }\n    if (type === STATUS_TYPES.info.name) { return '#6F99CA'; }\n  }};\n`;\n\nconst SmallStatusChip = styled(StatusChip)`\n  padding: 0 7px 0 6px;\n  cursor: pointer;\n`;\n\nconst LargeStatusChip = styled(StatusChip)`\n  margin: 0 0 7px 0;\n  padding: 0 0 0 8px;\n`;\n\nconst getStatusChipIcon = type => {\n  if (type === STATUS_TYPES.info.name) {\n    return infoIcon;\n  } if (type === STATUS_TYPES.ok.name) {\n    return checkIcon;\n  }\n  return warningIcon;\n\n};\n\nconst StatusChipIcon = styled(Icon).attrs(props => ({\n  icon: getStatusChipIcon(props.type),\n  size: 12,\n}))`\n  position: relative;\n  top: -1px;\n  margin-right: ${({marginright}) => marginright || '2px'};\n`;\n\n// STATUS POPUP\n\nconst StatusPopupHeadingSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst StatusPopupTitle = styled.p`\n  font-size: 13px;\n  margin: 5px 0 20px 0;\n  width: 175px;\n  word-wrap: break-word;\n`;\n\nconst StatusPopupCloseButton = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 10px;\n  background: #aaa;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  font-size: 12px;\n  color: white;\n  &:hover {\n    background: #999;\n  }\n`;\n\nexport {\n  DeviceManagerContainer,\n  MainContentWrapper,\n  MainContentContainer,\n  InputWrapper,\n  ErrorMessageContainer,\n  SmallStatusChip,\n  LargeStatusChip,\n  StatusChipIcon,\n  StatusPopupHeadingSection,\n  StatusPopupTitle,\n  StatusPopupCloseButton,\n};\n","// organization-manager/containers.js\n\nimport React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport {\n  ErrorMessageContainer,\n  StatusPopupHeadingSection,\n  StatusPopupTitle,\n  StatusPopupCloseButton,\n  LargeStatusChip,\n  StatusChipIcon,\n} from './styled';\n\nconst ErrorFeedback = props => (\n  <>\n    {\n      !props.err\n        ? null\n        : <ErrorMessageContainer>{props.err.message}</ErrorMessageContainer>\n    }\n  </>\n);\n\nErrorFeedback.propTypes = {\n  err: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }),\n};\n\nconst StatusPopup = props => (\n  <>\n    <StatusPopupHeadingSection>\n      <StatusPopupTitle>\n        {props.title}\n      </StatusPopupTitle>\n      <StatusPopupCloseButton onClick={props.onClose}>\n        x\n      </StatusPopupCloseButton>\n    </StatusPopupHeadingSection>\n    {_.map(props.items, item => (\n      <LargeStatusChip type={item.type} key={item.text}>\n        <StatusChipIcon type={item.type} marginright={'4px'} />\n        {item.text}\n      </LargeStatusChip>\n    ))}\n  </>\n);\n\nexport {\n  ErrorFeedback,\n  StatusPopup,\n};\n","import _ from 'lodash';\n\nconst handleValueChange = props => evt => {\n  const {target: {value, name}} = evt;\n  props.setInputValue(name, value);\n};\n\nconst clearForm = props => evt => {\n  props.resetForm();\n};\n\nconst handleLayerCreation = props => evt => {\n  const location = _.get(props, 'location.res');\n  const name = _.get(props, 'formInputs.name.value');\n  const updates = {...location, layers: _.concat(location.layers, {name})};\n\n  props.updateLocation(updates);\n  props.router.push(`/locations/${props.locationId}/${props.layerId}`)\n};\nexport default {\n  handleValueChange,\n  clearForm,\n  handleLayerCreation,\n}","import React from 'react';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport {compose} from 'lodash/fp';\nimport {Icon} from 'react-icons-kit';\nimport {check as checkIcon} from 'react-icons-kit/fa/check';\n\nimport {withYggio} from '../../../yggio-context';\nimport {withState, withEvents} from '../../../hocs';\nimport Button from '../../../components/button';\nimport TextField from '../../../components/text-field';\nimport {FlexWrapper, CenterContentContainer} from '../../../global/styled';\nimport state from './state';\nimport {\n  InputWrapper,\n  Label,\n  InputPrepender,\n} from './styled';\nimport ContainerBox from '../../../components/container-box';\nimport events from './events';\n\nconst LayerCreator = (props) => {\n  React.useEffect(() => {\n    props.getLocation(props.locationId);\n  }, []);\n\n  return (\n    <CenterContentContainer>\n      <ContainerBox\n        position={'relative'}\n        display={'flex'}\n        width={'30%'}\n        height={'100%'}\n        flexDirection={'column'}\n        margin={'10px'}\n        includeMarginInHeight\n        includeMarginInWidth\n      >\n        <InputWrapper>\n          <InputWrapper>\n            <TextField\n              label={'Name'}\n              placeholder={'e.g Street 101'}\n              name={'name'}\n              height={'30px'}\n              width={'100%'}\n              value={_.get(props.formInputs, 'name.value', '')}\n              onChange={props.handleValueChange}\n            />\n            <InputPrepender\n              isValid={_.get(props.formInputs, 'name.validation.isValid')}\n            >\n              <Icon icon={checkIcon} size={20} />\n            </InputPrepender>\n          </InputWrapper>\n\n          <FlexWrapper style={{justifyContent: 'space-between'}}>\n            <Button\n              margin={'5px'}\n              content={'Cancel'}\n              onClick={() => props.router.push(`/locations/${props.locationId}/${_.get(props.location, 'res.defaultLayer._id')}`)}\n            />\n            <FlexWrapper>\n              <Button\n                margin={'5px'}\n                content={'Reset'}\n                onClick={props.clearForm}\n              />\n              <Button\n                color={'green'}\n                margin={'5px'}\n                content={'Create'}\n                onClick={props.handleLayerCreation}\n              />\n            </FlexWrapper>\n          </FlexWrapper>\n\n        </InputWrapper>\n      </ContainerBox>\n    </CenterContentContainer>\n  )\n};\n\nLayerCreator.propTypes = {\n  createLayer: PropTypes.func,\n  layer: PropTypes.object,\n  setLayerData: PropTypes.func,\n  resetLayerData: PropTypes.func\n};\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    location: yggioState.apiState.locations.get,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    updateLocation: yggioActions.apiState.locations.update,\n    getLocation: yggioActions.apiState.locations.get,\n  }),\n};\n\nexport default compose(\n  withYggio(yggio),\n  withState(state),\n  withEvents(events),\n)(LayerCreator)\n","import {PropTypes, checkProps} from 'vanilla-prop-types';\n\nimport {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n  getVanillaPropTypesInputsShape,\n} from '../../../utils/form-wizard';\n\nconst formData = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: value => !!value,\n        message: 'Please enter a valid name',\n      }],\n    }\n  },\n  desc: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: value => !!value,\n        message: 'Please enter a valid description',\n      }],\n    }\n  },\n};\n\nconst inputsProps = {\n  name: PropTypes.string,\n  desc: PropTypes.string,\n};\n\nconst propTypes = getVanillaPropTypesInputsShape(inputsProps);\n\nconst validateState = checkProps(propTypes, {isExact: true});\n\nconst {actions, reducer} = generateForm(formData);\n\nexport default {\n  actions,\n  reducer,\n  validateState,\n};\n","import styled from 'styled-components';\nimport {COLORS} from '../../../constants';\n\nconst SpinnerWrapper = styled.div`\n  z-index: 10;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: rgba(50, 50, 50, 0.3);\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin: 10px;\n  width: calc(100% - 20px);\n`;\n\nconst Label = styled.label`\n  display: flex;\n  width: ${({width}) => width};\n`;\n\nconst InputPrepender = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  border-top: none;\n  border-right: none;\n  border-left: none;\n  border-bottom-left-radius: 2px;\n  border-top-left-radius: 2px;\n  color: ${({isValid}) => isValid ? COLORS.greenLight : COLORS.grey};\n  height: 30px;\n  width: 30px;\n  top: 20px;\n  right: 5px;\n  transition: all 0.2s;\n`;\n\nexport {\n  SpinnerWrapper,\n  InputWrapper,\n  Label,\n  InputPrepender,\n}\n","import _ from 'lodash';\n\nconst handleValueChange = props => evt => {\n  const {target: {value, name}} = evt;\n  props.setInputValue(name, value);\n};\n\nconst handleLayerEdit = props => evt => {\n  const location = _.get(props, 'location.res');\n  const name = _.get(props, 'formInputs.name.value') || _.get(props, 'layer.name');\n  const image = _.get(props, 'formInputs.image.value') || _.get(props, 'layer.image');\n  const updates = {name, image};\n  if (props.layer._id === _.get(location, 'defaultLayer._id')) {\n    props.updateLocation({...location, defaultLayer: {..._.get(location, 'defaultLayer'), ...updates}});\n  } else {\n    const layerIndex = _.findIndex(location.layers, {_id: props.layer._id});\n    const layers = location.layers.slice();\n    layers[layerIndex] = {...layers[layerIndex], ...updates};\n    props.updateLocation({...location, layers});\n  }\n  props.router.push(`/locations/${props.locationId}/${props.layerId}`)\n};\n\n\nexport default {\n  handleValueChange,\n  handleLayerEdit,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {compose} from 'lodash/fp';\nimport {Icon} from 'react-icons-kit';\nimport {check as checkIcon} from 'react-icons-kit/fa/check';\nimport {spinner as spinnerIcon} from 'react-icons-kit/fa/spinner';\nimport {upload as uploadIcon} from 'react-icons-kit/fa/upload';\nimport _ from 'lodash';\nimport {withYggio} from '../../../yggio-context';\nimport {withEvents, withReselect, withState} from '../../../hocs';\nimport Button from '../../../components/button';\nimport TextField from '../../../components/text-field';\nimport {FlexWrapper, CenterContentContainer} from '../../../global/styled';\nimport {\n  InputWrapper,\n  UploadFileButtonStyled,\n  InputPrepender,\n  SpinningIcon,\n} from './styled';\nimport ContainerBox from '../../../components/container-box';\nimport {getFormShape} from '../../../utils/form-wizard';\nimport selectors from './selectors';\nimport events from './events';\nimport Select from '../../../components/select';\nimport state from './state';\n\nconst LayerEditor = (props) => {\n  React.useEffect(() => {\n    props.getLocation(props.locationId);\n  }, []);\n\n  React.useEffect(() => {\n    props.getImages({nameSpace: 'blueprints'});\n  }, []);\n\n  React.useEffect(() => {\n    if (props.layer) {\n      props.setInputValue('name', _.get(props, 'layer.name'));\n    }\n  }, [props.layer]);\n\n  return (\n    <CenterContentContainer>\n      <ContainerBox\n        position={'relative'}\n        display={'flex'}\n        width={'30%'}\n        height={'100%'}\n        flexDirection={'column'}\n        margin={'10px'}\n        includeMarginInHeight\n        includeMarginInWidth\n      >\n        <InputWrapper>\n          <InputWrapper>\n            <TextField\n              placeholder={'e.g Street 101'}\n              label={'Name'}\n              name={'name'}\n              valid={_.get(props.formInputs, 'name.validation.isValid')}\n              value={_.get(props.formInputs, 'name.value', '')}\n              onChange={props.handleValueChange}\n            />\n            <InputPrepender\n              isValid={_.get(props.formInputs, 'name.validation.isValid')}\n            >\n              <Icon icon={checkIcon} size={20}/>\n            </InputPrepender>\n          </InputWrapper>\n          <InputWrapper>\n            <FlexWrapper>\n              <Select\n                name={'image'}\n                value={_.get(props.formInputs, 'image.value')}\n                options={props.layerImages}\n                onFocus={() => props.getImages('blueprints')}\n                onChange={props.handleValueChange}\n              />\n              <UploadFileButtonStyled>\n                <input\n                  type=\"file\"\n                  onChange={evt => {\n                    const [file] = evt.target.files;\n                    props.uploadImage({file, nameSpace: 'blueprints'});\n                  }}\n                />\n                {!props.isUploading\n                  ? <Icon size={25} icon={uploadIcon}/>\n                  : <SpinningIcon size={25} icon={spinnerIcon}/>\n                }\n              </UploadFileButtonStyled>\n            </FlexWrapper>\n          </InputWrapper>\n\n          <FlexWrapper style={{justifyContent: 'space-between'}}>\n            <Button\n              margin={'5px'}\n              content={'Cancel'}\n              onClick={() => props.router.push(`/locations/${props.locationId}/${props.layerId}`)}\n            />\n            <Button\n              margin={'5px'}\n              color={'green'}\n              content={'Save'}\n              onClick={props.handleLayerEdit}\n            />\n          </FlexWrapper>\n        </InputWrapper>\n      </ContainerBox>\n    </CenterContentContainer>\n  )\n};\n\nLayerEditor.propTypes = {\n  layer: PropTypes.object,\n  setLayerData: PropTypes.func,\n  resetLayerData: PropTypes.func,\n  // from form state\n  ...getFormShape({\n    name: PropTypes.string,\n  }),\n};\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    locations: yggioState.apiState.locations.fetch,\n    images: yggioState.database.images,\n    location: yggioState.apiState.locations.get,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    getImages: yggioActions.database.images.getImages,\n    uploadImage: yggioActions.database.images.uploadImage,\n    createLocation: yggioActions.apiState.locations.create,\n    updateLocation: yggioActions.apiState.locations.update,\n    getLocation: yggioActions.apiState.locations.get,\n  }),\n};\n\nexport default compose(\n  withYggio(yggio),\n  withState(state),\n  withReselect(selectors),\n  withEvents(events),\n)(LayerEditor)\n","import _ from 'lodash';\nimport fp from 'lodash/fp';\nimport {createSelector} from 'reselect';\n\nconst layerSelector = createSelector(\n  props => _.get(props, 'location.res'),\n  props => props.layerId,\n  (location, layerId) => {\n    if (location) {\n      const layers = _.concat(\n        _.get(location, 'defaultLayer'),\n        _.get(location, 'layers'),\n      );\n      const layer = _.find(layers, layer => layer._id === layerId);\n      return layer;\n    }\n  }\n);\n\nconst layerImagesSelector = createSelector(\n  props => props.images['blueprints'],\n  blueprintImages => (\n    fp.map(icon => {\n      const label = fp.pipe(\n        fp.split('/'),\n        fp.last,\n        fp.split('.'),\n        fp.first,\n      )(icon);\n      return {label, value: icon};\n    }, blueprintImages)\n  )\n);\n\nexport default {\n  layer: layerSelector,\n  layerImages: layerImagesSelector,\n};\n","import {PropTypes, checkProps} from 'vanilla-prop-types';\nimport {\n  generateForm,\n  getVanillaPropTypesInputsShape,\n  VALIDATION_VISIBILITY_TYPES\n} from '../../../utils/form-wizard';\n\nconst formConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  image: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst inputsProps = {\n  name: PropTypes.string,\n  image: PropTypes.string,\n};\n\nconst propTypes = getVanillaPropTypesInputsShape(inputsProps);\n\nconst validateState = checkProps(propTypes, {isExact: true});\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n  validateState,\n};","import styled from 'styled-components';\nimport {Icon} from 'react-icons-kit';\nimport {COLORS} from '../../../constants';\n\nconst SpinnerWrapper = styled.div`\n  z-index: 10;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: rgba(50, 50, 50, 0.3);\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin: 10px;\n  width: calc(100% - 20px);\n`;\n\nconst Label = styled.label`\n  display: flex;\n  width: ${({width}) => width};\n`;\n\nconst InputPrepender = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  border-top: none;\n  border-right: none;\n  border-left: none;\n  border-bottom-left-radius: 2px;\n  border-top-left-radius: 2px;\n  color: ${({isValid}) => isValid ? COLORS.greenLight : COLORS.grey};\n  height: 30px;\n  width: 30px;\n  top: 20px;\n  right: 5px;\n  transition: all 0.2s;\n`;\n\nconst UploadFileButtonStyled = styled.label`\n  margin: 3px;\n  border-radius: 5px;\n  width: 30px;\n  height: 30px;\n  color: ${COLORS.greyDark};\n  background: lightgreen;\n  transition: background 0.2s, color 0.2s;\n\n  &:hover {\n    color: ${COLORS.black};\n    background: #4cff41;\n    transition: background 0.2s, color 0.2s;\n  }\n\n  cursor: pointer;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  input[type=\"file\"] {\n    display: none;\n  }\n\n`;\n\nconst SpinningIcon = styled(Icon)`\n  -webkit-animation:spin 4s linear infinite;\n  -moz-animation:spin 4s linear infinite;\n  animation:spin 4s linear infinite;\n  @-moz-keyframes spin { 100% { -moz-transform: rotate(360deg); } }\n  @-webkit-keyframes spin { 100% { -webkit-transform: rotate(360deg); } }\n  @keyframes spin { 100% { -webkit-transform: rotate(360deg); transform:rotate(360deg); } }\n`;\n\nexport {\n  SpinnerWrapper,\n  InputWrapper,\n  Label,\n  InputPrepender,\n  UploadFileButtonStyled,\n  SpinningIcon,\n}\n","import {getFormValues} from '../../../utils/form-wizard';\n\nconst handleValueChange = props => evt => {\n  const {target: {value, name}} = evt;\n  props.setInputValue(name, value);\n};\n\nconst clearForm = props => evt => {\n  props.resetForm();\n};\n\nconst handleCreateLocation = props => evt => {\n  const template = getFormValues(props.formInputs);\n  props.createLocation(template);\n  props.router.push('/locations')\n};\n\nexport default {\n  handleValueChange,\n  clearForm,\n  handleCreateLocation,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {compose} from 'lodash/fp';\nimport {Icon} from 'react-icons-kit';\nimport {check as checkIcon} from 'react-icons-kit/fa/check';\n\nimport {withYggio} from '../../../yggio-context';\nimport {withState} from '../../../hocs';\nimport Button from '../../../components/button';\nimport {FlexWrapper, CenterContentContainer} from '../../../global/styled';\nimport state from './state';\nimport {\n  InputWrapper,\n  InputPrepender,\n} from './styled';\nimport ContainerBox from '../../../components/container-box';\nimport {withEvents} from '../../../hocs';\nimport events from './events';\nimport TextField from '../../../components/text-field';\nimport NumberField from '../../../components/number-field';\n\nconst LocationCreator = (props) => {\n\n  return (\n    <CenterContentContainer>\n      <ContainerBox\n        position={'relative'}\n        display={'flex'}\n        width={'30%'}\n        height={'100%'}\n        flexDirection={'column'}\n        margin={'10px'}\n        includeMarginInHeight\n        includeMarginInWidth\n      >\n        <InputWrapper>\n          <InputWrapper>\n            <TextField\n              label={'Name'}\n              placeholder={'e.g Street 101'}\n              name={'name'}\n              height={'30px'}\n              width={'100%'}\n              value={_.get(props.formInputs, 'name.value', '')}\n              onChange={props.handleValueChange}\n            />\n            <InputPrepender\n              isValid={_.get(props.formInputs, 'name.validation.isValid')}\n            >\n              <Icon icon={checkIcon} size={20} />\n            </InputPrepender>\n          </InputWrapper>\n\n          <InputWrapper>\n            <TextField\n              label={'Description'}\n              placeholder={'e.g This is the property of Street 101'}\n              name={'desc'}\n              height={'30px'}\n              width={'100%'}\n              value={_.get(props.formInputs, 'desc.value', '')}\n              onChange={props.handleValueChange}\n            />\n            <InputPrepender\n              isValid={_.get(props.formInputs, 'desc.validation.isValid')}\n            >\n              <Icon icon={checkIcon} size={20} />\n            </InputPrepender>\n          </InputWrapper>\n\n          <InputWrapper>\n            <NumberField\n              label={'Latitude'}\n              name={'lat'}\n              height={'30px'}\n              width={'100%'}\n              value={_.get(props.formInputs, 'lat.value', 0)}\n              onChange={props.handleValueChange}\n            />\n            <InputPrepender\n              isValid={_.get(props.formInputs, 'lat.validation.isValid')}\n            >\n              <Icon icon={checkIcon} size={20} />\n            </InputPrepender>\n          </InputWrapper>\n\n          <InputWrapper>\n            <NumberField\n              label={'Longitude'}\n              name={'lng'}\n              height={'30px'}\n              width={'100%'}\n              value={_.get(props.formInputs, 'lng.value', 0)}\n              onChange={props.handleValueChange}\n            />\n            <InputPrepender\n              isValid={_.get(props.formInputs, 'lng.validation.isValid')}\n            >\n              <Icon icon={checkIcon} size={20} />\n            </InputPrepender>\n          </InputWrapper>\n\n          <FlexWrapper style={{justifyContent: 'space-between'}}>\n            <Button\n              margin={'10px'}\n              content={'Cancel'}\n              onClick={() => props.router.push('/locations')}\n            />\n            <FlexWrapper>\n              <Button\n                margin={'10px'}\n                content={'Reset'}\n                onClick={props.clearForm}\n              />\n              <Button\n                margin={'10px'}\n                color={'green'}\n                content={'Create'}\n                onClick={props.handleCreateLocation}\n              />\n            </FlexWrapper>\n          </FlexWrapper>\n        </InputWrapper>\n      </ContainerBox>\n    </CenterContentContainer>\n  )\n};\n\nLocationCreator.propTypes = {\n  createLocation: PropTypes.func,\n};\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    createLocation: yggioActions.apiState.locations.create,\n  }),\n};\n\nexport default compose(\n  withYggio(yggio),\n  withState(state),\n  withEvents(events),\n)(LocationCreator);\n","import {PropTypes, checkProps} from 'vanilla-prop-types';\nimport _ from 'lodash';\nimport {\n  generateForm,\n  VALIDATION_VISIBILITY_TYPES,\n  getVanillaPropTypesInputsShape,\n} from '../../../utils/form-wizard';\n\nconst formData = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: value => !!value,\n        message: 'Please enter a valid name',\n      }],\n    }\n  },\n  desc: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: value => !!value,\n        message: 'Please enter a valid description',\n      }],\n    }\n  },\n  lat: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: val => (_.isNumber(val) && val >= -90 && val <= 90),\n        message: 'Please enter a valid latitude value (between -90 and 90)',\n      }],\n    }\n  },\n  lng: {\n    defaultValue: 0,\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [{\n        validate: val => (_.isNumber(val) && val >= -180 && val <= 180),\n        message: 'Please enter a valid longitude value (between -180 and 180)',\n      }],\n    }\n  },\n};\n\nconst inputsProps = {\n  name: PropTypes.string,\n  desc: PropTypes.string,\n  lat: PropTypes.number,\n  lng: PropTypes.number,\n};\n\nconst propTypes = getVanillaPropTypesInputsShape(inputsProps);\n\nconst validateState = checkProps(propTypes, {isExact: true});\n\nconst {actions, reducer} = generateForm(formData);\n\nexport default {\n  actions,\n  reducer,\n  validateState,\n};\n","import styled from 'styled-components';\nimport {COLORS} from '../../../constants';\n\nconst SpinnerWrapper = styled.div`\n  z-index: 10;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: rgba(50, 50, 50, 0.3);\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin: 10px;\n  width: calc(100% - 20px);\n`;\n\nconst InputPrepender = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  border-top: none;\n  border-right: none;\n  border-left: none;\n  border-bottom-left-radius: 2px;\n  border-top-left-radius: 2px;\n  color: ${({isValid}) => isValid ? COLORS.greenLight : COLORS.grey};\n  height: 30px;\n  width: 30px;\n  top: 20px;\n  right: 5px;\n  transition: all 0.2s;\n`;\n\nexport {\n  SpinnerWrapper,\n  InputWrapper,\n  InputPrepender,\n}\n","import _ from 'lodash';\n\nconst handleValueChange = props => evt => {\n  const {target: {value, name}} = evt;\n  props.setInputValue(name, value);\n};\n\nconst handleLocationEdit = props => evt => {\n  const updates = {\n    ...props.currentLocation,\n    name: _.get(props, 'formInputs.name.value'),\n    description: _.get(props, 'formInputs.description.value'),\n  };\n  props.updateLocation(updates);\n  props.router.push('/locations')\n};\n\n\nexport default {\n  handleValueChange,\n  handleLocationEdit,\n};\n","import React from 'react';\nimport {compose} from 'lodash/fp';\nimport {Icon} from 'react-icons-kit';\nimport {check as checkIcon} from 'react-icons-kit/fa/check';\nimport _ from 'lodash';\nimport {withYggio} from '../../../yggio-context';\nimport {withEvents, withReselect, withState} from '../../../hocs';\nimport Button from '../../../components/button';\nimport TextField from '../../../components/text-field';\nimport {FlexWrapper, CenterContentContainer} from '../../../global/styled';\nimport {\n  InputWrapper,\n  InputPrepender,\n} from './styled';\nimport ContainerBox from '../../../components/container-box';\nimport selectors from './selectors';\nimport events from './events';\nimport state from './state';\nimport TextArea from '../../../components/text-area';\n\nconst LocationEditor = (props) => {\n  React.useEffect(() => {\n    props.fetchLocations();\n  }, []);\n  //\n  React.useEffect(() => {\n    if (props.currentLocation) {\n      props.setInputValue('name', _.get(props, 'currentLocation.name'));\n      props.setInputValue('description', _.get(props, 'currentLocation.description'));\n    }\n  }, [props.currentLocation]);\n\n  return (\n    <CenterContentContainer>\n      <ContainerBox\n        position={'relative'}\n        display={'flex'}\n        width={'30%'}\n        height={'100%'}\n        flexDirection={'column'}\n        margin={'10px'}\n        includeMarginInHeight\n        includeMarginInWidth\n      >\n        <InputWrapper>\n          <InputWrapper>\n            <TextField\n              placeholder={'e.g Street 101'}\n              label={'Name'}\n              name={'name'}\n              valid={_.get(props.formInputs, 'name.validation.isValid')}\n              value={_.get(props.formInputs, 'name.value', '')}\n              onChange={props.handleValueChange}\n            />\n            <InputPrepender\n              isValid={_.get(props.formInputs, 'name.validation.isValid')}\n            >\n              <Icon icon={checkIcon} size={20}/>\n            </InputPrepender>\n          </InputWrapper>\n\n          <InputWrapper>\n            <TextArea\n              placeholder={'e.g Street 101'}\n              label={'Description'}\n              name={'description'}\n              valid={_.get(props.formInputs, 'description.validation.isValid')}\n              value={_.get(props.formInputs, 'description.value', '')}\n              onChange={props.handleValueChange}\n            />\n          </InputWrapper>\n\n          <FlexWrapper style={{justifyContent: 'space-between'}}>\n            <Button\n              margin={'5px'}\n              content={'Cancel'}\n              onClick={() => props.router.push('/locations')}\n            />\n            <Button\n              margin={'5px'}\n              color={'green'}\n              content={'Save'}\n              onClick={props.handleLocationEdit}\n            />\n          </FlexWrapper>\n        </InputWrapper>\n      </ContainerBox>\n    </CenterContentContainer>\n  )\n};\n\nLocationEditor.propTypes = {\n};\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    locations: yggioState.database.locations,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    fetchLocations: yggioActions.database.locations.fetchLocations,\n    updateLocation: yggioActions.database.locations.updateLocation,\n  }),\n};\n\nexport default compose(\n  withYggio(yggio),\n  withState(state),\n  withReselect(selectors),\n  withEvents(events),\n)(LocationEditor)\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\n\nconst locationSelector = createSelector(\n  props => _.get(props, 'locations'),\n  props => _.get(props, 'locationId'),\n  (locations, locationId) => locations[locationId] || {}\n);\n\nexport default {\n  currentLocation: locationSelector,\n};\n","import {PropTypes, checkProps} from 'vanilla-prop-types';\nimport {\n  generateForm,\n  getVanillaPropTypesInputsShape,\n  VALIDATION_VISIBILITY_TYPES\n} from '../../../utils/form-wizard';\n\nconst formConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    }\n  },\n};\n\nconst inputsProps = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n};\n\nconst propTypes = getVanillaPropTypesInputsShape(inputsProps);\n\nconst validateState = checkProps(propTypes, {isExact: true});\n\nconst {actions, reducer} = generateForm(formConfig);\n\nexport default {\n  actions,\n  reducer,\n  validateState,\n};","import styled from 'styled-components';\nimport {Icon} from 'react-icons-kit';\nimport {COLORS} from '../../../constants';\n\nconst SpinnerWrapper = styled.div`\n  z-index: 10;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background: rgba(50, 50, 50, 0.3);\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin: 10px;\n  width: calc(100% - 20px);\n`;\n\nconst Label = styled.label`\n  display: flex;\n  width: ${({width}) => width};\n`;\n\nconst InputPrepender = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  border-top: none;\n  border-right: none;\n  border-left: none;\n  border-bottom-left-radius: 2px;\n  border-top-left-radius: 2px;\n  color: ${({isValid}) => isValid ? COLORS.greenLight : COLORS.grey};\n  height: 30px;\n  width: 30px;\n  top: 20px;\n  right: 5px;\n  transition: all 0.2s;\n`;\n\nconst UploadFileButtonStyled = styled.label`\n  margin: 3px;\n  border-radius: 5px;\n  width: 30px;\n  height: 30px;\n  color: ${COLORS.greyDark};\n  background: lightgreen;\n  transition: background 0.2s, color 0.2s;\n\n  &:hover {\n    color: ${COLORS.black};\n    background: #4cff41;\n    transition: background 0.2s, color 0.2s;\n  }\n\n  cursor: pointer;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  input[type=\"file\"] {\n    display: none;\n  }\n\n`;\n\nconst SpinningIcon = styled(Icon)`\n  -webkit-animation:spin 4s linear infinite;\n  -moz-animation:spin 4s linear infinite;\n  animation:spin 4s linear infinite;\n  @-moz-keyframes spin { 100% { -moz-transform: rotate(360deg); } }\n  @-webkit-keyframes spin { 100% { -webkit-transform: rotate(360deg); } }\n  @keyframes spin { 100% { -webkit-transform: rotate(360deg); transform:rotate(360deg); } }\n`;\n\nexport {\n  SpinnerWrapper,\n  InputWrapper,\n  Label,\n  InputPrepender,\n  UploadFileButtonStyled,\n  SpinningIcon,\n}\n","import React from 'react';\nimport Icon from 'react-icons-kit';\nimport {\n  arrows,\n  undo,\n  plus,\n  minus,\n} from 'react-icons-kit/fa';\nimport {ControlWrapper} from '../styled';\nimport Button from '../../../../components/button';\n\nconst Control = (props) => (\n  <ControlWrapper>\n    <Button\n      onClick={props.handlePlacementMode}\n      color={'green'}\n      width={'40px'}\n      content={<Icon icon={arrows} size={15} />}\n    />\n\n    <Button\n      onClick={props.handleResetLocation}\n      color={'green'}\n      width={'40px'}\n      content={<Icon icon={undo} size={15} />}\n    />\n\n    <Button\n      onClick={props.handleZoomIn}\n      color={'green'}\n      width={'40px'}\n      content={<Icon icon={plus} size={15} />}\n    />\n\n    <Button\n      onClick={props.handleZoomOut}\n      color={'green'}\n      width={'40px'}\n      content={<Icon icon={minus} size={15} />}\n    />\n\n  </ControlWrapper>\n)\n\nexport default Control;\n","import Control from './control';\nimport Layer from './layer';\nimport Popup from './popup';\nimport RemovalZone from './removal-zone';\nimport Table from './table';\n\nexport {\n  Control,\n  Layer,\n  Popup,\n  RemovalZone,\n  Table,\n}\n","import React, {Fragment} from 'react';\nimport {\n  map,\n  getOr,\n  eq,\n} from 'lodash/fp';\nimport _ from 'lodash';\nimport ResizeObserver from 'react-resize-observer';\nimport {\n  LayerContainer,\n  LayerSpriteStyled,\n  DeviceItemWrapperStyled,\n  DeviceItemSpriteStyled,\n  ValueDisplay\n} from '../styled';\nimport defaultLayerImg from '../../../../assets/images/defaults/blueprint.jpg';\nimport {Popup, RemovalZone} from './';\nimport InteractiveLayer from '../../../../components/interactive-layer';\nimport {getBlueprintImageUrl} from '../../../../utils';\n\nconst Layer = props => {\n  return (\n    <LayerContainer>\n      <ResizeObserver\n        onResize={props.resizeBackground}\n        onPosition={props.resizeBackground}\n      />\n      <InteractiveLayer\n        boundingRect={props.backgroundDimensions}\n        onPan={props.onPan}\n        onZoom={props.onZoom}\n        onMouseUp={props.onMouseUp}\n      >\n        <LayerSpriteStyled\n          src={getBlueprintImageUrl(_.get(props.selectedLayer, 'image')) || defaultLayerImg}\n          alt={props.alt}\n          parentDimensions={props.backgroundDimensions}\n          geometry={props.layerGeometry}\n          width={getOr(300, 'width', props.imageSizes[_.get(props, 'selectedLayer.image')])}\n          height={getOr(300, 'height', props.imageSizes[_.get(props, 'selectedLayer.image')])}\n          onLoad={props.onLoad}\n        />\n\n        {map(deviceItem => (\n          <Fragment key={deviceItem._id}>\n            <DeviceItemWrapperStyled\n              onMouseDown={props.onBeginMovingDevice(deviceItem)}\n              width={34}\n              height={34}\n              parentDimensions={props.backgroundDimensions}\n              geometry={props.layerGeometry}\n              deviceItem={deviceItem}\n            >\n              <DeviceItemSpriteStyled\n                isMovable={props.isMovable}\n                isGrabbed={props.isGrabbed}\n                deviceItem={deviceItem}\n                parentDimensions={props.backgroundDimensions}\n                geometry={props.layerGeometry}\n                width={34}\n                height={34}\n                onClick={() => {\n                  if (!props.isInDevicePlacementMode) {\n                    props.openDevicePopup(deviceItem.deviceId);\n                  }\n                }}\n                onMouseUp={props.onMouseUp}\n              />\n              {props.valueDisplayText && <ValueDisplay>{props.valueDisplayText}</ValueDisplay>}\n            </DeviceItemWrapperStyled>\n\n            {eq(props.popupDeviceId, deviceItem.deviceId) && (\n              <Popup\n                devices={props.devices}\n                parentDimensions={props.backgroundDimensions}\n                geometry={props.layerGeometry}\n                deviceItem={deviceItem}\n                expandDevice={props.expandDevice}\n                currentLayerId={props.currentLayerId}\n                setBlueprintShowsDevices={props.setBlueprintShowsDevices}\n                toggleLayerMenu={props.toggleLayerMenu}\n                // values={props.currentLayerDevices[props.popupDeviceId]}\n                closeDevicePopup={props.closeDevicePopup}\n                showValueDisplay={props.showValueDisplay}\n                currentLayer={props.currentLocation}\n              />\n            )}\n\n          </Fragment>\n        ), props.placedItems)}\n\n        <RemovalZone\n          isInDevicePlacementMode={props.isInDevicePlacementMode}\n          setIsRemovingDevice={props.setIsRemovingDevice}\n          movingDeviceItem={props.movingDeviceItem}\n          onEndMovingDevice={props.onEndMovingDevice}\n          location={props.currentLocation}\n          onRemovingDevice={props.onRemovingDevice}\n          onNotRemovingDevice={props.onNotRemovingDevice}\n        />\n      </InteractiveLayer>\n    </LayerContainer>\n  )\n}\n\nexport default Layer;\n","import React from 'react';\nimport fp from 'lodash/fp';\nimport {Icon} from 'react-icons-kit';\nimport {statsBars as barChartIcon} from 'react-icons-kit/icomoon/statsBars'\n\nimport {\n  StyledCloseButton,\n  StyledDevicePopup,\n  StyledDevicePopupDeviceItemIcon,\n  StyledDevicePopupDeviceItemName,\n  StyledDevicePopupDeviceItemValue,\n  StyledDevicePopupDeviceList,\n  StyledDevicePopupDeviceListItem,\n  StyledViewAllButton\n} from '../styled';\nimport Button from '../../../../components/button';\nimport {FlexMaxWidthCenterWrapper} from '../../../../global/styled';\n\nconst getValueDisplayMeasurement = (measurement, valueDisplay) => (\n  fp.eq(measurement.type, valueDisplay) ? '' : measurement.type\n);\n\nconst Popup = props => (\n  <StyledDevicePopup {...props}>\n    <FlexMaxWidthCenterWrapper>\n      <b title={_.get(props, `devices.${props.deviceItem.deviceId}.name`)}>\n        {fp.truncate({length: 50}, _.get(props.devices, `${props.deviceItem.deviceId}.name`))}\n      </b>\n    </FlexMaxWidthCenterWrapper>\n     {props.values ? (\n      <div>\n        <StyledDevicePopupDeviceList>\n          {fp.map(props.values, (measurement, index) =>\n            fp.gt(index, 4) ? null : (\n              <StyledDevicePopupDeviceListItem>\n                <StyledDevicePopupDeviceItemName title={measurement.name}>\n                  {measurement.name}\n                </StyledDevicePopupDeviceItemName>\n                <StyledDevicePopupDeviceItemValue title={`${measurement.value} ${measurement.unit}`}>\n                  {`${measurement.value} ${measurement.unit}`}\n                </StyledDevicePopupDeviceItemValue>\n                <StyledDevicePopupDeviceItemIcon>\n                  <Icon\n                    size={18}\n                    icon={eye}\n                    onClick={() => props.showValueDisplay(\n                    props.currentLayer,\n                      props.deviceItem._id,\n                      getValueDisplayMeasurement(measurement, props.deviceItem.valueDisplay)\n                    )}\n                    {...(measurement.type === props.deviceItem.valueDisplay ? {className: 'checked_eye'} : {className: 'unchecked_eye'})}\n                  />\n                </StyledDevicePopupDeviceItemIcon>\n              </StyledDevicePopupDeviceListItem>\n            ))}\n        </StyledDevicePopupDeviceList>\n        {fp.gt(props.values.length, 5) ?\n          <StyledViewAllButton\n            onClick={() => {\n              props.toggleLayerMenu(true);\n              props.setBlueprintShowsDevices(props.currentLayerId, true);\n              props.expandDevice(props.deviceItem._id);\n            }}>\n            View all values..\n          </StyledViewAllButton> :\n          null\n        }\n        <Button color=\"primary\" onClick={() => props.router.push(`/charts/${props.deviceItem.deviceId}`)}>\n          <Icon size={20} className=\"chartIcon\" icon={barChartIcon}/>\n          Chart\n        </Button>{' '}\n      </div>\n    ) : (\n      <FlexMaxWidthCenterWrapper>\n        <i>No values available</i>\n      </FlexMaxWidthCenterWrapper>\n    )}\n    <StyledCloseButton onClick={() => props.closeDevicePopup()}>✕</StyledCloseButton>\n  </StyledDevicePopup>\n);\n\nexport default Popup;\n","import React from 'react';\nimport {RemovalZoneContainer} from '../styled';\n\nconst RemovalZone = (\n  {\n    isInDevicePlacementMode,\n    onRemovingDevice,\n    movingDeviceItem,\n    onEndMovingDevice,\n    onNotRemovingDevice,\n  }\n) => isInDevicePlacementMode && (\n  <RemovalZoneContainer\n    onMouseOver={onRemovingDevice}\n    handleMouseOut={onNotRemovingDevice}\n    movingDeviceItem={movingDeviceItem}\n    onMouseUp={onEndMovingDevice}\n  >\n    Drag and drop device here to remove it from layer\n  </RemovalZoneContainer>\n)\n\nexport default RemovalZone;\n","import React from 'react';\nimport _ from 'lodash';\nimport {lineChart} from 'react-icons-kit/fa/lineChart';\nimport {Icon} from 'react-icons-kit';\nimport {StyledDeviceRow, StyledIconLink, StyledTableItem, StyledTableRow, StyledTableRowDropdown} from '../styled';\nimport {COLORS} from '../../../../constants';\nimport {FlexWrapper, MarginWrapper} from '../../../../global/styled';\nimport {ChevronDownIconButton, EditIconButton} from '../../../../yggio-components/buttons';\nimport {ChevronUpIconButton} from '../../../../yggio-components/buttons/icons';\n\nconst TableItem = props => {\n  return <StyledTableItem {...props}>\n    {props.children}\n  </StyledTableItem>\n};\n\nconst TableRow = props => {\n  return <StyledTableRow {...props}>\n    {props.children}\n  </StyledTableRow>\n};\n\nconst TableHeader = props => {\n  return <TableRow background={COLORS.greenRacing} color={COLORS.white}>\n    <TableItem>Name</TableItem>\n    <TableItem>Options</TableItem>\n  </TableRow>\n};\n\nconst TableBody = props => {\n  return _.map(props.items, item => {\n    return (\n      <React.Fragment key={item._id}>\n        <TableRow>\n          <TableItem cursor={'pointer'} onClick={props.onClick(item._id)}>\n            {item.name || 'Unknown'}\n          </TableItem>\n          <TableItem>\n            <FlexWrapper style={{width: '50px', justifyContent: 'space-between'}}>\n              <EditIconButton\n                onClick={(evt) => {\n                  evt.stopPropagation();\n                  props.router.push(`/locations/${_.get(props, 'currentLocation._id')}/${item._id}/edit`)\n                }}\n              />\n              {_.get(props, `openedLayers.${item._id}`)\n                ? <ChevronUpIconButton onClick={() => props.toggleLayer(item._id)} />\n                : <ChevronDownIconButton onClick={() => props.toggleLayer(item._id)} />\n              }\n            </FlexWrapper>\n          </TableItem>\n\n        </TableRow>\n        <StyledTableRowDropdown open={_.get(props, `openedLayers.${item._id}`)}>\n          {_.size(item.items)\n            ? (\n              _.map(item.items, deviceItem => (\n                <StyledDeviceRow key={deviceItem.deviceId}>\n                  {_.get(props.devices[deviceItem.deviceId], 'name')}\n                  <StyledIconLink\n                    onClick={() => {\n                      props.router.push(`/devices/${_.get(deviceItem, 'deviceId')}/charts`)\n                    }}\n                  >\n                    <Icon icon={lineChart}/>\n                  </StyledIconLink>\n                </StyledDeviceRow>\n              ))\n            ) : <MarginWrapper><i>No devices found</i></MarginWrapper>}\n        </StyledTableRowDropdown>\n      </React.Fragment>\n\n    )\n  })\n}\n\nconst Table = props => {\n  return (\n    <>\n      <TableHeader/>\n      <TableBody {...props} />\n    </>\n  )\n};\n\nexport default Table;","import React from 'react';\nimport _ from 'lodash';\nimport {useQueryClient} from 'react-query';\nimport {\n  compose,\n  pick,\n  gt,\n  lt,\n  eq,\n  filter,\n} from 'lodash/fp';\nimport {NextRouter} from 'next/router';\nimport {Icon} from 'react-icons-kit';\nimport {ic_arrow_back as backIcon} from 'react-icons-kit/md/ic_arrow_back';\nimport state from './state';\nimport ContainerBox from '../../../components/container-box';\nimport {withLanguage, withReselect, withState} from '../../../hocs';\nimport {CenterContentContainer} from '../../../global/styled';\nimport {Layer, Control, Table} from './components';\nimport selectors from './selectors';\nimport {getPannedGeometry, getZoomedGeometry, unscaleCenteredCoord} from './utils';\nimport Spinner from '../../../components/spinner';\nimport {BackButtonText, BackButtonWrapper, SpinnerWrapper} from './styled';\nimport Button from '../../../components/button';\nimport {devicesApi, locationsApi} from '../../../api';\nimport {Layer as ILayer, LayerItem, Location} from '../../../types';\n\ninterface Geometry {\n  left: number;\n  top: number;\n}\n\ninterface LocationProps {\n  children: React.ReactNode,\n  locationId: string;\n  layerId: string;\n  placedItems: object;\n  layerGeometry: {\n    scale: number;\n  };\n  blueprintImageSize: object;\n  layerGeometries: Record<string, object>;\n  openedLayers: object;\n  movingDeviceItem: LayerItem;\n  isRemovingDevice: boolean;\n  isInDevicePlacementMode: boolean;\n  selectedLayer: ILayer;\n  router: NextRouter;\n  t(key: string): string;\n  toggleLayer(): void;\n  setDevicePlacementMode(isInDevicePlacementMode: boolean): void;\n  resetLayerGeometry(layerId: string): void;\n  reportImageSize(imageSrc: string, size: object): void;\n  endMovingDeviceItem(): void;\n  setIsRemovingDevice(isRemovingDevice: boolean): void;\n  beginMovingDeviceItem(deviceItem: LayerItem): void;\n  getPannedGeometry(coordinate: object, geometry: object): void;\n  setLayerGeometry(_id: string, geometry: object): void;\n  updateMovingDeviceItem(\n    location: Location,\n    movingDeviceItemId: string,\n    geometry: Geometry,\n    unzoomedCoord: object,\n  ): void;\n}\n\nconst BaseLocation = (props: LocationProps) => {\n\n  /// ////////////////////////\n  //\n  // HOOKS\n  //\n  /// ///////////////////////\n\n  const queryClient = useQueryClient();\n\n  const useUpdateLocation = locationsApi.useUpdateLocation(queryClient);\n\n  const location = locationsApi.useLocationQuery(props.locationId);\n  const devices = devicesApi.useDevicesQuery({\n    params: {},\n    select: React.useCallback(\n      data => data,\n      [],\n    ),\n  });\n\n  /// ////////////////////////\n  //\n  // EVENTS\n  //\n  /// ///////////////////////\n\n  const handleMouseUp = () => {\n    if (location.data && (props.movingDeviceItem && !props.isRemovingDevice)) {\n      const updates = _.map(props.selectedLayer.items, (item: LayerItem) => {\n        if (eq(item._id, props.movingDeviceItem._id)) {\n          return {...item, ...props.movingDeviceItem};\n        }\n        return item;\n      });\n      if (props.selectedLayer._id === _.get(location, 'data.defaultLayer._id')) {\n        useUpdateLocation.mutate({\n          ...location,\n          defaultLayer: {\n            ...location.data.defaultLayer,\n            items: updates,\n          },\n        });\n        props.endMovingDeviceItem();\n      } else {\n        const layerIndex = _.findIndex(location?.data?.layers, {_id: props.selectedLayer._id});\n        const layers = location.data.layers.slice();\n        layers[layerIndex] = {\n          ...layers[layerIndex],\n          items: updates,\n        };\n        useUpdateLocation.mutate({\n          ...location.data,\n          layers,\n        });\n        props.endMovingDeviceItem();\n      }\n    }\n  };\n\n  const handleOnPan = (panDetails: object) => {\n    if (location.data) {\n      if (!props.movingDeviceItem && !props.isInDevicePlacementMode) {\n        const coordinate = pick(['x', 'y'], panDetails);\n        const geometry = getPannedGeometry(coordinate, props.layerGeometry);\n        props.setLayerGeometry(props.selectedLayer._id, geometry);\n      }\n\n      if (props.movingDeviceItem && props.movingDeviceItem._id) {\n        const centeredPosition = pick(['top', 'left'], panDetails);\n        const geometry = props.layerGeometries[location.data._id] || {x: 0, y: 0, scale: 1};\n        const unzoomedCoord = unscaleCenteredCoord(\n          centeredPosition,\n          geometry,\n        ) as {y: number, x: number};\n\n        props.updateMovingDeviceItem(\n          location.data,\n          props.movingDeviceItem._id,\n          {left: unzoomedCoord.x, top: unzoomedCoord.y},\n          unzoomedCoord,\n        );\n      }\n    }\n  };\n\n  const handleOnZoom = (zoomDiff: object) => {\n    const allowZoom = gt(props.layerGeometry.scale, 0.3) && lt(props.layerGeometry.scale, 1.7);\n    if (!props.movingDeviceItem && allowZoom) {\n      const geometry = getZoomedGeometry(zoomDiff, props.layerGeometry);\n      props.setLayerGeometry(props.selectedLayer._id, geometry);\n    }\n  };\n\n  const handleOnLoad = (imageSrc: string, size: object) => {\n    if (!eq(size, props.blueprintImageSize)) {\n      props.reportImageSize(imageSrc, size);\n    }\n  };\n\n  const onLoad = (evt: React.ChangeEvent<HTMLImageElement>) => {\n    const imageSize = {\n      width: evt.target.naturalWidth,\n      height: evt.target.naturalHeight,\n    };\n    handleOnLoad(props.selectedLayer.image, imageSize);\n  };\n\n  const onBeginMovingDevice = (deviceItem: LayerItem) => () => {\n    if (props.isInDevicePlacementMode) {\n      props.beginMovingDeviceItem(deviceItem);\n    }\n  };\n\n  const onEndMovingDevice = () => {\n    if (props.movingDeviceItem) {\n      const items = filter(\n        item => !eq(item._id, props.movingDeviceItem._id),\n        props.selectedLayer.items\n      );\n      if (props.layerId === location?.data?.defaultLayer._id) {\n        useUpdateLocation.mutate({\n          ...location,\n          defaultLayer: {...location?.data?.defaultLayer, items}\n        });\n      } else {\n        const layerIndex = _.findIndex(location?.data?.layers, {_id: props.layerId});\n        const layers = location?.data?.layers.slice();\n        if (layers) {\n          layers[layerIndex] = {...layers[layerIndex], items};\n        }\n        useUpdateLocation.mutate({...location, layers});\n      }\n      props.endMovingDeviceItem();\n    }\n  };\n\n  const onRemovingDevice = () => {\n    if (props.movingDeviceItem) {\n      props.setIsRemovingDevice(true);\n    }\n  };\n\n  const onNotRemovingDevice = () => {\n    props.setIsRemovingDevice(false);\n  };\n\n  interface ZoomClients {\n    clientX: number;\n    clientY: number;\n  }\n\n  const handleZoomOut = ({clientX, clientY}: ZoomClients) => {\n    const position = {\n      left: clientX,\n      top: clientY,\n    };\n    handleOnZoom({...position, zoom: -250});\n  };\n\n  const handleZoomIn = ({clientX, clientY}: ZoomClients) => {\n    const position = {\n      left: clientX,\n      top: clientY,\n    };\n    handleOnZoom({...position, zoom: 250});\n  };\n\n  const handleResetLocation = () => {\n    props.resetLayerGeometry(props.layerId);\n  };\n\n  const handlePlacementMode = () => {\n    handleResetLocation();\n    props.setDevicePlacementMode(!props.isInDevicePlacementMode);\n  };\n\n  const onClick = (id: string) => async () => (\n    props.router.push(`/locations/${props.locationId}/${id}`)\n  );\n\n  /// ////////////////////////\n  //\n  // RENDERING\n  //\n  /// ///////////////////////\n\n  if (location.isLoading || devices.isLoading) {\n    return (\n      <SpinnerWrapper>\n        <Spinner size={40} />\n      </SpinnerWrapper>\n    );\n  }\n\n  if (location.error) {\n    return (\n      <CenterContentContainer>\n        {location.error as string}\n      </CenterContentContainer>\n    );\n  }\n\n  return (\n    <CenterContentContainer>\n      <ContainerBox\n        position={'relative'}\n        display={'flex'}\n        width={'20%'}\n        height={'95vh'}\n        flexDirection={'column'}\n        margin={'10px'}\n        includeMarginInHeight\n        includeMarginInWidth\n      >\n        <BackButtonWrapper onClick={async () => props.router.push('/locations')}>\n          <Icon icon={backIcon as object} size={14} />\n          <BackButtonText>\n            {_.capitalize(props.t('labels.backToLocations'))}\n          </BackButtonText>\n        </BackButtonWrapper>\n        <h2>{_.get(props, 'currentLocation.name')}</h2>\n        <i>{_.get(props, 'currentLocation.description')}</i>\n        <Button\n          color={'green'}\n          ghosted\n          margin={'10px'}\n          content={'New layer'}\n          onClick={async () => props.router.push(`/locations/${props.locationId}/new`)}\n        />\n        <Table\n          toggleLayer={props.toggleLayer}\n          openedLayers={props.openedLayers}\n          devices={devices?.data}\n          router={props.router}\n          currentLocation={location}\n          onClick={onClick}\n          items={location?.data?.layers}\n        />\n      </ContainerBox>\n      <ContainerBox\n        position={'relative'}\n        display={'flex'}\n        width={'80%'}\n        height={'95vh'}\n        flexDirection={'column'}\n        margin={'10px'}\n        includeMarginInHeight\n        includeMarginInWidth\n        style={{overflow: 'hidden'}}\n      >\n        <Control\n          handleResetLocation={handleResetLocation}\n          handlePlacementMode={handlePlacementMode}\n          handleZoomIn={handleZoomIn}\n          handleZoomOut={handleZoomOut}\n        />\n\n        <Layer\n          {...props}\n          devices={devices?.data}\n          layerGeometry={props.layerGeometry}\n          placedItems={props.placedItems}\n          onMouseUp={handleMouseUp}\n          onPan={handleOnPan}\n          onZoom={handleOnZoom}\n          onLoad={onLoad}\n          onBeginMovingDevice={onBeginMovingDevice}\n          onEndMovingDevice={onEndMovingDevice}\n          onRemovingDevice={onRemovingDevice}\n          onNotRemovingDevice={onNotRemovingDevice}\n        />\n      </ContainerBox>\n    </CenterContentContainer>\n  );\n};\n\nexport default compose(\n  withLanguage(),\n  withState(state),\n  withReselect(selectors),\n)(BaseLocation);\n","import React from 'react';\nimport {\n  compose,\n  get,\n  size,\n  map,\n  eq,\n  getOr,\n  find,\n  filter,\n  includes,\n  toLower,\n  isNumber,\n  concat,\n} from 'lodash/fp';\nimport _ from 'lodash';\nimport {createSelector} from 'reselect';\n\nconst selectCurrentLocation = createSelector(\n  props => props.locations,\n  props => props.locationId,\n  (locations, locationId) => (\n    locations[locationId]\n  )\n);\n\nconst layerGeometrySelector = createSelector(\n  props => props.layerId,\n  props => props.layerGeometries,\n  (layerId, geometries) => geometries[layerId] || {scale: 1, x: 0, y: 0}\n);\n\nconst selectedLayerSelector = createSelector(\n  selectCurrentLocation,\n  props => props.layerId,\n  (location, layerId) => {\n    const layers = concat(\n      getOr([], 'defaultLayer', location),\n      getOr([], 'layers', location),\n    );\n    const selectedLayer = _.find(layers, layer => layer._id === layerId);\n    return selectedLayer;\n  }\n);\n\nconst placedItemsSelector = createSelector(\n  selectedLayerSelector,\n  props => props.movingDeviceItem,\n  (selectedLayer, movingDeviceItem) => {\n    const placementsInProcess = false;\n\n    const checkMovementInProgress = items => {\n      if (!movingDeviceItem) {\n        return items;\n      }\n\n      return map(item => {\n        const id = get('_id', movingDeviceItem);\n        const isMatch = eq(item._id, id);\n        return !isMatch ? item : movingDeviceItem;\n      }, items);\n    };\n\n    const checkPlacementInProgress = items => {\n      if (!size(placementsInProcess)) {\n        return items;\n      }\n\n      return map(item => {\n        const placement = find({_id: item._id}, placementsInProcess);\n        return !placement ? item : placement;\n      }, items);\n    };\n\n    const deviceItems = compose(\n      checkMovementInProgress,\n      checkPlacementInProgress,\n      getOr([], 'items'),\n    )(selectedLayer);\n    const validDevices = filter(item => (\n      isNumber(item.left) && isNumber(item.top)\n    ), deviceItems);\n\n\n    return filter(device => includes(toLower(''), toLower(device.name)), validDevices);\n  }\n);\n\nconst selectLayers = createSelector(\n  selectCurrentLocation,\n  (location) => (\n    concat(\n      getOr([], 'defaultLayer', location),\n      getOr([], 'layers', location),\n    )\n  )\n);\n\nexport default {\n  currentLocation: selectCurrentLocation,\n  layerGeometry: layerGeometrySelector,\n  placedItems: placedItemsSelector,\n  selectedLayer: selectedLayerSelector,\n  layers: selectLayers,\n};\n","import {set, pick, get, omit} from 'lodash/fp';\nimport {LOCATION} from '../../../constants';\nimport {createReducer} from '../../../utils';\n\nconst LOCATION_SET = 'LOCATION_SET';\nconst LOCATION_SET_DEVICE_IS_REMOVING = 'LOCATION_SET_DEVICE_IS_REMOVING';\nconst LOCATION_SET_DEVICE_PLACEMENT_MODE = 'LOCATION_SET_DEVICE_PLACEMENT_MODE';\n// size listener effectively\nconst XYZ_LAYER_RESIZE_BG = 'XYZ_LAYER_RESIZE_BG';\n// geometry\nconst XYZ_LAYER_SET_GEOMETRY = 'XYZ_LAYER_SET_GEOMETRY';\nconst XYZ_LAYER_RESET_GEOMETRY = 'XYZ_LAYER_RESET_GEOMETRY';\n// moving device\nconst XYZ_LAYER_BEGIN_MOVING_DEVICE = 'XYZ_LAYER_BEGIN_MOVING_DEVICE';\nconst XYZ_LAYER_END_MOVING_DEVICE = 'XYZ_LAYER_END_MOVING_DEVICE';\nconst XYZ_LAYER_UPDATE_MOVING_DEVICE = 'XYZ_LAYER_UPDATE_MOVING_DEVICE';\nconst DEVICE_OPEN_POPUP = 'DEVICE_OPEN_POPUP';\nconst DEVICE_CLOSE_POPUP = 'DEVICE_CLOSE_POPUP';\nconst VIEWS_REPORT_IMAGE_SIZE = 'VIEWS_REPORT_IMAGE_SIZE';\nconst SHOW_VALUE_DISPLAY = 'SHOW_VALUE_DISPLAY';\nconst TOGGLE_LAYER = 'TOGGLE_LAYER';\n\nconst actions = {\n  setDevicePlacementMode: isInDevicePlacementMode => ({\n    type: LOCATION_SET_DEVICE_PLACEMENT_MODE,\n    isInDevicePlacementMode,\n  }),\n  setIsRemovingDevice: isRemovingDevice => ({\n    type: LOCATION_SET_DEVICE_IS_REMOVING,\n    isRemovingDevice,\n  }),\n  // should be moved up?\n  resizeBackground: rect => ({\n    type: XYZ_LAYER_RESIZE_BG,\n    rect,\n  }),\n  // in general use\n  setLayerGeometry: (layerId, geometry) => ({\n    type: XYZ_LAYER_SET_GEOMETRY,\n    layerId,\n    layerGeometries: pick(['x', 'y', 'scale'], geometry),\n  }),\n  reportImageSize: (imageSrc, size) => ({\n    type: VIEWS_REPORT_IMAGE_SIZE,\n    imageSrc,\n    size,\n  }),\n  // used by blueprint reset button\n  resetLayerGeometry: layerId => ({\n    type: XYZ_LAYER_RESET_GEOMETRY,\n    layerId,\n  }),\n  // moving deviceItem stuff\n  beginMovingDeviceItem: deviceItem => ({\n    type: XYZ_LAYER_BEGIN_MOVING_DEVICE,\n    deviceItem,\n  }),\n  endMovingDeviceItem: () => ({\n    type: XYZ_LAYER_END_MOVING_DEVICE,\n  }),\n  updateMovingDeviceItem: (location, deviceItemId, updates) => ({\n    type: XYZ_LAYER_UPDATE_MOVING_DEVICE,\n    location,\n    deviceItemId,\n    updates,\n  }),\n    // const modifiedLocation = editDeviceItemDetails(location, deviceItemId, updates);\n    // return dispatch(locationActions.updateLocation(modifiedLocation));\n  showValueDisplay: (location, deviceItemId, updates) => dispatch => {\n    const modifiedLocation = editDeviceItemDetails(location, deviceItemId, updates);\n    return dispatch(locationActions.updateLocation(modifiedLocation));\n  },\n  openDevicePopup: popupDeviceId => ({\n    type: DEVICE_OPEN_POPUP,\n    popupDeviceId,\n  }),\n  closeDevicePopup: () => ({\n    type: DEVICE_CLOSE_POPUP,\n  }),\n  toggleLayer: (layerId) => ({\n    type: TOGGLE_LAYER,\n    layerId,\n  }),\n};\n\nconst defaultState = {\n  isRemovingDevice: false,\n  isInDevicePlacementMode: false,\n  // backgroundDimensions: the actual dimensions of the physical background area\n  backgroundDimensions: {width: 0, height: 0, left: 0, top: 0},\n  // blueprintGeometries: keep track of pan & zoom info for each blueprint\n  layerGeometries: {},\n  // moving deviceItem (There can be only one. seriously.)\n  movingDeviceItem: null,\n  popupDeviceId: null,\n  imageSizes: {},\n  openedLayers: {},\n};\n\nconst handlers = {\n  [LOCATION_SET]: (state, {location}) =>\n    set('location', location, state),\n\n  [LOCATION_SET_DEVICE_IS_REMOVING]: (state, {isRemovingDevice}) =>\n    set('isRemovingDevice', isRemovingDevice, state),\n\n  [LOCATION_SET_DEVICE_PLACEMENT_MODE]: (state, {isInDevicePlacementMode}) =>\n    set('isInDevicePlacementMode', isInDevicePlacementMode, state),\n\n  [XYZ_LAYER_RESIZE_BG]: (state, {rect}) => {\n    const dims = pick(['width', 'height', 'top', 'left'], rect);\n    return set('backgroundDimensions', dims, state);\n  },\n\n  [XYZ_LAYER_SET_GEOMETRY]: (state, {layerId, layerGeometries}) => {\n    const geometries = {\n      ...state.layerGeometries,\n      [layerId]: {\n        ...get({}, layerId, state.layerGeometries),\n        ...layerGeometries,\n      },\n    };\n    return set('layerGeometries', geometries, state);\n  },\n\n  [XYZ_LAYER_RESET_GEOMETRY]: (state, {layerId}) => {\n    const geometries = omit([layerId], state.layerGeometries);\n    return set('layerGeometries', geometries, state);\n  },\n\n  [XYZ_LAYER_BEGIN_MOVING_DEVICE]: (state, {deviceItem}) =>\n    set('movingDeviceItem', deviceItem, state),\n\n  [XYZ_LAYER_END_MOVING_DEVICE]: (state) => (\n    set('movingDeviceItem', null, state)\n  ),\n\n  [XYZ_LAYER_UPDATE_MOVING_DEVICE]: (state, {updates}) => {\n    const movingDeviceItem = {\n      ...state.movingDeviceItem,\n      ...pick(LOCATION.deviceItemSimpleEditProps, updates),\n    };\n    return !state.movingDeviceItem\n      ? state\n      : set('movingDeviceItem', movingDeviceItem, state);\n  },\n\n  [DEVICE_OPEN_POPUP]: (state, {popupDeviceId}) =>\n    set('popupDeviceId', popupDeviceId, state),\n  [DEVICE_CLOSE_POPUP]: (state) =>\n    set('popupDeviceId', null, state),\n\n  [VIEWS_REPORT_IMAGE_SIZE]: (state, {imageSrc, size}) => {\n    const imageSizes = {\n      ...state.imageSizes,\n      [imageSrc]: {...size},\n    };\n    return set('imageSizes', imageSizes, state)\n  },\n  [TOGGLE_LAYER]: (state, {layerId}) =>\n    set('openedLayers', {...state.openedLayers, [layerId]: !state.openedLayers[layerId]}, state),\n};\n\nconst reducer = createReducer(defaultState, handlers);\n\nexport default {\n  actions,\n  defaultState,\n  reducer,\n};\n","import styled from 'styled-components';\nimport {COLORS, IMAGES} from '../../../constants';\nimport {getScreenCoordinate} from './utils';\nimport {FlexColWrapper, FlexMaxWidthWrapper} from '../../../global/styled';\n\nconst LayerContainer = styled.div`\n  position: relative;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst LayerSpriteStyled = styled.img.attrs(props => {\n  // use attrs for better efficiency w/ many changes\n  // warnings were going off about changing styled\n  // properties too often, and suggested this as a solution\n  const coordinate = {\n    x: -props.width / 2,\n    y: -props.height / 2,\n  };\n  const screenCoordinate = getScreenCoordinate(\n    coordinate,\n    props.geometry,\n    props.parentDimensions,\n  );\n  const width = `${(props.width * props.geometry.scale)}px`;\n  const height = `${(props.height * props.geometry.scale)}px`;\n  const style = {\n    left: `${screenCoordinate.x}px`,\n    top: `${screenCoordinate.y}px`,\n    width,\n    height,\n  };\n  return {style};\n})`\n  position: absolute;\n  pointer-events: none;\n  user-select: none;\n`;\n\nconst DeviceItemWrapperStyled = styled.div.attrs(props => {\n  const coordinate = {\n    x: props.deviceItem.left,\n    y: props.deviceItem.top,\n  };\n  const screenCoordinate = getScreenCoordinate(\n    coordinate,\n    props.geometry,\n    props.parentDimensions,\n  );\n  const style = {\n    left: `${(screenCoordinate.x - 0.5 * props.width)}px`,\n    top: `${(screenCoordinate.y - 0.5 * props.height)}px`,\n  };\n  return {style};\n})`\n  position: absolute;\n  z-index: 1;\n`;\n\n\nconst StyledDevicePopup = styled.div.attrs(props => {\n  // use attrs for better efficiency w/ many changes\n  // warnings were going off about changing styled\n  // properties too often, and suggested this as a solution\n  const width = 300;\n  const coordinate = {\n    x: props.deviceItem.left,\n    y: props.deviceItem.top,\n  };\n  const screenCoordinate = getScreenCoordinate(\n    coordinate,\n    props.geometry,\n    props.parentDimensions,\n  );\n  const style = {\n    left: `${screenCoordinate.x + 7}px`,\n    top: `${screenCoordinate.y + 15}px`,\n    width: `${width}px`,\n    overflowY: 'auto'\n  };\n  return {style};\n})`\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  user-select: none;\n  border: 1px solid lightgray;\n  border-radius: 0 8px 8px 8px;\n  background-color: ${COLORS.white};\n  padding: 20px;\n  word-wrap: break-word;\n  max-height: 400px;\n  .checked_eye {\n    color: ${COLORS.greenDark};\n    cursor: pointer;\n    padding-bottom: 3px;\n  }\n  .unchecked_eye {\n    color: #999;\n    cursor: pointer;\n    padding-bottom: 3px;\n  }\n  .chartIcon {\n    margin-right: 7px;\n  }\n  .notTranslated {\n    color: #999;\n  }\n`;\n\n\nconst StyledDevicePopupDeviceList = styled.div`\n  width: 100%;\n  margin: 20px 0 20px 0;\n  white-space: nowrap;\n`;\n\nconst StyledDevicePopupDeviceListItem = styled.div`\n  display: flex;\n  height: 35px;\n  line-height: 35px;\n  &:nth-child(odd) {\n    background: ${COLORS.greyLight};\n  }\n`;\n\nconst StyledDevicePopupDeviceItemName = styled.div`\n  flex: 1 0 100px;\n  padding-left: 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst StyledDevicePopupDeviceItemValue = styled.div`\n  flex: 1 0 30px;\n  text-align: right;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst StyledDevicePopupDeviceItemIcon = styled.div`\n  flex: 0 0 30px;\n  text-align: right;\n  padding-right: 5px;\n`;\n\nconst DeviceItemSpriteStyled = styled.div.attrs(props => {\n  // use attrs for better efficiency w/ many changes\n  // warnings were going off about changing styled\n  // properties too often, and suggested this as a solution\n  const style = {\n    width: `${props.width}px`,\n    height: `${props.height}px`,\n  };\n  return {style};\n})`\n  position: absolute;\n  user-select: none;\n  border: 2px solid ${COLORS.greyDark};\n  border-radius: 50%;\n  background-image: url(${props => {\n  return _.get(props, 'deviceItem.locationItemControl.icon') || IMAGES.defaultDeviceIcon\n}});\n  z-index: 2;\n  background-color: ${COLORS.marker};\n  background-size: 70%;\n  background-repeat: no-repeat;\n  background-position: center;\n  transition: background-color 0.2s;\n  cursor: ${props => {\n  if (props.isGrabbed) return 'grabbing';\n  if (props.isMovable) return 'grab';\n  return 'pointer';\n}};\n\n  &:hover {\n    background-color: ${COLORS.markerHover};\n    transition: background-color 0.2s;\n  }\n`;\n\nconst ValueDisplay = styled.div`\n  position: absolute;\n  top: 3px;\n  left: 12px;\n  height: 28px;\n  line-height: 28px;\n  padding: 0 10px 0 24px;\n  z-index: 0;\n  border-radius: 14px;\n  background: #333;\n  color: white;\n  white-space: nowrap;\n  pointer-events: none;\n  font-size: 14px;\n`;\n\nconst StyledCloseButton = styled.div`\n  cursor: pointer;\n  position: absolute;\n  right: 5px;\n  top: 2px;\n  font-size: 1.1em;\n  color: ${COLORS.greyDark};\n\n  &:hover {\n    color: ${COLORS.greenDark};\n  }\n`;\n\nconst StyledDeviceValues = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst StyledViewAllButton = styled.div`\n  font-weight: 800;\n  cursor: pointer;\n  margin-bottom: 15px;\n  margin-left: 5px;\n  transition: color 0.2s;\n  color: ${COLORS.greenDark};\n\n  &:hover {\n    color: ${COLORS.greenLight};\n    transition: color 0.2s;\n  }\n`;\n\nconst ControlWrapper = styled(FlexColWrapper)`\n  justify-content: space-around;\n  align-items: center;\n  z-index: 1;\n  position: absolute;\n  left: 25px;\n  top: 25px;\n  width: 50px;\n  height: 200px;\n  padding: 20px 5px;\n`;\n\nconst RemovalZoneContainer = styled(FlexMaxWidthWrapper)`\n  justify-content: center;\n  align-items: center;\n  color: ${COLORS.black};\n  font-size: 2em;\n  font-weight: 800;\n  z-index: 1;\n  position: absolute;\n  height: 25vh;\n  bottom: 0;\n  left: 0;\n  background: rgba(50, 50, 50, 0.3);\n  transition: all 0.3s;\n\n  &:hover {\n    background: ${(props) => !!props.movingDeviceItem\n      ? 'rgba(70, 70, 70, 0.8)'\n      : 'rgba(50, 50, 50, 0.4)'\n    };\n    transition: all 0.3s;\n  }\n`;\n\nconst SpinnerWrapper = styled(FlexMaxWidthWrapper)`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst StyledTableItem = styled.div`\n  cursor: ${({cursor}) => cursor || 'default'};\n`;\n\nconst StyledTableRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-sizing: border-box;\n  padding: 5px;\n  width: 100%;\n  background: ${({background}) => background || COLORS.white};\n  color: ${({color}) => color || COLORS.black};\n  border-bottom: 2px solid ${COLORS.grey};\n  height: 40px;\n`;\n\nconst StyledTableRowDropdown = styled.section`\n  transition: all 0.2s;\n  height: ${({open}) => open ? '50px' : '0'};\n  opacity: ${({open}) => open ? '1' : '0'};\n  visibility: ${({open}) => open ? 'visible' : 'hidden'};\n`;\n\nconst StyledDeviceRow = styled.section`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: ${COLORS.trueWhite};\n  font-size: 0.8em;\n  margin: 5px;\n  box-sizing: border-box;\n  padding: 2px 10px 2px;\n  height: 40px;\n  border-bottom: 1px solid ${COLORS.greyDark};\n`;\n\nconst StyledIconLink = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 25px;\n  width: 25px;\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid ${COLORS.black};\n  transition: background 0.2s;\n  background: ${COLORS.white};\n  \n  &:hover {\n    transition: background 0.2s;\n    background: ${COLORS.greyLight};\n  }\n`;\n\nconst BackButtonWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 13px;\n  color: #333;\n  cursor: pointer;\n\n  &:hover {\n    color: black;\n    text-decoration: underline;\n  }\n`;\n\nconst BackButtonText = styled.p`\n  margin: 0 0 0 3px;\n  position: relative;\n  top: 2px;\n`;\n\nexport {\n  LayerContainer,\n  LayerSpriteStyled,\n  DeviceItemWrapperStyled,\n  StyledCloseButton,\n  StyledDevicePopup,\n  StyledDevicePopupDeviceItemIcon,\n  StyledDevicePopupDeviceItemName,\n  StyledDevicePopupDeviceItemValue,\n  StyledDevicePopupDeviceList,\n  StyledDevicePopupDeviceListItem,\n  StyledDeviceValues,\n  StyledViewAllButton,\n  DeviceItemSpriteStyled,\n  ValueDisplay,\n  ControlWrapper,\n  RemovalZoneContainer,\n  SpinnerWrapper,\n\n  // Table\n  StyledTableItem,\n  StyledTableRow,\n  StyledTableRowDropdown,\n  StyledDeviceRow,\n  StyledIconLink,\n\n  BackButtonWrapper,\n  BackButtonText,\n}\n","import _ from 'lodash';\n\nconst BLUEPRINT_ZOOM_SCALE_FACTOR = 3500;\n\n// not sure where it goes for the moment\nconst multCoord = (coordinate, multiplier) => ({\n  x: coordinate.x * multiplier,\n  y: coordinate.y * multiplier,\n});\n\nconst addTwoCoords = (coord1, coord2) => ({\n  x: coord1.x + coord2.x,\n  y: coord1.y + coord2.y,\n});\n\nconst subtractCoords = (coord1, coord2) => {\n  const mc2 = multCoord(coord2, -1);\n  return addTwoCoords(coord1, mc2);\n};\n\nconst addCoords = (...coords) => (\n  _.reduce(coords, (acc, coord) => (\n    addTwoCoords(acc, coord)\n  ), {x: 0, y: 0})\n);\n\nconst makeCoord = obj => ({\n  x: obj.x || obj.left || 0,\n  y: obj.y || obj.top || 0,\n});\n\nconst getZoomedGeometry = (zoomDiff, geometry) => {\n  const oldScale = geometry.scale;\n  const scale = oldScale * (2 ** (zoomDiff.zoom / BLUEPRINT_ZOOM_SCALE_FACTOR));\n  const factor = (scale / oldScale - 1);\n  // const diffCoord = {x: zoomDiff.left, y: zoomDiff.top};\n  const diffCoord = {x: 0, y: zoomDiff.top}; // Dont know why this works\n  const scaledDiff = multCoord(diffCoord, -factor);\n  const coordinate = addTwoCoords(geometry, scaledDiff);\n  return {...coordinate, scale};\n};\n\nconst getPannedGeometry = (screenDiff, geometry) => {\n  const {scale} = geometry;\n  const scaledDiff = multCoord(screenDiff, 1 / scale);\n  const translated = addTwoCoords(geometry, scaledDiff);\n  return {...translated, scale};\n};\n\n// not really the screen coord, just relative to layer\nconst getScreenCoordinate = (coord, geometry, parentDimensions) => {\n  const translated = addTwoCoords(coord, geometry);\n  const scaled = multCoord(translated, geometry.scale);\n  const screenCenter = {\n    x: parentDimensions.width / 2,\n    y: parentDimensions.height / 2,\n  };\n  const screenCoordinate = addTwoCoords(scaled, screenCenter);\n  return screenCoordinate;\n};\n\nconst centerScreenPosition = (screenPosition, parentDimensions) => {\n  const screenCoord = makeCoord(screenPosition);\n  const screenOffset = multCoord(makeCoord(parentDimensions), -1);\n  const screenSize = multCoord({x: parentDimensions.width, y: parentDimensions.height}, -0.5);\n  const centeredCoord = addCoords(screenCoord, screenOffset, screenSize);\n  return centeredCoord;\n};\n\nconst unscaleCenteredCoord = (centered, geometry) => {\n  const centeredCoord = makeCoord(centered);\n  const unscaled = multCoord(centeredCoord, 1 / geometry.scale);\n  const coordinate = subtractCoords(unscaled, geometry);\n  return coordinate;\n};\n\nconst centerAndUnscaleScreenPosition = (screenPosition, geometry, parentDimensions) => {\n  const centeredCoord = centerScreenPosition(screenPosition, parentDimensions);\n  const coordinate = unscaleCenteredCoord(centeredCoord, geometry);\n  return coordinate;\n};\n\nexport {\n  centerScreenPosition,\n  unscaleCenteredCoord,\n  centerAndUnscaleScreenPosition,\n  getScreenCoordinate,\n  getZoomedGeometry,\n  getPannedGeometry,\n};\n","import React from 'react';\nimport {useQueryClient} from 'react-query';\nimport {compose} from 'lodash/fp';\nimport {NextRouter} from 'next/router';\n\nimport {Device, Location} from '../../../types';\nimport Map from '../../../components/map';\nimport Spinner from '../../../components/spinner';\nimport ContainerBox from '../../../components/container-box';\nimport {RESOURCE_TYPES} from '../../../constants';\nimport {MapLoader} from './styled';\nimport {CenterContentContainer} from '../../../global/styled';\nimport {Table} from './sub-components';\nimport Button from '../../../components/button';\nimport {withLanguage} from '../../../hocs';\nimport {useLocationsQuery} from '../../../api/locations/hooks';\nimport {useDevicesQuery} from '../../../api/devices/hooks';\nimport {devicesApi, locationsApi} from '../../../api';\n\ninterface LocationsProps {\n  router: NextRouter;\n  t(): void;\n}\n\nconst Locations = (props: LocationsProps) => {\n\n  /// ////////////////////////\n  //\n  // HOOKS\n  //\n  /// ///////////////////////\n\n  const queryClient = useQueryClient();\n  const locations = useLocationsQuery();\n\n  const useRemoveLocation = locationsApi.useRemoveLocation(queryClient);\n  const useUpdateLocation = locationsApi.useUpdateLocation(queryClient);\n  const useUpdateDevice = devicesApi.useUpdateDevice(queryClient);\n\n  const devices = useDevicesQuery({\n    params: {},\n    select: React.useCallback(\n      data => data,\n      [],\n    ),\n  });\n\n  /// ////////////////////////\n  //\n  // EVENTS\n  //\n  /// ///////////////////////\n\n  const removeLocation = (locationId: string) => {\n    useRemoveLocation.mutate(locationId);\n  };\n\n  interface UpdateDevice {\n    deviceId: string;\n    updates: Partial<Device>;\n  }\n\n  const updateDevice = ({deviceId, updates}: UpdateDevice) => {\n    useUpdateDevice.mutate({deviceId, updates});\n  };\n\n  const updateLocation = (data: Location) => {\n    useUpdateLocation.mutate(data);\n  };\n\n  //\n  //\n  // RENDERING\n  //\n  //\n\n  if (locations.isLoading || devices.isLoading) {\n    return (\n      <MapLoader>\n        <Spinner size={50} />\n      </MapLoader>\n    );\n  }\n\n  return (\n    <CenterContentContainer>\n      <ContainerBox\n        position={'relative'}\n        display={'flex'}\n        width={'20%'}\n        height={'92vh'}\n        maxWidth={'100%'}\n        flexDirection={'column'}\n        margin={'10px'}\n        includeMarginInHeight\n        includeMarginInWidth\n      >\n        <Button\n          color={'green'}\n          ghosted\n          margin={'10px'}\n          width={'140px'}\n          content={'+ New location'}\n          onClick={async () => props.router.push('/locations/new')}\n        />\n        <Table\n          t={props.t}\n          removeLocation={removeLocation}\n          router={props.router}\n          items={locations.data}\n        />\n      </ContainerBox>\n      <ContainerBox\n        position={'relative'}\n        width={'80%'}\n        maxWidth={'100%'}\n        height={'100%'}\n        padding={'0'}\n        margin={'10px'}\n      >\n        <Map\n          router={props.router}\n          height={'92vh'}\n          width={'100%'}\n          mapLayers={{\n            devices: {\n              _id: 'devices',\n              items: devices?.data,\n              URI: RESOURCE_TYPES.devices,\n              saveMarker: updateDevice,\n              markerShape: 'round',\n            },\n            locations: {\n              _id: 'locations',\n              items: locations?.data,\n              URI: RESOURCE_TYPES.locations,\n              saveMarker: updateLocation, // TODO: fix further down,\n            },\n          }}\n        />\n      </ContainerBox>\n    </CenterContentContainer>\n  );\n};\n\nexport default compose(\n  withLanguage(),\n)(Locations);\n","import styled from 'styled-components';\nimport {COLORS} from '../../../constants';\n\nconst MapLoader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n`;\n\nconst StyledTableItem = styled.div`\n  cursor: ${({cursor}) => cursor || 'default'};\n`;\n\nconst StyledTableRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-sizing: border-box;\n  padding: 5px;\n  width: 100%;\n  background: ${({background}) => background || COLORS.white};\n  color: ${({color}) => color || COLORS.black};\n  border-bottom: 2px solid ${COLORS.grey};\n  height: 40px;\n`;\n\nexport {\n  MapLoader,\n  StyledTableItem,\n  StyledTableRow,\n}\n","import Table from './table';\n\nexport {\n  Table,\n}","import React from 'react';\nimport _ from 'lodash';\nimport {confirmAlert} from 'react-confirm-alert';\nimport {DeleteIconButton, EditIconButton} from '../../../../yggio-components/buttons';\nimport {COLORS} from '../../../../constants';\nimport {StyledTableItem, StyledTableRow} from '../styled';\nimport {FlexWrapper} from '../../../../global/styled';\n\nconst TableHeader = props => {\n  return <StyledTableRow background={COLORS.greenRacing} color={COLORS.white}>\n    <StyledTableItem>Name</StyledTableItem>\n    <StyledTableItem>Options</StyledTableItem>\n  </StyledTableRow>\n};\n\nconst TableBody = props => _.map(props.items, item => (\n  <React.Fragment key={item._id}>\n    <StyledTableRow>\n      <StyledTableItem\n        cursor={'pointer'}\n        onClick={() => props.router.push(`/locations/${item._id}/${_.get(item, 'defaultLayer._id')}`)}\n      >\n        {item.name}\n      </StyledTableItem>\n      <StyledTableItem>\n        <FlexWrapper>\n          <EditIconButton\n            onClick={() => props.router.push(`/locations/${item._id}/edit`)}\n          />\n          <DeleteIconButton\n            onClick={(evt) => {\n              const buttons = [\n                {label: _.capitalize(props.t('common.yes')), onClick: () => props.removeLocation(item._id)},\n                {label: _.capitalize(props.t('common.no')), onClick: () => {}}\n              ];\n              confirmAlert({\n                title: _.capitalize(props.t('labels.confirmation')),\n                message: props.t('phrases.removeDevicesVerification'),\n                buttons,\n              });\n            }}\n          />\n        </FlexWrapper>\n      </StyledTableItem>\n    </StyledTableRow>\n  </React.Fragment>\n));\n\nconst Table = (props) => (\n  <>\n    <TableHeader/>\n    <TableBody {...props} />\n  </>\n);\n\nexport default Table;","// organization-manager/constants.ts\n\nconst ORGANIZATION_ACCESS_TYPES = {\n  DEVICES_READ: 'DEVICES_READ',\n  DEVICES_WRITE: 'DEVICES_WRITE',\n  DEVICES_PEEK: 'DEVICES_PEEK',\n  MANAGE_ACCESS: 'MANAGE_ACCESS',\n  EMPLACEMENT: 'EMPLACEMENT',\n};\n\nexport {\n  ORGANIZATION_ACCESS_TYPES,\n};\n","import {compose} from 'lodash/fp';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {withState} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {\n  generateForm,\n  getFormValues,\n  inputValidators,\n  getValidationErrorMessage,\n  getFormShape,\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nimport {\n  Wrapper,\n  ButtonsContainer,\n} from './styled';\n\nimport TextField from '../../../../../components/text-field';\nimport Button from '../../../../../components/button';\n\n// /////\n// The BasicCreateUnitPane - uses only fully processed data\n// /////\n\nconst BasicCreateUnitPane = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n\n  const createUnit = async () => {\n    if (isFormValid(props.formInputs)) {\n      const template = getFormValues(props.formInputs);\n      try {\n        await props.createUnit({\n          orgId: props.orgId,\n          parentUnitId: props.unitId,\n          template,\n        });\n        props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/subunits`);\n      } catch (err) {\n        // do nothing?\n      }\n    }\n  };\n\n  return (\n    <Wrapper>\n      <h1>{'Create subunit'}</h1>\n      <TextField\n        label=\"Name\"\n        name=\"name\"\n        onChange={onChange}\n        onBlur={onBlur}\n        value={props.formInputs.name.value}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.name)}\n        margin=\"0 0 10px 0\"\n        autoFocus\n      />\n      <TextField\n        label=\"Description\"\n        name=\"description\"\n        onChange={onChange}\n        isOptional\n        value={props.formInputs.description.value}\n      />\n      <ButtonsContainer>\n        <Button\n          onClick={createUnit}\n          content={'Create'}\n          color=\"green\"\n          margin=\"0 10px 0 0\"\n        />\n        <Button\n          content={'Cancel'}\n          onClick={() => {\n            props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/summary`);\n          }}\n        />\n      </ButtonsContainer>\n    </Wrapper>\n  );\n};\n\n\nBasicCreateUnitPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  createUnit: PropTypes.func.isRequired,\n  // from form state\n  ...getFormShape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n};\n\n// ////\n// RawCreateUnitPane - full data processing\n// ////\n\nconst formConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n      ],\n    },\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\nconst formState = generateForm(formConfig);\n\nconst RawCreateUnitPane = compose(\n  withState(formState),\n)(BasicCreateUnitPane);\n\nRawCreateUnitPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  createUnit: PropTypes.func.isRequired,\n};\n\n// /////\n// CreateUnitPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioActionsToProps: yggioActions => ({\n    createUnit: yggioActions.database.organizations.createUnit,\n  }),\n};\n\nconst CreateUnitPane = compose(\n  withYggio(yggio),\n)(RawCreateUnitPane);\n\nCreateUnitPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\n// ////\n// exports\n// ////\n\nexport default CreateUnitPane;\nexport {\n  RawCreateUnitPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px 0 0 0;\n  h1 {\n    font-size: 18px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nexport {\n  Wrapper,\n  ButtonsContainer,\n};\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {createSelector} from 'reselect';\nimport {organizationUtils} from '../../../../../utils';\nimport {\n  withState,\n  withEffect,\n  withReselect,\n} from '../../../../../hocs';\nimport {\n  withYggio,\n} from '../../../../../yggio-context';\n\nimport {\n  generateForm,\n  getFormValues,\n  inputValidators,\n  getValidationErrorMessage,\n  getFormShape,\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nimport {\n  Wrapper,\n  ButtonsContainer,\n} from './styled';\n\nimport TextField from '../../../../../components/text-field';\nimport Button from '../../../../../components/button';\n\n\n// /////\n// The BasicEditUnitPane - uses only fully processed data\n// /////\n\nconst BasicEditUnitPane = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n\n  const saveEdits = async () => {\n    if (isFormValid(props.formInputs)) {\n      const template = getFormValues(props.formInputs);\n      try {\n        await props.saveEdits({\n          orgId: props.orgId,\n          unitId: props.unitId,\n          template,\n        });\n        props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/summary`);\n      } catch (err) {\n        // do nothing?\n      }\n    }\n  };\n\n  return (\n    <Wrapper>\n      <h1>Edit unit</h1>\n      <TextField\n        label=\"Name\"\n        name=\"name\"\n        onChange={onChange}\n        onBlur={onBlur}\n        value={props.formInputs.name.value}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.name)}\n        margin=\"0 0 10px 0\"\n        autoFocus\n      />\n      <TextField\n        label=\"Description\"\n        name=\"description\"\n        onChange={onChange}\n        value={props.formInputs.description.value}\n        isOptional\n      />\n      <ButtonsContainer>\n        <Button\n          onClick={saveEdits}\n          content={'Save'}\n          color=\"green\"\n          margin=\"0 10px 0 0\"\n        />\n        <Button\n          content={'Cancel'}\n          onClick={() => {\n            props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/summary`);\n          }}\n        />\n      </ButtonsContainer>\n    </Wrapper>\n  );\n};\n\nBasicEditUnitPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  saveEdits: PropTypes.func.isRequired,\n  // from state\n  ...getFormShape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n};\n\n\n// ////\n// RawEditUnitPane - full data processing\n// ////\n\nconst formConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n      ],\n    },\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\nconst formState = generateForm(formConfig);\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// filter for unit\nconst unitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const unit = organizationUtils.findUnit(organization, unitId);\n    return unit;\n  },\n);\n\nconst initialFormSelector = createSelector(\n  unitSelector,\n  unit => {\n    const initialForm = {\n      name: _.get(unit, 'name', ''),\n      description: _.get(unit, 'description', ''),\n    };\n    return initialForm;\n  },\n);\n\nconst reselectors = {\n  initialForm: initialFormSelector,\n};\n\nconst initializeFormEffect = props => {\n  if (!props.isPopulated) {\n    props.populateInputValues(props.initialForm);\n  }\n};\n\n// this one can be more easily mocked in stories\nconst RawEditUnitPane = compose(\n  withState(formState),\n  withReselect(reselectors),\n  withEffect(initializeFormEffect, {init: []}),\n)(BasicEditUnitPane);\n\nRawEditUnitPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  saveEdits: PropTypes.func.isRequired,\n  organizations: PropTypes.object.isRequired, // for reselect\n};\n\n\n// /////\n// EditUnitPane - fully yggio connected\n// /////\n\n// and yggio\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    saveEdits: yggioActions.database.organizations.updateUnit,\n  }),\n};\n\nconst EditUnitPane = compose(\n  withYggio(yggio),\n)(RawEditUnitPane);\n\nEditUnitPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\n\n// /////\n// exports\n// /////\n\nexport default EditUnitPane;\nexport {\n  RawEditUnitPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px 0 0 0;\n  h1 {\n    font-size: 18px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nexport {\n  Wrapper,\n  ButtonsContainer,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {ORGANIZATION_ACCESS_TYPES} from '../../../constants';\nimport {organizationUtils} from '../../../../../utils';\nimport {\n  Wrapper,\n  NoContendersNote,\n} from './styled';\n\nimport {\n  ContenderRow,\n} from './sub-components';\n\nimport Button from '../../../../../components/button';\n\n// /////\n// The BasicUnitAddMemberPane - uses only fully processed data\n// /////\n\nconst BasicUnitAddMemberPane = props => {\n\n  const onSelected = async contenderId => {\n    const tokenArg = {\n      orgId: props.orgId,\n      memberId: contenderId,\n      unitId: props.unitId,\n      accessType: ORGANIZATION_ACCESS_TYPES.DEVICES_READ,\n    };\n    try {\n      await props.onAddMember(tokenArg);\n    } catch (err) {\n      // do nothing?\n    }\n  };\n\n  return (\n    <Wrapper>\n      <h1>\n        {`Add members to: ${_.get(props.unit, 'name', '(no name)')}`}\n      </h1>\n      {_.isEmpty(props.contenders) &&\n        <NoContendersNote>{'No members available'}</NoContendersNote>}\n      {_.map(props.contenders, contender => (\n        <ContenderRow\n          key={contender._id}\n          contender={contender}\n          onSelected={onSelected}\n        />\n      ))}\n      <Button\n        content={'Done'}\n        onClick={() => props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/members`)}\n        margin={'20px 0 0 0'}\n      />\n    </Wrapper>\n  );\n};\nBasicUnitAddMemberPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  onAddMember: PropTypes.func.isRequired,\n  // from reselect\n  unit: PropTypes.object, // can be null (from selector)\n  contenders: PropTypes.array.isRequired,\n};\n\n// ////\n// RawUnitAddMemberPane - data processing layers\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// extract all members\nconst membersSelector = createSelector(\n  organizationSelector,\n  props => props.users,\n  (organization, users) => {\n    const memberIds = _.get(organization, 'members', []);\n    const members = _.map(memberIds, memberId => users[memberId]);\n    return _.compact(members);\n  },\n);\n\n\n// filter for unit\nconst unitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const unit = organizationUtils.findUnit(organization, unitId);\n    return unit;\n  },\n);\n\nconst unitTokensSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const tokens = _.get(organization, 'accessTokens', []);\n    const unitTokens = _.filter(tokens, {unitId});\n    return unitTokens;\n  },\n);\n\nconst contendersSelector = createSelector(\n  unitTokensSelector,\n  membersSelector,\n  (tokens, members) => {\n    const tokenIds = _.uniq(_.map(tokens, token => token.memberId));\n    const contenders = _.filter(members, member => !_.includes(tokenIds, member._id));\n    return contenders;\n  },\n);\n\nconst adminsSelector = createSelector(\n  unitTokensSelector,\n  membersSelector,\n  tokens => {\n    return _.filter(tokens, {accessType: ORGANIZATION_ACCESS_TYPES.MANAGE_ACCESS});\n  },\n);\n\nconst emplacementsSelector = createSelector(\n  unitTokensSelector,\n  membersSelector,\n  tokens => {\n    return _.filter(tokens, {accessType: ORGANIZATION_ACCESS_TYPES.EMPLACEMENT});\n  },\n);\n\nconst reselectors = {\n  unit: unitSelector,\n  managers: adminsSelector,\n  emplacements: emplacementsSelector,\n  contenders: contendersSelector,\n};\n\n// And compose the component\n\nconst RawUnitAddMemberPane = compose(\n  withReselect(reselectors),\n)(BasicUnitAddMemberPane);\n\nRawUnitAddMemberPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  organizations: PropTypes.object.isRequired,\n  users: PropTypes.object.isRequired,\n  onAddMember: PropTypes.func.isRequired,\n};\n\n// /////\n// UnitAddMemberPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n    users: yggioState.database.users,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    onAddMember: yggioActions.database.organizations.assignDeviceAccess,\n  }),\n};\nconst UnitAddMemberPane = compose(\n  withYggio(yggio),\n)(RawUnitAddMemberPane);\n\nUnitAddMemberPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\n// /////\n// exports\n// /////\n\nexport default UnitAddMemberPane;\nexport {\n  BasicUnitAddMemberPane,\n  RawUnitAddMemberPane,\n};\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  padding: 20px 0 0 0;\n  h1 {\n    font-size: 20px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst ContenderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #eee;\n  border-radius: 3px;\n  margin: 5px 0;\n  padding: 0 10px;\n`;\n\nconst NoContendersNote = styled.p`\n  color: gray;\n  font-size: 14px;\n`;\n\nexport {\n  Wrapper,\n  ContenderContainer,\n  NoContendersNote,\n};\n","// subcomponents.js\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ContenderContainer,\n} from './styled';\n\nimport Button from '../../../../../components/button';\n\nconst ContenderRow = props => {\n\n  const onClick = () => {\n    props.onSelected(props.contender._id);\n  };\n\n  return (\n    <ContenderContainer>\n      <p>{props.contender.username}</p>\n      <Button\n        onClick={onClick}\n        content={'Add'}\n        color=\"green\"\n      />\n    </ContenderContainer>\n  );\n};\nContenderRow.propTypes = {\n  contender: PropTypes.object,\n  onSelected: PropTypes.func,\n};\n\n\nexport {\n  ContenderRow,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\nimport {RESOURCE_SCOPES} from '../../../../../constants';\n\nimport {\n  DevicesListContainer,\n  DeviceTable,\n  HeadingCell,\n  TableCell,\n} from './styled';\n\nimport {\n  AccessSourceCell,\n} from './sub-components';\n\nimport {organizationUtils} from '../../../../../utils';\n\n// /////\n// BasicUnitDevicesPane - uses only fully processed data\n// /////\n\nconst BasicUnitDevicesPane = props => (\n  <DevicesListContainer>\n\n    {!props.deviceItems.length && (\n      <p>{'No devices available'}</p>\n    )}\n\n    {!!props.deviceItems.length && (\n      <DeviceTable>\n\n        <HeadingCell>{'Device name'}</HeadingCell>\n        <HeadingCell>{'Access rights'}</HeadingCell>\n        <HeadingCell>{'Source (includes subunits)'}</HeadingCell>\n\n        {_.map(props.deviceItems, deviceItem => (\n          <React.Fragment key={deviceItem.deviceId}>\n            <TableCell>{deviceItem.deviceName}</TableCell>\n            <TableCell>{deviceItem.rights.join(', ')}</TableCell>\n            <AccessSourceCell\n              router={props.router}\n              orgId={props.orgId}\n              onUnitSelected={props.onUnitSelected}\n              deviceItem={deviceItem}\n            />\n          </React.Fragment>\n        ))}\n\n      </DeviceTable>\n    )}\n\n  </DevicesListContainer>\n);\n\nBasicUnitDevicesPane.propTypes = {\n  // from top\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from reselect\n  deviceItems: PropTypes.arrayOf(PropTypes.shape({\n    deviceId: PropTypes.string.isRequired,\n    deviceName: PropTypes.string.isRequired,\n    rights: PropTypes.arrayOf(PropTypes.string).isRequired,\n    unitId: PropTypes.string.isRequired,\n    unitName: PropTypes.string,\n  })).isRequired,\n};\n\n// /////\n// Data processing layers & local state\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// filter for unit\nconst unitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const unit = organizationUtils.findUnit(organization, unitId);\n    return unit;\n  },\n);\n\n\nconst subunitsSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    if (!organization) {\n      return [];\n    }\n    const {unit, descendants} = organizationUtils.decomposeUnit(organization, unitId);\n    const subunits = _.compact(_.concat(descendants, unit));\n    return subunits;\n  },\n);\n\n\n// get all the deviceDetails that belong to this unit\nconst unitDeviceDetailsSelector = createSelector(\n  unitSelector,\n  subunitsSelector,\n  props => props.deviceDetails,\n  (unit, subunits, deviceDetails) => {\n    const allowedUnitIds = _.map(subunits, subunit => subunit._id);\n    const filteredDeviceDetails = _.filter(deviceDetails, deviceDetail => {\n      const deviceUnitIds = []; // gets mutated\n      _.each(RESOURCE_SCOPES, scope => {\n        const permissions = deviceDetail[scope] || [];\n        _.each(permissions, permission => {\n          if (permission.resourceGroupType === 'orgUnit') {\n            const addressParts = permission.resourceGroupRef.split('_');\n            const unitId = addressParts[3];\n            deviceUnitIds.push(unitId);\n          }\n        });\n      });\n      const intersectingIds = _.intersection(allowedUnitIds, deviceUnitIds);\n      return !!_.size(intersectingIds);\n    });\n    return filteredDeviceDetails;\n  },\n);\n\n// remove peek-only devices (is this correct? who knows)\nconst filteredDeviceDetailsSelector = createSelector(\n  unitDeviceDetailsSelector,\n  deviceDetails => {\n    const filteredDetails = _.filter(deviceDetails, deviceDetail => {\n      const rights = _.compact(\n        _.map(RESOURCE_SCOPES, scope => _.size(_.get(deviceDetail, scope)) ? scope : null)\n      );\n      const isPeekOnly = rights.length === 1 && rights[0] === RESOURCE_SCOPES.peek;\n      return !isPeekOnly;\n    });\n    return filteredDetails;\n  },\n);\n\n\nconst deviceItemsSelector = createSelector(\n  props => props.devices,\n  filteredDeviceDetailsSelector,\n  subunitsSelector,\n  (devices, deviceDetails, subunits) => {\n\n    const deviceItems = _.map(deviceDetails, deviceDetail => {\n\n      // fill up unitIds (dirty doing this again..)\n      const unitIds = []; // gets mutated\n      _.each(RESOURCE_SCOPES, scope => {\n        const permissions = deviceDetail[scope] || [];\n        _.each(permissions, permission => {\n          if (permission.resourceGroupType === 'orgUnit') {\n            const addressParts = permission.resourceGroupRef.split('_');\n            const unitId = addressParts[3];\n            unitIds.push(unitId);\n          }\n        });\n      });\n\n      // there can really only be one, and it has already been filtered\n      const deviceUnitId = unitIds.pop();\n      const deviceUnit = _.find(subunits, unit => unit._id === deviceUnitId);\n      // and\n      const device = devices[deviceDetail.resourceId];\n      const deviceItem = {\n        deviceId: deviceDetail.resourceId,\n        rights: _.compact(\n          _.map(RESOURCE_SCOPES, scope => _.size(_.get(deviceDetail, scope)) ? scope : null)\n        ),\n        deviceName: _.get(device, 'name', `<${deviceDetail.resourceId}>`),\n        unitId: deviceUnitId,\n        unitName: _.get(deviceUnit, 'name', `missing unit <${deviceUnitId}>`),\n      };\n      return deviceItem;\n    });\n    return deviceItems;\n  },\n);\n\n\nconst reselectors = {\n  deviceItems: deviceItemsSelector,\n};\n\n// ////\n// RawUnitDevicesPane - disconnected from yggio\n// ////\n\nconst RawUnitDevicesPane = compose(\n  withReselect(reselectors),\n)(BasicUnitDevicesPane);\n\nRawUnitDevicesPane.propTypes = {\n  // from top\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  organizations: PropTypes.object,\n  users: PropTypes.object,\n  devices: PropTypes.object,\n  deviceDetails: PropTypes.object,\n};\n\n// /////\n// UnitDevicesPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n    users: yggioState.database.users,\n    devices: yggioState.database.devices,\n    deviceDetails: yggioState.database.deviceDetails,\n  }),\n};\n\nconst UnitDevicesPane = compose(\n  withYggio(yggio),\n)(RawUnitDevicesPane);\n\nUnitDevicesPane.propTypes = {\n  // from top\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\n// /////\n// exports\n// /////\n\nexport default UnitDevicesPane;\nexport {\n  BasicUnitDevicesPane,\n  RawUnitDevicesPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst DevicesListContainer = styled.div`\n  width: 100%;\n  background: 'blue';\n  h1 {\n    font-size: 18px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst DeviceTable = styled.div`\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  column-gap: 3px;\n  font-size: 14px;\n`;\n\nconst TableCell = styled.div`\n  background: #f2f2f2;\n  margin-bottom: 2px;\n  padding: 8px 0 8px 8px;\n`;\n\nconst HeadingCell = styled.div`\n  background: #e2e2e2;\n  margin-bottom: 2px;\n  padding: 8px 0 8px 8px;\n  font-weight: bold;\n`;\n\nexport {\n  DevicesListContainer,\n  DeviceTable,\n  TableCell,\n  HeadingCell,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  TableCell,\n} from './styled';\nimport Button from '../../../../../components/button';\n\n\n// /////\n// BasicOrganizationDevicesPane - uses only fully processed data\n// /////\n\nconst AccessSourceCell = props => {\n  return (\n    <TableCell>\n      <Button\n        content={props.deviceItem.unitName}\n        onClick={() => props.router.push(`/organizations/${props.orgId}/units/${props.deviceItem.unitId}/summary`)}\n        margin={'20px 0 0 0'}\n        style={{\n          color: '#003',\n          textDecoration: 'underline',\n        }}\n      />\n    </TableCell>\n  );\n};\n\nAccessSourceCell.propTypes = {\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n  deviceItem: PropTypes.shape({\n    deviceId: PropTypes.string.isRequired,\n    deviceName: PropTypes.string,\n    unitId: PropTypes.string.isRequired,\n    unitName: PropTypes.string,\n  }),\n};\n\n\nexport {\n  AccessSourceCell,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {ORGANIZATION_ACCESS_TYPES} from '../../../constants';\nimport {organizationUtils} from '../../../../../utils';\nimport {Wrapper} from './styled';\n\nimport RadioButton from '../../../../../components/radio-button';\nimport Button from '../../../../../components/button';\n\nimport {\n  HeaderCell,\n  BodyCell,\n} from './sub-components';\n\n// /////\n// The BasicUnitMembersPane - uses only fully processed data\n// /////\n\nconst BasicUnitMembersPane = props => (\n  <Wrapper>\n    {!_.isEmpty(props.memberItems) &&\n      <table style={{\n        width: '100% - 20px',\n        marginBottom: 30,\n      }}\n      >\n        <thead>\n          <tr>\n            <HeaderCell>{'Member'}</HeaderCell>\n            <HeaderCell>{'Manage'}</HeaderCell>\n            <HeaderCell>{'Device write'}</HeaderCell>\n            <HeaderCell>{'Device read'}</HeaderCell>\n            <HeaderCell>{'Device peek'}</HeaderCell>\n            <HeaderCell>{'Emplace'}</HeaderCell>\n          </tr>\n        </thead>\n\n        <tbody>\n          {_.map(props.memberItems, item => (\n            <tr key={item._id}>\n              <BodyCell>{item.name}</BodyCell>\n\n              <BodyCell>\n                <RadioButton\n                  isSelected={item.hasManagerToken}\n                  onClick={async () => {\n                    const func = item.hasManagerToken\n                      ? props.revokeManagerAccess\n                      : props.assignManagerAccess;\n                    const arg = {\n                      orgId: props.orgId,\n                      unitId: props.unitId,\n                      memberId: item._id,\n                    };\n                    try {\n                      await func(arg);\n                    } catch (err) {\n                      // do nothing?\n                    }\n                  }}\n                />\n              </BodyCell>\n\n              <BodyCell>\n                <RadioButton\n                  isSelected={item.hasDeviceWriteToken}\n                  onClick={async () => {\n                    const func = item.hasDeviceWriteToken\n                      ? props.revokeDeviceAccess\n                      : props.assignDeviceAccess;\n                    const arg = {\n                      orgId: props.orgId,\n                      unitId: props.unitId,\n                      memberId: item._id,\n                      accessType: ORGANIZATION_ACCESS_TYPES.DEVICES_WRITE,\n                    };\n                    try {\n                      await func(arg);\n                      await props.fetchDeviceDetails({orgId: props.orgId});\n                    } catch (err) {\n                      // do nothing?\n                    }\n                  }}\n                />\n              </BodyCell>\n\n              <BodyCell>\n                <RadioButton\n                  isSelected={item.hasDeviceReadToken}\n                  onClick={async () => {\n                    const func = item.hasDeviceReadToken\n                      ? props.revokeDeviceAccess\n                      : props.assignDeviceAccess;\n                    const arg = {\n                      orgId: props.orgId,\n                      unitId: props.unitId,\n                      memberId: item._id,\n                      accessType: ORGANIZATION_ACCESS_TYPES.DEVICES_READ,\n                    };\n                    try {\n                      await func(arg);\n                      await props.fetchDeviceDetails({orgId: props.orgId});\n                    } catch (err) {\n                      // do nothing?\n                    }\n                  }}\n                />\n              </BodyCell>\n\n              <BodyCell>\n                <RadioButton\n                  isSelected={item.hasDeviceAdminToken}\n                  onClick={async () => {\n                    const func = item.hasDeviceAdminToken\n                      ? props.revokeDeviceAccess\n                      : props.assignDeviceAccess;\n                    const arg = {\n                      orgId: props.orgId,\n                      unitId: props.unitId,\n                      memberId: item._id,\n                      accessType: ORGANIZATION_ACCESS_TYPES.DEVICES_PEEK,\n                    };\n                    try {\n                      await func(arg);\n                      await props.fetchDeviceDetails({orgId: props.orgId});\n                    } catch (err) {\n                      // do nothing?\n                    }\n                  }}\n                />\n              </BodyCell>\n\n              <BodyCell>\n                <RadioButton\n                  isSelected={item.hasEmplacementToken}\n                  onClick={async () => {\n                    const arg = {\n                      orgId: props.orgId,\n                      unitId: (item.hasEmplacementToken ? '' : props.unitId),\n                      memberId: item._id,\n                    };\n                    try {\n                      await props.moveMember(arg);\n                      await props.fetchDeviceDetails({orgId: props.orgId});\n                    } catch (err) {\n                      // do nothing?\n                    }\n                  }}\n                />\n              </BodyCell>\n            </tr>\n          ))}\n        </tbody>\n      </table>}\n    <Button\n      label={'Add members to unit'}\n      onClick={() => (\n        props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/createMember`)\n      )}\n    />\n  </Wrapper>\n);\nBasicUnitMembersPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  assignDeviceAccess: PropTypes.func.isRequired,\n  revokeDeviceAccess: PropTypes.func.isRequired,\n  assignManagerAccess: PropTypes.func.isRequired,\n  revokeManagerAccess: PropTypes.func.isRequired,\n  moveMember: PropTypes.func.isRequired,\n  fetchDeviceDetails: PropTypes.func.isRequired,\n  // from reselect\n  unit: PropTypes.object,\n  memberItems: PropTypes.array,\n};\n\n// ////\n// RawUnitMembersPane - data processing layers\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// extract all members\nconst membersSelector = createSelector(\n  organizationSelector,\n  props => props.users,\n  (organization, users) => {\n    const memberIds = _.get(organization, 'members', []);\n    const members = _.map(memberIds, memberId => users[memberId]);\n    return _.compact(members);\n  },\n);\n\n// filter for unit\nconst unitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const unit = organizationUtils.findUnit(organization, unitId);\n    return unit;\n  },\n);\n\nconst unitTokensSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const tokens = _.get(organization, 'accessTokens', []);\n    const unitTokens = _.filter(tokens, {unitId});\n    return unitTokens;\n  },\n);\n\n// filter for unit members\nconst unitMembersSelector = createSelector(\n  membersSelector,\n  unitTokensSelector,\n  (members, tokens) => {\n    const unitMemberIds = _.uniq(_.map(tokens, token => token.memberId));\n    const unitMembers = _.filter(members, member => _.includes(unitMemberIds, member._id));\n    return unitMembers;\n  },\n);\n\nconst memberItemsSelector = createSelector(\n  unitMembersSelector,\n  unitTokensSelector,\n  (unitMembers, tokens) => {\n    const memberItems = _.map(unitMembers, member => {\n      const memberTokens = _.filter(tokens, {memberId: member._id});\n      const managerToken = _.find(\n        memberTokens,\n        {accessType: ORGANIZATION_ACCESS_TYPES.MANAGE_ACCESS}\n      );\n      const devicesReadToken = _.find(\n        memberTokens,\n        {accessType: ORGANIZATION_ACCESS_TYPES.DEVICES_READ}\n      );\n      const devicesWriteToken = _.find(\n        memberTokens,\n        {accessType: ORGANIZATION_ACCESS_TYPES.DEVICES_WRITE}\n      );\n      const devicesAdminToken = _.find(\n        memberTokens,\n        {accessType: ORGANIZATION_ACCESS_TYPES.DEVICES_PEEK}\n      );\n      const emplacementToken = _.find(\n        memberTokens, {accessType: ORGANIZATION_ACCESS_TYPES.EMPLACEMENT}\n      );\n      const item = {\n        _id: member._id,\n        name: member.username,\n        hasManagerToken: !!managerToken,\n        hasDeviceReadToken: !!devicesReadToken,\n        hasDeviceWriteToken: !!devicesWriteToken,\n        hasDeviceAdminToken: !!devicesAdminToken,\n        hasEmplacementToken: !!emplacementToken,\n      };\n      return item;\n    });\n    return memberItems;\n  },\n);\n\n\nconst reselectors = {\n  unit: unitSelector,\n  memberItems: memberItemsSelector,\n};\n\n// and compose the component\n\nconst RawUnitMembersPane = compose(\n  withReselect(reselectors),\n)(BasicUnitMembersPane);\n\nRawUnitMembersPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  organizations: PropTypes.object.isRequired,\n  users: PropTypes.object.isRequired,\n  assignDeviceAccess: PropTypes.func.isRequired,\n  revokeDeviceAccess: PropTypes.func.isRequired,\n  assignManagerAccess: PropTypes.func.isRequired,\n  revokeManagerAccess: PropTypes.func.isRequired,\n  moveMember: PropTypes.func.isRequired,\n  fetchDeviceDetails: PropTypes.func.isRequired,\n};\n\n// /////\n// UnitMembersPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n    users: yggioState.database.users,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    assignDeviceAccess: yggioActions.database.organizations.assignDeviceAccess,\n    revokeDeviceAccess: yggioActions.database.organizations.revokeDeviceAccess,\n    assignManagerAccess: yggioActions.database.organizations.assignManagerAccess,\n    revokeManagerAccess: yggioActions.database.organizations.revokeManagerAccess,\n    moveMember: yggioActions.database.organizations.moveMember,\n    fetchDeviceDetails: yggioActions.database.organizations.fetchDeviceDetails,\n  }),\n};\nconst UnitMembersPane = compose(\n  withYggio(yggio),\n)(RawUnitMembersPane);\n\nUnitMembersPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\n// /////\n// exports\n// /////\n\nexport default UnitMembersPane;\nexport {\n  BasicUnitMembersPane,\n  RawUnitMembersPane,\n};\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  padding: 20px 0 0 0;\n`;\n\nexport {\n  Wrapper,\n};\n","import React from 'react';\n\nconst HeaderCell = props => (\n  <th style={{\n    paddingBottom: 3,\n    paddingLeft: 7,\n    paddingRight: 7,\n    fontSize: '13px',\n  }}\n  >\n    {props.children}\n  </th>\n);\n\nconst BodyCell = props => (\n  <th style={{\n    border: '1px solid #888888',\n    paddingTop: 3,\n    paddingLeft: 7,\n    paddingRight: 7,\n    fontSize: '13px',\n    fontWeight: 'normal',\n  }}\n  >\n    {props.children}\n  </th>\n);\n\nexport {\n  HeaderCell,\n  BodyCell,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {confirmAlert} from 'react-confirm-alert';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {organizationUtils} from '../../../../../utils';\nimport {\n  Wrapper,\n  Subunit,\n  SubunitName,\n  SubunitNumChildren,\n} from './styled';\n\nimport Button from '../../../../../components/button';\n\n// /////\n// The BasicUnitSubunitsPane - uses only fully processed data\n// /////\n\nconst BasicUnitSubunitsPane = props => {\n\n  const deleteUnit = async unitId => {\n    await props.deleteUnit({\n      orgId: props.orgId,\n      unitId,\n    });\n    props.router.push(`/organizations/${props.orgId}/summary`);\n\n  };\n  return (\n    <Wrapper>\n      {_.map(_.get(props.unit, 'children'), subUnit => (\n        <Subunit\n          key={subUnit._id}\n          onClick={() => {\n            props.router.push(`/organizations/${props.orgId}/units/${subUnit._id}/summary`);\n          }}\n        >\n          <SubunitName>\n            {subUnit.name}\n          </SubunitName>\n          <SubunitNumChildren>\n            {`${_.get(subUnit, 'children.length')} children`}\n          </SubunitNumChildren>\n          <Button\n            width={'70px'}\n            height={'30px'}\n            color={'red'}\n            content={'Delete'}\n            onClick={evt => {\n              evt.stopPropagation();\n              const buttons = [\n                {\n                  label: 'Yes',\n                  onClick: () => { deleteUnit(subUnit._id); },\n                },\n                {\n                  label: 'No',\n                  onClick: () => { }\n                }\n              ];\n              confirmAlert({\n                title: 'Remove organization subunit?',\n                message: `Are you sure you want the remove organization subunit: \"${subUnit.name}\"?`,\n                buttons,\n              });\n            }}\n          />\n        </Subunit>\n      ))}\n      <Button\n        content={'Add subunit'}\n        onClick={() => {\n          props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/addSubunit`);\n        }}\n        margin={'20px 0 0 0'}\n      />\n    </Wrapper>\n  );\n};\n\nBasicUnitSubunitsPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from reselect\n  unit: PropTypes.object, // can be null\n};\n\n\n// /////\n// Data processing layers\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// filter for unit\nconst unitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const unit = organizationUtils.findUnit(organization, unitId);\n    return unit;\n  },\n);\n\nconst reselectors = {\n  unit: unitSelector,\n};\n\n// ////\n// RawUnitSubunitsPane - disconnected from yggio\n// ////\n\nconst RawUnitSubunitsPane = compose(\n  withReselect(reselectors),\n)(BasicUnitSubunitsPane);\n\nRawUnitSubunitsPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  organizations: PropTypes.object.isRequired,\n};\n\n// /////\n// UnitSubunitsPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    deleteUnit: yggioActions.database.organizations.deleteUnit,\n  }),\n};\nconst UnitSubunitsPane = compose(\n  withYggio(yggio),\n)(RawUnitSubunitsPane);\n\nUnitSubunitsPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\n\n// /////\n// exports\n// /////\n\nexport default UnitSubunitsPane;\nexport {\n  BasicUnitSubunitsPane,\n  RawUnitSubunitsPane,\n};\n","import styled from 'styled-components';\nimport {COLORS} from '../../../../../constants';\n\nconst Wrapper = styled.div`\n  padding: 20px 0 0 0;\n  h1 {\n    font-size: 20px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst Subunit = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 40px;\n  padding: 5px;\n  border-bottom: 1px solid ${COLORS.greyLight};\n`;\n\nconst SubunitName = styled.p`\n  text-decoration: underline;\n  cursor: pointer;\n`;\n\nconst SubunitNumChildren = styled.p`\n  color: gray;\n`;\n\nexport {\n  Wrapper,\n  Subunit,\n  SubunitName,\n  SubunitNumChildren,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {confirmAlert} from 'react-confirm-alert';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {organizationUtils} from '../../../../../utils';\n\nimport {\n  Wrapper,\n  Heading,\n  UnitName,\n  UnitDescription,\n  NoUnitDescription,\n  ButtonsContainer,\n} from './styled';\nimport Button from '../../../../../components/button';\n\nconst BasicUnitSummaryPane = props => {\n\n  const deleteUnit = async () => {\n    await props.deleteUnit({\n      orgId: props.orgId,\n      unitId: props.unitId,\n    });\n    props.router.push(`/organizations/${props.orgId}/summary`);\n  };\n\n  return (\n    <Wrapper>\n\n      <Heading>\n        {'Name:'}\n      </Heading>\n      <UnitName>\n        {_.get(props.unit, 'name') || '(no name)'}\n      </UnitName>\n      <Heading>\n        {'Description:'}\n      </Heading>\n\n      {!!_.get(props.unit, 'description') && (\n        <UnitDescription>\n          {props.unit.description}\n        </UnitDescription>\n      )}\n      {!_.get(props.unit, 'description') && (\n        <NoUnitDescription>\n          {'No description'}\n        </NoUnitDescription>\n      )}\n\n      <ButtonsContainer>\n        <Button\n          content={'Edit'}\n          onClick={() => {\n            props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/edit`);\n          }}\n        />\n        {!props.isRootUnit && (\n          <Button\n            onClick={() => {\n              const buttons = [\n                {\n                  label: 'Yes',\n                  onClick: () => { deleteUnit(); }\n                },\n                {\n                  label: 'No',\n                  onClick: () => { },\n                }\n              ];\n              confirmAlert({\n                title: 'Remove organization?',\n                message: `Are you sure you want the remove organization subunit\n                  : \"${_.get(props.unit, 'name', 'Organization not found')}\"?`,\n                buttons,\n              });\n            }}\n            content={'Delete'}\n            color=\"red\"\n            margin=\"0 0 0 10px\"\n          />\n        )}\n      </ButtonsContainer>\n\n    </Wrapper>\n  );\n};\n\nBasicUnitSummaryPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from reselect\n  unit: PropTypes.object, // can be null\n  isRootUnit: PropTypes.bool,\n};\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// filter for unit\nconst unitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const unit = organizationUtils.findUnit(organization, unitId);\n    return unit;\n  },\n);\n\nconst isRootUnitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const isRootUnit = unitId && unitId === _.get(organization, 'rootUnit._id');\n    return isRootUnit;\n  },\n);\n\nconst reselectors = {\n  unit: unitSelector,\n  isRootUnit: isRootUnitSelector,\n};\n\nconst RawUnitSummaryPane = compose(\n  withReselect(reselectors),\n)(BasicUnitSummaryPane);\n\nRawUnitSummaryPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  // from yggio\n  organizations: PropTypes.object,\n};\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    deleteUnit: yggioActions.database.organizations.deleteUnit,\n  }),\n};\nconst UnitSummaryPane = compose(\n  withYggio(yggio),\n)(RawUnitSummaryPane);\n\nUnitSummaryPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n};\n\nexport default UnitSummaryPane;\nexport {\n  BasicUnitSummaryPane,\n  RawUnitSummaryPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  padding-top: 10px;\n  h1 {\n    font-size: 20px;\n    margin: 0 0 10px 0;\n  }\n  h2 {\n    font-size: 16px;\n    margin: 0px;\n  }\n`;\n\nconst Heading = styled.p`\n  font-size: 13px;\n  margin: 0 0 5px 0;\n  font-weight: 600;\n`;\n\nconst UnitName = styled.p`\n  font-size: 16px;\n  margin: 0 0 20px 0;\n`;\n\nconst UnitDescription = styled.p`\n  font-size: 16px;\n  margin: 0 0 20px 0;\n`;\n\nconst NoUnitDescription = styled.p`\n  font-size: 14px;\n  margin: 0 0 20px 0;\n  color: gray;\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 15px;\n`;\n\nexport {\n  Wrapper,\n  Heading,\n  UnitName,\n  UnitDescription,\n  NoUnitDescription,\n  ButtonsContainer,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\nimport {\n  RESOURCE_SCOPES,\n} from '../../../../../constants';\n\nimport TabBar from '../../../../../components/tab-bar';\nimport {organizationUtils} from '../../../../../utils';\n\n\n// /////\n// deconstruction & constants\n// /////\n\n\nconst UNIT_TAB_ITEMS = {\n  summary: 'summary',\n  members: 'members',\n  subunits: 'subunits',\n  devices: 'devices',\n};\n\nconst TAB_PROP_TYPES = {\n  ...UNIT_TAB_ITEMS,\n  edit: 'edit',\n  addSubunit: 'addSubunit',\n  createMember: 'createMember',\n};\n\nconst TAB_ITEMS_DATA = [\n  {\n    label: 'Summary',\n    tabId: UNIT_TAB_ITEMS.summary,\n  },\n  {\n    label: 'Members',\n    tabId: UNIT_TAB_ITEMS.members,\n  },\n  {\n    label: 'Subunits',\n    tabId: UNIT_TAB_ITEMS.subunits,\n  },\n  {\n    label: 'Devices',\n    tabId: UNIT_TAB_ITEMS.devices,\n  },\n];\n\n// /////\n// The BasicUnitTabBar - uses only fully processed data\n// /////\n\nconst BasicUnitTabBar = props => {\n  return (\n    <TabBar\n      tabItems={props.tabItems}\n      setActiveTab={tabId => props.router.push(`/organizations/${props.orgId}/units/${props.unitId}/${tabId}`)}\n      activeTab={props.tabId}\n    />\n  );\n};\nBasicUnitTabBar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  tabId: PropTypes.oneOf(_.values(TAB_PROP_TYPES)).isRequired,\n  // from reselect\n  tabItems: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    tabId: PropTypes.string.isRequired,\n    meta: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  })).isRequired,\n};\n\n// ////\n// RawUnitTabBar - data processing layers\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// extract all members\nconst membersSelector = createSelector(\n  organizationSelector,\n  props => props.users,\n  (organization, users) => {\n    const memberIds = _.get(organization, 'members', []);\n    const members = _.map(memberIds, memberId => users[memberId]);\n    return _.compact(members);\n  },\n);\n\n// filter for unit\nconst unitSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const unit = organizationUtils.findUnit(organization, unitId);\n    return unit;\n  },\n);\n\nconst subunitsSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    if (!organization) {\n      return [];\n    }\n    const {unit, descendants} = organizationUtils.decomposeUnit(organization, unitId);\n    const subunits = _.compact(_.concat(descendants, unit));\n    return subunits;\n  },\n);\n\n// all tokens specific to this unit\nconst unitTokensSelector = createSelector(\n  organizationSelector,\n  props => props.unitId,\n  (organization, unitId) => {\n    const tokens = _.get(organization, 'accessTokens', []);\n    const unitTokens = _.filter(tokens, {unitId});\n    return unitTokens;\n  },\n);\n\n// get all unique unit members\nconst unitMembersSelector = createSelector(\n  membersSelector,\n  unitTokensSelector,\n  (members, tokens) => {\n    const unitMemberIds = _.uniq(_.map(tokens, token => token.memberId));\n    const unitMembers = _.filter(members, member => _.includes(unitMemberIds, member._id));\n    return unitMembers;\n  },\n);\n\n// get all the deviceDetails that belong to this unit\nconst unitDeviceDetailsSelector = createSelector(\n  unitSelector,\n  subunitsSelector,\n  props => props.deviceDetails,\n  (unit, subunits, deviceDetails) => {\n    const allowedUnitIds = _.map(subunits, subunit => subunit._id);\n    const filteredDeviceDetails = _.filter(deviceDetails, deviceDetail => {\n      const deviceUnitIds = []; // gets mutated\n      _.each(RESOURCE_SCOPES, scope => {\n        const permissions = deviceDetail[scope] || [];\n        _.each(permissions, permission => {\n          if (permission.resourceGroupType === 'orgUnit') {\n            const addressParts = permission.resourceGroupRef.split('_');\n            const unitId = addressParts[3];\n            deviceUnitIds.push(unitId);\n          }\n        });\n      });\n      const intersectingIds = _.intersection(allowedUnitIds, deviceUnitIds);\n      return !!_.size(intersectingIds);\n    });\n    return filteredDeviceDetails;\n  },\n);\n\n// remove peek-only devices (is this correct? who knows)\nconst filteredDeviceDetailsSelector = createSelector(\n  unitDeviceDetailsSelector,\n  deviceDetails => {\n    const filteredDetails = _.filter(deviceDetails, deviceDetail => {\n      const rights = _.compact(_.map(RESOURCE_SCOPES, scope => (\n        _.size(_.get(deviceDetail, scope)) ? scope : null\n      )));\n      const isPeekOnly = rights.length === 1 && rights[0] === RESOURCE_SCOPES.peek;\n      return !isPeekOnly;\n    });\n    return filteredDetails;\n  },\n);\n\n\nconst subUnitsSelector = createSelector(\n  unitSelector,\n  unit => _.get(unit, 'children', []),\n);\n\n// generate the tabItems\nconst tabItemsSelector = createSelector(\n  subUnitsSelector,\n  unitMembersSelector,\n  filteredDeviceDetailsSelector,\n  (subUnits, unitMembers, unitDeviceDetails) => {\n    const metaData = {\n      [UNIT_TAB_ITEMS.summary]: undefined,\n      [UNIT_TAB_ITEMS.members]: `${unitMembers.length}`,\n      [UNIT_TAB_ITEMS.subunits]: `${subUnits.length}`,\n      [UNIT_TAB_ITEMS.devices]: `${unitDeviceDetails.length}`,\n    };\n    const combined = _.map(TAB_ITEMS_DATA, data => ({\n      ...data,\n      meta: metaData[data.tabId],\n    }));\n    return combined;\n  },\n);\n\nconst reselectors = {\n  tabItems: tabItemsSelector,\n};\n\n// and compose the component\n\nconst RawUnitTabBar = compose(\n  withReselect(reselectors),\n)(BasicUnitTabBar);\n\nRawUnitTabBar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  tabId: PropTypes.oneOf(_.values(TAB_PROP_TYPES)).isRequired,\n  // from yggio\n  organizations: PropTypes.object.isRequired,\n};\n\n// /////\n// UnitTabBar - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    users: yggioState.database.users,\n    organizations: yggioState.database.organizations,\n    deviceDetails: yggioState.database.deviceDetails,\n  }),\n};\n\nconst UnitTabBar = compose(\n  withYggio(yggio),\n)(RawUnitTabBar);\n\nUnitTabBar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  tabId: PropTypes.oneOf(_.values(TAB_PROP_TYPES)).isRequired,\n};\n\n// /////\n// exports\n// /////\n\nexport default UnitTabBar;\nexport {\n  BasicUnitTabBar,\n  RawUnitTabBar,\n};\n","import React from 'react';\nimport {FlexColWrapper, FlexMaxWidthWrapper} from '../../../global/styled';\nimport {CenteredPage} from '../../../global/components';\nimport UnitSummaryPane from './containers/unit-summary-pane';\nimport UnitDevicesPane from './containers/unit-devices-pane';\nimport UnitSubunitsPane from './containers/unit-subunits-pane';\nimport UnitMembersPane from './containers/unit-members-pane';\nimport UnitTabBar from './containers/unit-tab-bar';\nimport OrganizationSidebar from '../organization-view/containers/organization-sidebar';\nimport CreateUnitPane from './containers/create-unit-pane';\nimport UnitAddMemberPane from './containers/unit-add-member-pane';\nimport EditUnitPane from './containers/edit-unit-pane';\nimport ContainerBox from '../../../components/container-box';\n\nconst UNIT_TAB_ITEMS = {\n  summary: 'summary',\n  members: 'members',\n  subunits: 'subunits',\n  devices: 'devices',\n  addSubunit: 'addSubunit',\n  createMember: 'createMember',\n  edit: 'edit',\n};\n\nconst NOT_FOUND = 'NOT_FOUND';\n\nconst OrganizationUnit = props => {\n  return (\n    <FlexMaxWidthWrapper>\n      <OrganizationSidebar\n        router={props.router}\n        orgId={props.orgId}\n        tabId={props.tabId}\n        unitId={props.unitId}\n      />\n      <CenteredPage>\n        <ContainerBox>\n          <FlexColWrapper>\n            <UnitTabBar\n              router={props.router}\n              orgId={props.orgId}\n              tabId={props.tabId}\n              unitId={props.unitId}\n            />\n            {{\n              [UNIT_TAB_ITEMS.summary]: (\n                <UnitSummaryPane\n                  router={props.router}\n                  orgId={props.orgId}\n                  unitId={props.unitId}\n                />\n              ),\n              [UNIT_TAB_ITEMS.members]: (\n                <UnitMembersPane\n                  router={props.router}\n                  orgId={props.orgId}\n                  unitId={props.unitId}\n                />\n              ),\n              [UNIT_TAB_ITEMS.subunits]: (\n                <UnitSubunitsPane\n                  router={props.router}\n                  orgId={props.orgId}\n                  unitId={props.unitId}\n                />\n              ),\n              [UNIT_TAB_ITEMS.devices]: (\n                <UnitDevicesPane\n                  router={props.router}\n                  orgId={props.orgId}\n                  unitId={props.unitId}\n                />\n              ),\n              [UNIT_TAB_ITEMS.addSubunit]: (\n                <CreateUnitPane\n                  router={props.router}\n                  orgId={props.orgId}\n                  unitId={props.unitId}\n                />\n              ),\n              [UNIT_TAB_ITEMS.createMember]: (\n                <UnitAddMemberPane\n                  router={props.router}\n                  orgId={props.orgId}\n                  unitId={props.unitId}\n                />\n              ),\n              [UNIT_TAB_ITEMS.edit]: (\n                <EditUnitPane\n                  router={props.router}\n                  orgId={props.orgId}\n                  unitId={props.unitId}\n                />\n              ),\n              [NOT_FOUND]: (\n                <h1>{'No unit TAB match found'}</h1>\n              ),\n            }[UNIT_TAB_ITEMS[props.tabId] || NOT_FOUND]}\n          </FlexColWrapper>\n\n        </ContainerBox>\n      </CenteredPage>\n    </FlexMaxWidthWrapper>\n  );\n};\n\nexport default OrganizationUnit;\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {withState} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {\n  generateForm,\n  getFormValues,\n  getFormShape,\n  getValidationErrorMessage,\n  isFormValid,\n  inputValidators,\n  generateHandleValueChange,\n  generateShowInputValidation,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nimport Button from '../../../../../components/button';\nimport TextField from '../../../../../components/text-field';\n\nimport {\n  CreateOrganizationWrapper,\n  ButtonsContainer,\n} from './styled';\n\n\n// /////\n// The BasicCreateMemberPane - uses only fully processed data\n// /////\n\nconst BasicCreateMemberPane = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n\n  const createMember = async () => {\n    if (isFormValid(props.formInputs)) {\n      const rawTemplate = getFormValues(props.formInputs);\n      // exlude email if length 0 string\n      const template = (rawTemplate.email ? rawTemplate : _.omit(rawTemplate, 'email'));\n      try {\n        await props.createMember({\n          orgId: props.orgId,\n          template,\n        });\n        props.router.push(`/organizations/${props.orgId}/summary`);\n      } catch (err) {\n        // do nothing\n      }\n    }\n  };\n\n  return (\n    <CreateOrganizationWrapper>\n      <h1>Create new member</h1>\n      <TextField\n        label=\"Username (*)\"\n        name=\"username\"\n        onChange={onChange}\n        onBlur={onBlur}\n        value={props.formInputs.username.value}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.username)}\n        margin=\"0 0 10px 0\"\n        autoFocus\n      />\n      <TextField\n        label=\"Email\"\n        name=\"email\"\n        onChange={onChange}\n        onBlur={onBlur}\n        value={props.formInputs.email.value}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.email)}\n        margin=\"0 0 10px 0\"\n      />\n      <TextField\n        label=\"Password (*)\"\n        name=\"password\"\n        onChange={onChange}\n        onBlur={onBlur}\n        value={props.formInputs.password.value}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.password)}\n      />\n      <ButtonsContainer>\n        <Button\n          onClick={createMember}\n          content={'Create'}\n          color=\"green\"\n          margin=\"0 10px 0 0\"\n        />\n        <Button\n          content={'Cancel'}\n          onClick={() => props.router.push(`/organizations/${props.orgId}/summary`)}\n        />\n      </ButtonsContainer>\n    </CreateOrganizationWrapper>\n  );\n};\n\n\nBasicCreateMemberPane.propTypes = {\n  // from top\n  orgId: PropTypes.string.isRequired,\n  // from state\n  ...getFormShape({\n    username: PropTypes.string,\n    email: PropTypes.string,\n    password: PropTypes.string,\n  }),\n  // from yggio\n  createMember: PropTypes.func.isRequired,\n};\n\n// ////\n// RawCreateMemberPane - full data=processing\n// ////\n\nconst formConfig = {\n  username: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a username'),\n      ],\n    },\n  },\n  email: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.validEmailAddress,\n      ],\n    },\n  },\n  password: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a password'),\n      ],\n    },\n  }\n};\n\nconst formState = generateForm(formConfig);\n\nconst RawCreateMemberPane = compose(\n  withState(formState),\n)(BasicCreateMemberPane);\n\nRawCreateMemberPane.propTypes = {\n  // from top\n  orgId: PropTypes.string.isRequired,\n  // from yggio\n  createMember: PropTypes.func.isRequired,\n};\n\n// /////\n// CreateMemberPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioActionsToProps: yggioActions => ({\n    createMember: yggioActions.database.organizations.createMember,\n  }),\n};\n\nconst CreateMemberPane = compose(\n  withYggio(yggio),\n)(RawCreateMemberPane);\n\nCreateMemberPane.propTypes = {\n  // from top\n  orgId: PropTypes.string.isRequired,\n};\n\n\n// /////\n// exports\n// /////\n\nexport default CreateMemberPane;\nexport {\n  RawCreateMemberPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst CreateOrganizationWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px 0 0 0;\n  h1 {\n    font-size: 18px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nexport {\n  CreateOrganizationWrapper,\n  ButtonsContainer,\n};\n","import {compose} from 'lodash/fp';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {withState} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {\n  generateForm,\n  getFormValues,\n  inputValidators,\n  getValidationErrorMessage,\n  getFormShape,\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nimport ContainerBox from '../../../../../components/container-box';\nimport TextField from '../../../../../components/text-field';\nimport Button from '../../../../../components/button';\n\nimport {\n  Heading,\n  ButtonsContainer,\n} from './styled';\n\n\n// /////\n// The BasicCreateMemberPane - uses only fully processed data\n// /////\n\nconst BasicCreateOrganizationPane = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n\n  const createOrganization = async () => {\n    if (isFormValid(props.formInputs)) {\n      const template = getFormValues(props.formInputs);\n      try {\n        await props.createOrganization({\n          template,\n        });\n        props.router.push('/organizations');\n      } catch (err) {\n        // do nothing?\n        // console.log('createOrganization err', {err});\n      }\n    }\n  };\n\n  return (\n    <ContainerBox margin=\"20px\">\n      <Heading>Create organization</Heading>\n      <TextField\n        label=\"Name\"\n        name=\"name\"\n        onChange={onChange}\n        onBlur={onBlur}\n        value={props.formInputs.name.value}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.name)}\n        margin=\"0 0 10px 0\"\n        autoFocus\n      />\n      <TextField\n        label=\"Description\"\n        name=\"description\"\n        onChange={onChange}\n        value={props.formInputs.description.value}\n        isOptional\n      />\n      <ButtonsContainer>\n        <Button\n          onClick={createOrganization}\n          content={'Create'}\n          color=\"green\"\n          margin=\"0 10px 0 0\"\n        />\n        <Button\n          content={'Cancel'}\n          onClick={() => props.router.push('/organizations')}\n        />\n      </ButtonsContainer>\n    </ContainerBox>\n  );\n};\n\nBasicCreateOrganizationPane.propTypes = {\n  router: PropTypes.object.isRequired,\n  // from form state\n  ...getFormShape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n  // from yggio\n  createOrganization: PropTypes.func.isRequired,\n};\n\n\n// ////\n// RawCreateOrganizationPane - full data processing\n// ////\n\nconst formConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n      ],\n    },\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\n\nconst formState = generateForm(formConfig);\n\nconst RawCreateOrganizationPane = compose(\n  withState(formState),\n)(BasicCreateOrganizationPane);\n\nRawCreateOrganizationPane.propTypes = {\n  router: PropTypes.object.isRequired,\n  // from yggio\n  createOrganization: PropTypes.func.isRequired,\n};\n\n\n// /////\n// CreateOrganizationPane - fully yggio connected\n// /////\n\n// and yggio\nconst yggio = {\n  mapYggioActionsToProps: yggioActions => ({\n    createOrganization: yggioActions.database.organizations.createOrganization,\n  }),\n};\n\nconst CreateOrganizationPane = compose(\n  withYggio(yggio),\n)(RawCreateOrganizationPane);\n\nCreateOrganizationPane.propTypes = {\n  router: PropTypes.object.isRequired,\n};\n\n// /////\n// exports\n// /////\n\nexport default CreateOrganizationPane;\nexport {\n  RawCreateOrganizationPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst Heading = styled.h1`\n  font-size: 20px;\n  margin: 3px 0 20px 0;\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  margin: 20px 0 0 0;\n`;\n\nexport {\n  Heading,\n  ButtonsContainer,\n};\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {createSelector} from 'reselect';\nimport {\n  withState,\n  withEffect,\n  withReselect,\n} from '../../../../../hocs';\nimport {\n  withYggio,\n} from '../../../../../yggio-context';\n\nimport Button from '../../../../../components/button';\nimport TextField from '../../../../../components/text-field';\n\nimport {\n  generateForm,\n  getFormValues,\n  inputValidators,\n  getValidationErrorMessage,\n  getFormShape,\n  isFormValid,\n  generateHandleValueChange,\n  generateShowInputValidation,\n  VALIDATION_VISIBILITY_TYPES,\n} from '../../../../../utils/form-wizard';\n\nimport {\n  EditOrganizationWrapper,\n  ButtonsContainer,\n} from './styled';\n\n\n// /////\n// The BasicEditOrganizationPane - uses only fully processed data\n// /////\n\nconst BasicEditOrganizationPane = props => {\n  const onChange = generateHandleValueChange(props);\n  const onBlur = generateShowInputValidation(props);\n\n  const saveEdits = async () => {\n    if (isFormValid(props.formInputs)) {\n      const template = getFormValues(props.formInputs);\n      try {\n        await props.saveEdits({\n          orgId: props.orgId,\n          template,\n        });\n        props.router.push(`/organizations/${props.orgId}/summary`);\n      } catch (err) {\n        // do nothing?\n      }\n    }\n  };\n\n  return (\n    <EditOrganizationWrapper>\n      <h1>Edit organization details</h1>\n      <TextField\n        label=\"Name\"\n        name=\"name\"\n        onChange={onChange}\n        onBlur={onBlur}\n        value={props.formInputs.name.value}\n        validationErrorMessage={getValidationErrorMessage(props.formInputs.name)}\n        margin=\"0 0 10px 0\"\n        autoFocus\n      />\n      <TextField\n        label=\"Description\"\n        name=\"description\"\n        onChange={onChange}\n        value={props.formInputs.description.value}\n        isOptional\n      />\n      <ButtonsContainer>\n        <Button\n          onClick={saveEdits}\n          color=\"green\"\n          content={'Save'}\n          margin=\"0 10px 0 0\"\n        />\n        <Button\n          content={'Cancel'}\n          onClick={() => props.router.push(`/organizations/${props.orgId}/summary`)}\n        />\n      </ButtonsContainer>\n    </EditOrganizationWrapper>\n  );\n};\n\nBasicEditOrganizationPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from yggio\n  saveEdits: PropTypes.func.isRequired,\n  // from form state\n  ...getFormShape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n};\n\n\n// ////\n// RawEditOrganizationPane - full data-processing\n// ////\n\nconst formConfig = {\n  name: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n      validators: [\n        inputValidators.inputRequired('Please enter a name'),\n      ],\n    },\n  },\n  description: {\n    defaultValue: '',\n    validation: {\n      visibilityType: VALIDATION_VISIBILITY_TYPES.optIn,\n    },\n  },\n};\n\nconst formState = generateForm(formConfig);\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\nconst initialFormSelector = createSelector(\n  organizationSelector,\n  organization => {\n    const initialForm = {\n      name: _.get(organization, 'name', ''),\n      description: _.get(organization, 'description', ''),\n    };\n    return initialForm;\n  },\n);\n\nconst reselectors = {\n  initialForm: initialFormSelector,\n};\n\nconst initializeFormEffect = props => {\n  if (!props.isPopulated) {\n    props.populateInputValues(props.initialForm);\n  }\n};\n\n// this one can be more easily mocked in stories\nconst RawEditOrganizationPane = compose(\n  withState(formState),\n  withReselect(reselectors),\n  withEffect(initializeFormEffect, {init: []}),\n)(BasicEditOrganizationPane);\n\nRawEditOrganizationPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from yggio\n  saveEdits: PropTypes.func.isRequired,\n  organizations: PropTypes.object.isRequired, // for reselect\n};\n\n\n// /////\n// EditOrganizationPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    saveEdits: yggioActions.database.organizations.updateOrganization,\n  }),\n};\n\n\nconst EditOrganizationPane = compose(\n  withYggio(yggio),\n)(RawEditOrganizationPane);\n\nEditOrganizationPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n};\n\n\n// /////\n// exports\n// /////\n\nexport default EditOrganizationPane;\nexport {\n  RawEditOrganizationPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst EditOrganizationWrapper = styled.div`\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  margin: 20px;\n  padding: 10px 0 0 0;\n  h1 {\n    font-size: 18px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nexport {\n  EditOrganizationWrapper,\n  ButtonsContainer,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {RESOURCE_SCOPES} from '../../../../../constants';\nimport {organizationUtils} from '../../../../../utils';\n\nimport {\n  DevicesListContainer,\n  DeviceTable,\n  HeaderCell,\n  TableCell,\n} from './styled';\n\nimport {\n  AccessSourceCell,\n} from './sub-components';\n\n// /////\n// BasicOrganizationDevicesPane - uses only fully processed data\n// /////\n\nconst BasicOrganizationDevicesPane = props => (\n  <DevicesListContainer>\n\n    {(props.deviceItems.length === 0) && (\n      <p>{'No devices available'}</p>\n    )}\n\n    {(props.deviceItems.length !== 0) && (\n      <DeviceTable>\n        <HeaderCell>{'Device name'}</HeaderCell>\n        <HeaderCell>{'Access rights'}</HeaderCell>\n        <HeaderCell>{'Access source'}</HeaderCell>\n\n        {_.map(props.deviceItems, deviceItem => (\n          <React.Fragment key={deviceItem.deviceId}>\n            <TableCell>{deviceItem.deviceName}</TableCell>\n            <TableCell>{deviceItem.rights.join(', ')}</TableCell>\n            <AccessSourceCell\n              router={props.router}\n              orgId={props.orgId}\n              onUnitSelected={props.onUnitSelected}\n              sourceInfo={deviceItem.sourceInfo}\n            />\n          </React.Fragment>\n        ))}\n\n      </DeviceTable>\n    )}\n\n  </DevicesListContainer>\n);\n\n\nBasicOrganizationDevicesPane.propTypes = {\n  // from top\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from reselect\n  deviceItems: PropTypes.arrayOf(PropTypes.shape({\n    deviceId: PropTypes.string.isRequired,\n    rights: PropTypes.arrayOf(PropTypes.string),\n    deviceName: PropTypes.string.isRequired,\n    sourceInfo: PropTypes.any,\n  })),\n};\n\n\n// ////\n// RawOrganizationDevicesPane - data processing\n// ////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// removes peek-only device details\nconst filteredDeviceDetailsSelector = createSelector(\n  props => props.deviceDetails,\n  deviceDetails => {\n    const filteredDetails = _.filter(deviceDetails, deviceDetail => {\n      const rights = _.compact(_.map(RESOURCE_SCOPES, scope => (\n        _.size(_.get(deviceDetail, scope)) ? scope : null\n      )));\n      const isPeekOnly = rights.length === 1 && rights[0] === RESOURCE_SCOPES.peek;\n      return !isPeekOnly;\n    });\n    return filteredDetails;\n  },\n);\n\n// utility\nconst extractAccessSourceInfo = (deviceDetail, organization) => {\n  const sourceInfo = {};\n  _.each(RESOURCE_SCOPES, scope => {\n    const permissions = deviceDetail[scope] || [];\n    _.each(permissions, permission => {\n      if (permission.resourceGroupType === 'orgUnit') {\n        const addressParts = permission.resourceGroupRef.split('_');\n        const unitId = addressParts[3];\n        const unit = organizationUtils.findUnit(organization, unitId) || {};\n        sourceInfo[permission.resourceGroupType] = {\n          unitId,\n          unitName: unit.name || `unitId <${unitId}> not found`,\n        };\n      } else {\n        sourceInfo[permission.resourceGroupType] = true;\n      }\n    });\n  });\n  return sourceInfo;\n};\n\nconst deviceItemsSelector = createSelector(\n  props => props.devices,\n  filteredDeviceDetailsSelector,\n  organizationSelector,\n  (devices, deviceDetails, organization) => {\n    const deviceItems = _.map(deviceDetails, deviceDetail => {\n      const device = devices[deviceDetail.resourceId];\n      const deviceItem = {\n        deviceId: deviceDetail.resourceId,\n        rights: _.compact(_.map(RESOURCE_SCOPES, scope => (\n          _.size(_.get(deviceDetail, scope)) ? scope : null\n        ))),\n        deviceName: _.get(device, 'name', `<${deviceDetail.resourceId}>`),\n        sourceInfo: extractAccessSourceInfo(deviceDetail, organization),\n      };\n      return deviceItem;\n    });\n    return deviceItems;\n  },\n);\n\nconst reselectors = {\n  deviceItems: deviceItemsSelector,\n};\n\nconst RawOrganizationDevicesPane = compose(\n  withReselect(reselectors),\n)(BasicOrganizationDevicesPane);\n\nRawOrganizationDevicesPane.propTypes = {\n  // from top\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from yggio\n  organizations: PropTypes.object.isRequired,\n  users: PropTypes.object.isRequired,\n  devices: PropTypes.object.isRequired,\n  deviceDetails: PropTypes.object.isRequired,\n};\n\n\n// /////\n// OrganizationDevicesPane - fully yggio connected\n// /////\n\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n    users: yggioState.database.users,\n    devices: yggioState.database.devices,\n    deviceDetails: yggioState.database.deviceDetails,\n  }),\n};\n\nconst OrganizationDevicesPane = compose(\n  withYggio(yggio),\n)(RawOrganizationDevicesPane);\n\nOrganizationDevicesPane.propTypes = {\n  // from top\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n};\n\n\n// /////\n// exports\n// /////\n\nexport default OrganizationDevicesPane;\nexport {\n  BasicOrganizationDevicesPane,\n  RawOrganizationDevicesPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst DevicesListContainer = styled.div`\n  width: 100%;\n  h1 {\n    font-size: 18px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst DeviceTable = styled.div`\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  column-gap: 3px;\n  font-size: 14px;\n`;\n\nconst TableCell = styled.div`\n  background: #f2f2f2;\n  margin-bottom: 2px;\n  padding: 8px 0 8px 8px;\n`;\n\nconst HeaderCell = styled.div`\n  background: #e2e2e2;\n  margin-bottom: 2px;\n  padding: 8px 0 8px 8px;\n  font-weight: bold;\n`;\n\nexport {\n  DevicesListContainer,\n  DeviceTable,\n  TableCell,\n  HeaderCell,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  TableCell,\n} from './styled';\nimport Button from '../../../../../components/button';\n\n// /////\n// BasicOrganizationDevicesPane - uses only fully processed data\n// /////\n\nconst AccessSourceCell = props => {\n  if (props.sourceInfo.owner) {\n    return (\n      <TableCell>{'Owner Access'}</TableCell>\n    );\n  }\n  if (props.sourceInfo.orgUnit) {\n    return (\n      <TableCell>\n        <Button\n          content={props.sourceInfo.orgUnit.unitName}\n          onClick={() => props.router.push(`/organizations/${props.orgId}/units/${props.sourceInfo.orgUnit.unitId}/summary`)}\n          margin={'20px 0 0 0'}\n          style={{\n            color: '#003',\n            textDecoration: 'underline',\n          }}\n        />\n      </TableCell>\n    );\n  }\n\n  if (props.sourceInfo.user) {\n    return (\n      <TableCell>{'User Access'}</TableCell>\n    );\n  }\n  if (props.sourceInfo.userGroup) {\n    return (\n      <TableCell>{`UserGroup Access`}</TableCell>\n    );\n  }\n  return (\n    <TableCell>{`<<Unknown Access Type>>`}</TableCell>\n  );\n};\n\nAccessSourceCell.propTypes = {\n  router: PropTypes.any.isRequired,\n  orgId: PropTypes.string.isRequired,\n  sourceInfo: PropTypes.shape({\n    owner: PropTypes.bool,\n    orgUnit: PropTypes.shape({\n      unitName: PropTypes.string,\n      unitId: PropTypes.string,\n    }),\n    user: PropTypes.bool,\n    userGroup: PropTypes.bool,\n  }),\n};\n\n\nexport {\n  AccessSourceCell,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {\n  MembersListContainer,\n} from './styled';\n\nimport {MemberItem} from './sub-components';\n\nimport {ORGANIZATION_ACCESS_TYPES} from '../../../constants';\nimport Button from '../../../../../components/button';\n\n// /////\n// BasicOrganizationMembersPane - uses only fully processed data\n// /////\n\nconst BasicOrganizationMembersPane = props => (\n  <MembersListContainer>\n\n    <h1>{`All members in the organization`}</h1>\n\n    {_.map(props.members, (member, index) => (\n      <MemberItem\n        key={member._id}\n        member={member}\n        index={index}\n      />\n    ))}\n\n    {props.isAnyUnitManager && (\n      <Button\n        content={'Create new member'}\n        color={'green'}\n        onClick={() => props.router.push(`/organizations/${props.orgId}/createMember`)}\n      />\n    )}\n\n  </MembersListContainer>\n);\n\nBasicOrganizationMembersPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from reselect (i.e. processed yggio data)\n  members: PropTypes.array.isRequired,\n  isAnyUnitManager: PropTypes.bool.isRequired,\n};\n\n// /////\n// Data processing layers & local state\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n// extract all members\nconst membersSelector = createSelector(\n  organizationSelector,\n  props => props.users,\n  (organization, users) => {\n    const memberIds = _.get(organization, 'members', []);\n    const members = _(memberIds)\n      .map(memberId => users[memberId])\n      .compact()\n      .value();\n    return members;\n  },\n);\n\nconst isAnyUnitManagerSelector = createSelector(\n  props => props.user,\n  organizationSelector,\n  (user, organization) => {\n    const userId = _.get(user, '_id');\n    const ownerId = _.get(organization, 'ownerId');\n    const tokens = _.get(organization, 'accessTokens');\n    const unitManagerTokens = _.find(tokens, {\n      memberId: userId,\n      accessType: ORGANIZATION_ACCESS_TYPES.MANAGE_ACCESS,\n    });\n    const isOwner = userId === ownerId;\n    return _.size(unitManagerTokens) > 0 || isOwner;\n  },\n);\n\nconst reselectors = {\n  members: membersSelector,\n  isAnyUnitManager: isAnyUnitManagerSelector,\n};\n\n// ////\n// RawUnitMembersPane - disconnected from yggio\n// ////\n\nconst RawOrganizationMembersPane = compose(\n  withReselect(reselectors),\n)(BasicOrganizationMembersPane);\n\nRawOrganizationMembersPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from yggio\n  organizations: PropTypes.object.isRequired,\n  users: PropTypes.object.isRequired,\n  user: PropTypes.object, // can be null\n};\n\n// /////\n// OrganizationMembersPane - fully yggio connected\n// /////\n\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n    users: yggioState.database.users,\n    user: yggioState.database.auth.user\n  }),\n};\n\nconst OrganizationMembersPane = compose(\n  withYggio(yggio),\n)(RawOrganizationMembersPane);\n\nOrganizationMembersPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n};\n\n// /////\n// exports\n// /////\n\nexport default OrganizationMembersPane;\nexport {\n  BasicOrganizationMembersPane,\n  RawOrganizationMembersPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst MembersListContainer = styled.div`\n  width: 100%;\n  background: 'blue';\n  h1 {\n    font-size: 18px;\n    margin: 0 0 20px 0;\n  }\n`;\n\nconst MemberItemWrapper = styled.div`\n  width: 100%;\n`;\n\nexport {\n  MembersListContainer,\n  MemberItemWrapper,\n};\n","// containers.js\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  MemberItemWrapper,\n} from './styled';\n\nconst MemberItem = props => (\n  <MemberItemWrapper>\n    <p>{`${props.index + 1}.  ${props.member.username}`}</p>\n  </MemberItemWrapper>\n);\nMemberItem.propTypes = {\n  member: PropTypes.object.isRequired,\n};\n\nexport {\n  MemberItem,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {memoizedInputsChecker} from '../../../../../utils';\nimport {\n  withReselect,\n  withEffect, withPersistentState,\n} from '../../../../../hocs';\nimport {\n  withYggio,\n} from '../../../../../yggio-context';\n\nimport {BasicTreeView, state as toggleStateRedux} from '../../../../../components/tree-view';\nimport Button from '../../../../../components/button';\n\nimport {\n  Sidebar,\n  TopSection,\n  TopSectionHeadingContainer,\n  TopSectionButtonsContainer,\n  TreeViewNote,\n} from './styled';\n\n// /////\n// BasicOrganizationSidebar - uses only fully processed data\n// /////\n\nconst BasicOrganizationSidebar = props => {\n  return (\n    <Sidebar>\n\n      <TopSection>\n        <TopSectionHeadingContainer>\n          <p>{'Selected organization:'}</p>\n          <h1>{_.get(props.organization, 'name', 'Organization not found')}</h1>\n        </TopSectionHeadingContainer>\n        <TopSectionButtonsContainer>\n          <Button\n            content={'Manage organization'}\n            onClick={() => props.router.push(`/organizations/${props.orgId}/summary`)}\n            ghosted\n            width=\"160px\"\n          />\n          <Button\n            content={'Switch organization'}\n            onClick={() => props.router.push('/organizations')}\n            ghosted\n            width=\"160px\"\n          />\n        </TopSectionButtonsContainer>\n      </TopSection>\n\n      <TreeViewNote>{'Select a subunit to manage:'}</TreeViewNote>\n      <BasicTreeView\n        toggleState={props.toggleState}\n        setToggleState={props.setToggleState}\n        treeData={_.get(props.organization, 'rootUnit', {})}\n        selectedNodeId={props.unitId}\n        onNodeSelected={unitId => {\n          props.router.push(`/organizations/${props.orgId}/units/${unitId}/summary`);\n        }}\n      />\n\n    </Sidebar>\n  );\n};\n\n\nBasicOrganizationSidebar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string, // can be null\n  // from reselect\n  organization: PropTypes.object, // can be null\n  // from persistentState\n  toggleState: PropTypes.any, // should be more specific....\n  setToggleState: PropTypes.func.isRequired,\n};\n\n// ////\n// RawOrganizationSidebar - data processing layers\n// /////\n\n// all the reselectors needed for display & effects\n\nconst organizationSelector = createSelector(\n  props => props.orgId,\n  props => props.organizations,\n  (orgId, organizations) => {\n    return _.get(organizations, orgId) || null;\n  },\n);\n\nconst deviceSeekerItemsSelector = createSelector(\n  props => props.devices,\n  props => props.deviceDetails,\n  (devices, deviceDetails) => {\n    const deviceSeekerItems = _.map(deviceDetails, deviceDetail => {\n      const device = devices[deviceDetail.resourceId];\n      if (!device) {\n        const deviceId = deviceDetail.resourceId;\n        return deviceId;\n      }\n      return null;\n    });\n    return _.compact(deviceSeekerItems);\n  },\n);\n\n// the reselected data that gets passed on down the line\n\nconst reselectors = {\n  organization: organizationSelector,\n};\n\n// the effects that initialize data (with memoization checks)\n\nconst isSameOrg = memoizedInputsChecker();\nconst refreshOrgEffect = async props => {\n  const needsUpdate = props.orgId && !isSameOrg(props.orgId);\n  if (needsUpdate) {\n    try {\n      await props.getOrganization({orgId: props.orgId});\n    } catch (err) {\n      // do nothing?\n    }\n  }\n};\n\nconst isSameOrg2 = memoizedInputsChecker();\nconst refreshMembersEffect = async props => {\n  const needsUpdate = props.orgId && !isSameOrg2(props.orgId);\n  if (needsUpdate) {\n    try {\n      await props.fetchMembers({orgId: props.orgId});\n    } catch (err) {\n      // do nothing?\n    }\n  }\n};\n\nconst isSameDeviceDetails = memoizedInputsChecker();\nconst refreshDeviceDetailsEffect = async props => {\n  const needsUpdate = props.orgId && !isSameDeviceDetails(props.orgId);\n  if (needsUpdate) {\n    try {\n      await props.fetchDeviceDetails({orgId: props.orgId});\n    } catch (err) {\n      // do nothing?\n    }\n  }\n};\n\nconst isSameDevices = memoizedInputsChecker(_.isEqual);\nconst refreshDevicesEffect = async props => {\n  const deviceSeekerItems = deviceSeekerItemsSelector(props);\n  const needsUpdate = _.size(deviceSeekerItems) && !isSameDevices(deviceSeekerItems);\n  if (needsUpdate) {\n    try {\n      await props.fetchDevices();\n      // await props.seekDevices({deviceItems: deviceSeekerItems});\n    } catch (err) {\n      // do nothing?\n    }\n  }\n};\n\nconst RawOrganizationSidebar = compose(\n  withPersistentState(toggleStateRedux, 'org-toggle-state'),\n  withReselect(reselectors),\n  withEffect(refreshOrgEffect),\n  withEffect(refreshMembersEffect),\n  withEffect(refreshDeviceDetailsEffect),\n  withEffect(refreshDevicesEffect),\n)(BasicOrganizationSidebar);\n\nRawOrganizationSidebar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string, // can be null\n  // from yggio\n  organizations: PropTypes.object.isRequired,\n  deviceDetails: PropTypes.object.isRequired,\n  devices: PropTypes.object.isRequired,\n  getOrganization: PropTypes.func.isRequired,\n  fetchMembers: PropTypes.func.isRequired,\n  fetchDeviceDetails: PropTypes.func.isRequired,\n  fetchDevices: PropTypes.func.isRequired,\n  // seekDevices: PropTypes.func.isRequired,\n};\n\n\n// /////\n// OrganizationSidebar - fully yggio connected\n// /////\n\n// the yggio data hookup\nconst yggio = {\n  mapYggioStateToProps: yggioState => {\n    // console.log('OrganizationSidebar', {yggioState});\n    return {\n      organizations: yggioState.database.organizations,\n      deviceDetails: yggioState.database.deviceDetails,\n      devices: yggioState.database.devices,\n    };\n  },\n\n  mapYggioActionsToProps: yggioActions => ({\n    // from orgs\n    getOrganization: yggioActions.database.organizations.getOrganization,\n    fetchMembers: yggioActions.database.organizations.fetchMembers,\n    fetchDeviceDetails: yggioActions.database.organizations.fetchDeviceDetails,\n    // from devices\n    // seekDevices: yggioActions.database.devices.seekDevices,\n    fetchDevices: yggioActions.database.devices.fetchDevices,\n  }),\n};\n\nconst OrganizationSidebar = compose(\n  withYggio(yggio),\n)(RawOrganizationSidebar);\n\nOrganizationSidebar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  unitId: PropTypes.string, // can be null\n};\n\n// /////\n// exports\n// /////\n\n\nexport default OrganizationSidebar;\nexport {\n  RawOrganizationSidebar,\n};\n","// styled.js\n\nimport styled from 'styled-components';\nimport {FlexColWrapper} from '../../../../../global/styled';\nimport {COLORS} from '../../../../../constants';\n\nconst Sidebar = styled.div`\n  width: 330px;\n  height: 100vh;\n  background: #fff;\n  padding: 0 20px;\n  border-right: 1px solid #ececec;\n`;\n\nconst TopSection = styled.div`\n  width: 100%;\n  padding: 30px 0 15px 0;\n  border-bottom: 1px solid #bbb;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 30px;\n`;\n\nconst TopSectionHeadingContainer = styled.div`\n  margin-bottom: 15px;\n  h1{\n    margin: 0;\n    font-size: 20px;\n  }\n  p {\n    margin: 0 0 3px 0;\n    font-size: 15px;\n  }\n`;\n\nconst TopSectionButtonsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst InputsWrapper = styled(FlexColWrapper)`\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  padding: 20px;\n  width: 60%;\n  background: ${COLORS.greenRacing};\n`;\n\nconst TreeViewNote = styled.p`\n  margin: 0;\n  font-size: 14px;\n`;\n\nexport {\n  Sidebar,\n  TopSection,\n  TopSectionHeadingContainer,\n  TopSectionButtonsContainer,\n  InputsWrapper,\n  TreeViewNote,\n};\n","const fetchOrganization = props => {\n  props.getOrganization({orgId: props.orgId});\n};\n\nexport {\n  fetchOrganization,\n};\n","import _ from 'lodash';\nimport {compose} from 'lodash/fp';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {createSelector} from 'reselect';\nimport {FlexSpaceBetweenWrapper} from '../../../../../global/styled';\nimport {\n  withEffect,\n  withReselect,\n} from '../../../../../hocs';\nimport {\n  withYggio,\n} from '../../../../../yggio-context';\n\n\nimport {\n  OrganizationSummaryWrapper,\n  Heading,\n  OrganizationName,\n  OrganizationDescription,\n} from './styled';\n\nimport {fetchOrganization} from './effects';\nimport Button from '../../../../../components/button';\n\n\n// /////\n// The BasicOrganizationSummaryPane - uses only fully processed data\n// /////\n\nconst BasicOrganizationSummaryPane = props => {\n  return (\n    <OrganizationSummaryWrapper>\n      <Heading>Name:</Heading>\n      <OrganizationName>{_.get(props.organization, 'res.name', 'Organization not found')}</OrganizationName>\n      <Heading>Description:</Heading>\n      <OrganizationDescription>{_.get(props.organization, 'res.description', 'This is a description')}</OrganizationDescription>\n      <FlexSpaceBetweenWrapper>\n        {props.canEditMeta && (\n          <Button\n            content={'Edit'}\n            onClick={() => props.router.push(`/organizations/${props.orgId}/edit`)}\n          />\n        )}\n        {/* TODO: Enable when API has org removal capability\n          <Button\n            color={'red'}\n            content={'Delete'}\n            onClick={() => {\n              const buttons = [\n                {\n                  label: 'Yes',\n                  onClick: () => {},\n                },\n                {\n                  label: 'No',\n                  onClick: () => {}\n                }\n              ];\n              confirmAlert({\n                title: 'Remove organization?',\n                message: `Are you sure you want the remove organization\n                  : \"${_.get(props.organization, 'res.name', 'Organization not found')}\"?\n                `,\n                buttons,\n              });\n            }}\n          />\n         */}\n      </FlexSpaceBetweenWrapper>\n    </OrganizationSummaryWrapper>\n  );\n};\n\n\nBasicOrganizationSummaryPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from reselect\n  organization: PropTypes.object,\n  canEditMeta: PropTypes.bool.isRequired,\n};\n\n\n// ////\n// RawOrganizationTabBar - data processing layer\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organization,\n  organization => {\n    // const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\nconst canEditMetaSelector = createSelector(\n  props => props.user,\n  organizationSelector,\n  (user, organization) => {\n    const userId = _.get(user, '_id');\n    const ownerId = _.get(organization, 'res.ownerId');\n    const isOwner = userId === ownerId;\n    return isOwner;\n  },\n);\n\nconst reselectors = {\n  organization: organizationSelector,\n  canEditMeta: canEditMetaSelector,\n};\n\n// and compose the component\n\nconst RawOrganizationSummaryPane = compose(\n  withEffect(fetchOrganization, {init: []}),\n  withReselect(reselectors),\n)(BasicOrganizationSummaryPane);\n\nRawOrganizationSummaryPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  // from yggio\n  organization: PropTypes.object.isRequired,\n  user: PropTypes.object, // can be null\n};\n\n\n// /////\n// OrganizationSummaryPane - fully yggio connected\n// /////\n\n// and yggio\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organization: yggioState.apiState.organizations.getOrganization,\n    user: yggioState.database.auth.user\n  }),\n  mapYggioActionsToProps: yggioActions => ({\n    getOrganization: yggioActions.apiState.organizations.getOrganization,\n  }),\n};\n\nconst OrganizationSummaryPane = compose(\n  withYggio(yggio),\n)(RawOrganizationSummaryPane);\n\nOrganizationSummaryPane.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n};\n\n\n// /////\n// exports\n// /////\n\nexport default OrganizationSummaryPane;\nexport {\n  BasicOrganizationSummaryPane,\n  RawOrganizationSummaryPane,\n};\n","// styled.js\n\nimport styled from 'styled-components';\n\nconst OrganizationSummaryWrapper = styled.div`\n  padding-top: 10px;\n  h1 {\n    font-size: 20px;\n    margin: 0 0 10px 0;\n  }\n  h2 {\n    font-size: 16px;\n    margin: 0px;\n  }\n`;\n\nconst Heading = styled.p`\n  font-size: 14px;\n  margin: 0 0 5px 0;\n  font-weight: 600;\n`;\n\nconst OrganizationName = styled.p`\n  font-size: 18px;\n  margin: 0 0 20px 0;\n`;\n\nconst OrganizationDescription = styled.p`\n  font-size: 18px;\n  margin: 0 0 20px 0;\n`;\n\nexport {\n  OrganizationSummaryWrapper,\n  Heading,\n  OrganizationName,\n  OrganizationDescription,\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {compose} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {withReselect} from '../../../../../hocs';\nimport {withYggio} from '../../../../../yggio-context';\n\nimport {\n  RESOURCE_SCOPES,\n} from '../../../../../constants';\n\nimport TabBar from '../../../../../components/tab-bar';\n\n// /////\n// deconstruction &  constants\n// /////\nconst ORG_TAB_ITEMS = {\n  summary: 'summary',\n  members: 'members',\n  devices: 'devices',\n};\nconst TAB_ITEMS_DATA = [\n  {\n    label: 'Summary',\n    tabId: ORG_TAB_ITEMS.summary,\n  },\n  {\n    label: 'Members',\n    tabId: ORG_TAB_ITEMS.members,\n  },\n  {\n    label: 'Devices',\n    tabId: ORG_TAB_ITEMS.devices,\n  },\n];\n\n// /////\n// The BasicOrganizationTabBar - uses only fully processed data\n// /////\n\nconst BasicOrganizationTabBar = props => {\n  return (\n    <TabBar\n      tabItems={props.tabItems}\n      setActiveTab={tabId => props.router.push(`/organizations/${props.orgId}/${tabId}`)}\n      activeTab={props.tabId}\n    />\n  );\n};\nBasicOrganizationTabBar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  tabId: PropTypes.oneOf(_.values({...ORG_TAB_ITEMS, createMember: 'createMember'})),\n  // from reselect\n  tabItems: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    tabId: PropTypes.string.isRequired,\n    meta: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  })),\n};\n\n\n// /////\n// Data processing layers\n// /////\n\n// extract organization\nconst organizationSelector = createSelector(\n  props => props.organizations,\n  props => props.orgId,\n  (organizations, orgId) => {\n    const organization = _.get(organizations, orgId);\n    return organization;\n  },\n);\n\n\nconst deviceDetailsSelector = createSelector(\n  props => props.deviceDetails,\n  deviceDetails => {\n    const filteredDetails = _.filter(deviceDetails, deviceDetail => {\n      const rights = _.compact(_.map(RESOURCE_SCOPES, scope => (_.size(_.get(deviceDetail, `access.${scope}`)) ? scope : null)));\n      const isPeekOnly = rights.length === 1 && rights[0] === RESOURCE_SCOPES.peek;\n      return !isPeekOnly;\n    });\n    return filteredDetails;\n  },\n);\n\n\n// custom fit\nconst tabItemsSelector = createSelector(\n  organizationSelector,\n  deviceDetailsSelector,\n  (organization, deviceDetails) => {\n    const numMembers = _.size(_.get(organization, 'members'));\n    const numDevices = _.size(deviceDetails);\n    const metaData = {\n      [ORG_TAB_ITEMS.summary]: undefined,\n      [ORG_TAB_ITEMS.members]: `${numMembers}`,\n      [ORG_TAB_ITEMS.devices]: `${numDevices}`,\n    };\n    const combined = _.map(TAB_ITEMS_DATA, data => ({\n      ...data,\n      meta: metaData[data.tabId],\n    }));\n    return combined;\n  },\n);\n\nconst primarySelectors = {\n  tabItems: tabItemsSelector,\n};\n\n// ////\n// RawOrganizationTabBar - disconnected from yggio\n// ////\n\nconst RawOrganizationTabBar = compose(\n  withReselect(primarySelectors),\n)(BasicOrganizationTabBar);\n\nRawOrganizationTabBar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  tabId: PropTypes.oneOf(_.values({...ORG_TAB_ITEMS, createMember: 'createMember'})),\n  // from yggio\n  organizations: PropTypes.object,\n};\n\n\n// /////\n// The OrganizationTabBar that is exposed\n// /////\n\n// the yggio data hookup\nconst yggio = {\n  mapYggioStateToProps: yggioState => ({\n    organizations: yggioState.database.organizations,\n    deviceDetails: yggioState.database.deviceDetails,\n  }),\n};\n\n\nconst OrganizationTabBar = compose(\n  withYggio(yggio),\n)(RawOrganizationTabBar);\n\nOrganizationTabBar.propTypes = {\n  // from top\n  router: PropTypes.object.isRequired,\n  orgId: PropTypes.string.isRequired,\n  tabId: PropTypes.oneOf(_.values({...ORG_TAB_ITEMS, createMember: 'createMember'})),\n};\n\n// /////\n// exports\n// /////\n\nexport default OrganizationTabBar;\nexport {\n  BasicOrganizationTabBar,\n  RawOrganizationTabBar,\n};\n","import OrganizationTabBar from './containers/organization-tab-bar';\nimport OrganizationSidebar from './containers/organization-sidebar';\nimport {FlexColWrapper, FlexMaxWidthWrapper} from '../../../global/styled';\nimport {CenteredPage} from '../../../global/components';\nimport OrganizationSummaryPane from './containers/organization-summary-pane';\nimport OrganizationMembersPane from './containers/organization-members-pane';\nimport OrganizationDevicesPane from './containers/organization-devices-pane';\nimport CreateMemberPane from './containers/create-member-pane';\nimport EditOrganizationPane from './containers/edit-organization-pane';\nimport ContainerBox from '../../../components/container-box';\n\nconst ORG_TAB_ITEMS = {\n  summary: 'summary',\n  members: 'members',\n  devices: 'devices',\n  createMember: 'createMember',\n  edit: 'edit',\n};\nconst NOT_FOUND = 'NOT_FOUND';\n\nconst OrganizationView = props => {\n  return (\n    <FlexMaxWidthWrapper>\n      <OrganizationSidebar\n        router={props.router}\n        orgId={props.orgId}\n        tabId={props.tabId}\n      />\n      <CenteredPage>\n        <ContainerBox>\n          <FlexColWrapper>\n            <OrganizationTabBar\n              router={props.router}\n              orgId={props.orgId}\n              tabId={props.tabId}\n            />\n            {{\n              [ORG_TAB_ITEMS.summary]: (\n                <OrganizationSummaryPane\n                  orgId={props.orgId}\n                  router={props.router}\n                />\n              ),\n              [ORG_TAB_ITEMS.members]: (\n                <OrganizationMembersPane\n                  orgId={props.orgId}\n                  router={props.router}\n                />\n              ),\n              [ORG_TAB_ITEMS.devices]: (\n                <OrganizationDevicesPane\n                  orgId={props.orgId}\n                  router={props.router}\n                />\n              ),\n              [ORG_TAB_ITEMS.createMember]: (\n                <CreateMemberPane\n                  orgId={props.orgId}\n                  router={props.router}\n                />\n              ),\n              [ORG_TAB_ITEMS.edit]: (\n                <EditOrganizationPane\n                  orgId={props.orgId}\n                  router={props.router}\n                />\n              ),\n              [NOT_FOUND]: (\n                <h1>{'No organization TAB match found'}</h1>\n              ),\n            }[ORG_TAB_ITEMS[props.tabId] || NOT_FOUND]}\n          </FlexColWrapper>\n        </ContainerBox>\n      </CenteredPage>\n    </FlexMaxWidthWrapper>\n  );\n};\n\nexport default OrganizationView;\n","import React from 'react';\nimport _ from 'lodash';\nimport {NextRouter} from 'next/router';\n\nimport {organizationsApi, userApi} from '../../../api';\nimport {selectUserOrganization} from './selectors';\nimport {\n  OrganizationsListPaneContainer,\n  ButtonContainer,\n  Heading,\n  NoOrganizationsNote,\n  OrganizationListHeader,\n  CreateContainer,\n  LoadingView,\n} from './styled';\nimport ContainerBox from '../../../components/container-box';\nimport Spinner from '../../../components/spinner';\nimport Button from '../../../components/button';\nimport {CenteredPage} from '../../../global/components';\n\ninterface OrgListPaneProps {\n  router: NextRouter;\n}\n\nconst OrganizationsListPane = (props: OrgListPaneProps) => {\n  const userQuery = userApi.useTokenUser();\n\n  const organizationsQuery = organizationsApi.useOrganizationsQuery();\n\n  const userOrgs = selectUserOrganization({\n    user: userQuery?.data,\n    organizations: organizationsQuery?.data,\n  });\n\n  return (\n    <OrganizationsListPaneContainer>\n      <CenteredPage>\n        <ContainerBox>\n          <Heading>\n            Organizations\n          </Heading>\n\n          {organizationsQuery?.isLoading && (\n            <LoadingView>\n              <Spinner size={27} />\n            </LoadingView>\n          )}\n\n          {_.isEmpty(userOrgs) &&\n            <NoOrganizationsNote>No organizations available</NoOrganizationsNote>}\n\n          {!organizationsQuery?.isLoading && !_.isEmpty(organizationsQuery?.data) &&\n            <>\n              <OrganizationListHeader>Select organization:</OrganizationListHeader>\n              {_.map(userOrgs, organization => (\n                <ButtonContainer key={organization._id}>\n                  <Button\n                    content={organization.name}\n                    onClick={async () => props.router.push(`/organizations/${organization._id}/summary`)}\n                  />\n                </ButtonContainer>\n              ))}\n            </>}\n\n          {!_.get(userQuery?.data, 'organization') && (\n            <CreateContainer>\n              <p>{'You may also:'}</p>\n              <Button\n                content={'Create new organization'}\n                color={'green'}\n                onClick={async () => props.router.push('/organizations/new')}\n              />\n            </CreateContainer>\n          )}\n\n          {!userQuery?.data && (\n            <p>{'User not found'}</p>\n          )}\n        </ContainerBox>\n      </CenteredPage>\n    </OrganizationsListPaneContainer>\n  );\n};\n\nexport default OrganizationsListPane;\n","import _ from 'lodash';\nimport {createSelector} from 'reselect';\nimport {Organizations, User} from '../../../types';\n\nconst selectUserOrganization = createSelector(\n  (props: {user: User | undefined}) => props.user,\n  (props: {organizations: Organizations | undefined}) => props.organizations,\n  (user, organizations) => {\n    const userOrgId = _.get(user, 'organization') as string;\n    if (!userOrgId) {\n      // sort or something?\n      return _.map(organizations, organization => organization);\n    }\n    if (userOrgId) {\n      const organization = _.find(organizations, org => org._id === userOrgId);\n      return organization ? [organization] : [];\n    }\n  },\n);\n\nexport {\n  selectUserOrganization,\n};\n","import styled from 'styled-components';\n\nconst OrganizationsListPaneContainer = styled.div`\n  margin: 20px 0 0 20px;\n`;\n\nconst ButtonContainer = styled.div`\n  margin-bottom: 12px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n`;\n/* flex-direction: column;\njustify-content: center; */\n\nconst CreateContainer = styled.div`\n  margin-top: 40px;\n  p {\n    margin: 0 0 10px 0;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin: 0;\n  font-size: 26px;\n`;\n\nconst NoOrganizationsNote = styled.p`\n  color: grey;\n  font-size: 14px;\n`;\n\nconst OrganizationListHeader = styled.p`\n\n`;\n\nconst LoadingView = styled.div`\n  width: 100%;\n  height: 120px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 15px;\n`;\n\nexport {\n  OrganizationsListPaneContainer,\n  ButtonContainer,\n  Heading,\n  NoOrganizationsNote,\n  OrganizationListHeader,\n  CreateContainer,\n  LoadingView,\n};\n","import '@storybook/react';","/* (ignored) */"],"mappingssourceRoot":""}