{"version":3,"file":"7.iframe.bundle.js","sources":["webpack:///./src/assets/icons/device-icon.png","webpack:///./src/assets/icons/location-icon.png","webpack:///./src/components/map/sub-components/markers.js"],"sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/src/assets/icons/device-icon.png\";","module.exports = __webpack_public_path__ + \"static/media/src/assets/icons/location-icon.png\";","import _ from 'lodash';\nimport React, {createRef, useEffect, forwardRef} from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport {map, includes} from 'lodash/fp';\nimport {divIcon} from 'leaflet';\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport dynamic from 'next/dynamic';\nimport {\n  BaseTooltip,\n  MapItem,\n  MapItemFooter,\n  MapItemHeader,\n  MarkerClusterIcon,\n  MarkerIcon,\n} from '../styled';\nimport Button from '../../button';\nimport {COLORS} from '../../../constants';\nimport {FlexColCenterMaxWidthWrapper} from '../../../global/styled';\nimport {getConfig} from '../../../yggio-config';\nimport deviceIcon from '../../../assets/icons/device-icon.png';\nimport locationIcon from '../../../assets/icons/location-icon.png';\n\nconst Marker = dynamic(\n  () => import('react-leaflet').then(mod => mod.Marker),\n  {ssr: false},\n);\nconst Popup = dynamic(\n  () => import('react-leaflet').then(mod => mod.Popup),\n  {ssr: false},\n);\n\nconst Markers = (\n  {\n    items,\n    ...props\n  }\n) => {\n  const createClusterIcon = cluster => {\n    const markers = cluster.getAllChildMarkers();\n    const statusColors = map(marker => marker.options.icon.options.color, markers);\n    const markerShapes = map(marker => marker.options.icon.options.markerShape, markers);\n\n    const shape = () => {\n      if (includes('round', markerShapes)) {\n        return 'round';\n      }\n\n      return 'square';\n    };\n    const color = () => {\n      if (includes(COLORS.red, statusColors)) {\n        return COLORS.red;\n      }\n\n      if (includes(COLORS.yellow, statusColors)) {\n        return COLORS.yellow;\n      }\n\n      return COLORS.greenLight;\n    };\n\n    const html = ReactDOMServer.renderToString(\n      <MarkerClusterIcon color={color()} shape={shape()}>\n        <b>{cluster.getChildCount()}</b>\n      </MarkerClusterIcon>\n    );\n\n    return divIcon({\n      html,\n      iconSize: null\n    });\n  };\n\n  const markerItems = map(item => {\n    const coords = item.latlng ? item.latlng : [item.lat, item.lng];\n\n    if (_.isEmpty(_.compact(coords))) {\n      return null;\n    }\n\n    return (\n      <ItemMarkerWrapper\n        item={item}\n        {...props}\n        coords={coords}\n        key={item._id}\n      />\n    );\n  }, items);\n  const markers = _.compact(markerItems);\n\n  return (\n    <MarkerClusterGroup\n      maxClusterRadius={50}\n      iconCreateFunction={cluster => createClusterIcon(cluster)}\n    >\n      {markers}\n    </MarkerClusterGroup>\n  );\n};\nconst BASE_ICONS = {\n  locations: locationIcon,\n  devices: deviceIcon\n};\nconst ItemMarkerWrapper = ({movingMode, markerShape, ...rest}) => {\n  const ref = createRef();\n  const createIcon = (iconUrl, color) => {\n    const iconSize = 30;\n    const halfSize = iconSize / 2;\n\n    const html = ReactDOMServer.renderToString(\n      <MarkerIcon color={color} markerShape={markerShape}>\n        <img\n          src={iconUrl || BASE_ICONS[rest.URI]}\n          alt=\"Map marker\"\n        />\n      </MarkerIcon>\n    );\n\n    return divIcon({\n      color,\n      markerShape,\n      iconSize: [iconSize, iconSize],\n      popupAnchor: [5, -(halfSize + 2)],\n      html\n    });\n  };\n\n  useEffect(() => {\n    if (ref.current.leafletElement) {\n      const marker = ref.current.leafletElement;\n      if (marker.dragging) {\n        if (movingMode) {\n          marker.dragging.enable();\n        } else {\n          marker.dragging.disable();\n        }\n      }\n    }\n  });\n  return (\n    <ItemMarker\n      ref={ref}\n      createIcon={createIcon}\n      {...rest}\n    />\n  );\n};\n\nconst ItemMarker = forwardRef((\n  {\n    icon,\n    coords,\n    status,\n    createIcon,\n    saveMarker,\n    URI,\n    router,\n    item,\n    ...rest\n  }, ref\n) => {\n  const color = status ? status.color : COLORS.greenLight;\n  return (\n    <Marker\n      ref={ref}\n      icon={createIcon(icon, color)}\n      position={coords}\n      onDragEnd={({target: {_latlng: {lat, lng}}}) => {\n        const data = {...item, lat, lng};\n        if (URI === 'locations') {\n          saveMarker(data);\n        }\n        if (URI === 'devices') {\n          saveMarker({deviceId: data._id, updates: data});\n        }\n      }}\n    >\n      <MarkerPopup\n        layerId={_.get(item, 'defaultLayer._id')}\n        router={router}\n        name={item.name}\n        _id={item._id}\n        status={status}\n        URI={URI}\n        alone={item.alone}\n        latlng={item.latlng || [item.lat, item.lng]}\n        setViewport={rest.setViewport}\n      />\n    </Marker>\n  );\n});\n\nconst MarkerPopup = (\n  {\n    name,\n    latlng,\n    _id,\n    status,\n    URI,\n    router,\n    alone,\n    setViewport\n  }\n) => (\n  <>\n    <Popup autoPan={false}>\n      <MapItem>\n        {\n          name &&\n            <MapItemHeader>\n              {_.truncate(name, {length: '20'})}\n            </MapItemHeader>\n        }\n        <MapItemFooter>\n          <FlexColCenterMaxWidthWrapper>\n\n            {\n              !alone &&\n                <Button\n                  color={'green'}\n                  margin={'10px'}\n                  onClick={() => {\n                    if (URI === 'devices') {\n                      return router.push(`/${URI}/${_id}/generalInfo`);\n                    }\n\n                    if (URI === 'locations') {\n                      window.open(`http://${getConfig().domain}/${'location-manager'}/${name}`, '_blank');\n                    // TODO: enable when LM2 is ready:\n                    // return router.push(`/${URI}/${_id}/${layerId}`);\n                    }\n                  }}\n                  content={'View'}\n                />\n            }\n            <Button\n              color={'green'}\n              onClick={() => {\n                setViewport({\n                  center: latlng,\n                  zoom: 14\n                });\n              }}\n              content={'Focus'}\n            />\n          </FlexColCenterMaxWidthWrapper>\n        </MapItemFooter>\n      </MapItem>\n    </Popup>\n    {status &&\n      <BaseTooltip\n        direction='right'\n        offset={[20, 0]}\n        permanent\n      >\n        {_.map(status.text, (text, index) => <span key={index}> {text} </span>)}\n      </BaseTooltip>}\n  </>\n);\n\nexport default Markers;\n"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}